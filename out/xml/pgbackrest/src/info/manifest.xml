<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/info/manifest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Backup Manifest Handler
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/cipherBlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/regExp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/manifest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Constants
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>BACKUP_MANIFEST_FILE_STR</name></expr></argument>,                             <argument><expr><name>BACKUP_MANIFEST_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>MANIFEST_TARGET_PGDATA_STR</name></expr></argument>,                           <argument><expr><name>MANIFEST_TARGET_PGDATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>MANIFEST_TARGET_PGTBLSPC_STR</name></expr></argument>,                         <argument><expr><name>MANIFEST_TARGET_PGTBLSPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<struct>struct <name>Manifest</name>
<block>{
    <decl_stmt><decl><type><name>ManifestPub</name></type> <name>pub</name></decl>;</decl_stmt>                                                <comment type="line">// Publicly accessible variables</comment>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>ownerList</name></decl>;</decl_stmt>                                          <comment type="line">// List of users/groups</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>fileUserDefault</name></decl>;</decl_stmt>                                  <comment type="line">// Default file user name</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>fileGroupDefault</name></decl>;</decl_stmt>                                 <comment type="line">// Default file group name</comment>
    <decl_stmt><decl><type><name>mode_t</name></type> <name>fileModeDefault</name></decl>;</decl_stmt>                                         <comment type="line">// Default file mode</comment>
}</block>;</struct>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Internal functions to add types to their lists
***********************************************************************************************************************************/</comment>
<comment type="line">// Helper to add owner to the owner list if it is not there already and return the pointer.  This saves a lot of space.</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>String</name> <modifier>*</modifier></type>
<name>manifestOwnerCache</name><parameter_list>(<parameter><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>owner</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>ownerList</name></name></expr></argument>, <argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>manifestDbAdd</name><parameter_list>(<parameter><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ManifestDb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST_DB</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>db</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext(this-&gt;pub.dbList)</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ManifestDb</name></type> <name>dbAdd</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>id</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr>,
            <expr><operator>.</operator><name>lastSystemId</name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>lastSystemId</name></name></expr>,
            <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dbList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dbAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Base time used as a delta to reduce the size of packed timestamps. This will be set on the first call to manifestFilePack().</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>manifestPackBaseTime</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// Flags used to reduce the size of packed data. They should be ordered from most to least likely and can be reordered at will.</comment>
<typedef>typedef <type><enum>enum
<block>{
    <decl><name>manifestFilePackFlagReference</name></decl>,
    <decl><name>manifestFilePackFlagBundle</name></decl>,
    <decl><name>manifestFilePackFlagCopy</name></decl>,
    <decl><name>manifestFilePackFlagDelta</name></decl>,
    <decl><name>manifestFilePackFlagResume</name></decl>,
    <decl><name>manifestFilePackFlagChecksumPage</name></decl>,
    <decl><name>manifestFilePackFlagChecksumPageError</name></decl>,
    <decl><name>manifestFilePackFlagChecksumPageErrorList</name></decl>,
    <decl><name>manifestFilePackFlagMode</name></decl>,
    <decl><name>manifestFilePackFlagUser</name></decl>,
    <decl><name>manifestFilePackFlagUserNull</name></decl>,
    <decl><name>manifestFilePackFlagGroup</name></decl>,
    <decl><name>manifestFilePackFlagGroupNull</name></decl>,
}</block></enum></type> <name>ManifestFilePackFlag</name>;</typedef>

<comment type="line">// Pack file into a compact format to save memory</comment>
<function><type><specifier>static</specifier> <name>ManifestFilePack</name> <modifier>*</modifier></type>
<name>manifestFilePack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier><specifier>const</specifier></type> <name>manifest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ManifestFile</name> <modifier>*</modifier><specifier>const</specifier></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST_FILE</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>manifest</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bufferPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Flags</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>copy</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flag</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagCopy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>delta</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flag</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagDelta</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>resume</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flag</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagResume</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>checksumPage</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flag</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagChecksumPage</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>checksumPageError</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flag</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagChecksumPageError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>checksumPageErrorList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flag</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagChecksumPageErrorList</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>reference</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flag</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagReference</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>bundleId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flag</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagBundle</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name><name>manifest</name><operator>-&gt;</operator><name>fileModeDefault</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flag</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagMode</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>user</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flag</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagUserNull</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>fileUserDefault</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flag</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagUser</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>group</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flag</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagGroupNull</name></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>group</name></name></expr></argument>, <argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>fileGroupDefault</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>flag</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagGroup</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>cvtUInt64ToVarInt128</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Size</comment>
    <expr_stmt><expr><call><name>cvtUInt64ToVarInt128</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Use the first timestamp that appears as the base for all other timestamps. Ideally we would like a timestamp as close to the</comment>
    <comment type="line">// middle as possible but it doesn't seem worth doing the calculation.</comment>
    <if_stmt><if>if <condition>(<expr><name>manifestPackBaseTime</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>manifestPackBaseTime</name> <operator>=</operator> <name><name>file</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Timestamp</comment>
    <expr_stmt><expr><call><name>cvtUInt64ToVarInt128</name><argument_list>(<argument><expr><call><name>cvtInt64ToZigZag</name><argument_list>(<argument><expr><name>manifestPackBaseTime</name> <operator>-</operator> <name><name>file</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// SHA1 checksum</comment>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name> <operator>+</operator> <name>bufferPos</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>checksumSha1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bufferPos</name> <operator>+=</operator> <name>HASH_TYPE_SHA1_SIZE_HEX</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="line">// Reference</comment>
    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>reference</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cvtUInt64ToVarInt128</name><argument_list>(
            <argument><expr><call><name>strLstFindIdxP</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>referenceList</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>reference</name></name></expr></argument>, <argument><expr><operator>.</operator><name>required</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Mode</comment>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagMode</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>cvtUInt64ToVarInt128</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// User/group</comment>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagUser</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>cvtUInt64ToVarInt128</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagGroup</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>cvtUInt64ToVarInt128</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>group</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Repo size</comment>
    <expr_stmt><expr><call><name>cvtUInt64ToVarInt128</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>sizeRepo</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Bundle</comment>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagBundle</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cvtUInt64ToVarInt128</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>bundleId</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cvtUInt64ToVarInt128</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>bundleOffset</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Allocate memory for the file pack</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>nameSize</name> <init>= <expr><call><name>strSize</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>memNew</name><argument_list>(
        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StringPub</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>nameSize</name> <operator>+</operator> <name>bufferPos</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>file</name><operator>-&gt;</operator><name>checksumPageErrorList</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then>
            <expr><call><name>ALIGN_OFFSET</name><argument_list>(<argument><expr><name>StringPub</name></expr></argument>, <argument><expr><name>nameSize</name> <operator>+</operator> <name>bufferPos</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>StringPub</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>strSize</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>checksumPageErrorList</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Create string object for the file name</comment>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>StringPub</name> <operator>*</operator><operator>)</operator><name>result</name> <operator>=</operator> <operator>(</operator><name>StringPub</name><operator>)</operator><block>{<expr><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>strSize</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>result</name> <operator>+</operator> sizeof<operator>(</operator><name>StringPub</name><operator>)</operator></expr>}</block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>resultPos</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>StringPub</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>resultPos</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>strZ</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nameSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>resultPos</name> <operator>+=</operator> <name>nameSize</name></expr>;</expr_stmt>

    <comment type="line">// Copy pack data</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>resultPos</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create string object for the checksum error list</comment>
    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>-&gt;</operator><name>checksumPageErrorList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>resultPos</name> <operator>+=</operator> <name>bufferPos</name> <operator>+</operator> <call><name>ALIGN_OFFSET</name><argument_list>(<argument><expr><name>StringPub</name></expr></argument>, <argument><expr><name>nameSize</name> <operator>+</operator> <name>bufferPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>StringPub</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>result</name> <operator>+</operator> <name>resultPos</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>StringPub</name><operator>)</operator>
            <block>{<expr><operator>.</operator><name>size</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>strSize</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>checksumPageErrorList</name></name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>result</name> <operator>+</operator> <name>resultPos</name> <operator>+</operator> sizeof<operator>(</operator><name>StringPub</name><operator>)</operator></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name>resultPos</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>StringPub</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>result</name> <operator>+</operator> <name>resultPos</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>strZ</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>checksumPageErrorList</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>checksumPageErrorList</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE_P</name><argument_list>(<argument><expr><name>ManifestFilePack</name></expr></argument>, <argument><expr><operator>(</operator><name>ManifestFilePack</name> <operator>*</operator><operator>)</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ManifestFile</name></type>
<name>manifestFileUnpack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier><specifier>const</specifier></type> <name>manifest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ManifestFilePack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>filePack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>filePack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filePack</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>manifestPackBaseTime</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ManifestFile</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bufferPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Name</comment>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>name</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>String</name> <operator>*</operator><operator>)</operator><name>filePack</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>bufferPos</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>StringPub</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>strSize</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="line">// Flags</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>flag</name> <init>= <expr><call><name>cvtUInt64FromVarInt128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>filePack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>copy</name></name> <operator>=</operator> <operator>(</operator><name>flag</name> <operator>&gt;&gt;</operator> <name>manifestFilePackFlagCopy</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>delta</name></name> <operator>=</operator> <operator>(</operator><name>flag</name> <operator>&gt;&gt;</operator> <name>manifestFilePackFlagDelta</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>resume</name></name> <operator>=</operator> <operator>(</operator><name>flag</name> <operator>&gt;&gt;</operator> <name>manifestFilePackFlagResume</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="line">// Size</comment>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>cvtUInt64FromVarInt128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>filePack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Timestamp</comment>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator>
        <name>manifestPackBaseTime</name> <operator>-</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>cvtInt64FromZigZag</name><argument_list>(<argument><expr><call><name>cvtUInt64FromVarInt128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>filePack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Checksum page</comment>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>checksumPage</name></name> <operator>=</operator> <operator>(</operator><name>flag</name> <operator>&gt;&gt;</operator> <name>manifestFilePackFlagChecksumPage</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="line">// SHA1 checksum</comment>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>checksumSha1</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>filePack</name> <operator>+</operator> <name>bufferPos</name></expr></argument>, <argument><expr><name>HASH_TYPE_SHA1_SIZE_HEX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bufferPos</name> <operator>+=</operator> <name>HASH_TYPE_SHA1_SIZE_HEX</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="line">// Reference</comment>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagReference</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>reference</name></name> <operator>=</operator> <call><name>strLstGet</name><argument_list>(
            <argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>referenceList</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>cvtUInt64FromVarInt128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>filePack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Mode</comment>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagMode</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <operator>(</operator><name>mode_t</name><operator>)</operator><call><name>cvtUInt64FromVarInt128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>filePack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name><name>manifest</name><operator>-&gt;</operator><name>fileModeDefault</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="line">// User/group</comment>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagUser</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>user</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>String</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>cvtUInt64FromVarInt128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>filePack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagUserNull</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name><name>manifest</name><operator>-&gt;</operator><name>fileUserDefault</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagGroup</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>group</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>String</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>cvtUInt64FromVarInt128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>filePack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagGroupNull</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>group</name></name> <operator>=</operator> <name><name>manifest</name><operator>-&gt;</operator><name>fileGroupDefault</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Repo size</comment>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>sizeRepo</name></name> <operator>=</operator> <call><name>cvtUInt64FromVarInt128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>filePack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Bundle</comment>
    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagBundle</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bundleId</name></name> <operator>=</operator> <call><name>cvtUInt64FromVarInt128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>filePack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bundleOffset</name></name> <operator>=</operator> <call><name>cvtUInt64FromVarInt128</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>filePack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufferPos</name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Checksum page error</comment>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>checksumPageError</name></name> <operator>=</operator> <ternary><condition><expr><name>flag</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagChecksumPageError</name><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>manifestFilePackFlagChecksumPageErrorList</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>checksumPageErrorList</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>String</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>filePack</name> <operator>+</operator> <name>bufferPos</name> <operator>+</operator> <call><name>ALIGN_OFFSET</name><argument_list>(<argument><expr><name>StringPub</name></expr></argument>, <argument><expr><name>bufferPos</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>ManifestFile</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>manifestFileAdd</name><parameter_list>(<parameter><decl><type><name>Manifest</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><name>ManifestFile</name> <modifier>*</modifier><specifier>const</specifier></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST_FILE</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <call><name>manifestOwnerCache</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <call><name>manifestOwnerCache</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext(this-&gt;pub.fileList)</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestFilePack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>filePack</name> <init>= <expr><call><name>manifestFilePack</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fileList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filePack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Update file pack by creating a new one and then freeing the old one</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>manifestFilePackUpdate</name><parameter_list>(<parameter><decl><type><name>Manifest</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><name>ManifestFilePack</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>filePack</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ManifestFile</name> <modifier>*</modifier><specifier>const</specifier></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>filePack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST_FILE</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filePack</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext(this-&gt;pub.fileList)</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ManifestFilePack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>filePackOld</name> <init>= <expr><operator>*</operator><name>filePack</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>*</operator><name>filePack</name> <operator>=</operator> <call><name>manifestFilePack</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memFree</name><argument_list>(<argument><expr><name>filePackOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>manifestLinkAdd</name><parameter_list>(<parameter><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ManifestLink</name> <modifier>*</modifier></type><name>link</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST_LINK</name></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>link</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>destination</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext(this-&gt;pub.linkList)</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ManifestLink</name></type> <name>linkAdd</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>destination</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>destination</name></name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>group</name> <operator>=</operator> <call><name>manifestOwnerCache</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>user</name> <operator>=</operator> <call><name>manifestOwnerCache</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>linkList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linkAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>manifestPathAdd</name><parameter_list>(<parameter><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ManifestPath</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST_PATH</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext(this-&gt;pub.pathList)</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ManifestPath</name></type> <name>pathAdd</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>mode</name> <operator>=</operator> <name><name>path</name><operator>-&gt;</operator><name>mode</name></name></expr>,
            <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>group</name> <operator>=</operator> <call><name>manifestOwnerCache</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>user</name> <operator>=</operator> <call><name>manifestOwnerCache</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>pathList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pathAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>manifestTargetAdd</name><parameter_list>(<parameter><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ManifestTarget</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST_TARGET</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>target</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>path</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext(this-&gt;pub.targetList)</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ManifestTarget</name></type> <name>targetAdd</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>file</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>path</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>tablespaceId</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>tablespaceId</name></name></expr>,
            <expr><operator>.</operator><name>tablespaceName</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>tablespaceName</name></name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>target</name><operator>-&gt;</operator><name>type</name></name></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>targetList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>targetAdd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Internal constructor
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>Manifest</name> <modifier>*</modifier></type>
<name>manifestNewInternal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>(</operator><name>Manifest</name><operator>)</operator>
    <block>{
        <expr><operator>.</operator><name>pub</name> <operator>=</operator>
        <block>{
            <expr><operator>.</operator><name>memContext</name> <operator>=</operator> <call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr>,
            <expr><operator>.</operator><name>dbList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ManifestDb</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>fileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ManifestFilePack</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>linkList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ManifestLink</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>pathList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ManifestPath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>targetList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ManifestTarget</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>referenceList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>,
        }</block></expr>,
        <expr><operator>.</operator><name>ownerList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>,
    }</block></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Ensure that symlinks do not point to the same file, directory, or subdirectory of another link

There are two implementations: manifestLinkCheck(), which is externed, and manifestLinkCheckOne(), which is intended to be
used internally during processing. manifestLinkCheck() works simply by calling manifestLinkCheckOne() for every link in the target
list. manifestLinkCheckOne() is optimized to work quickly on a single link.
***********************************************************************************************************************************/</comment>
<comment type="line">// Data needed in link list</comment>
<typedef>typedef <type><struct>struct <name>ManifestLinkCheckItem</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>                                             <comment type="line">// Link destination path terminated with /</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>                                             <comment type="line">// Link file if a file link</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>targetIdx</name></decl>;</decl_stmt>                                         <comment type="line">// Index of target used for error messages</comment>
}</block></struct></type> <name>ManifestLinkCheckItem</name>;</typedef>

<comment type="line">// Persistent data needed during processing of manifestLinkCheck/One()</comment>
<typedef>typedef <type><struct>struct <name>ManifestLinkCheck</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>basePath</name></decl>;</decl_stmt>                                         <comment type="line">// Base data path (initialized on first call)</comment>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>linkList</name></decl>;</decl_stmt>                                                 <comment type="line">// Current list of link destination paths</comment>
}</block></struct></type> <name>ManifestLinkCheck</name>;</typedef>

<comment type="line">// Helper to initialize the link data</comment>
<function><type><specifier>static</specifier> <name>ManifestLinkCheck</name></type>
<name>manifestLinkCheckInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <macro><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(
        <argument>ManifestLinkCheck</argument>, <argument>(ManifestLinkCheck){.linkList = lstNewP(sizeof(ManifestLinkCheckItem), .comparator = lstComparatorStr)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>

<comment type="line">// Helper to check a single link specified by targetIdx</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>manifestLinkCheckOne</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>ManifestLinkCheck</name> <modifier>*</modifier></type><name>linkCheck</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>targetIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>linkCheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>targetIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>linkCheck</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>linkCheck</name><operator>-&gt;</operator><name>linkList</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>targetIdx</name> <operator>&lt;</operator> <call><name>manifestTargetTotal</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestTarget</name> <modifier>*</modifier></type><name>target1</name> <init>= <expr><call><name>manifestTarget</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>targetIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Only check link targets</comment>
        <if_stmt><if>if <condition>(<expr><name><name>target1</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>manifestTargetTypeLink</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Create link destination path for comparison with other paths. It must end in / so subpaths can be detected without</comment>
            <comment type="line">// matching valid partial path names at the end of the path.</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext(linkCheck-&gt;linkList)</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestTargetPath</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>target1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Get base bath</comment>
                <if_stmt><if>if <condition>(<expr><name><name>linkCheck</name><operator>-&gt;</operator><name>basePath</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>linkCheck</name><operator>-&gt;</operator><name>basePath</name></name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(
                        <argument><expr><literal type="string">"%s/"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestTargetPath</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGDATA_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Check that link destination is not in base data path</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strBeginsWith</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>linkCheck</name><operator>-&gt;</operator><name>basePath</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                    <argument><expr><name>LinkDestinationError</name></expr></argument>,
                    <argument><expr><literal type="string">"link '%s' destination '%s' is in PGDATA"</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestPathPg</name><argument_list>(<argument><expr><name><name>target1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestTargetPath</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>target1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Check if the link destination path already exists</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestLinkCheckItem</name> <modifier>*</modifier><specifier>const</specifier></type> <name>link</name> <init>= <expr><call><name>lstFind</name><argument_list>(<argument><expr><name><name>linkCheck</name><operator>-&gt;</operator><name>linkList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>link</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// If both links are files make sure they don't link to the same file</comment>
                <if_stmt><if>if <condition>(<expr><name><name>target1</name><operator>-&gt;</operator><name>file</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>link</name><operator>-&gt;</operator><name>file</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name><name>target1</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestTarget</name> <modifier>*</modifier><specifier>const</specifier></type> <name>target2</name> <init>= <expr><call><name>manifestTarget</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>targetIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                            <argument><expr><name>LinkDestinationError</name></expr></argument>,
                            <argument><expr><literal type="string">"link '%s' (%s/%s) destination is the same file as link '%s' (%s/%s)"</literal></expr></argument>,
                            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestPathPg</name><argument_list>(<argument><expr><name><name>target1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestTargetPath</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>target1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>target1</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestPathPg</name><argument_list>(<argument><expr><name><name>target2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestTargetPath</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>target2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>target2</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if>
                <comment type="line">// Else error because one of the links is a path and cannot link to the same path as another file/path link</comment>
                <else>else
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestTarget</name> <modifier>*</modifier><specifier>const</specifier></type> <name>target2</name> <init>= <expr><call><name>manifestTarget</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>targetIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                        <argument><expr><name>LinkDestinationError</name></expr></argument>,
                        <argument><expr><literal type="string">"link '%s' (%s) destination is the same directory as link '%s' (%s)"</literal></expr></argument>,
                        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestPathPg</name><argument_list>(<argument><expr><name><name>target1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestTargetPath</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>target1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestPathPg</name><argument_list>(<argument><expr><name><name>target2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestTargetPath</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>target2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else add to the link list and check against other links</comment>
            <else>else
            <block>{<block_content>
                <comment type="line">// Add the link destination path and sort</comment>
                <macro><name>lstAdd</name><argument_list>(<argument>linkCheck-&gt;linkList</argument>, <argument>&amp;(ManifestLinkCheckItem){.path = path</argument>, <argument>.file = target1-&gt;file</argument>, <argument>.targetIdx = targetIdx}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
                <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>linkCheck</name><operator>-&gt;</operator><name>linkList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Find the path in the sorted list</comment>
                <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>linkIdx</name> <init>= <expr><call><name>lstFindIdx</name><argument_list>(<argument><expr><name><name>linkCheck</name><operator>-&gt;</operator><name>linkList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>linkIdx</name> <operator>!=</operator> <name>LIST_NOT_FOUND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Check path links against other links (file links have already been checked)</comment>
                <if_stmt><if>if <condition>(<expr><name><name>target1</name><operator>-&gt;</operator><name>file</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Check the link destination path to be sure it is not a subpath of a prior link destination path</comment>
                    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>priorLinkIdx</name> <init>= <expr><name>linkIdx</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>int</name><operator>)</operator><name>priorLinkIdx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>priorLinkIdx</name><operator>--</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestLinkCheckItem</name> <modifier>*</modifier><specifier>const</specifier></type> <name>priorLink</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>linkCheck</name><operator>-&gt;</operator><name>linkList</name></name></expr></argument>, <argument><expr><name>priorLinkIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <comment type="line">// Skip file links since they are allowed to be in the same path with each other and in the parent path of a</comment>
                        <comment type="line">// linked destination path.</comment>
                        <if_stmt><if>if <condition>(<expr><name><name>priorLink</name><operator>-&gt;</operator><name>file</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                            <continue>continue;</continue></block_content></block></if></if_stmt>

                        <if_stmt><if>if <condition>(<expr><call><name>strBeginsWith</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>priorLink</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestTarget</name> <modifier>*</modifier><specifier>const</specifier></type> <name>target2</name> <init>= <expr><call><name>manifestTarget</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>priorLink</name><operator>-&gt;</operator><name>targetIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                                <argument><expr><name>LinkDestinationError</name></expr></argument>,
                                <argument><expr><literal type="string">"link '%s' (%s) destination is a subdirectory of link '%s' (%s)"</literal></expr></argument>,
                                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestPathPg</name><argument_list>(<argument><expr><name><name>target1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestTargetPath</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>target1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestPathPg</name><argument_list>(<argument><expr><name><name>target2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestTargetPath</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>target2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <comment type="line">// Stop once the first prior path link has been checked since it must be a parent (if there is one)</comment>
                        <break>break;</break>
                    </block_content>}</block></for>

                    <comment type="line">// Check the link destination path to be sure it is not a parent path of a subsequent link destination path</comment>
                    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>nextLinkIdx</name> <init>= <expr><name>linkIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>nextLinkIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>linkCheck</name><operator>-&gt;</operator><name>linkList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>nextLinkIdx</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestLinkCheckItem</name> <modifier>*</modifier><specifier>const</specifier></type> <name>nextLink</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>linkCheck</name><operator>-&gt;</operator><name>linkList</name></name></expr></argument>, <argument><expr><name>nextLinkIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <comment type="line">// Skip file links since they are allowed to be in the same path with each other and in the parent path of a</comment>
                        <comment type="line">// linked destination path.</comment>
                        <if_stmt><if>if <condition>(<expr><name><name>nextLink</name><operator>-&gt;</operator><name>file</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                            <continue>continue;</continue></block_content></block></if></if_stmt>

                        <if_stmt><if>if <condition>(<expr><call><name>strBeginsWith</name><argument_list>(<argument><expr><name><name>nextLink</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestTarget</name> <modifier>*</modifier><specifier>const</specifier></type> <name>target2</name> <init>= <expr><call><name>manifestTarget</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>nextLink</name><operator>-&gt;</operator><name>targetIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                                <argument><expr><name>LinkDestinationError</name></expr></argument>,
                                <argument><expr><literal type="string">"link '%s' (%s) destination is a subdirectory of link '%s' (%s)"</literal></expr></argument>,
                                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestPathPg</name><argument_list>(<argument><expr><name><name>target2</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestTargetPath</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>target2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestPathPg</name><argument_list>(<argument><expr><name><name>target1</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestTargetPath</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>target1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <comment type="line">// Stop once the first next path link has been checked since it must be a subpath (if there is one)</comment>
                        <break>break;</break>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>manifestLinkCheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Check all links</comment>
        <decl_stmt><decl><type><name>ManifestLinkCheck</name></type> <name>linkCheck</name> <init>= <expr><call><name>manifestLinkCheckInit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>targetIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>targetIdx</name> <operator>&lt;</operator> <call><name>manifestTargetTotal</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>targetIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>manifestLinkCheckOne</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linkCheck</name></expr></argument>, <argument><expr><name>targetIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>ManifestBuildData</name>
<block>{
    <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name></decl>;</decl_stmt>                                             <comment type="line">// Manifest being build</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storagePg</name></decl>;</decl_stmt>                                       <comment type="line">// PostgreSQL storage</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>tablespaceId</name></decl>;</decl_stmt>                                     <comment type="line">// Tablespace id if PostgreSQL version has one</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>online</name></decl>;</decl_stmt>                                                    <comment type="line">// Is this an online backup?</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>checksumPage</name></decl>;</decl_stmt>                                              <comment type="line">// Are page checksums being checked?</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>manifestWalName</name></decl>;</decl_stmt>                                  <comment type="line">// Wal manifest name for this version of PostgreSQL</comment>
    <decl_stmt><decl><type><name>RegExp</name> <modifier>*</modifier></type><name>dbPathExp</name></decl>;</decl_stmt>                                              <comment type="line">// Identify paths containing relations</comment>
    <decl_stmt><decl><type><name>RegExp</name> <modifier>*</modifier></type><name>tempRelationExp</name></decl>;</decl_stmt>                                        <comment type="line">// Identify temp relations</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Pack</name> <modifier>*</modifier></type><name>tablespaceList</name></decl>;</decl_stmt>                                     <comment type="line">// List of tablespaces in the database</comment>
    <decl_stmt><decl><type><name>ManifestLinkCheck</name> <modifier>*</modifier></type><name>linkCheck</name></decl>;</decl_stmt>                                   <comment type="line">// List of links found during build (used for prefix check)</comment>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>excludeContent</name></decl>;</decl_stmt>                                     <comment type="line">// Exclude contents of directories</comment>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>excludeSingle</name></decl>;</decl_stmt>                                      <comment type="line">// Exclude a single file/link/path</comment>
}</block></struct></type> <name>ManifestBuildData</name>;</typedef>

<comment type="line">// Process files/links/paths and add them to the manifest</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>manifestBuildInfo</name><parameter_list>(
    <parameter><decl><type><name>ManifestBuildData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buildData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>manifestParentName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pgPath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>dbPath</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>StorageInfo</name> <modifier>*</modifier><specifier>const</specifier></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>buildData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>manifestParentName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>dbPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_INFO</name></expr></argument>, <argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buildData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>manifestParentName</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pgPath</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Skip any path/file/link that begins with pgsql_tmp.  The files are removed when the server is restarted and the directories</comment>
    <comment type="line">// are recreated.</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strBeginsWithZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_PREFIX_PGSQLTMP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Get build data</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pgVersion</name> <init>= <expr><name><name>buildData</name><operator>-&gt;</operator><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgVersion</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Construct the name used to identify this file/link/path in the manifest</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>manifestName</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>manifestParentName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Skip excluded files/links/paths</comment>
    <if_stmt><if>if <condition>(<expr><name><name>buildData</name><operator>-&gt;</operator><name>excludeSingle</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strLstExists</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>excludeSingle</name></name></expr></argument>, <argument><expr><name>manifestName</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOG_INFO_FMT</name><argument_list>(
            <argument><expr><literal type="string">"exclude '%s/%s' from backup using '%s' exclusion"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strSub</name><argument_list>(<argument><expr><name>manifestName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MANIFEST_TARGET_PGDATA</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Process storage types</comment>
    <switch>switch <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Add paths</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <case>case <expr><name>storageTypePath</name></expr>:</case>
        <block>{<block_content>
            <comment type="line">// There should not be any paths in pg_tblspc</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>manifestParentName</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGDATA</name> <literal type="string">"/"</literal> <name>MANIFEST_TARGET_PGTBLSPC</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                    <argument><expr><name>LinkExpectedError</name></expr></argument>, <argument><expr><literal type="string">"'%s' is not a symlink - "</literal> <name>MANIFEST_TARGET_PGTBLSPC</name> <literal type="string">" should contain only symlinks"</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>manifestName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Add path to manifest</comment>
            <decl_stmt><decl><type><name>ManifestPath</name></type> <name>path</name> <init>=
            <expr><block>{
                <expr><operator>.</operator><name>name</name> <operator>=</operator> <name>manifestName</name></expr>,
                <expr><operator>.</operator><name>mode</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>mode</name></name></expr>,
                <expr><operator>.</operator><name>user</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>user</name></name></expr>,
                <expr><operator>.</operator><name>group</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>group</name></name></expr>,
            }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>manifestPathAdd</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>manifest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Skip excluded path content</comment>
            <if_stmt><if>if <condition>(<expr><name><name>buildData</name><operator>-&gt;</operator><name>excludeContent</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strLstExists</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>excludeContent</name></name></expr></argument>, <argument><expr><name>manifestName</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>LOG_INFO_FMT</name><argument_list>(
                    <argument><expr><literal type="string">"exclude contents of '%s/%s' from backup using '%s/' exclusion"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strSub</name><argument_list>(<argument><expr><name>manifestName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MANIFEST_TARGET_PGDATA</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Skip the contents of these paths if they exist in the base path since they won't be reused after recovery</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>manifestParentName</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGDATA_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Skip pg_dynshmem/* since these files cannot be reused on recovery</comment>
                <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_PATH_PGDYNSHMEM</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>pgVersion</name> <operator>&gt;=</operator> <name>PG_VERSION_94</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Skip pg_notify/* since these files cannot be reused on recovery</comment>
                <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_PATH_PGNOTIFY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Skip pg_replslot/* since these files are generally not useful after a restore</comment>
                <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_PATH_PGREPLSLOT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>pgVersion</name> <operator>&gt;=</operator> <name>PG_VERSION_94</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Skip pg_serial/* since these files are reset</comment>
                <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_PATH_PGSERIAL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>pgVersion</name> <operator>&gt;=</operator> <name>PG_VERSION_91</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Skip pg_snapshots/* since these files cannot be reused on recovery</comment>
                <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_PATH_PGSNAPSHOTS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>pgVersion</name> <operator>&gt;=</operator> <name>PG_VERSION_92</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Skip temporary statistics in pg_stat_tmp even when stats_temp_directory is set because PGSS_TEXT_FILE is always</comment>
                <comment type="line">// created there in PostgreSQL &lt; 15. PostgreSQL &gt;= 15 no longer uses this directory, but it may be used by</comment>
                <comment type="line">// extensions such as pg_stat_statements so it should still be excluded.</comment>
                <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_PATH_PGSTATTMP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Skip pg_subtrans/* since these files are reset</comment>
                <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_PATH_PGSUBTRANS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Skip the contents of archive_status when online</comment>
            <if_stmt><if>if <condition>(<expr><name><name>buildData</name><operator>-&gt;</operator><name>online</name></name> <operator>&amp;&amp;</operator> <call><name>strEq</name><argument_list>(<argument><expr><name>manifestParentName</name></expr></argument>, <argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>manifestWalName</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_PATH_ARCHIVE_STATUS</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Recurse into the path</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pgPathSub</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>dbPathSub</name> <init>= <expr><call><name>regExpMatch</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>dbPathExp</name></name></expr></argument>, <argument><expr><name>manifestName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StorageIterator</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageItr</name> <init>= <expr><call><name>storageNewItrP</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>storagePg</name></name></expr></argument>, <argument><expr><name>pgPathSub</name></expr></argument>, <argument><expr><operator>.</operator><name>sortOrder</name> <operator>=</operator> <name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <macro><name>MEM_CONTEXT_TEMP_RESET_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <while>while <condition>(<expr><call><name>storageItrMore</name><argument_list>(<argument><expr><name>storageItr</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>StorageInfo</name></type> <name>info</name> <init>= <expr><call><name>storageItrNext</name><argument_list>(<argument><expr><name>storageItr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name>manifestBuildInfo</name><argument_list>(<argument><expr><name>buildData</name></expr></argument>, <argument><expr><name>manifestName</name></expr></argument>, <argument><expr><name>pgPathSub</name></expr></argument>, <argument><expr><name>dbPathSub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Reset the memory context occasionally so we don't use too much memory or slow down processing</comment>
                    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_RESET</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <break>break;</break>
        </block_content>}</block>

        <comment type="line">// Add files</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <case>case <expr><name>storageTypeFile</name></expr>:</case>
        <block>{<block_content>
            <comment type="line">// There should not be any files in pg_tblspc</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>manifestParentName</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGDATA</name> <literal type="string">"/"</literal> <name>MANIFEST_TARGET_PGTBLSPC</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                    <argument><expr><name>LinkExpectedError</name></expr></argument>, <argument><expr><literal type="string">"'%s' is not a symlink - "</literal> <name>MANIFEST_TARGET_PGTBLSPC</name> <literal type="string">" should contain only symlinks"</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>manifestName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Skip pg_internal.init since it is recreated on startup.  It's also possible, (though unlikely) that a temp file with</comment>
            <comment type="line">// the creating process id as the extension can exist so skip that as well.  This seems to be a bug in PostgreSQL since</comment>
            <comment type="line">// the temp file should be removed on startup.  Use regExpMatchOne() here instead of preparing a regexp in advance since</comment>
            <comment type="line">// the likelihood of needing the regexp should be very small.</comment>
            <if_stmt><if>if <condition>(<expr><name>dbPath</name> <operator>&amp;&amp;</operator> <call><name>strBeginsWithZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_FILE_PGINTERNALINIT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <operator>(</operator><call><name>strSize</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PG_FILE_PGINTERNALINIT</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator>
                    <call><name>regExpMatchOne</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"\\.[0-9]+"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strSub</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PG_FILE_PGINTERNALINIT</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Skip files in the root data path</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>manifestParentName</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGDATA_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Skip recovery files</comment>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_FILE_RECOVERYSIGNAL</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_FILE_STANDBYSIGNAL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
                        <name>pgVersion</name> <operator>&gt;=</operator> <name>PG_VERSION_12</name><operator>)</operator> <operator>||</operator>
                    <operator>(</operator><operator>(</operator><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_FILE_RECOVERYCONF</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_FILE_RECOVERYDONE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
                        <name>pgVersion</name> <operator>&lt;</operator> <name>PG_VERSION_12</name><operator>)</operator> <operator>||</operator>
                    <comment type="line">// Skip temp file for safely writing postgresql.auto.conf</comment>
                    <operator>(</operator><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_FILE_POSTGRESQLAUTOCONFTMP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>pgVersion</name> <operator>&gt;=</operator> <name>PG_VERSION_94</name><operator>)</operator> <operator>||</operator>
                    <comment type="line">// Skip backup_label in versions where non-exclusive backup is supported</comment>
                    <operator>(</operator><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_FILE_BACKUPLABEL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>pgVersion</name> <operator>&gt;=</operator> <name>PG_VERSION_96</name><operator>)</operator> <operator>||</operator>
                    <comment type="line">// Skip old backup labels</comment>
                    <call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_FILE_BACKUPLABELOLD</name></expr></argument>)</argument_list></call> <operator>||</operator>
                    <comment type="line">// Skip backup_manifest/tmp in versions where it is created</comment>
                    <operator>(</operator><operator>(</operator><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_FILE_BACKUPMANIFEST</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_FILE_BACKUPMANIFEST_TMP</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
                        <name>pgVersion</name> <operator>&gt;=</operator> <name>PG_VERSION_13</name><operator>)</operator> <operator>||</operator>
                    <comment type="line">// Skip running process options</comment>
                    <call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_FILE_POSTMTROPTS</name></expr></argument>)</argument_list></call> <operator>||</operator>
                    <comment type="line">// Skip process id file to avoid confusing postgres after restore</comment>
                    <call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>PG_FILE_POSTMTRPID</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Skip the contents of the wal path when online. WAL will be restored from the archive or stored in the wal directory</comment>
            <comment type="line">// at the end of the backup if the archive-copy option is set.</comment>
            <if_stmt><if>if <condition>(<expr><name><name>buildData</name><operator>-&gt;</operator><name>online</name></name> <operator>&amp;&amp;</operator> <call><name>strEq</name><argument_list>(<argument><expr><name>manifestParentName</name></expr></argument>, <argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>manifestWalName</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Skip temp relations in db paths</comment>
            <if_stmt><if>if <condition>(<expr><name>dbPath</name> <operator>&amp;&amp;</operator> <call><name>regExpMatch</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>tempRelationExp</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Add file to manifest</comment>
            <decl_stmt><decl><type><name>ManifestFile</name></type> <name>file</name> <init>=
            <expr><block>{
                <expr><operator>.</operator><name>name</name> <operator>=</operator> <name>manifestName</name></expr>,
                <expr><operator>.</operator><name>copy</name> <operator>=</operator> <name>true</name></expr>,
                <expr><operator>.</operator><name>mode</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>mode</name></name></expr>,
                <expr><operator>.</operator><name>user</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>user</name></name></expr>,
                <expr><operator>.</operator><name>group</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>group</name></name></expr>,
                <expr><operator>.</operator><name>size</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>size</name></name></expr>,
                <expr><operator>.</operator><name>sizeRepo</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>size</name></name></expr>,
                <expr><operator>.</operator><name>timestamp</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>timeModified</name></name></expr>,
            }</block></expr></init></decl>;</decl_stmt>

            <comment type="line">// When bundling zero-length files do not need to be copied</comment>
            <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buildData</name><operator>-&gt;</operator><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>bundle</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>file</name><operator>.</operator><name>copy</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>checksumSha1</name></name></expr></argument>, <argument><expr><name>HASH_TYPE_SHA1_ZERO</name></expr></argument>, <argument><expr><name>HASH_TYPE_SHA1_SIZE_HEX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Determine if this file should be page checksummed</comment>
            <if_stmt><if>if <condition>(<expr><name>dbPath</name> <operator>&amp;&amp;</operator> <name><name>buildData</name><operator>-&gt;</operator><name>checksumPage</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>file</name><operator>.</operator><name>checksumPage</name></name> <operator>=</operator>
                    <operator>!</operator><call><name>strEndsWithZ</name><argument_list>(<argument><expr><name>manifestName</name></expr></argument>, <argument><expr><literal type="string">"/"</literal> <name>PG_FILE_PGFILENODEMAP</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strEndsWithZ</name><argument_list>(<argument><expr><name>manifestName</name></expr></argument>, <argument><expr><literal type="string">"/"</literal> <name>PG_FILE_PGVERSION</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                    <operator>!</operator><call><name>strEqZ</name><argument_list>(<argument><expr><name>manifestName</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGDATA</name> <literal type="string">"/"</literal> <name>PG_PATH_GLOBAL</name> <literal type="string">"/"</literal> <name>PG_FILE_PGCONTROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>manifestFileAdd</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>manifest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>

        <comment type="line">// Add links</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <case>case <expr><name>storageTypeLink</name></expr>:</case>
        <block>{<block_content>
            <comment type="line">// If the destination is another link then error.  In the future we'll allow this by following the link chain to the</comment>
            <comment type="line">// eventual destination but for now we are trying to maintain compatibility during the migration.  To do this check we</comment>
            <comment type="line">// need to read outside of the data directory but it is a read-only operation so is considered safe.</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>linkDestinationAbsolute</name> <init>= <expr><call><name>strPathAbsolute</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>linkDestination</name></name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>StorageInfo</name></type> <name>linkedCheck</name> <init>= <expr><call><name>storageInfoP</name><argument_list>(
                <argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>storagePg</name></name></expr></argument>, <argument><expr><name>linkDestinationAbsolute</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>noPathEnforce</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>linkedCheck</name><operator>.</operator><name>exists</name></name> <operator>&amp;&amp;</operator> <name><name>linkedCheck</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>storageTypeLink</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                    <argument><expr><name>LinkDestinationError</name></expr></argument>, <argument><expr><literal type="string">"link '%s/%s' cannot reference another link '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>linkDestinationAbsolute</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Initialize link and target</comment>
            <decl_stmt><decl><type><name>ManifestLink</name></type> <name>link</name> <init>=
            <expr><block>{
                <expr><operator>.</operator><name>name</name> <operator>=</operator> <name>manifestName</name></expr>,
                <expr><operator>.</operator><name>user</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>user</name></name></expr>,
                <expr><operator>.</operator><name>group</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>group</name></name></expr>,
                <expr><operator>.</operator><name>destination</name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>linkDestination</name></name></expr>,
            }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ManifestTarget</name></type> <name>target</name> <init>=
            <expr><block>{
                <expr><operator>.</operator><name>name</name> <operator>=</operator> <name>manifestName</name></expr>,
                <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>manifestTargetTypeLink</name></expr>,
            }</block></expr></init></decl>;</decl_stmt>

            <comment type="line">// Make a copy of the link name because it will need to be modified when there are tablespace ids</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>linkName</name> <init>= <expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>

            <comment type="line">// Is this a tablespace?</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>manifestParentName</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>MANIFEST_TARGET_PGDATA</name> <literal type="string">"/"</literal> <name>MANIFEST_TARGET_PGTBLSPC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Strip pg_data off the manifest name so it begins with pg_tblspc instead.  This reflects how the files are stored</comment>
                <comment type="line">// in the backup directory.</comment>
                <expr_stmt><expr><name>manifestName</name> <operator>=</operator> <call><name>strSub</name><argument_list>(<argument><expr><name>manifestName</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MANIFEST_TARGET_PGDATA</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Identify this target as a tablespace</comment>
                <expr_stmt><expr><name><name>target</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>manifestName</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>target</name><operator>.</operator><name>tablespaceId</name></name> <operator>=</operator> <call><name>cvtZToUInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Look for this tablespace in the provided list (list may be null for off-line backup)</comment>
                <if_stmt><if>if <condition>(<expr><name><name>buildData</name><operator>-&gt;</operator><name>tablespaceList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Search list</comment>
                    <decl_stmt><decl><type><name>PackRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>read</name> <init>= <expr><call><name>pckReadNew</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>tablespaceList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <while>while <condition>(<expr><operator>!</operator><call><name>pckReadNullP</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>pckReadArrayBeginP</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt><if>if <condition>(<expr><name><name>target</name><operator>.</operator><name>tablespaceId</name></name> <operator>==</operator> <call><name>pckReadU32P</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name><name>target</name><operator>.</operator><name>tablespaceName</name></name> <operator>=</operator> <call><name>pckReadStrP</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt><expr><call><name>pckReadArrayEndP</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></while>

                    <comment type="line">// Error if the tablespace could not be found.  ??? This seems excessive, perhaps just warn here?</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>target</name><operator>.</operator><name>tablespaceName</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                            <argument><expr><name>AssertError</name></expr></argument>,
                            <argument><expr><literal type="string">"tablespace with oid %u not found in tablespace map\n"</literal>
                            <literal type="string">"HINT: was a tablespace created or dropped during the backup?"</literal></expr></argument>,
                            <argument><expr><name><name>target</name><operator>.</operator><name>tablespaceId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// If no tablespace name was found then create one</comment>
                <if_stmt><if>if <condition>(<expr><name><name>target</name><operator>.</operator><name>tablespaceName</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>target</name><operator>.</operator><name>tablespaceName</name></name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"ts%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Add a dummy pg_tblspc path entry if it does not already exist.  This entry will be ignored by restore but it is</comment>
                <comment type="line">// part of the original manifest format so we need to have it.</comment>
                <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>pathList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestPath</name> <modifier>*</modifier></type><name>pathBase</name> <init>= <expr><call><name>manifestPathFind</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>manifest</name></name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGDATA_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>manifestPathFindDefault</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>manifest</name></name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGTBLSPC_STR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>ManifestPath</name></type> <name>path</name> <init>=
                    <expr><block>{
                        <expr><operator>.</operator><name>name</name> <operator>=</operator> <name>MANIFEST_TARGET_PGTBLSPC_STR</name></expr>,
                        <expr><operator>.</operator><name>mode</name> <operator>=</operator> <name><name>pathBase</name><operator>-&gt;</operator><name>mode</name></name></expr>,
                        <expr><operator>.</operator><name>user</name> <operator>=</operator> <name><name>pathBase</name><operator>-&gt;</operator><name>user</name></name></expr>,
                        <expr><operator>.</operator><name>group</name> <operator>=</operator> <name><name>pathBase</name><operator>-&gt;</operator><name>group</name></name></expr>,
                    }</block></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name>manifestPathAdd</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>manifest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// The tablespace link destination path is not the path where data will be stored so we can just store it as a dummy</comment>
                <comment type="line">// path. This is because PostgreSQL creates a subpath with the version/catalog number so that multiple versions of</comment>
                <comment type="line">// PostgreSQL can share a tablespace, which makes upgrades easier.</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestPath</name> <modifier>*</modifier></type><name>pathTblSpc</name> <init>= <expr><call><name>manifestPathFind</name><argument_list>(
                    <argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>manifest</name></name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>MANIFEST_TARGET_PGDATA</name> <literal type="string">"/"</literal> <name>MANIFEST_TARGET_PGTBLSPC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>ManifestPath</name></type> <name>path</name> <init>=
                <expr><block>{
                    <expr><operator>.</operator><name>name</name> <operator>=</operator> <name>manifestName</name></expr>,
                    <expr><operator>.</operator><name>mode</name> <operator>=</operator> <name><name>pathTblSpc</name><operator>-&gt;</operator><name>mode</name></name></expr>,
                    <expr><operator>.</operator><name>user</name> <operator>=</operator> <name><name>pathTblSpc</name><operator>-&gt;</operator><name>user</name></name></expr>,
                    <expr><operator>.</operator><name>group</name> <operator>=</operator> <name><name>pathTblSpc</name><operator>-&gt;</operator><name>group</name></name></expr>,
                }</block></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>manifestPathAdd</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>manifest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Update build structure to reflect the path added above and the tablespace id</comment>
                <expr_stmt><expr><name>manifestParentName</name> <operator>=</operator> <name>manifestName</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>manifestName</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>manifestName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>tablespaceId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>pgPath</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>linkName</name> <operator>=</operator> <name><name>buildData</name><operator>-&gt;</operator><name>tablespaceId</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Add info about the linked file/path</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>linkPgPath</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>linkName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StorageInfo</name></type> <name>linkedInfo</name> <init>= <expr><call><name>storageInfoP</name><argument_list>(
                <argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>storagePg</name></name></expr></argument>, <argument><expr><name>linkPgPath</name></expr></argument>, <argument><expr><operator>.</operator><name>followLink</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>linkedInfo</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>linkName</name></expr>;</expr_stmt>

            <comment type="line">// If the link destination exists then build the target</comment>
            <if_stmt><if>if <condition>(<expr><name><name>linkedInfo</name><operator>.</operator><name>exists</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// If a path link then recurse</comment>
                <if_stmt><if>if <condition>(<expr><name><name>linkedInfo</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>storageTypePath</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>target</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>linkDestination</name></name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <comment type="line">// Else it must be a file or special (since we have already checked if it is a link)</comment>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><name><name>target</name><operator>.</operator><name>tablespaceId</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"tablespace links to a file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Identify target as a file</comment>
                    <expr_stmt><expr><name><name>target</name><operator>.</operator><name>path</name></name> <operator>=</operator> <call><name>strPath</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>linkDestination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>target</name><operator>.</operator><name>file</name></name> <operator>=</operator> <call><name>strBase</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>linkDestination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else dummy up the target with a destination so manifestLinkCheck() can be run.  This is so errors about links with</comment>
            <comment type="line">// destinations in PGDATA will take precedence over missing a destination.  We will probably simplify this once the</comment>
            <comment type="line">// migration is done and it doesn't matter which error takes precedence.</comment>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>target</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>linkDestination</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <comment type="line">// Add target and link</comment>
            <expr_stmt><expr><call><name>manifestTargetAdd</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>manifest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>manifestLinkAdd</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>manifest</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Make sure the link is valid</comment>
            <expr_stmt><expr><call><name>manifestLinkCheckOne</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>manifest</name></name></expr></argument>, <argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>linkCheck</name></name></expr></argument>, <argument><expr><call><name>manifestTargetTotal</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>manifest</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// If the link check was successful but the destination does not exist then check it again to generate an error</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>linkedInfo</name><operator>.</operator><name>exists</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name><name>buildData</name><operator>-&gt;</operator><name>storagePg</name></name></expr></argument>, <argument><expr><name>linkPgPath</name></expr></argument>, <argument><expr><operator>.</operator><name>followLink</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Recurse into the link destination</comment>
            <expr_stmt><expr><call><name>manifestBuildInfo</name><argument_list>(<argument><expr><name>buildData</name></expr></argument>, <argument><expr><name>manifestParentName</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>, <argument><expr><name>dbPath</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linkedInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break>break;</break>
        </block_content>}</block>

        <comment type="line">// Skip special files</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <case>case <expr><name>storageTypeSpecial</name></expr>:</case>
            <expr_stmt><expr><call><name>LOG_WARN_FMT</name><argument_list>(<argument><expr><literal type="string">"exclude special file '%s/%s' from backup"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Regular expression constants</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RELATION_EXP</name></cpp:macro>                                                <cpp:value>"[0-9]+(_(fsm|vm)){0,1}(\\.[0-9]+){0,1}"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB_PATH_EXP</name></cpp:macro>                                                                                                                \
    <cpp:value>"(" MANIFEST_TARGET_PGDATA "/(" PG_PATH_GLOBAL "|" PG_PATH_BASE "/[0-9]+)|" MANIFEST_TARGET_PGTBLSPC "/[0-9]+/%s/[0-9]+)"</cpp:value></cpp:define>

<function><type><name>Manifest</name> <modifier>*</modifier></type>
<name>manifestNewBuild</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storagePg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>pgVersion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>pgCatalogVersion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>online</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>checksumPage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>bundle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>excludeList</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Pack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tablespaceList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE</name></expr></argument>, <argument><expr><name>storagePg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>pgVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>pgCatalogVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>online</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>checksumPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING_LIST</name></expr></argument>, <argument><expr><name>excludeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>PACK</name></expr></argument>, <argument><expr><name>tablespaceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>storagePg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pgVersion</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>checksumPage</name> <operator>||</operator> <name>pgVersion</name> <operator>&gt;=</operator> <name>PG_VERSION_93</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Manifest</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>manifestNewInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>info</name></name> <operator>=</operator> <call><name>infoNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backrestVersion</name></name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><name>PROJECT_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgVersion</name></name> <operator>=</operator> <name>pgVersion</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgCatalogVersion</name></name> <operator>=</operator> <name>pgCatalogVersion</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupType</name></name> <operator>=</operator> <name>backupTypeFull</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionOnline</name></name> <operator>=</operator> <name>online</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionChecksumPage</name></name> <operator>=</operator> <call><name>varNewBool</name><argument_list>(<argument><expr><name>checksumPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>bundle</name></name> <operator>=</operator> <name>bundle</name></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Data needed to build the manifest</comment>
            <decl_stmt><decl><type><name>ManifestLinkCheck</name></type> <name>linkCheck</name> <init>= <expr><call><name>manifestLinkCheckInit</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ManifestBuildData</name></type> <name>buildData</name> <init>=
            <expr><block>{
                <expr><operator>.</operator><name>manifest</name> <operator>=</operator> <name>this</name></expr>,
                <expr><operator>.</operator><name>storagePg</name> <operator>=</operator> <name>storagePg</name></expr>,
                <expr><operator>.</operator><name>tablespaceId</name> <operator>=</operator> <call><name>pgTablespaceId</name><argument_list>(<argument><expr><name>pgVersion</name></expr></argument>, <argument><expr><name>pgCatalogVersion</name></expr></argument>)</argument_list></call></expr>,
                <expr><operator>.</operator><name>online</name> <operator>=</operator> <name>online</name></expr>,
                <expr><operator>.</operator><name>checksumPage</name> <operator>=</operator> <name>checksumPage</name></expr>,
                <expr><operator>.</operator><name>tablespaceList</name> <operator>=</operator> <name>tablespaceList</name></expr>,
                <expr><operator>.</operator><name>linkCheck</name> <operator>=</operator> <operator>&amp;</operator><name>linkCheck</name></expr>,
                <expr><operator>.</operator><name>manifestWalName</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><name>MANIFEST_TARGET_PGDATA</name> <literal type="string">"/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>pgWalPath</name><argument_list>(<argument><expr><name>pgVersion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
            }</block></expr></init></decl>;</decl_stmt>

            <comment type="line">// Build expressions to identify databases paths and temp relations</comment>
            <comment type="line">// ---------------------------------------------------------------------------------------------------------------------</comment>
            <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>buildData</name><operator>.</operator><name>tablespaceId</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Expression to identify database paths</comment>
            <expr_stmt><expr><name><name>buildData</name><operator>.</operator><name>dbPathExp</name></name> <operator>=</operator> <call><name>regExpNew</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"^"</literal> <name>DB_PATH_EXP</name> <literal type="string">"$"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>buildData</name><operator>.</operator><name>tablespaceId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Expression to find temp relations</comment>
            <expr_stmt><expr><name><name>buildData</name><operator>.</operator><name>tempRelationExp</name></name> <operator>=</operator> <call><name>regExpNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"^t[0-9]+_"</literal> <name>RELATION_EXP</name> <literal type="string">"$"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Build list of exclusions</comment>
            <comment type="line">// ---------------------------------------------------------------------------------------------------------------------</comment>
            <if_stmt><if>if <condition>(<expr><name>excludeList</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>excludeIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>excludeIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>excludeList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>excludeIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>exclude</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>MANIFEST_TARGET_PGDATA</name> <literal type="string">"/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>excludeList</name></expr></argument>, <argument><expr><name>excludeIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// If the exclusions refers to the contents of a path</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>strEndsWithZ</name><argument_list>(<argument><expr><name>exclude</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>buildData</name><operator>.</operator><name>excludeContent</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name><name>buildData</name><operator>.</operator><name>excludeContent</name></name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt><expr><call><name>strLstAddSub</name><argument_list>(<argument><expr><name><name>buildData</name><operator>.</operator><name>excludeContent</name></name></expr></argument>, <argument><expr><name>exclude</name></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>exclude</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <comment type="line">// Otherwise exclude a single file/link/path</comment>
                    <else>else
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>buildData</name><operator>.</operator><name>excludeSingle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name><name>buildData</name><operator>.</operator><name>excludeSingle</name></name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name><name>buildData</name><operator>.</operator><name>excludeSingle</name></name></expr></argument>, <argument><expr><name>exclude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Build manifest</comment>
            <comment type="line">// ---------------------------------------------------------------------------------------------------------------------</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pgPath</name> <init>= <expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storagePg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StorageInfo</name></type> <name>info</name> <init>= <expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storagePg</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>, <argument><expr><operator>.</operator><name>followLink</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ManifestPath</name></type> <name>path</name> <init>=
            <expr><block>{
                <expr><operator>.</operator><name>name</name> <operator>=</operator> <name>MANIFEST_TARGET_PGDATA_STR</name></expr>,
                <expr><operator>.</operator><name>mode</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>mode</name></name></expr>,
                <expr><operator>.</operator><name>user</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>user</name></name></expr>,
                <expr><operator>.</operator><name>group</name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>group</name></name></expr>,
            }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>manifestPathAdd</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Generate file defaults from base path</comment>
            <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>this-&gt;pub.memContext</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>fileUserDefault</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>fileGroupDefault</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name><name>path</name><operator>.</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>fileModeDefault</name></name> <operator>=</operator> <name><name>path</name><operator>.</operator><name>mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name> <operator>|</operator> <name>S_IRGRP</name><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>ManifestTarget</name></type> <name>target</name> <init>=
            <expr><block>{
                <expr><operator>.</operator><name>name</name> <operator>=</operator> <name>MANIFEST_TARGET_PGDATA_STR</name></expr>,
                <expr><operator>.</operator><name>path</name> <operator>=</operator> <name>pgPath</name></expr>,
                <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>manifestTargetTypePath</name></expr>,
            }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>manifestTargetAdd</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Gather info for the rest of the files/links/paths</comment>
            <decl_stmt><decl><type><name>StorageIterator</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageItr</name> <init>= <expr><call><name>storageNewItrP</name><argument_list>(
                <argument><expr><name>storagePg</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>sortOrder</name> <operator>=</operator> <name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <macro><name>MEM_CONTEXT_TEMP_RESET_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <while>while <condition>(<expr><call><name>storageItrMore</name><argument_list>(<argument><expr><name>storageItr</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>StorageInfo</name></type> <name>info</name> <init>= <expr><call><name>storageItrNext</name><argument_list>(<argument><expr><name>storageItr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name>manifestBuildInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buildData</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGDATA_STR</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Reset the memory context occasionally so we don't use too much memory or slow down processing</comment>
                    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_RESET</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// These may not be in order even if the incoming data was sorted</comment>
            <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fileList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>linkList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>pathList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>targetList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Remove unlogged relations from the manifest.  This can't be done during the initial build because of the requirement</comment>
            <comment type="line">// to check for _init files which will sort after the vast majority of the relation files.  We could check storage for</comment>
            <comment type="line">// each _init file but that would be expensive.</comment>
            <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
            <if_stmt><if>if <condition>(<expr><name>pgVersion</name> <operator>&gt;=</operator> <name>PG_VERSION_91</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>RegExp</name> <modifier>*</modifier></type><name>relationExp</name> <init>= <expr><call><name>regExpNew</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"^"</literal> <name>DB_PATH_EXP</name> <literal type="string">"/"</literal> <name>RELATION_EXP</name> <literal type="string">"$"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>buildData</name><operator>.</operator><name>tablespaceId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fileIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name></type> <name><name>lastRelationFileId</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>                   <comment type="line">// Large enough for a 64-bit unsigned integer</comment>
                <decl_stmt><decl><type><name>bool</name></type> <name>lastRelationFileIdUnlogged</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_MEM</name></cpp:ifdef>
                <comment type="line">// Record the temp context size before the loop begins</comment>
                <decl_stmt><decl><type><name>size_t</name></type> <name>sizeBegin</name> <init>= <expr><call><name>memContextSize</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <while>while <condition>(<expr><name>fileIdx</name> <operator>&lt;</operator> <call><name>manifestFileTotal</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// If this file looks like a relation.  Note that this never matches on _init forks.</comment>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>filePathName</name> <init>= <expr><call><name>manifestFileNameGet</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><call><name>regExpMatch</name><argument_list>(<argument><expr><name>relationExp</name></expr></argument>, <argument><expr><name>filePathName</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// Get the filename (without path)</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name> <init>= <expr><call><name>strBaseZ</name><argument_list>(<argument><expr><name>filePathName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>size_t</name></type> <name>fileNameSize</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <comment type="line">// Strip off the numeric part of the relation</comment>
                        <decl_stmt><decl><type><name>char</name></type> <name><name>relationFileId</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>lastRelationFileId</name></expr></argument>)</argument_list></sizeof></expr>]</index></name></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nameIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

                        <for>for <control>(<init>;</init> <condition><expr><name>nameIdx</name> <operator>&lt;</operator> <name>fileNameSize</name></expr>;</condition> <incr><expr><name>nameIdx</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name><name>fileName</name><index>[<expr><name>nameIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                                <break>break;</break></block_content></block></if></if_stmt>

                            <expr_stmt><expr><name><name>relationFileId</name><index>[<expr><name>nameIdx</name></expr>]</index></name> <operator>=</operator> <name><name>fileName</name><index>[<expr><name>nameIdx</name></expr>]</index></name></expr>;</expr_stmt>
                        </block_content>}</block></for>

                        <expr_stmt><expr><name><name>relationFileId</name><index>[<expr><name>nameIdx</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

                        <comment type="line">// The filename must have characters</comment>
                        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>relationFileId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Store the last relation so it does not need to be found everytime</comment>
                        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>lastRelationFileId</name></expr></argument>, <argument><expr><name>relationFileId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content>
                            <comment type="line">// Determine if the relation is unlogged</comment>
                            <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>relationInit</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(
                                <argument><expr><literal type="string">"%.*s%s_init"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>strSize</name><argument_list>(<argument><expr><name>filePathName</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>fileNameSize</name><operator>)</operator></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>filePathName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>relationFileId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <expr_stmt><expr><name>lastRelationFileIdUnlogged</name> <operator>=</operator> <call><name>manifestFileExists</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>relationInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>strFree</name><argument_list>(<argument><expr><name>relationInit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <comment type="line">// Save the file id so we don't need to do the lookup next time if it doesn't change</comment>
                            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>lastRelationFileId</name></expr></argument>, <argument><expr><name>relationFileId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <comment type="line">// If relation is unlogged then remove it</comment>
                        <if_stmt><if>if <condition>(<expr><name>lastRelationFileIdUnlogged</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>manifestFileRemove</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>filePathName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <continue>continue;</continue>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>

                    <expr_stmt><expr><name>fileIdx</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_MEM</name></cpp:ifdef>
                <comment type="line">// Make sure that the temp context did not grow too much during the loop</comment>
                <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>memContextSize</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <name>sizeBegin</name> <operator>&lt;</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>manifestBuildValidate</name><parameter_list>(<parameter><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>copyStart</name></decl></parameter>, <parameter><decl><type><name>CompressType</name></type> <name>compressType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TIME</name></expr></argument>, <argument><expr><name>copyStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>compressType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>copyStart</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>this-&gt;pub.memContext</argument>)</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Store the delta option.  If true we can skip checks that automatically enable delta.</comment>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name> <operator>=</operator> <call><name>varNewBool</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// If online then add one second to the copy start time to allow for database updates during the last second that the</comment>
        <comment type="line">// manifest was being built.  It's up to the caller to actually wait the remainder of the second, but for comparison</comment>
        <comment type="line">// purposes we want the time when the waiting started.</comment>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupTimestampCopyStart</name></name> <operator>=</operator> <name>copyStart</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionOnline</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

        <comment type="line">// This value is not needed in this function, but it is needed for resumed manifests and this is last place to set it before</comment>
        <comment type="line">// processing begins</comment>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionCompressType</name></name> <operator>=</operator> <name>compressType</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check the manifest for timestamp anomalies that require a delta backup (if delta is not already specified)</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>varBool</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>fileIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fileIdx</name> <operator>&lt;</operator> <call><name>manifestFileTotal</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>fileIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestFile</name></type> <name>file</name> <init>= <expr><call><name>manifestFile</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Check for timestamp in the future</comment>
                <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>timestamp</name></name> <operator>&gt;</operator> <name>copyStart</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>LOG_WARN_FMT</name><argument_list>(
                        <argument><expr><literal type="string">"file '%s' has timestamp (%"</literal> <name>PRId64</name> <literal type="string">") in the future (relative to copy start %"</literal> <name>PRId64</name> <literal type="string">"), enabling delta"</literal>
                            <literal type="string">" checksum"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestPathPg</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>file</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>copyStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name> <operator>=</operator> <name>BOOL_TRUE_VAR</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>manifestBuildIncr</name><parameter_list>(<parameter><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier></type><name>manifestPrior</name></decl></parameter>, <parameter><decl><type><name>BackupType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>archiveStart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>manifestPrior</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>archiveStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>manifestPrior</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>backupTypeDiff</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>backupTypeIncr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>!=</operator> <name>backupTypeDiff</name> <operator>||</operator> <name><name>manifestPrior</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupType</name></name> <operator>==</operator> <name>backupTypeFull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>archiveStart</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>archiveStart</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>this-&gt;pub.memContext</argument>)</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Set prior backup label</comment>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabelPrior</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name><name>manifestPrior</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Copy reference list</comment>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>referenceList</name></name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name><name>manifestPrior</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>referenceList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set diff/incr backup type</comment>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Enable delta if timelines differ</comment>
        <if_stmt><if>if <condition>(<expr><name>archiveStart</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>manifestData</name><argument_list>(<argument><expr><name>manifestPrior</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>archiveStop</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
            <operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><call><name>strSubN</name><argument_list>(<argument><expr><name>archiveStart</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strSubN</name><argument_list>(<argument><expr><call><name>manifestData</name><argument_list>(<argument><expr><name>manifestPrior</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>archiveStop</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOG_WARN_FMT</name><argument_list>(
                <argument><expr><literal type="string">"a timeline switch has occurred since the %s backup, enabling delta checksum\n"</literal>
                <literal type="string">"HINT: this is normal after restoring from backup or promoting a standby."</literal></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestData</name><argument_list>(<argument><expr><name>manifestPrior</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>backupLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name> <operator>=</operator> <name>BOOL_TRUE_VAR</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// Else enable delta if online differs</comment>
        <if type="elseif">else if <condition>(<expr><call><name>manifestData</name><argument_list>(<argument><expr><name>manifestPrior</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>backupOptionOnline</name> <operator>!=</operator> <name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionOnline</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOG_WARN_FMT</name><argument_list>(
                <argument><expr><literal type="string">"the online option has changed since the %s backup, enabling delta checksum"</literal></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestData</name><argument_list>(<argument><expr><name>manifestPrior</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>backupLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name> <operator>=</operator> <name>BOOL_TRUE_VAR</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Check for anomalies between manifests if delta is not already enabled.  This can't be combined with the main comparison</comment>
        <comment type="line">// loop below because delta changes the behavior of that loop.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>varBool</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>fileIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fileIdx</name> <operator>&lt;</operator> <call><name>manifestFileTotal</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>fileIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestFile</name></type> <name>file</name> <init>= <expr><call><name>manifestFile</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// If file was found in prior manifest then perform checks</comment>
                <if_stmt><if>if <condition>(<expr><call><name>manifestFileExists</name><argument_list>(<argument><expr><name>manifestPrior</name></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestFile</name></type> <name>filePrior</name> <init>= <expr><call><name>manifestFileFind</name><argument_list>(<argument><expr><name>manifestPrior</name></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Check for timestamp earlier than the prior backup</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>timestamp</name></name> <operator>&lt;</operator> <name><name>filePrior</name><operator>.</operator><name>timestamp</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>LOG_WARN_FMT</name><argument_list>(
                            <argument><expr><literal type="string">"file '%s' has timestamp earlier than prior backup (prior %"</literal> <name>PRId64</name> <literal type="string">", current %"</literal> <name>PRId64</name> <literal type="string">"), enabling"</literal>
                                <literal type="string">" delta checksum"</literal></expr></argument>,
                            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestPathPg</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>filePrior</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>file</name><operator>.</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name> <operator>=</operator> <name>BOOL_TRUE_VAR</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>

                    <comment type="line">// Check for size change with no timestamp change</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <name><name>filePrior</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name><name>file</name><operator>.</operator><name>timestamp</name></name> <operator>==</operator> <name><name>filePrior</name><operator>.</operator><name>timestamp</name></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>LOG_WARN_FMT</name><argument_list>(
                            <argument><expr><literal type="string">"file '%s' has same timestamp (%"</literal> <name>PRId64</name> <literal type="string">") as prior but different size (prior %"</literal> <name>PRIu64</name> <literal type="string">", current"</literal>
                                <literal type="string">" %"</literal> <name>PRIu64</name> <literal type="string">"), enabling delta checksum"</literal></expr></argument>,
                            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>manifestPathPg</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>file</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name><name>filePrior</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name> <operator>=</operator> <name>BOOL_TRUE_VAR</name></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Find files to reference in the prior manifest:</comment>
        <comment type="line">// 1) that don't need to be copied because delta is disabled and the size and timestamp match or size matches and is zero</comment>
        <comment type="line">// 2) where delta is enabled and size matches so checksum will be verified during backup and the file copied on mismatch</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>delta</name> <init>= <expr><call><name>varBool</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>fileIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fileIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fileList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>fileIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ManifestFile</name></type> <name>file</name> <init>= <expr><call><name>manifestFile</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Check if prior file can be used</comment>
            <if_stmt><if>if <condition>(<expr><call><name>manifestFileExists</name><argument_list>(<argument><expr><name>manifestPrior</name></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestFile</name></type> <name>filePrior</name> <init>= <expr><call><name>manifestFileFind</name><argument_list>(<argument><expr><name>manifestPrior</name></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>copy</name></name> <operator>&amp;&amp;</operator> <name><name>file</name><operator>.</operator><name>size</name></name> <operator>==</operator> <name><name>filePrior</name><operator>.</operator><name>size</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>delta</name> <operator>||</operator> <name><name>file</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>file</name><operator>.</operator><name>timestamp</name></name> <operator>==</operator> <name><name>filePrior</name><operator>.</operator><name>timestamp</name></name><operator>)</operator></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>file</name><operator>.</operator><name>sizeRepo</name></name> <operator>=</operator> <name><name>filePrior</name><operator>.</operator><name>sizeRepo</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>checksumSha1</name></name></expr></argument>, <argument><expr><name><name>filePrior</name><operator>.</operator><name>checksumSha1</name></name></expr></argument>, <argument><expr><name>HASH_TYPE_SHA1_SIZE_HEX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>file</name><operator>.</operator><name>reference</name></name> <operator>=</operator> <ternary><condition><expr><name><name>filePrior</name><operator>.</operator><name>reference</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>filePrior</name><operator>.</operator><name>reference</name></name></expr> </then><else>: <expr><name><name>manifestPrior</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabel</name></name></expr></else></ternary></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>file</name><operator>.</operator><name>checksumPage</name></name> <operator>=</operator> <name><name>filePrior</name><operator>.</operator><name>checksumPage</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>file</name><operator>.</operator><name>checksumPageError</name></name> <operator>=</operator> <name><name>filePrior</name><operator>.</operator><name>checksumPageError</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>file</name><operator>.</operator><name>checksumPageErrorList</name></name> <operator>=</operator> <name><name>filePrior</name><operator>.</operator><name>checksumPageErrorList</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>file</name><operator>.</operator><name>bundleId</name></name> <operator>=</operator> <name><name>filePrior</name><operator>.</operator><name>bundleId</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>file</name><operator>.</operator><name>bundleOffset</name></name> <operator>=</operator> <name><name>filePrior</name><operator>.</operator><name>bundleOffset</name></name></expr>;</expr_stmt>

                    <comment type="line">// Perform delta if the file size is not zero</comment>
                    <expr_stmt><expr><name><name>file</name><operator>.</operator><name>delta</name></name> <operator>=</operator> <name>delta</name> <operator>&amp;&amp;</operator> <name><name>file</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

                    <comment type="line">// Copy if the file has changed or delta</comment>
                    <expr_stmt><expr><name><name>file</name><operator>.</operator><name>copy</name></name> <operator>=</operator> <operator>(</operator><name><name>file</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>file</name><operator>.</operator><name>timestamp</name></name> <operator>!=</operator> <name><name>filePrior</name><operator>.</operator><name>timestamp</name></name><operator>)</operator> <operator>||</operator> <name><name>file</name><operator>.</operator><name>delta</name></name></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>manifestFileUpdate</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>manifestBuildComplete</name><parameter_list>(
    <parameter><decl><type><name>Manifest</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>timestampStart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lsnStart</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>archiveStart</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>timestampStop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lsnStop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>archiveStop</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>pgId</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>pgSystemId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Pack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dbList</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>optionArchiveCheck</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>optionArchiveCopy</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>optionBufferSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>optionCompressLevel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>optionCompressLevelNetwork</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>optionHardLink</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>optionProcessMax</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>optionStandby</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>KeyValue</name> <modifier>*</modifier><specifier>const</specifier></type> <name>annotation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TIME</name></expr></argument>, <argument><expr><name>timestampStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>lsnStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>archiveStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TIME</name></expr></argument>, <argument><expr><name>timestampStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>lsnStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>archiveStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>pgId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name>pgSystemId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>PACK</name></expr></argument>, <argument><expr><name>dbList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>optionArchiveCheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>optionArchiveCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>optionBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionCompressLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionCompressLevelNetwork</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>optionHardLink</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionProcessMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>optionStandby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>KEY_VALUE</name></expr></argument>, <argument><expr><name>annotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>this-&gt;pub.memContext</argument>)</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Save info</comment>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupTimestampStart</name></name> <operator>=</operator> <name>timestampStart</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>lsnStart</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>lsnStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>archiveStart</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>archiveStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupTimestampStop</name></name> <operator>=</operator> <name>timestampStop</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>lsnStop</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>lsnStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>archiveStop</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>archiveStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgId</name></name> <operator>=</operator> <name>pgId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgSystemId</name></name> <operator>=</operator> <name>pgSystemId</name></expr>;</expr_stmt>

        <comment type="line">// Save db list</comment>
        <if_stmt><if>if <condition>(<expr><name>dbList</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>PackRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>read</name> <init>= <expr><call><name>pckReadNew</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <while>while <condition>(<expr><operator>!</operator><call><name>pckReadNullP</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>pckReadArrayBeginP</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>id</name> <init>= <expr><call><name>pckReadU32P</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name> <init>= <expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>lastSystemId</name> <init>= <expr><call><name>pckReadU32P</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>pckReadArrayEndP</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <macro><name>manifestDbAdd</name><argument_list>(<argument>this</argument>, <argument>&amp;(ManifestDb){.id = id</argument>, <argument>.name = name</argument>, <argument>.lastSystemId = lastSystemId}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            </block_content>}</block></while>

            <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dbList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Save annotations</comment>
        <if_stmt><if>if <condition>(<expr><name>annotation</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>annotation</name></name> <operator>=</operator> <call><name>varNewKv</name><argument_list>(<argument><expr><call><name>kvNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>KeyValue</name> <modifier>*</modifier><specifier>const</specifier></type> <name>manifestAnnotationKv</name> <init>= <expr><call><name>varKv</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>annotation</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>VariantList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>annotationKeyList</name> <init>= <expr><call><name>kvKeyList</name><argument_list>(<argument><expr><name>annotation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>keyIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>keyIdx</name> <operator>&lt;</operator> <call><name>varLstSize</name><argument_list>(<argument><expr><name>annotationKeyList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>keyIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier><specifier>const</specifier></type> <name>key</name> <init>= <expr><call><name>varLstGet</name><argument_list>(<argument><expr><name>annotationKeyList</name></expr></argument>, <argument><expr><name>keyIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name> <init>= <expr><call><name>kvGet</name><argument_list>(<argument><expr><name>annotation</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Skip empty values</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEmpty</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>kvPut</name><argument_list>(<argument><expr><name>manifestAnnotationKv</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>

            <comment type="line">// Clean field if there are no annotations to save</comment>
            <if_stmt><if>if <condition>(<expr><call><name>varLstSize</name><argument_list>(<argument><expr><call><name>kvKeyList</name><argument_list>(<argument><expr><name>manifestAnnotationKv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>annotation</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Save options</comment>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionArchiveCheck</name></name> <operator>=</operator> <name>optionArchiveCheck</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionArchiveCopy</name></name> <operator>=</operator> <name>optionArchiveCopy</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionBufferSize</name></name> <operator>=</operator> <call><name>varNewUInt64</name><argument_list>(<argument><expr><name>optionBufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionCompressLevel</name></name> <operator>=</operator> <call><name>varNewUInt</name><argument_list>(<argument><expr><name>optionCompressLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionCompressLevelNetwork</name></name> <operator>=</operator> <call><name>varNewUInt</name><argument_list>(<argument><expr><name>optionCompressLevelNetwork</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionHardLink</name></name> <operator>=</operator> <name>optionHardLink</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionProcessMax</name></name> <operator>=</operator> <call><name>varNewUInt</name><argument_list>(<argument><expr><name>optionProcessMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionStandby</name></name> <operator>=</operator> <call><name>varNewBool</name><argument_list>(<argument><expr><name>optionStandby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_TARGET_TYPE_LINK</name></cpp:macro>                                   <cpp:value>"link"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_TARGET_TYPE_PATH</name></cpp:macro>                                   <cpp:value>"path"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_SECTION_BACKUP</name></cpp:macro>                                     <cpp:value>"backup"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_SECTION_BACKUP_DB</name></cpp:macro>                                  <cpp:value>"backup:db"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_SECTION_BACKUP_OPTION</name></cpp:macro>                              <cpp:value>"backup:option"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_SECTION_BACKUP_TARGET</name></cpp:macro>                              <cpp:value>"backup:target"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_SECTION_DB</name></cpp:macro>                                         <cpp:value>"db"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_SECTION_METADATA</name></cpp:macro>                                   <cpp:value>"metadata"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_SECTION_TARGET_FILE</name></cpp:macro>                                <cpp:value>"target:file"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_SECTION_TARGET_FILE_DEFAULT</name></cpp:macro>                        <cpp:value>"target:file:default"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_SECTION_TARGET_LINK</name></cpp:macro>                                <cpp:value>"target:link"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_SECTION_TARGET_LINK_DEFAULT</name></cpp:macro>                        <cpp:value>"target:link:default"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_SECTION_TARGET_PATH</name></cpp:macro>                                <cpp:value>"target:path"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_SECTION_TARGET_PATH_DEFAULT</name></cpp:macro>                        <cpp:value>"target:path:default"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_ANNOTATION</name></cpp:macro>                                     <cpp:value>"annotation"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_BACKUP_ARCHIVE_START</name></cpp:macro>                           <cpp:value>"backup-archive-start"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_BACKUP_ARCHIVE_STOP</name></cpp:macro>                            <cpp:value>"backup-archive-stop"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_BACKUP_BUNDLE</name></cpp:macro>                                  <cpp:value>"backup-bundle"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_BACKUP_LABEL</name></cpp:macro>                                   <cpp:value>"backup-label"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_BACKUP_LSN_START</name></cpp:macro>                               <cpp:value>"backup-lsn-start"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_BACKUP_LSN_STOP</name></cpp:macro>                                <cpp:value>"backup-lsn-stop"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_BACKUP_PRIOR</name></cpp:macro>                                   <cpp:value>"backup-prior"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_BACKUP_REFERENCE</name></cpp:macro>                               <cpp:value>"backup-reference"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_BACKUP_TIMESTAMP_COPY_START</name></cpp:macro>                    <cpp:value>"backup-timestamp-copy-start"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_BACKUP_TIMESTAMP_START</name></cpp:macro>                         <cpp:value>"backup-timestamp-start"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_BACKUP_TIMESTAMP_STOP</name></cpp:macro>                          <cpp:value>"backup-timestamp-stop"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_BACKUP_TYPE</name></cpp:macro>                                    <cpp:value>"backup-type"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_BUNDLE_ID</name></cpp:macro>                                      <cpp:value>STRID5("bni", 0x25c20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_BUNDLE_OFFSET</name></cpp:macro>                                  <cpp:value>STRID5("bno", 0x3dc20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_CHECKSUM</name></cpp:macro>                                       <cpp:value>STRID5("checksum", 0x6d66b195030)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_CHECKSUM_PAGE</name></cpp:macro>                                  <cpp:value>"checksum-page"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_CHECKSUM_PAGE_ERROR</name></cpp:macro>                            <cpp:value>"checksum-page-error"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_DB_CATALOG_VERSION</name></cpp:macro>                             <cpp:value>"db-catalog-version"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_DB_ID</name></cpp:macro>                                          <cpp:value>"db-id"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_DB_LAST_SYSTEM_ID</name></cpp:macro>                              <cpp:value>"db-last-system-id"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_DB_SYSTEM_ID</name></cpp:macro>                                   <cpp:value>"db-system-id"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_DB_VERSION</name></cpp:macro>                                     <cpp:value>"db-version"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_DESTINATION</name></cpp:macro>                                    <cpp:value>STRID5("destination", 0x39e9a05c9a4ca40)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_FILE</name></cpp:macro>                                           <cpp:value>STRID5("file", 0x2b1260)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_GROUP</name></cpp:macro>                                          <cpp:value>"group"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_MODE</name></cpp:macro>                                           <cpp:value>"mode"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_PATH</name></cpp:macro>                                           <cpp:value>STRID5("path", 0x450300)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_REFERENCE</name></cpp:macro>                                      <cpp:value>STRID5("reference", 0x51b8b2298b20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_SIZE</name></cpp:macro>                                           <cpp:value>STRID5("size", 0x2e9330)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_SIZE_REPO</name></cpp:macro>                                      <cpp:value>STRID5("repo-size", 0x5d267b7c0b20)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_TABLESPACE_ID</name></cpp:macro>                                  <cpp:value>"tablespace-id"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_TABLESPACE_NAME</name></cpp:macro>                                <cpp:value>"tablespace-name"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_TIMESTAMP</name></cpp:macro>                                      <cpp:value>STRID5("timestamp", 0x10686932b5340)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_TYPE</name></cpp:macro>                                           <cpp:value>STRID5("type", 0x2c3340)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_USER</name></cpp:macro>                                           <cpp:value>"user"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_OPTION_ARCHIVE_CHECK</name></cpp:macro>                           <cpp:value>"option-archive-check"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_OPTION_ARCHIVE_COPY</name></cpp:macro>                            <cpp:value>"option-archive-copy"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_OPTION_BACKUP_STANDBY</name></cpp:macro>                          <cpp:value>"option-backup-standby"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_OPTION_BUFFER_SIZE</name></cpp:macro>                             <cpp:value>"option-buffer-size"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_OPTION_CHECKSUM_PAGE</name></cpp:macro>                           <cpp:value>"option-checksum-page"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_OPTION_COMPRESS</name></cpp:macro>                                <cpp:value>"option-compress"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_OPTION_COMPRESS_TYPE</name></cpp:macro>                           <cpp:value>"option-compress-type"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_OPTION_COMPRESS_LEVEL</name></cpp:macro>                          <cpp:value>"option-compress-level"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_OPTION_COMPRESS_LEVEL_NETWORK</name></cpp:macro>                  <cpp:value>"option-compress-level-network"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_OPTION_DELTA</name></cpp:macro>                                   <cpp:value>"option-delta"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_OPTION_HARDLINK</name></cpp:macro>                                <cpp:value>"option-hardlink"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_OPTION_ONLINE</name></cpp:macro>                                  <cpp:value>"option-online"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANIFEST_KEY_OPTION_PROCESS_MAX</name></cpp:macro>                             <cpp:value>"option-process-max"</cpp:value></cpp:define>

<comment type="line">// Keep track of which values were found during load and which need to be loaded from defaults. There is no point in having</comment>
<comment type="line">// multiple structs since most of the fields are the same and the size shouldn't be more than 4/8 bytes.</comment>
<typedef>typedef <type><struct>struct <name>ManifestLoadFound</name>
<block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>group</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>mode</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>user</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block></struct></type> <name>ManifestLoadFound</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ManifestLoadData</name>
<block>{
    <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name></decl>;</decl_stmt>                                         <comment type="line">// Mem context for data needed only during load</comment>
    <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name></decl>;</decl_stmt>                                             <comment type="line">// Manifest info</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>referenceListFound</name></decl>;</decl_stmt>                                        <comment type="line">// Was a reference list found?</comment>

    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>linkFoundList</name></decl>;</decl_stmt>                                            <comment type="line">// Values found in links</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier></type><name>linkGroupDefault</name></decl>;</decl_stmt>                                <comment type="line">// Link default group</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier></type><name>linkUserDefault</name></decl>;</decl_stmt>                                 <comment type="line">// Link default user</comment>

    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>pathFoundList</name></decl>;</decl_stmt>                                            <comment type="line">// Values found in paths</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier></type><name>pathGroupDefault</name></decl>;</decl_stmt>                                <comment type="line">// Path default group</comment>
    <decl_stmt><decl><type><name>mode_t</name></type> <name>pathModeDefault</name></decl>;</decl_stmt>                                         <comment type="line">// Path default mode</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier></type><name>pathUserDefault</name></decl>;</decl_stmt>                                 <comment type="line">// Path default user</comment>
}</block></struct></type> <name>ManifestLoadData</name>;</typedef>

<comment type="line">// Helper to transform a variant that could be boolean or string into a string.  If the boolean is false return NULL else return</comment>
<comment type="line">// the string.  The boolean cannot be true.</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>String</name> <modifier>*</modifier></type>
<name>manifestOwnerGet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier></type><name>owner</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>owner</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If bool then it should be false.  This indicates that the owner could not be mapped to a name during the backup.</comment>
    <if_stmt><if>if <condition>(<expr><call><name>varType</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>varTypeBool</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><operator>!</operator><call><name>varBool</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"owner bool must be false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>varStr</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Helper to check the variant type of owner and duplicate (call in the containing context)</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>Variant</name> <modifier>*</modifier></type>
<name>manifestOwnerDefaultGet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier></type><name>ownerDefault</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><name>ownerDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ownerDefault</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Bool = false means the owner was not mapped to a name</comment>
    <if_stmt><if>if <condition>(<expr><call><name>varType</name><argument_list>(<argument><expr><name>ownerDefault</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>varTypeBool</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Value must be false</comment>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><operator>!</operator><call><name>varBool</name><argument_list>(<argument><expr><name>ownerDefault</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"owner bool must be false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><name>BOOL_FALSE_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Return a duplicate of the owner passed in</comment>
    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><call><name>varDup</name><argument_list>(<argument><expr><name>ownerDefault</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>manifestLoadCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callbackData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>section</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>callbackData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>callbackData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>section</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ManifestLoadData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>loadData</name> <init>= <expr><operator>(</operator><name>ManifestLoadData</name> <operator>*</operator><operator>)</operator><name>callbackData</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier><specifier>const</specifier></type> <name>manifest</name> <init>= <expr><name><name>loadData</name><operator>-&gt;</operator><name>manifest</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_FILE</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ManifestFile</name></type> <name>file</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>key</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JsonRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>json</name> <init>= <expr><call><name>jsonReadNew</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>jsonReadObjectBegin</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Bundle info</comment>
        <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BUNDLE_ID</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>file</name><operator>.</operator><name>bundleId</name></name> <operator>=</operator> <call><name>jsonReadUInt64</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BUNDLE_OFFSET</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>file</name><operator>.</operator><name>bundleOffset</name></name> <operator>=</operator> <call><name>jsonReadUInt64</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// The checksum might not exist if this is a partial save that was done during the backup to preserve checksums for already</comment>
        <comment type="line">// backed up files</comment>
        <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_CHECKSUM</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>checksumSha1</name></name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>jsonReadStr</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HASH_TYPE_SHA1_SIZE_HEX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Page checksum errors</comment>
        <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_CHECKSUM_PAGE</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>file</name><operator>.</operator><name>checksumPage</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>file</name><operator>.</operator><name>checksumPageError</name></name> <operator>=</operator> <operator>!</operator><call><name>jsonReadBool</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_CHECKSUM_PAGE_ERROR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>file</name><operator>.</operator><name>checksumPageErrorList</name></name> <operator>=</operator> <call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>jsonReadVar</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Group</comment>
        <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_GROUP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>file</name><operator>.</operator><name>group</name></name> <operator>=</operator> <call><name>manifestOwnerGet</name><argument_list>(<argument><expr><call><name>jsonReadVar</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>file</name><operator>.</operator><name>group</name></name> <operator>=</operator> <name><name>manifest</name><operator>-&gt;</operator><name>fileGroupDefault</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// Mode</comment>
        <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_MODE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>file</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <call><name>cvtZToMode</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>jsonReadStr</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>file</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name><name>manifest</name><operator>-&gt;</operator><name>fileModeDefault</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// Reference</comment>
        <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_REFERENCE</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>file</name><operator>.</operator><name>reference</name></name> <operator>=</operator> <call><name>jsonReadStr</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>loadData</name><operator>-&gt;</operator><name>referenceListFound</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>file</name><operator>.</operator><name>reference</name></name> <operator>=</operator> <call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>referenceList</name></name></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// If "repo-size" is not present in the manifest file, then it is the same as size (i.e. uncompressed) - to save space,</comment>
        <comment type="line">// the repo-size is only stored in the manifest file if it is different than size.</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>sizeRepoExists</name> <init>= <expr><call><name>jsonReadKeyExpectStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_SIZE_REPO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>sizeRepoExists</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>file</name><operator>.</operator><name>sizeRepo</name></name> <operator>=</operator> <call><name>jsonReadUInt64</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Size is required so error if it is not present. Older versions removed the size before the backup to ensure that the</comment>
        <comment type="line">// manifest was updated during the backup, so size can be missing in partial manifests. This error will prevent older</comment>
        <comment type="line">// partials from being resumed.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jsonReadKeyExpectStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"missing size for file '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>file</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>jsonReadUInt64</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// If repo size did not exist then</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sizeRepoExists</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>file</name><operator>.</operator><name>sizeRepo</name></name> <operator>=</operator> <name><name>file</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// If file size is zero then assign the static zero hash</comment>
        <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>checksumSha1</name></name></expr></argument>, <argument><expr><name>HASH_TYPE_SHA1_ZERO</name></expr></argument>, <argument><expr><name>HASH_TYPE_SHA1_SIZE_HEX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Timestamp is required so error if it is not present</comment>
        <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>file</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>jsonReadInt64</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"missing timestamp for file '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// User</comment>
        <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_USER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>file</name><operator>.</operator><name>user</name></name> <operator>=</operator> <call><name>manifestOwnerGet</name><argument_list>(<argument><expr><call><name>jsonReadVar</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>file</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name><name>manifest</name><operator>-&gt;</operator><name>fileUserDefault</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><call><name>manifestFileAdd</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_PATH</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ManifestPath</name></type> <name>path</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>key</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ManifestLoadFound</name></type> <name>valueFound</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JsonRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>json</name> <init>= <expr><call><name>jsonReadNew</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>jsonReadObjectBegin</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_GROUP</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>valueFound</name><operator>.</operator><name>group</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>path</name><operator>.</operator><name>group</name></name> <operator>=</operator> <call><name>manifestOwnerGet</name><argument_list>(<argument><expr><call><name>jsonReadVar</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_MODE</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>valueFound</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>path</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <call><name>cvtZToMode</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>jsonReadStr</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_USER</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>valueFound</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>path</name><operator>.</operator><name>user</name></name> <operator>=</operator> <call><name>manifestOwnerGet</name><argument_list>(<argument><expr><call><name>jsonReadVar</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>loadData</name><operator>-&gt;</operator><name>pathFoundList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valueFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manifestPathAdd</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_LINK</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ManifestLink</name></type> <name>link</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>key</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ManifestLoadFound</name></type> <name>valueFound</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JsonRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>json</name> <init>= <expr><call><name>jsonReadNew</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>jsonReadObjectBegin</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Link destination</comment>
        <expr_stmt><expr><name><name>link</name><operator>.</operator><name>destination</name></name> <operator>=</operator> <call><name>jsonReadStr</name><argument_list>(<argument><expr><call><name>jsonReadKeyRequireStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_DESTINATION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Group</comment>
        <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_GROUP</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>valueFound</name><operator>.</operator><name>group</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>link</name><operator>.</operator><name>group</name></name> <operator>=</operator> <call><name>manifestOwnerGet</name><argument_list>(<argument><expr><call><name>jsonReadVar</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// User</comment>
        <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_USER</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>valueFound</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>link</name><operator>.</operator><name>user</name></name> <operator>=</operator> <call><name>manifestOwnerGet</name><argument_list>(<argument><expr><call><name>jsonReadVar</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>loadData</name><operator>-&gt;</operator><name>linkFoundList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>valueFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manifestLinkAdd</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_FILE_DEFAULT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>manifest-&gt;pub.memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_GROUP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>fileGroupDefault</name></name> <operator>=</operator> <call><name>manifestOwnerGet</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_MODE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>fileModeDefault</name></name> <operator>=</operator> <call><name>cvtZToMode</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_USER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>fileUserDefault</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><call><name>manifestOwnerGet</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_PATH_DEFAULT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>loadData-&gt;memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_GROUP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>loadData</name><operator>-&gt;</operator><name>pathGroupDefault</name></name> <operator>=</operator> <call><name>manifestOwnerDefaultGet</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_MODE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>loadData</name><operator>-&gt;</operator><name>pathModeDefault</name></name> <operator>=</operator> <call><name>cvtZToMode</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_USER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>loadData</name><operator>-&gt;</operator><name>pathUserDefault</name></name> <operator>=</operator> <call><name>manifestOwnerDefaultGet</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_LINK_DEFAULT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>loadData-&gt;memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_GROUP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>loadData</name><operator>-&gt;</operator><name>linkGroupDefault</name></name> <operator>=</operator> <call><name>manifestOwnerDefaultGet</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_USER</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>loadData</name><operator>-&gt;</operator><name>linkUserDefault</name></name> <operator>=</operator> <call><name>manifestOwnerDefaultGet</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_TARGET</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ManifestTarget</name></type> <name>target</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>key</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JsonRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>json</name> <init>= <expr><call><name>jsonReadNew</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>jsonReadObjectBegin</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// File</comment>
        <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_FILE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>target</name><operator>.</operator><name>file</name></name> <operator>=</operator> <call><name>jsonReadStr</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Path</comment>
        <expr_stmt><expr><name><name>target</name><operator>.</operator><name>path</name></name> <operator>=</operator> <call><name>jsonReadStr</name><argument_list>(<argument><expr><call><name>jsonReadKeyRequireStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_PATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Tablespace oid</comment>
        <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_TABLESPACE_ID</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>target</name><operator>.</operator><name>tablespaceId</name></name> <operator>=</operator> <call><name>cvtZToUInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>jsonReadStr</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>target</name><operator>.</operator><name>tablespaceName</name></name> <operator>=</operator> <call><name>jsonReadStr</name><argument_list>(<argument><expr><call><name>jsonReadKeyRequireZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_TABLESPACE_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Tablespace type</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>targetType</name> <init>= <expr><call><name>jsonReadStr</name><argument_list>(<argument><expr><call><name>jsonReadKeyRequireStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>targetType</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_TYPE_LINK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEqZ</name><argument_list>(<argument><expr><name>targetType</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_TYPE_PATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>target</name><operator>.</operator><name>type</name></name> <operator>=</operator> <ternary><condition><expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>targetType</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_TYPE_PATH</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>manifestTargetTypePath</name></expr> </then><else>: <expr><name>manifestTargetTypeLink</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>manifestTargetAdd</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_DB</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ManifestDb</name></type> <name>db</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>key</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JsonRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>json</name> <init>= <expr><call><name>jsonReadNew</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>jsonReadObjectBegin</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Database oid</comment>
        <expr_stmt><expr><name><name>db</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name>jsonReadUInt</name><argument_list>(<argument><expr><call><name>jsonReadKeyRequireZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_DB_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Last system oid</comment>
        <expr_stmt><expr><name><name>db</name><operator>.</operator><name>lastSystemId</name></name> <operator>=</operator> <call><name>jsonReadUInt</name><argument_list>(<argument><expr><call><name>jsonReadKeyRequireZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_DB_LAST_SYSTEM_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>manifestDbAdd</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_METADATA</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>manifest-&gt;pub.memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_ANNOTATION</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>annotation</name></name> <operator>=</operator> <call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>manifest-&gt;pub.memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_ARCHIVE_START</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>archiveStart</name></name> <operator>=</operator> <call><name>varStr</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_ARCHIVE_STOP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>archiveStop</name></name> <operator>=</operator> <call><name>varStr</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_BUNDLE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>bundle</name></name> <operator>=</operator> <call><name>varBool</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_LABEL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabel</name></name> <operator>=</operator> <call><name>varStr</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_LSN_START</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>lsnStart</name></name> <operator>=</operator> <call><name>varStr</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_LSN_STOP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>lsnStop</name></name> <operator>=</operator> <call><name>varStr</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_PRIOR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabelPrior</name></name> <operator>=</operator> <call><name>varStr</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_REFERENCE</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>referenceList</name></name> <operator>=</operator> <call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>loadData</name><operator>-&gt;</operator><name>referenceListFound</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_TIMESTAMP_COPY_START</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupTimestampCopyStart</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>varUInt64</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_TIMESTAMP_START</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupTimestampStart</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>varUInt64</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_TIMESTAMP_STOP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupTimestampStop</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>varUInt64</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_TYPE</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupType</name></name> <operator>=</operator> <operator>(</operator><name>BackupType</name><operator>)</operator><call><name>strIdFromStr</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name><argument_list>(
                    <argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupType</name></name> <operator>==</operator> <name>backupTypeFull</name> <operator>||</operator> <name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupType</name></name> <operator>==</operator> <name>backupTypeDiff</name> <operator>||</operator>
                    <name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupType</name></name> <operator>==</operator> <name>backupTypeIncr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_DB</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_DB_ID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgId</name></name> <operator>=</operator> <call><name>varUIntForce</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_DB_SYSTEM_ID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgSystemId</name></name> <operator>=</operator> <call><name>varUInt64</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_DB_CATALOG_VERSION</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgCatalogVersion</name></name> <operator>=</operator> <call><name>varUIntForce</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_DB_VERSION</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgVersion</name></name> <operator>=</operator> <call><name>pgVersionFromStr</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_OPTION</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>manifest-&gt;pub.memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Required options</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_ARCHIVE_CHECK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionArchiveCheck</name></name> <operator>=</operator> <call><name>varBool</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_ARCHIVE_COPY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionArchiveCopy</name></name> <operator>=</operator> <call><name>varBool</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <comment type="line">// Historically this option meant to add gz compression</comment>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_COMPRESS</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionCompressType</name></name> <operator>=</operator> <ternary><condition><expr><call><name>varBool</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>compressTypeGz</name></expr> </then><else>: <expr><name>compressTypeNone</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>
            <comment type="line">// This new option allows any type of compression to be specified.  It must be parsed after the option above so the</comment>
            <comment type="line">// value does not get overwritten.  Since options are stored in alpha order this should always be true.</comment>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_COMPRESS_TYPE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionCompressType</name></name> <operator>=</operator> <call><name>compressTypeEnum</name><argument_list>(<argument><expr><call><name>strIdFromStr</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_HARDLINK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionHardLink</name></name> <operator>=</operator> <call><name>varBool</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_ONLINE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionOnline</name></name> <operator>=</operator> <call><name>varBool</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <comment type="line">// Options that were added after v1.00 and may not be present in every manifest</comment>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_BACKUP_STANDBY</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionStandby</name></name> <operator>=</operator> <call><name>varNewBool</name><argument_list>(<argument><expr><call><name>varBool</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionBufferSize</name></name> <operator>=</operator> <call><name>varNewUInt</name><argument_list>(<argument><expr><call><name>varUIntForce</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_CHECKSUM_PAGE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionChecksumPage</name></name> <operator>=</operator> <call><name>varDup</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_COMPRESS_LEVEL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionCompressLevel</name></name> <operator>=</operator> <call><name>varNewUInt</name><argument_list>(<argument><expr><call><name>varUIntForce</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_COMPRESS_LEVEL_NETWORK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionCompressLevelNetwork</name></name> <operator>=</operator> <call><name>varNewUInt</name><argument_list>(<argument><expr><call><name>varUIntForce</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_DELTA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name> <operator>=</operator> <call><name>varDup</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_PROCESS_MAX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionProcessMax</name></name> <operator>=</operator> <call><name>varNewUInt</name><argument_list>(<argument><expr><call><name>varUIntForce</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Manifest</name> <modifier>*</modifier></type>
<name>manifestNewLoad</name><parameter_list>(<parameter><decl><type><name>IoRead</name> <modifier>*</modifier></type><name>read</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_READ</name></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>read</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Manifest</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>manifestNewInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Load the manifest</comment>
        <decl_stmt><decl><type><name>ManifestLoadData</name></type> <name>loadData</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>memContext</name> <operator>=</operator> <call><name>memContextNewP</name><argument_list>(<argument><expr><literal type="string">"load"</literal></expr></argument>, <argument><expr><operator>.</operator><name>childQty</name> <operator>=</operator> <name>MEM_CONTEXT_QTY_MAX</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>manifest</name> <operator>=</operator> <name>this</name></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set file defaults that will be updated when we know what the real defaults are. These need to be set to values that are</comment>
        <comment type="line">// not valid for actual names or modes.</comment>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>fileUserDefault</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"@"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>fileGroupDefault</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>fileUserDefault</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>fileModeDefault</name></name> <operator>=</operator> <operator>(</operator><name>mode_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>loadData.memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name><name>loadData</name><operator>.</operator><name>linkFoundList</name></name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ManifestLoadFound</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>loadData</name><operator>.</operator><name>pathFoundList</name></name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ManifestLoadFound</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>info</name></name> <operator>=</operator> <call><name>infoNewLoad</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>manifestLoadCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loadData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backrestVersion</name></name> <operator>=</operator> <call><name>infoBackrestVersion</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add the label to the reference list in case the manifest was created before 2.42 when the explicit reference list was</comment>
        <comment type="line">// added. Most references are added when the file list is loaded but the current backup will never be referenced from a file</comment>
        <comment type="line">// (the reference is assumed) so it must be added here.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>loadData</name><operator>.</operator><name>referenceListFound</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>referenceList</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Process link defaults</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>linkIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>linkIdx</name> <operator>&lt;</operator> <call><name>manifestLinkTotal</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>linkIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ManifestLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>linkList</name></name></expr></argument>, <argument><expr><name>linkIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ManifestLoadFound</name> <modifier>*</modifier></type><name>found</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>loadData</name><operator>.</operator><name>linkFoundList</name></name></expr></argument>, <argument><expr><name>linkIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>found</name><operator>-&gt;</operator><name>group</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <call><name>manifestOwnerCache</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>manifestOwnerGet</name><argument_list>(<argument><expr><name><name>loadData</name><operator>.</operator><name>linkGroupDefault</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>found</name><operator>-&gt;</operator><name>user</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <call><name>manifestOwnerCache</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>manifestOwnerGet</name><argument_list>(<argument><expr><name><name>loadData</name><operator>.</operator><name>linkUserDefault</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="line">// Process path defaults</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>pathIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pathIdx</name> <operator>&lt;</operator> <call><name>manifestPathTotal</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>pathIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ManifestPath</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>pathList</name></name></expr></argument>, <argument><expr><name>pathIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ManifestLoadFound</name> <modifier>*</modifier></type><name>found</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>loadData</name><operator>.</operator><name>pathFoundList</name></name></expr></argument>, <argument><expr><name>pathIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>found</name><operator>-&gt;</operator><name>group</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>group</name></name> <operator>=</operator> <call><name>manifestOwnerCache</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>manifestOwnerGet</name><argument_list>(<argument><expr><name><name>loadData</name><operator>.</operator><name>pathGroupDefault</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>found</name><operator>-&gt;</operator><name>mode</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name><name>loadData</name><operator>.</operator><name>pathModeDefault</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>found</name><operator>-&gt;</operator><name>user</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>path</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <call><name>manifestOwnerCache</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>manifestOwnerGet</name><argument_list>(<argument><expr><name><name>loadData</name><operator>.</operator><name>pathUserDefault</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="line">// Sort the lists.  They should already be sorted in the file but it is possible that this system has a different collation</comment>
        <comment type="line">// that renders that sort useless.</comment>
        <comment type="line">//</comment>
        <comment type="line">// This must happen *after* the default processing because found lists are in natural file order and it is not worth writing</comment>
        <comment type="line">// comparator routines for them.</comment>
        <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dbList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fileList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>linkList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>pathList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>targetList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure the base path exists</comment>
        <expr_stmt><expr><call><name>manifestTargetBase</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Discard the context holding temporary load data</comment>
        <expr_stmt><expr><call><name>memContextDiscard</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>ManifestSaveData</name>
<block>{
    <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name></decl>;</decl_stmt>                                             <comment type="line">// Manifest object to be saved</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier></type><name>userDefault</name></decl>;</decl_stmt>                                     <comment type="line">// Default user</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier></type><name>groupDefault</name></decl>;</decl_stmt>                                    <comment type="line">// Default group</comment>
    <decl_stmt><decl><type><name>mode_t</name></type> <name>fileModeDefault</name></decl>;</decl_stmt>                                         <comment type="line">// File default mode</comment>
    <decl_stmt><decl><type><name>mode_t</name></type> <name>pathModeDefault</name></decl>;</decl_stmt>                                         <comment type="line">// Path default mode</comment>
}</block></struct></type> <name>ManifestSaveData</name>;</typedef>

<comment type="line">// Helper to convert the owner MCV to a default.  If the input is NULL boolean false should be returned, else the owner string.</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>Variant</name> <modifier>*</modifier></type>
<name>manifestOwnerVar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>ownerDefault</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>ownerDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ownerDefault</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>BOOL_FALSE_VAR</name></expr> </then><else>: <expr><call><name>varNewStr</name><argument_list>(<argument><expr><name>ownerDefault</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>manifestSaveCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>callbackData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>sectionNext</name></decl></parameter>, <parameter><decl><type><name>InfoSave</name> <modifier>*</modifier><specifier>const</specifier></type> <name>infoSaveData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>callbackData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INFO_SAVE</name></expr></argument>, <argument><expr><name>infoSaveData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>callbackData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>infoSaveData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ManifestSaveData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>saveData</name> <init>= <expr><operator>(</operator><name>ManifestSaveData</name> <operator>*</operator><operator>)</operator><name>callbackData</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier><specifier>const</specifier></type> <name>manifest</name> <init>= <expr><name><name>saveData</name><operator>-&gt;</operator><name>manifest</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if_stmt><if>if <condition>(<expr><call><name>infoSaveSection</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP</name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>archiveStart</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_ARCHIVE_START</name></expr></argument>,
                <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>archiveStart</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>archiveStop</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_ARCHIVE_STOP</name></expr></argument>,
                <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>archiveStop</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>bundle</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_BUNDLE</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARBOOL</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>bundle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_LABEL</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>lsnStart</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_LSN_START</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>lsnStart</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>lsnStop</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_LSN_STOP</name></expr></argument>,
                <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>lsnStop</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabelPrior</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_PRIOR</name></expr></argument>,
                <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabelPrior</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_REFERENCE</name></expr></argument>,
            <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>referenceList</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_TIMESTAMP_COPY_START</name></expr></argument>,
            <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARINT64</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupTimestampCopyStart</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_TIMESTAMP_START</name></expr></argument>,
            <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARINT64</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupTimestampStart</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_TIMESTAMP_STOP</name></expr></argument>,
            <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARINT64</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupTimestampStop</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BACKUP_TYPE</name></expr></argument>,
            <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if_stmt><if>if <condition>(<expr><call><name>infoSaveSection</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_DB</name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_DB</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_DB_CATALOG_VERSION</name></expr></argument>,
            <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARUINT</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgCatalogVersion</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_DB</name></expr></argument>, <argument><expr><literal type="string">"db-control-version"</literal></expr></argument>,
            <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARUINT</name><argument_list>(<argument><expr><call><name>pgControlVersion</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgVersion</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_DB</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_DB_ID</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARUINT</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_DB</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_DB_SYSTEM_ID</name></expr></argument>,
            <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARUINT64</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgSystemId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_DB</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_DB_VERSION</name></expr></argument>,
            <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>pgVersionToStr</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgVersion</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if_stmt><if>if <condition>(<expr><call><name>infoSaveSection</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_OPTION</name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_OPTION</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_ARCHIVE_CHECK</name></expr></argument>,
            <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARBOOL</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionArchiveCheck</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_OPTION</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_ARCHIVE_COPY</name></expr></argument>,
            <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARBOOL</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionArchiveCopy</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionStandby</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_OPTION</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_BACKUP_STANDBY</name></expr></argument>,
                <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionStandby</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionBufferSize</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_OPTION</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_BUFFER_SIZE</name></expr></argument>,
                <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionBufferSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionChecksumPage</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_OPTION</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_CHECKSUM_PAGE</name></expr></argument>,
                <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionChecksumPage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set the option when compression is turned on.  In older versions this also implied gz compression but in newer versions</comment>
        <comment type="line">// the type option must also be set if compression is not gz.</comment>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_OPTION</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_COMPRESS</name></expr></argument>,
            <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARBOOL</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionCompressType</name></name> <operator>!=</operator> <name>compressTypeNone</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionCompressLevel</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_OPTION</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_COMPRESS_LEVEL</name></expr></argument>,
                <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionCompressLevel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionCompressLevelNetwork</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_OPTION</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_COMPRESS_LEVEL_NETWORK</name></expr></argument>,
                <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionCompressLevelNetwork</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set the compression type.  Older versions will ignore this and assume gz compression if the compress option is set.</comment>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_OPTION</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_COMPRESS_TYPE</name></expr></argument>,
            <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>compressTypeStr</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionCompressType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_OPTION</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_DELTA</name></expr></argument>,
                <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_OPTION</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_HARDLINK</name></expr></argument>,
            <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARBOOL</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionHardLink</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_OPTION</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_ONLINE</name></expr></argument>,
            <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARBOOL</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionOnline</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionProcessMax</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_OPTION</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_OPTION_PROCESS_MAX</name></expr></argument>,
                <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionProcessMax</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if_stmt><if>if <condition>(<expr><call><name>infoSaveSection</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_TARGET</name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_TEMP_RESET_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>targetIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>targetIdx</name> <operator>&lt;</operator> <call><name>manifestTargetTotal</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>targetIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestTarget</name> <modifier>*</modifier><specifier>const</specifier></type> <name>target</name> <init>= <expr><call><name>manifestTarget</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>targetIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>JsonWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>json</name> <init>= <expr><call><name>jsonWriteObjectBegin</name><argument_list>(<argument><expr><call><name>jsonWriteNewP</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>file</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>jsonWriteStr</name><argument_list>(<argument><expr><call><name>jsonWriteKeyStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_FILE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name>jsonWriteStr</name><argument_list>(<argument><expr><call><name>jsonWriteKeyStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_PATH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>tablespaceId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>jsonWriteStrFmt</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_TABLESPACE_ID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>tablespaceId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>target</name><operator>-&gt;</operator><name>tablespaceName</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>jsonWriteStr</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_TABLESPACE_NAME</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>tablespaceName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name>jsonWriteZ</name><argument_list>(
                    <argument><expr><call><name>jsonWriteKeyStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_TYPE</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><ternary><condition><expr><name><name>target</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>manifestTargetTypePath</name></expr> ?</condition><then> <expr><name>MANIFEST_TARGET_TYPE_PATH</name></expr> </then><else>: <expr><name>MANIFEST_TARGET_TYPE_LINK</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                    <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_TARGET</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>jsonWriteResult</name><argument_list>(<argument><expr><call><name>jsonWriteObjectEnd</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_RESET</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if_stmt><if>if <condition>(<expr><call><name>infoSaveSection</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_DB</name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_TEMP_RESET_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>dbIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dbIdx</name> <operator>&lt;</operator> <call><name>manifestDbTotal</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>dbIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestDb</name> <modifier>*</modifier><specifier>const</specifier></type> <name>db</name> <init>= <expr><call><name>manifestDb</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>dbIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>JsonWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>json</name> <init>= <expr><call><name>jsonWriteObjectBegin</name><argument_list>(<argument><expr><call><name>jsonWriteNewP</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>jsonWriteUInt</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_DB_ID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>jsonWriteUInt</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_DB_LAST_SYSTEM_ID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>lastSystemId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_DB</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>jsonWriteResult</name><argument_list>(<argument><expr><call><name>jsonWriteObjectEnd</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_RESET</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if_stmt><if>if <condition>(<expr><call><name>infoSaveSection</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_METADATA</name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>annotation</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_METADATA</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_ANNOTATION</name></expr></argument>,
                <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>annotation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if_stmt><if>if <condition>(<expr><call><name>infoSaveSection</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_FILE</name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_TEMP_RESET_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>fileIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fileIdx</name> <operator>&lt;</operator> <call><name>manifestFileTotal</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>fileIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestFile</name></type> <name>file</name> <init>= <expr><call><name>manifestFile</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>JsonWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>json</name> <init>= <expr><call><name>jsonWriteObjectBegin</name><argument_list>(<argument><expr><call><name>jsonWriteNewP</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Bundle info</comment>
                <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>bundleId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>jsonWriteUInt64</name><argument_list>(<argument><expr><call><name>jsonWriteKeyStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BUNDLE_ID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>bundleId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>bundleOffset</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>jsonWriteUInt64</name><argument_list>(<argument><expr><call><name>jsonWriteKeyStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_BUNDLE_OFFSET</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>bundleOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Save if the file size is not zero and the checksum exists.  The checksum might not exist if this is a partial</comment>
                <comment type="line">// save performed during a backup.</comment>
                <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>file</name><operator>.</operator><name>checksumSha1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>jsonWriteZ</name><argument_list>(<argument><expr><call><name>jsonWriteKeyStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_CHECKSUM</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>checksumSha1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>checksumPage</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>jsonWriteBool</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_CHECKSUM_PAGE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>!</operator><name><name>file</name><operator>.</operator><name>checksumPageError</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>checksumPageErrorList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>jsonWriteJson</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_CHECKSUM_PAGE_ERROR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>checksumPageErrorList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>varEq</name><argument_list>(<argument><expr><call><name>manifestOwnerVar</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>group</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>groupDefault</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>jsonWriteVar</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_GROUP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>manifestOwnerVar</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>group</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>mode</name></name> <operator>!=</operator> <name><name>saveData</name><operator>-&gt;</operator><name>fileModeDefault</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>jsonWriteStrFmt</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_MODE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%04o"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>reference</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>jsonWriteStr</name><argument_list>(<argument><expr><call><name>jsonWriteKeyStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_REFERENCE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>reference</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>sizeRepo</name></name> <operator>!=</operator> <name><name>file</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>jsonWriteUInt64</name><argument_list>(<argument><expr><call><name>jsonWriteKeyStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_SIZE_REPO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>sizeRepo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name>jsonWriteUInt64</name><argument_list>(<argument><expr><call><name>jsonWriteKeyStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>jsonWriteUInt64</name><argument_list>(<argument><expr><call><name>jsonWriteKeyStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_TIMESTAMP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>file</name><operator>.</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>varEq</name><argument_list>(<argument><expr><call><name>manifestOwnerVar</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>userDefault</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>jsonWriteVar</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_USER</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>manifestOwnerVar</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                    <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_FILE</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>jsonWriteResult</name><argument_list>(<argument><expr><call><name>jsonWriteObjectEnd</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_RESET</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if_stmt><if>if <condition>(<expr><call><name>infoSaveSection</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_FILE_DEFAULT</name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_FILE_DEFAULT</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_GROUP</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>groupDefault</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_FILE_DEFAULT</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_MODE</name></expr></argument>,
            <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%04o"</literal></expr></argument>, <argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>fileModeDefault</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_FILE_DEFAULT</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_USER</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>userDefault</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if_stmt><if>if <condition>(<expr><call><name>infoSaveSection</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_LINK</name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_TEMP_RESET_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>linkIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>linkIdx</name> <operator>&lt;</operator> <call><name>manifestLinkTotal</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>linkIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestLink</name> <modifier>*</modifier><specifier>const</specifier></type> <name>link</name> <init>= <expr><call><name>manifestLink</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>linkIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>JsonWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>json</name> <init>= <expr><call><name>jsonWriteObjectBegin</name><argument_list>(<argument><expr><call><name>jsonWriteNewP</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>jsonWriteStr</name><argument_list>(<argument><expr><call><name>jsonWriteKeyStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_DESTINATION</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>link</name><operator>-&gt;</operator><name>destination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>varEq</name><argument_list>(<argument><expr><call><name>manifestOwnerVar</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>groupDefault</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>jsonWriteVar</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_GROUP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>manifestOwnerVar</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>varEq</name><argument_list>(<argument><expr><call><name>manifestOwnerVar</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>userDefault</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>jsonWriteVar</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_USER</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>manifestOwnerVar</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                    <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_LINK</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>jsonWriteResult</name><argument_list>(<argument><expr><call><name>jsonWriteObjectEnd</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_RESET</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if_stmt><if>if <condition>(<expr><call><name>infoSaveSection</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_LINK_DEFAULT</name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>manifestLinkTotal</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_LINK_DEFAULT</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_GROUP</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>groupDefault</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_LINK_DEFAULT</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_USER</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>userDefault</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if_stmt><if>if <condition>(<expr><call><name>infoSaveSection</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_PATH</name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_TEMP_RESET_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>pathIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pathIdx</name> <operator>&lt;</operator> <call><name>manifestPathTotal</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>pathIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestPath</name> <modifier>*</modifier><specifier>const</specifier></type> <name>path</name> <init>= <expr><call><name>manifestPath</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>pathIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>JsonWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>json</name> <init>= <expr><call><name>jsonWriteObjectBegin</name><argument_list>(<argument><expr><call><name>jsonWriteNewP</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>varEq</name><argument_list>(<argument><expr><call><name>manifestOwnerVar</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>groupDefault</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>jsonWriteVar</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_GROUP</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>manifestOwnerVar</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>path</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name><name>saveData</name><operator>-&gt;</operator><name>pathModeDefault</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>jsonWriteStrFmt</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_MODE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%04o"</literal></expr></argument>, <argument><expr><name><name>path</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>varEq</name><argument_list>(<argument><expr><call><name>manifestOwnerVar</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>userDefault</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>jsonWriteVar</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_USER</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>manifestOwnerVar</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                    <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_PATH</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>jsonWriteResult</name><argument_list>(<argument><expr><call><name>jsonWriteObjectEnd</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_RESET</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if_stmt><if>if <condition>(<expr><call><name>infoSaveSection</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_PATH_DEFAULT</name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_PATH_DEFAULT</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_GROUP</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>groupDefault</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
            <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_PATH_DEFAULT</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_MODE</name></expr></argument>,
            <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%04o"</literal></expr></argument>, <argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>pathModeDefault</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_PATH_DEFAULT</name></expr></argument>, <argument><expr><name>MANIFEST_KEY_USER</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>userDefault</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>manifestSave</name><parameter_list>(<parameter><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_WRITE</name></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>write</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Files can be added from outside the manifest so make sure they are sorted</comment>
        <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fileList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set default values based on the base path</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestPath</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pathBase</name> <init>= <expr><call><name>manifestPathFind</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGDATA_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ManifestSaveData</name></type> <name>saveData</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>manifest</name> <operator>=</operator> <name>this</name></expr>,
            <expr><operator>.</operator><name>userDefault</name> <operator>=</operator> <call><name>manifestOwnerVar</name><argument_list>(<argument><expr><name><name>pathBase</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>groupDefault</name> <operator>=</operator> <call><name>manifestOwnerVar</name><argument_list>(<argument><expr><name><name>pathBase</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>fileModeDefault</name> <operator>=</operator> <name><name>pathBase</name><operator>-&gt;</operator><name>mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name> <operator>|</operator> <name>S_IRGRP</name><operator>)</operator></expr>,
            <expr><operator>.</operator><name>pathModeDefault</name> <operator>=</operator> <name><name>pathBase</name><operator>-&gt;</operator><name>mode</name></name></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <comment type="line">// Save manifest</comment>
        <expr_stmt><expr><call><name>infoSave</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>info</name></name></expr></argument>, <argument><expr><name>write</name></expr></argument>, <argument><expr><name>manifestSaveCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>manifestValidate</name><parameter_list>(<parameter><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>strict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>strict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Validate files</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>fileIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fileIdx</name> <operator>&lt;</operator> <call><name>manifestFileTotal</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>fileIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestFile</name></type> <name>file</name> <init>= <expr><call><name>manifestFile</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// All files must have a checksum</comment>
            <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>checksumSha1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"\nmissing checksum for file '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// These are strict checks to be performed only after a backup and before the final manifest save</comment>
            <if_stmt><if>if <condition>(<expr><name>strict</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Zero-length files must have a specific checksum</comment>
                <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strEqZ</name><argument_list>(<argument><expr><name>HASH_TYPE_SHA1_ZERO_STR</name></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>checksumSha1</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"\ninvalid checksum '%s' for zero size file '%s'"</literal></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>checksumSha1</name></name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Non-zero size files must have non-zero repo size</comment>
                <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>sizeRepo</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>file</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"\nrepo size must be &gt; 0 for file '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="line">// Throw exception when there are errors</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strSize</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"manifest validation failed:%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Db functions and getters/setters
***********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>ManifestDb</name> <modifier>*</modifier></type>
<name>manifestDbFind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestDb</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>lstFind</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>dbList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to find '%s' in manifest db list"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>MANIFEST_DB</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
File functions and getters/setters
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>ManifestFilePack</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>manifestFilePackFindInternal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ManifestFilePack</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>filePack</name> <init>= <expr><call><name>lstFind</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fileList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>filePack</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to find '%s' in manifest file list"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE_PP</name><argument_list>(<argument><expr><name>ManifestFilePack</name></expr></argument>, <argument><expr><name>filePack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>ManifestFilePack</name> <modifier>*</modifier></type>
<name>manifestFilePackFind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE_P</name><argument_list>(<argument><expr><name>ManifestFilePack</name></expr></argument>, <argument><expr><operator>*</operator><call><name>manifestFilePackFindInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>manifestFileRemove</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lstRemove</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fileList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to remove '%s' from manifest file list"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>manifestFileUpdate</name><parameter_list>(<parameter><decl><type><name>Manifest</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ManifestFile</name> <modifier>*</modifier><specifier>const</specifier></type> <name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST_FILE</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(
        <argument><expr><operator>(</operator><operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>checksumPage</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>checksumPageError</name></name> <operator>&amp;&amp;</operator> <name><name>file</name><operator>-&gt;</operator><name>checksumPageErrorList</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>checksumPage</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>file</name><operator>-&gt;</operator><name>checksumPageError</name></name> <operator>&amp;&amp;</operator> <name><name>file</name><operator>-&gt;</operator><name>checksumPageErrorList</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>checksumPage</name></name> <operator>&amp;&amp;</operator> <name><name>file</name><operator>-&gt;</operator><name>checksumPageError</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>file</name><operator>-&gt;</operator><name>bundleId</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>file</name><operator>-&gt;</operator><name>bundleOffset</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ManifestFilePack</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>filePack</name> <init>= <expr><call><name>manifestFilePackFindInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>file</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>manifestFilePackUpdate</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>filePack</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Link functions and getters/setters
***********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>ManifestLink</name> <modifier>*</modifier></type>
<name>manifestLinkFind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestLink</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>lstFind</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>linkList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to find '%s' in manifest link list"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>MANIFEST_LINK</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>manifestLinkRemove</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lstRemove</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>linkList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to remove '%s' from manifest link list"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>manifestLinkUpdate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>destination</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>destination</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ManifestLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><operator>(</operator><name>ManifestLink</name> <operator>*</operator><operator>)</operator><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext(this-&gt;pub.linkList)</argument>)</argument_list></macro>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>destination</name></name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>link</name><operator>-&gt;</operator><name>destination</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Path functions and getters/setters
***********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>ManifestPath</name> <modifier>*</modifier></type>
<name>manifestPathFind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestPath</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>lstFind</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>pathList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to find '%s' in manifest path list"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>MANIFEST_PATH</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>String</name> <modifier>*</modifier></type>
<name>manifestPathPg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>manifestPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>manifestPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>manifestPath</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If something in pg_data/</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strBeginsWith</name><argument_list>(<argument><expr><name>manifestPath</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>MANIFEST_TARGET_PGDATA</name> <literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>manifestPath</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MANIFEST_TARGET_PGDATA</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// Else not pg_data (this is faster since the length of everything else will be different than pg_data)</comment>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name>manifestPath</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGDATA_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// A tablespace target is the only valid option if not pg_data or pg_data/</comment>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(
            <argument><expr><call><name>strEq</name><argument_list>(<argument><expr><name>manifestPath</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGTBLSPC_STR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strBeginsWith</name><argument_list>(<argument><expr><name>manifestPath</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>MANIFEST_TARGET_PGTBLSPC</name> <literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>strDup</name><argument_list>(<argument><expr><name>manifestPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Target functions and getters/setters
***********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>ManifestTarget</name> <modifier>*</modifier></type>
<name>manifestTargetFind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestTarget</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>lstFind</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>targetList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to find '%s' in manifest target list"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>MANIFEST_TARGET</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>String</name> <modifier>*</modifier></type>
<name>manifestTargetPath</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ManifestTarget</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST_TARGET</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>target</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If the target path is already absolute then just return it</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strBeginsWith</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>strDup</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Construct it from the base pg path and a relative path</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>pgPath</name> <init>= <expr><call><name>strCat</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strPath</name><argument_list>(<argument><expr><call><name>manifestPathPg</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strSize</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_PRIOR_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strPathAbsolute</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>, <argument><expr><call><name>manifestTargetBase</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_PRIOR_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>manifestTargetRemove</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lstRemove</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>targetList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to remove '%s' from manifest target list"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>manifestTargetUpdate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ManifestTarget</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><operator>(</operator><name>ManifestTarget</name> <operator>*</operator><operator>)</operator><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name><name>target</name><operator>-&gt;</operator><name>file</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>file</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>target</name><operator>-&gt;</operator><name>file</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>file</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext(this-&gt;pub.targetList)</argument>)</argument_list></macro>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Getters/Setters
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>manifestBackupLabelSet</name><parameter_list>(<parameter><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>backupLabel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>backupLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabel</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>this-&gt;pub.memContext</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabel</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>backupLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>referenceList</name></name></expr></argument>, <argument><expr><name>backupLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>ManifestLoadFileData</name>
<block>{
    <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name></decl>;</decl_stmt>                                         <comment type="line">// Mem context</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storage</name></decl>;</decl_stmt>                                         <comment type="line">// Storage to load from</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>fileName</name></decl>;</decl_stmt>                                         <comment type="line">// Base filename</comment>
    <decl_stmt><decl><type><name>CipherType</name></type> <name>cipherType</name></decl>;</decl_stmt>                                          <comment type="line">// Cipher type</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>cipherPass</name></decl>;</decl_stmt>                                       <comment type="line">// Cipher passphrase</comment>
    <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name></decl>;</decl_stmt>                                             <comment type="line">// Loaded manifest object</comment>
}</block></struct></type> <name>ManifestLoadFileData</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>manifestLoadFileCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>try</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>try</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ManifestLoadFileData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>loadData</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>try</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Construct filename based on try</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fileName</name> <init>= <expr><ternary><condition><expr><name>try</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>loadData</name><operator>-&gt;</operator><name>fileName</name></name></expr> </then><else>: <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s"</literal> <name>INFO_COPY_EXT</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>loadData</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <comment type="line">// Attempt to load the file</comment>
            <decl_stmt><decl><type><name>IoRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>read</name> <init>= <expr><call><name>storageReadIo</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name><name>loadData</name><operator>-&gt;</operator><name>storage</name></name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>cipherBlockFilterGroupAdd</name><argument_list>(<argument><expr><call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>loadData</name><operator>-&gt;</operator><name>cipherType</name></name></expr></argument>, <argument><expr><name>cipherModeDecrypt</name></expr></argument>, <argument><expr><name><name>loadData</name><operator>-&gt;</operator><name>cipherPass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>loadData-&gt;memContext</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>loadData</name><operator>-&gt;</operator><name>manifest</name></name> <operator>=</operator> <call><name>manifestNewLoad</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Manifest</name> <modifier>*</modifier></type>
<name>manifestLoadFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>CipherType</name></type> <name>cipherType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>cipherPass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE</name></expr></argument>, <argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>cipherType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>cipherPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>storage</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fileName</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>cipherType</name> <operator>==</operator> <name>cipherTypeNone</name> <operator>&amp;&amp;</operator> <name>cipherPass</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>cipherType</name> <operator>!=</operator> <name>cipherTypeNone</name> <operator>&amp;&amp;</operator> <name>cipherPass</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ManifestLoadFileData</name></type> <name>data</name> <init>=
    <expr><block>{
        <expr><operator>.</operator><name>memContext</name> <operator>=</operator> <call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr>,
        <expr><operator>.</operator><name>storage</name> <operator>=</operator> <name>storage</name></expr>,
        <expr><operator>.</operator><name>fileName</name> <operator>=</operator> <name>fileName</name></expr>,
        <expr><operator>.</operator><name>cipherType</name> <operator>=</operator> <name>cipherType</name></expr>,
        <expr><operator>.</operator><name>cipherPass</name> <operator>=</operator> <name>cipherPass</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileNamePath</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>infoLoad</name><argument_list>(
            <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"unable to load backup manifest file '%s' or '%s"</literal> <name>INFO_COPY_EXT</name> <literal type="string">"'"</literal></expr></argument>, <argument><expr><name>fileNamePath</name></expr></argument>, <argument><expr><name>fileNamePath</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>manifestLoadFileCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>manifest</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
