<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/stanza/delete.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Stanza Delete Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/control/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/stanza/delete.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/backup/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/memContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoArchive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoBackup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/manifest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cmdStanzaDelete</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>archiveList</name> <init>= <expr><call><name>storageListP</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>nullOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>backupList</name> <init>= <expr><call><name>storageListP</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>nullOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// For most drivers, NULL indicates the directory does not exist at all. For those that do not support paths (e.g. S3) an</comment>
        <comment type="line">// empty StringList will be returned; in such a case, the directory will attempt to be deleted (this is OK).</comment>
        <if_stmt><if>if <condition>(<expr><name>archiveList</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>backupList</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>archiveNotEmpty</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>archiveList</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strLstEmpty</name><argument_list>(<argument><expr><name>archiveList</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>backupNotEmpty</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>backupList</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strLstEmpty</name><argument_list>(<argument><expr><name>backupList</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <comment type="line">// If something exists in either directory, then remove</comment>
            <if_stmt><if>if <condition>(<expr><name>archiveNotEmpty</name> <operator>||</operator> <name>backupNotEmpty</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// If the stop file does not exist, then error. This check is required even when --force is issued.</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>storageExistsP</name><argument_list>(<argument><expr><call><name>storageLocal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>lockStopFileName</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                        <argument><expr><name>FileMissingError</name></expr></argument>, <argument><expr><literal type="string">"stop file does not exist for stanza '%s'\n"</literal>
                        <literal type="string">"HINT: has the pgbackrest stop command been run on this server for this stanza?"</literal></expr></argument>,
                        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// If a force has not been issued and Postgres is running, then error</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptForce</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>storageExistsP</name><argument_list>(<argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>PG_FILE_POSTMTRPID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                        <argument><expr><name>PgRunningError</name></expr></argument>, <argument><expr><name>PG_FILE_POSTMTRPID</name> <literal type="string">" exists - looks like "</literal> <name>PG_NAME</name> <literal type="string">" is running. "</literal>
                        <literal type="string">"To delete stanza '%s' on %s, shut down "</literal> <name>PG_NAME</name> <literal type="string">" for stanza '%s' and try again, or use --force."</literal></expr></argument>,
                        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>, <argument><expr><call><name>cfgOptionGroupIdxDefault</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Delete the archive info files</comment>
                <if_stmt><if>if <condition>(<expr><name>archiveNotEmpty</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_COPY_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Delete the backup info files</comment>
                <if_stmt><if>if <condition>(<expr><name>backupNotEmpty</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_COPY_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Recursively remove the entire stanza repo if exists. S3 will attempt to remove even if not.</comment>
            <if_stmt><if>if <condition>(<expr><name>archiveList</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>backupList</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Remove the stop file - this will not error if the stop file does not exist. If the stanza directories existed but</comment>
            <comment type="line">// nothing was in them, then no pgbackrest commands can be in progress without the info files so a stop is technically</comment>
            <comment type="line">// not necessary</comment>
            <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><call><name>storageLocalWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>lockStopFileName</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
