<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/stanza/create.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Stanza Create Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/check/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/control/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/stanza/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/stanza/create.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/memContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoArchive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoBackup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoPg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cmdStanzaCreate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Verify that a stop was not issued before proceeding</comment>
    <expr_stmt><expr><call><name>lockStopTest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptForce</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"option --"</literal> <name>CFGOPT_FORCE</name> <literal type="string">" is no longer supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Get the version and system information - validating it if the database is online</comment>
        <decl_stmt><decl><type><name>PgControl</name></type> <name>pgControl</name> <init>= <expr><call><name>pgValidate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// For each repository configured, create the stanza</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>repoIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>repoIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>repoIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOG_INFO_FMT</name><argument_list>(
                <argument><expr><name>CFGCMD_STANZA_CREATE</name> <literal type="string">" for stanza '%s' on %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storageRepoReadStanza</name> <init>= <expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storageRepoWriteStanza</name> <init>= <expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InfoArchive</name> <modifier>*</modifier></type><name>infoArchive</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InfoBackup</name> <modifier>*</modifier></type><name>infoBackup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>bool</name></type> <name>archiveInfoFileExists</name> <init>= <expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageRepoReadStanza</name></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>archiveInfoFileCopyExists</name> <init>= <expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageRepoReadStanza</name></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_COPY_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>backupInfoFileExists</name> <init>= <expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageRepoReadStanza</name></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>backupInfoFileCopyExists</name> <init>= <expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageRepoReadStanza</name></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_COPY_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// If neither archive info nor backup info files exist and nothing else exists in the stanza directory</comment>
            <comment type="line">// then create the stanza</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>archiveInfoFileExists</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>archiveInfoFileCopyExists</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>backupInfoFileExists</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>backupInfoFileCopyExists</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>bool</name></type> <name>archiveNotEmpty</name> <init>= <expr><ternary><condition><expr><call><name>strLstSize</name><argument_list>(<argument><expr><call><name>storageListP</name><argument_list>(<argument><expr><name>storageRepoReadStanza</name></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name>backupNotEmpty</name> <init>= <expr><ternary><condition><expr><call><name>strLstSize</name><argument_list>(<argument><expr><call><name>storageListP</name><argument_list>(<argument><expr><name>storageRepoReadStanza</name></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <comment type="line">// If something else exists in the backup or archive directories for this stanza, then error</comment>
                <if_stmt><if>if <condition>(<expr><name>archiveNotEmpty</name> <operator>||</operator> <name>backupNotEmpty</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                        <argument><expr><name>PathNotEmptyError</name></expr></argument>, <argument><expr><literal type="string">"%s%s%snot empty"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>backupNotEmpty</name></expr> ?</condition><then> <expr><literal type="string">"backup directory "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>,
                        <argument><expr><operator>(</operator><ternary><condition><expr><name>backupNotEmpty</name> <operator>&amp;&amp;</operator> <name>archiveNotEmpty</name></expr> ?</condition><then> <expr><literal type="string">"and/or "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>archiveNotEmpty</name></expr> ?</condition><then> <expr><literal type="string">"archive directory "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// If the repo is encrypted, generate a cipher passphrase for encrypting subsequent archive files</comment>
                <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>cipherPassSub</name> <init>= <expr><call><name>cipherPassGen</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Create and save archive info</comment>
                <expr_stmt><expr><name>infoArchive</name> <operator>=</operator> <call><name>infoArchiveNew</name><argument_list>(<argument><expr><name><name>pgControl</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>pgControl</name><operator>.</operator><name>systemId</name></name></expr></argument>, <argument><expr><name>cipherPassSub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>infoArchiveSaveFile</name><argument_list>(
                    <argument><expr><name>infoArchive</name></expr></argument>, <argument><expr><name>storageRepoWriteStanza</name></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>,
                    <argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// If the repo is encrypted, generate a cipher passphrase for encrypting subsequent backup files</comment>
                <expr_stmt><expr><name>cipherPassSub</name> <operator>=</operator> <call><name>cipherPassGen</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Create and save backup info</comment>
                <expr_stmt><expr><name>infoBackup</name> <operator>=</operator> <call><name>infoBackupNew</name><argument_list>(<argument><expr><name><name>pgControl</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>pgControl</name><operator>.</operator><name>systemId</name></name></expr></argument>, <argument><expr><name><name>pgControl</name><operator>.</operator><name>catalogVersion</name></name></expr></argument>, <argument><expr><name>cipherPassSub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>infoBackupSaveFile</name><argument_list>(
                    <argument><expr><name>infoBackup</name></expr></argument>, <argument><expr><name>storageRepoWriteStanza</name></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>,
                    <argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else if at least one archive and one backup info file exists, then ensure both are valid</comment>
            <if type="elseif">else if <condition>(<expr><operator>(</operator><name>archiveInfoFileExists</name> <operator>||</operator> <name>archiveInfoFileCopyExists</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>backupInfoFileExists</name> <operator>||</operator> <name>backupInfoFileCopyExists</name><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Error if there is a mismatch between the archive and backup info files or the database version/system Id matches</comment>
                <comment type="line">// current database</comment>
                <expr_stmt><expr><call><name>checkStanzaInfoPg</name><argument_list>(
                    <argument><expr><name>storageRepoReadStanza</name></expr></argument>, <argument><expr><name><name>pgControl</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>pgControl</name><operator>.</operator><name>systemId</name></name></expr></argument>,
                    <argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// The files are valid - upgrade</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>sourceFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>destinationFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <comment type="line">// If the existing files are valid, then, if a file is missing, copy the existing one to the missing one to ensure</comment>
                <comment type="line">// there is both a .info and .info.copy</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>archiveInfoFileExists</name> <operator>||</operator> <operator>!</operator><name>archiveInfoFileCopyExists</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>sourceFile</name> <operator>=</operator> <ternary><condition><expr><name>archiveInfoFileExists</name></expr> ?</condition><then> <expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr> </then><else>: <expr><name>INFO_ARCHIVE_PATH_FILE_COPY_STR</name></expr></else></ternary></expr>;</expr_stmt>
                    <expr_stmt><expr><name>destinationFile</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>archiveInfoFileExists</name></expr> ?</condition><then> <expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr> </then><else>: <expr><name>INFO_ARCHIVE_PATH_FILE_COPY_STR</name></expr></else></ternary></expr>;</expr_stmt>

                    <comment type="line">// Using get and put instead of copy in case the storage is remote</comment>
                    <expr_stmt><expr><call><name>storagePutP</name><argument_list>(
                        <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageRepoWriteStanza</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepoReadStanza</name></expr></argument>, <argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>backupInfoFileExists</name> <operator>||</operator> <operator>!</operator><name>backupInfoFileCopyExists</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>sourceFile</name> <operator>=</operator> <ternary><condition><expr><name>backupInfoFileExists</name></expr> ?</condition><then> <expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr> </then><else>: <expr><name>INFO_BACKUP_PATH_FILE_COPY_STR</name></expr></else></ternary></expr>;</expr_stmt>
                    <expr_stmt><expr><name>destinationFile</name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>backupInfoFileExists</name></expr> ?</condition><then> <expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr> </then><else>: <expr><name>INFO_BACKUP_PATH_FILE_COPY_STR</name></expr></else></ternary></expr>;</expr_stmt>

                    <comment type="line">// Using get and put instead of copy in case the storage is remote</comment>
                    <expr_stmt><expr><call><name>storagePutP</name><argument_list>(
                        <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageRepoWriteStanza</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepoReadStanza</name></expr></argument>, <argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// If no files copied, then the stanza was already valid</comment>
                <if_stmt><if>if <condition>(<expr><name>sourceFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>LOG_INFO_FMT</name><argument_list>(
                        <argument><expr><literal type="string">"stanza '%s' already exists on %s and is valid"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else if both .info and corresponding .copy file are missing for one but not the other, then error - the user will</comment>
            <comment type="line">// have to make a conscious effort to determine if deleting the stanza on this repo is appropriate or other action is</comment>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                    <argument><expr><name>FileMissingError</name></expr></argument>,
                    <argument><expr><literal type="string">"%s on %s\n"</literal>
                        <literal type="string">"HINT: this may be a symptom of repository corruption!"</literal></expr></argument>,
                    <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name>archiveInfoFileExists</name> <operator>||</operator> <name>archiveInfoFileCopyExists</name><operator>)</operator></expr> ?</condition><then>
                        <expr><literal type="string">"archive.info exists but backup.info is missing"</literal></expr> </then><else>: <expr><literal type="string">"backup.info exists but archive.info is missing"</literal></expr></else></ternary><operator>)</operator></expr></argument>,
                    <argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
