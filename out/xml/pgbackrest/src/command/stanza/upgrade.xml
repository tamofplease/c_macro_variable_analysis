<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/stanza/upgrade.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Stanza Update Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/check/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/control/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/stanza/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/stanza/upgrade.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/memContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoArchive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoBackup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoPg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cmdStanzaUpgrade</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Verify that a stop was not issued before proceeding</comment>
    <expr_stmt><expr><call><name>lockStopTest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Get the version and system information - validating it if the database is online</comment>
        <decl_stmt><decl><type><name>PgControl</name></type> <name>pgControl</name> <init>= <expr><call><name>pgValidate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// For each repository configured, upgrade the stanza</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>repoIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>repoIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>repoIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOG_INFO_FMT</name><argument_list>(
                <argument><expr><name>CFGCMD_STANZA_UPGRADE</name> <literal type="string">" for stanza '%s' on %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storageRepoReadStanza</name> <init>= <expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storageRepoWriteStanza</name> <init>= <expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>infoArchiveUpgrade</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>infoBackupUpgrade</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// Load the info files (errors if missing)</comment>
            <decl_stmt><decl><type><name>InfoArchive</name> <modifier>*</modifier></type><name>infoArchive</name> <init>= <expr><call><name>infoArchiveLoadFile</name><argument_list>(
                <argument><expr><name>storageRepoReadStanza</name></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InfoPgData</name></type> <name>archiveInfo</name> <init>= <expr><call><name>infoPgData</name><argument_list>(<argument><expr><call><name>infoArchivePg</name><argument_list>(<argument><expr><name>infoArchive</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>infoPgDataCurrentId</name><argument_list>(<argument><expr><call><name>infoArchivePg</name><argument_list>(<argument><expr><name>infoArchive</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>InfoBackup</name> <modifier>*</modifier></type><name>infoBackup</name> <init>= <expr><call><name>infoBackupLoadFile</name><argument_list>(
                <argument><expr><name>storageRepoReadStanza</name></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InfoPgData</name></type> <name>backupInfo</name> <init>= <expr><call><name>infoPgData</name><argument_list>(<argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>infoBackup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>infoPgDataCurrentId</name><argument_list>(<argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>infoBackup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Since the file save of archive.info and backup.info are not atomic, then check and update each separately.</comment>
            <comment type="line">// Update archive</comment>
            <if_stmt><if>if <condition>(<expr><name><name>pgControl</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name><name>archiveInfo</name><operator>.</operator><name>version</name></name> <operator>||</operator> <name><name>pgControl</name><operator>.</operator><name>systemId</name></name> <operator>!=</operator> <name><name>archiveInfo</name><operator>.</operator><name>systemId</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>infoArchivePgSet</name><argument_list>(<argument><expr><name>infoArchive</name></expr></argument>, <argument><expr><name><name>pgControl</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>pgControl</name><operator>.</operator><name>systemId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>infoArchiveUpgrade</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Update backup</comment>
            <if_stmt><if>if <condition>(<expr><name><name>pgControl</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name><name>backupInfo</name><operator>.</operator><name>version</name></name> <operator>||</operator> <name><name>pgControl</name><operator>.</operator><name>systemId</name></name> <operator>!=</operator> <name><name>backupInfo</name><operator>.</operator><name>systemId</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>infoBackupPgSet</name><argument_list>(<argument><expr><name>infoBackup</name></expr></argument>, <argument><expr><name><name>pgControl</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>pgControl</name><operator>.</operator><name>systemId</name></name></expr></argument>, <argument><expr><name><name>pgControl</name><operator>.</operator><name>catalogVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>infoBackupUpgrade</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Get the backup and archive info pg data and throw an error if the ids do not match before saving (even if only one</comment>
            <comment type="line">// needed to be updated)</comment>
            <expr_stmt><expr><name>backupInfo</name> <operator>=</operator> <call><name>infoPgData</name><argument_list>(<argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>infoBackup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>infoPgDataCurrentId</name><argument_list>(<argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>infoBackup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>archiveInfo</name> <operator>=</operator> <call><name>infoPgData</name><argument_list>(<argument><expr><call><name>infoArchivePg</name><argument_list>(<argument><expr><name>infoArchive</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>infoPgDataCurrentId</name><argument_list>(<argument><expr><call><name>infoArchivePg</name><argument_list>(<argument><expr><name>infoArchive</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkStanzaInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>archiveInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backupInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Save archive info</comment>
            <if_stmt><if>if <condition>(<expr><name>infoArchiveUpgrade</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>infoArchiveSaveFile</name><argument_list>(
                    <argument><expr><name>infoArchive</name></expr></argument>, <argument><expr><name>storageRepoWriteStanza</name></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>,
                    <argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Save backup info</comment>
            <if_stmt><if>if <condition>(<expr><name>infoBackupUpgrade</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>infoBackupSaveFile</name><argument_list>(
                    <argument><expr><name>infoBackup</name></expr></argument>, <argument><expr><name>storageRepoWriteStanza</name></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>infoArchiveUpgrade</name> <operator>||</operator> <name>infoBackupUpgrade</name><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>LOG_INFO_FMT</name><argument_list>(
                    <argument><expr><literal type="string">"stanza '%s' on %s is already up to date"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
