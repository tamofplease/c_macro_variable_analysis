<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/check/common.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Check Common Handler
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/check/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoArchive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoBackup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Helper function
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>checkArchiveCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>archiveCommand</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>archiveCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>archiveCommand</name> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>archiveCommand</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PROJECT_BIN</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
            <argument><expr><name>ArchiveCommandInvalidError</name></expr></argument>, <argument><expr><literal type="string">"archive_command '%s' must contain %s"</literal></expr></argument>,
            <argument><expr><ternary><condition><expr><name>archiveCommand</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>strZ</name><argument_list>(<argument><expr><name>archiveCommand</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"["</literal> <name>NULL_Z</name> <literal type="string">"]"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>PROJECT_BIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>checkDbConfig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>pgVersion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>pgIdx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Db</name> <modifier>*</modifier></type><name>dbObject</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isStandby</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>pgVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>dbObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>isStandby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dbObject</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>dbVersion</name> <init>= <expr><call><name>dbPgVersion</name><argument_list>(<argument><expr><name>dbObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>dbPath</name> <init>= <expr><call><name>dbPgDataPath</name><argument_list>(<argument><expr><name>dbObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Error if the version from the control file and the configured pg-path do not match the values obtained from the database</comment>
        <if_stmt><if>if <condition>(<expr><name>pgVersion</name> <operator>!=</operator> <name>dbVersion</name> <operator>||</operator> <call><name>strCmp</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dbPath</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                <argument><expr><name>DbMismatchError</name></expr></argument>, <argument><expr><literal type="string">"version '%s' and path '%s' queried from cluster do not match version '%s' and '%s' read from '%s/"</literal>
                <name>PG_PATH_GLOBAL</name> <literal type="string">"/"</literal> <name>PG_FILE_PGCONTROL</name> <literal type="string">"'\nHINT: the %s and %s settings likely reference different clusters."</literal></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>pgVersionToStr</name><argument_list>(<argument><expr><name>dbVersion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>dbPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>pgVersionToStr</name><argument_list>(<argument><expr><name>pgVersion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionIdxDisplay</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionIdxDisplay</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Check archive configuration if option is valid for the command and set</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>isStandby</name> <operator>&amp;&amp;</operator> <call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptArchiveCheck</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptArchiveCheck</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Error if archive_mode = off since backup start will fail</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strCmpZ</name><argument_list>(<argument><expr><call><name>dbArchiveMode</name><argument_list>(<argument><expr><name>dbObject</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>ArchiveDisabledError</name></expr></argument>, <argument><expr><literal type="string">"archive_mode must be enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Error if archive_mode = always unless check is disabled (support has not been added yet)</comment>
            <if_stmt><if>if <condition>(<expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptArchiveModeCheck</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strCmpZ</name><argument_list>(<argument><expr><call><name>dbArchiveMode</name><argument_list>(<argument><expr><name>dbObject</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"always"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>FeatureNotSupportedError</name></expr></argument>, <argument><expr><literal type="string">"archive_mode=always not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Check if archive_command is set and is valid</comment>
            <expr_stmt><expr><call><name>checkArchiveCommand</name><argument_list>(<argument><expr><call><name>dbArchiveCommand</name><argument_list>(<argument><expr><name>dbObject</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>checkStanzaInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InfoPgData</name> <modifier>*</modifier></type><name>archiveInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>InfoPgData</name> <modifier>*</modifier></type><name>backupInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>INFO_PG_DATA</name></expr></argument>, <argument><expr><name>archiveInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>INFO_PG_DATA</name></expr></argument>, <argument><expr><name>backupInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>archiveInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>backupInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Error if there is a mismatch between the archive and backup info files</comment>
    <if_stmt><if>if <condition>(<expr><name><name>archiveInfo</name><operator>-&gt;</operator><name>id</name></name> <operator>!=</operator> <name><name>backupInfo</name><operator>-&gt;</operator><name>id</name></name> <operator>||</operator> <name><name>archiveInfo</name><operator>-&gt;</operator><name>systemId</name></name> <operator>!=</operator> <name><name>backupInfo</name><operator>-&gt;</operator><name>systemId</name></name> <operator>||</operator>
        <name><name>archiveInfo</name><operator>-&gt;</operator><name>version</name></name> <operator>!=</operator> <name><name>backupInfo</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
            <argument><expr><name>FileInvalidError</name></expr></argument>, <argument><expr><literal type="string">"backup info file and archive info file do not match\n"</literal>
            <literal type="string">"archive: id = %u, version = %s, system-id = %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal>
            <literal type="string">"backup : id = %u, version = %s, system-id = %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal>
            <literal type="string">"HINT: this may be a symptom of repository corruption!"</literal></expr></argument>,
            <argument><expr><name><name>archiveInfo</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>pgVersionToStr</name><argument_list>(<argument><expr><name><name>archiveInfo</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>archiveInfo</name><operator>-&gt;</operator><name>systemId</name></name></expr></argument>, <argument><expr><name><name>backupInfo</name><operator>-&gt;</operator><name>id</name></name></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>pgVersionToStr</name><argument_list>(<argument><expr><name><name>backupInfo</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>backupInfo</name><operator>-&gt;</operator><name>systemId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>checkStanzaInfoPg</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>pgVersion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>pgSystemId</name></decl></parameter>, <parameter><decl><type><name>CipherType</name></type> <name>cipherType</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>cipherPass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE</name></expr></argument>, <argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>pgVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name>pgSystemId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>cipherType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>cipherPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>storage</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Check that the backup and archive info files exist</comment>
        <decl_stmt><decl><type><name>InfoArchive</name> <modifier>*</modifier></type><name>infoArchive</name> <init>= <expr><call><name>infoArchiveLoadFile</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>, <argument><expr><name>cipherType</name></expr></argument>, <argument><expr><name>cipherPass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InfoPgData</name></type> <name>archiveInfoPg</name> <init>= <expr><call><name>infoPgData</name><argument_list>(<argument><expr><call><name>infoArchivePg</name><argument_list>(<argument><expr><name>infoArchive</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>infoPgDataCurrentId</name><argument_list>(<argument><expr><call><name>infoArchivePg</name><argument_list>(<argument><expr><name>infoArchive</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InfoBackup</name> <modifier>*</modifier></type><name>infoBackup</name> <init>= <expr><call><name>infoBackupLoadFile</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>, <argument><expr><name>cipherType</name></expr></argument>, <argument><expr><name>cipherPass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InfoPgData</name></type> <name>backupInfoPg</name> <init>= <expr><call><name>infoPgData</name><argument_list>(<argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>infoBackup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>infoPgDataCurrentId</name><argument_list>(<argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>infoBackup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Check that the info files pg data match each other</comment>
        <expr_stmt><expr><call><name>checkStanzaInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>archiveInfoPg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backupInfoPg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check that the version and system id match the current database</comment>
        <if_stmt><if>if <condition>(<expr><name>pgVersion</name> <operator>!=</operator> <name><name>archiveInfoPg</name><operator>.</operator><name>version</name></name> <operator>||</operator> <name>pgSystemId</name> <operator>!=</operator> <name><name>archiveInfoPg</name><operator>.</operator><name>systemId</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>FileInvalidError</name></expr></argument>, <argument><expr><literal type="string">"backup and archive info files exist but do not match the database\n"</literal>
                <literal type="string">"HINT: is this the correct stanza?\n"</literal>
                <literal type="string">"HINT: did an error occur during stanza-upgrade?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
