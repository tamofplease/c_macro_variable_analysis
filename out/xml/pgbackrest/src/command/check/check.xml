<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/check/check.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Check Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/archive/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/check/check.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/check/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/memContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoArchive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Helper functions (to assist with testing)
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type>
<name>checkManifest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Return the actual number of pg* defined</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Loop through all defined databases and attempt to build a manifest</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>pgIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pgIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpPg</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>pgIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name><operator>++</operator></expr>;</expr_stmt>
            <comment type="line">// ??? Placeholder for manifest build</comment>
            <expr_stmt><expr><call><name>storageListP</name><argument_list>(<argument><expr><call><name>storagePgIdx</name><argument_list>(<argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>checkStandby</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DbGetResult</name></type> <name>dbGroup</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pgPathDefinedTotal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>DB_GET_RESULT</name></expr></argument>, <argument><expr><name>dbGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>pgPathDefinedTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If a standby is defined, check the configuration</comment>
    <if_stmt><if>if <condition>(<expr><name><name>dbGroup</name><operator>.</operator><name>standby</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// If primary was not found (only have 1 pg configured locally, and we want to still run because this is a standby)</comment>
        <if_stmt><if>if <condition>(<expr><name><name>dbGroup</name><operator>.</operator><name>primary</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// If any repo is local or more than one pg-path is found then a primary should have been found so error</comment>
            <decl_stmt><decl><type><name>bool</name></type> <name>error</name> <init>= <expr><name>pgPathDefinedTotal</name> <operator>&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>repoIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <while>while <condition>(<expr><operator>!</operator><name>error</name> <operator>&amp;&amp;</operator> <name>repoIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>repoIsLocal</name><argument_list>(<argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>repoIdx</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>

            <if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>ConfigError</name></expr></argument>, <argument><expr><literal type="string">"primary database not found\nHINT: check indexed pg-path/pg-host configurations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Check the user configured path and version against the database</comment>
        <expr_stmt><expr><call><name>checkDbConfig</name><argument_list>(<argument><expr><call><name>dbPgControl</name><argument_list>(<argument><expr><name><name>dbGroup</name><operator>.</operator><name>standby</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>version</name></expr></argument>, <argument><expr><name><name>dbGroup</name><operator>.</operator><name>standbyIdx</name></name></expr></argument>, <argument><expr><name><name>dbGroup</name><operator>.</operator><name>standby</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check each repository configured</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>repoIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>repoIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>repoIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOG_INFO_FMT</name><argument_list>(<argument><expr><name>CFGCMD_CHECK</name> <literal type="string">" %s (standby)"</literal></expr></argument>, <argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Get the repo storage in case it is remote and encryption settings need to be pulled down (performed here for testing)</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storageRepo</name> <init>= <expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Check that the backup and archive info files exist and are valid for the current database of the stanza</comment>
            <expr_stmt><expr><call><name>checkStanzaInfoPg</name><argument_list>(
                <argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>dbPgControl</name><argument_list>(<argument><expr><name><name>dbGroup</name><operator>.</operator><name>standby</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>version</name></expr></argument>, <argument><expr><call><name>dbPgControl</name><argument_list>(<argument><expr><name><name>dbGroup</name><operator>.</operator><name>standby</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>systemId</name></expr></argument>,
                <argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>LOG_INFO</name><argument_list>(<argument><expr><literal type="string">"switch wal not performed because this is a standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Free the standby connection</comment>
        <expr_stmt><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>dbGroup</name><operator>.</operator><name>standby</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// If backup from standby is true then warn when a standby not found</comment>
    <if type="elseif">else if <condition>(<expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptBackupStandby</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>LOG_WARN</name><argument_list>(<argument><expr><literal type="string">"option '"</literal> <name>CFGOPT_BACKUP_STANDBY</name> <literal type="string">"' is enabled but standby is not properly configured"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>checkPrimary</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>DbGetResult</name></type> <name>dbGroup</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>DB_GET_RESULT</name></expr></argument>, <argument><expr><name>dbGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If a primary is defined, check the configuration and perform a WAL switch and make sure the WAL is archived</comment>
    <if_stmt><if>if <condition>(<expr><name><name>dbGroup</name><operator>.</operator><name>primary</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Check the user configured path and version against the database</comment>
        <expr_stmt><expr><call><name>checkDbConfig</name><argument_list>(<argument><expr><call><name>dbPgControl</name><argument_list>(<argument><expr><name><name>dbGroup</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>version</name></expr></argument>, <argument><expr><name><name>dbGroup</name><operator>.</operator><name>primaryIdx</name></name></expr></argument>, <argument><expr><name><name>dbGroup</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check configuration of each repo</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><modifier>*</modifier></type><name>repoArchiveId</name> <init>= <expr><call><name>memNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>String</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>repoIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>repoIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>repoIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOG_INFO_FMT</name><argument_list>(<argument><expr><name>CFGCMD_CHECK</name> <literal type="string">" %s configuration (primary)"</literal></expr></argument>, <argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Get the repo storage in case it is remote and encryption settings need to be pulled down (performed here for testing)</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storageRepo</name> <init>= <expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Check that the backup and archive info files exist and are valid for the current database of the stanza</comment>
            <expr_stmt><expr><call><name>checkStanzaInfoPg</name><argument_list>(
                <argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>dbPgControl</name><argument_list>(<argument><expr><name><name>dbGroup</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>version</name></expr></argument>, <argument><expr><call><name>dbPgControl</name><argument_list>(<argument><expr><name><name>dbGroup</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>systemId</name></expr></argument>,
                <argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Attempt to load the archive info file and retrieve the archiveId</comment>
            <decl_stmt><decl><type><name>InfoArchive</name> <modifier>*</modifier></type><name>archiveInfo</name> <init>= <expr><call><name>infoArchiveLoadFile</name><argument_list>(
                <argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>repoArchiveId</name><index>[<expr><name>repoIdx</name></expr>]</index></name> <operator>=</operator> <call><name>infoArchiveId</name><argument_list>(<argument><expr><name>archiveInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// Perform a WAL switch</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>walSegment</name> <init>= <expr><call><name>dbWalSwitch</name><argument_list>(<argument><expr><name><name>dbGroup</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Wait for the WAL to appear in each repo</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>repoIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>repoIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>repoIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOG_INFO_FMT</name><argument_list>(<argument><expr><name>CFGCMD_CHECK</name> <literal type="string">" %s archive for WAL (primary)"</literal></expr></argument>, <argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storageRepo</name> <init>= <expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>walSegmentFile</name> <init>= <expr><call><name>walSegmentFind</name><argument_list>(
                <argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name><name>repoArchiveId</name><index>[<expr><name>repoIdx</name></expr>]</index></name></expr></argument>, <argument><expr><name>walSegment</name></expr></argument>, <argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptArchiveTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>LOG_INFO_FMT</name><argument_list>(
                <argument><expr><literal type="string">"WAL segment %s successfully archived to '%s' on %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>walSegment</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>repoArchiveId</name><index>[<expr><name>repoIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>walSegmentFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>dbGroup</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cmdCheck</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Get the primary/standby connections (standby is only required if backup from standby is enabled)</comment>
        <decl_stmt><decl><type><name>DbGetResult</name></type> <name>dbGroup</name> <init>= <expr><call><name>dbGet</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>dbGroup</name><operator>.</operator><name>standby</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>dbGroup</name><operator>.</operator><name>primary</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>ConfigError</name></expr></argument>, <argument><expr><literal type="string">"no database found\nHINT: check indexed pg-path/pg-host configurations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pgPathDefinedTotal</name> <init>= <expr><call><name>checkManifest</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>checkStandby</name><argument_list>(<argument><expr><name>dbGroup</name></expr></argument>, <argument><expr><name>pgPathDefinedTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkPrimary</name><argument_list>(<argument><expr><name>dbGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
