<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/remote/remote.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Remote Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/backup/pageChecksum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/control/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/cipherBlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/filter/sink.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/filter/size.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/remote/protocol.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Command handlers
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ProtocolServerHandler</name></type> <name><name>commandRemoteHandlerList</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><name>PROTOCOL_SERVER_HANDLER_DB_LIST</name>
    <name>PROTOCOL_SERVER_HANDLER_OPTION_LIST</name>
    <name>PROTOCOL_SERVER_HANDLER_STORAGE_REMOTE_LIST</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Filter handlers
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StorageRemoteFilterHandler</name></type> <name><name>storageRemoteFilterHandlerList</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CIPHER_BLOCK_FILTER_TYPE</name></expr>, <expr><operator>.</operator><name>handlerParam</name> <operator>=</operator> <name>cipherBlockNewPack</name></expr>}</block></expr>,
    <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CRYPTO_HASH_FILTER_TYPE</name></expr>, <expr><operator>.</operator><name>handlerParam</name> <operator>=</operator> <name>cryptoHashNewPack</name></expr>}</block></expr>,
    <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>PAGE_CHECKSUM_FILTER_TYPE</name></expr>, <expr><operator>.</operator><name>handlerParam</name> <operator>=</operator> <name>pageChecksumNewPack</name></expr>}</block></expr>,
    <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>SINK_FILTER_TYPE</name></expr>, <expr><operator>.</operator><name>handlerNoParam</name> <operator>=</operator> <name>ioSinkNew</name></expr>}</block></expr>,
    <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>SIZE_FILTER_TYPE</name></expr>, <expr><operator>.</operator><name>handlerNoParam</name> <operator>=</operator> <name>ioSizeNew</name></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cmdRemote</name><parameter_list>(<parameter><decl><type><name>ProtocolServer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>server</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set filter handlers</comment>
    <expr_stmt><expr><call><name>storageRemoteFilterHandlerSet</name><argument_list>(<argument><expr><name>storageRemoteFilterHandlerList</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>storageRemoteFilterHandlerList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Acquire a lock if this command needs one.  We'll use the noop that is always sent from the client right after the</comment>
        <comment type="line">// handshake to return an error.  We can't take a lock earlier than this because we want the error to go back through the</comment>
        <comment type="line">// protocol layer.</comment>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>success</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Get the command. No need to check parameters since we know this is the first noop.</comment>
            <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><call><name>protocolServerCommandGet</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name> <operator>==</operator> <name>PROTOCOL_COMMAND_NOOP</name></expr></argument>, <argument><expr><literal type="string">"noop expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Only try the lock if this is process 0, i.e. the remote started from the main process</comment>
            <if_stmt><if>if <condition>(<expr><call><name>cfgOptionUInt</name><argument_list>(<argument><expr><name>cfgOptProcess</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Acquire a lock if this command requires a lock</comment>
                <if_stmt><if>if <condition>(<expr><call><name>cfgLockRemoteRequired</name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Make sure the local host is not stopped</comment>
                    <expr_stmt><expr><call><name>lockStopTest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Acquire the lock</comment>
                    <expr_stmt><expr><call><name>lockAcquire</name><argument_list>(
                        <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptLockPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptExecId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgLockType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                        <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Notify the client of success</comment>
            <expr_stmt><expr><call><name>protocolServerDataEndPut</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>success</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>protocolServerError</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>errorCode</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><call><name>errorStackTrace</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// If not successful we'll just exit</comment>
        <if_stmt><if>if <condition>(<expr><name>success</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>protocolServerProcess</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>commandRemoteHandlerList</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>commandRemoteHandlerList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
