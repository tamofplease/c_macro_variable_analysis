<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/command.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Common Command Routines
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/memContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/stat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Track time command started
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>TimeMSec</name></type> <name>timeBegin</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type><name>cmdOptionStr</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cmdInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>timeBegin</name> <operator>=</operator> <call><name>timeMSec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type>
<name>cmdOption</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>cmdOptionStr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>memContextTop()</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>cmdOptionStr</name> <operator>=</operator> <call><name>strNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Add command parameters if they exist</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier></type><name>commandParamList</name> <init>= <expr><call><name>cfgCommandParam</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strLstEmpty</name><argument_list>(<argument><expr><name>commandParamList</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>cmdOptionStr</name></expr></argument>, <argument><expr><literal type="string">" ["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>commandParamIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>commandParamIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>commandParamList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>commandParamIdx</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>commandParam</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>commandParamList</name></expr></argument>, <argument><expr><name>commandParamIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if_stmt><if>if <condition>(<expr><name>commandParamIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>cmdOptionStr</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>commandParam</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>commandParam</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>commandParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>cmdOptionStr</name></expr></argument>, <argument><expr><name>commandParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>

                    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>cmdOptionStr</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Loop though options and add the ones that are interesting</comment>
                <for>for <control>(<init><decl><type><name>ConfigOption</name></type> <name>optionId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr>;</condition> <incr><expr><name>optionId</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <comment type="line">// Skip the option if not valid for this command.  Generally only one command runs at a time, but sometimes</comment>
                    <comment type="line">// commands are chained together (e.g. backup and expire) and the second command may not use all the options of</comment>
                    <comment type="line">// the first command.  Displaying them is harmless but might cause confusion.</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>cfgParseOptionValid</name><argument_list>(<argument><expr><call><name>cfgCommand</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>cfgCommandRole</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <continue>continue;</continue></block_content></block></if></if_stmt>

                    <comment type="line">// Loop through option indexes</comment>
                    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdxTotal</name> <init>= <expr><ternary><condition><expr><call><name>cfgOptionGroup</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><call><name>cfgOptionGroupId</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optionIdx</name> <operator>&lt;</operator> <name>optionIdxTotal</name></expr>;</condition> <incr><expr><name>optionIdx</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <comment type="line">// If option was negated</comment>
                        <if_stmt><if>if <condition>(<expr><call><name>cfgOptionIdxNegate</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>cmdOptionStr</name></expr></argument>, <argument><expr><literal type="string">" --no-%s"</literal></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                        <comment type="line">// If option was reset</comment>
                        <if type="elseif">else if <condition>(<expr><call><name>cfgOptionIdxReset</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>cmdOptionStr</name></expr></argument>, <argument><expr><literal type="string">" --reset-%s"</literal></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                        <comment type="line">// Else not default</comment>
                        <if type="elseif">else if <condition>(<expr><call><name>cfgOptionIdxSource</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>cfgSourceDefault</name></expr>)</condition>
                        <block>{<block_content>
                            <comment type="line">// Don't show redacted options</comment>
                            <if_stmt><if>if <condition>(<expr><call><name>cfgParseOptionSecure</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>cmdOptionStr</name></expr></argument>, <argument><expr><literal type="string">" --%s=&lt;redacted&gt;"</literal></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                            <comment type="line">// Output boolean option</comment>
                            <if type="elseif">else if <condition>(<expr><call><name>cfgParseOptionType</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>cfgOptTypeBoolean</name></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>cmdOptionStr</name></expr></argument>, <argument><expr><literal type="string">" --%s"</literal></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                            <comment type="line">// Output other options</comment>
                            <else>else
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>valueList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                                <comment type="line">// Generate the values of hash options</comment>
                                <if_stmt><if>if <condition>(<expr><call><name>cfgParseOptionType</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>cfgOptTypeHash</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name>valueList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                                    <decl_stmt><decl><type><specifier>const</specifier> <name>KeyValue</name> <modifier>*</modifier></type><name>optionKv</name> <init>= <expr><call><name>cfgOptionIdxKv</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <decl_stmt><decl><type><specifier>const</specifier> <name>VariantList</name> <modifier>*</modifier></type><name>keyList</name> <init>= <expr><call><name>kvKeyList</name><argument_list>(<argument><expr><name>optionKv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>keyIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>keyIdx</name> <operator>&lt;</operator> <call><name>varLstSize</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>keyIdx</name><operator>++</operator></expr></incr>)</control>
                                    <block>{<block_content>
                                        <expr_stmt><expr><call><name>strLstAddFmt</name><argument_list>(
                                            <argument><expr><name>valueList</name></expr></argument>, <argument><expr><literal type="string">"%s=%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>keyIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>varStrForce</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>optionKv</name></expr></argument>, <argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>keyIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block></for>
                                </block_content>}</block></if>
                                <comment type="line">// Generate values for list options</comment>
                                <if type="elseif">else if <condition>(<expr><call><name>cfgParseOptionType</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>cfgOptTypeList</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name>valueList</name> <operator>=</operator> <call><name>strLstNewVarLst</name><argument_list>(<argument><expr><call><name>cfgOptionIdxLst</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if>
                                <comment type="line">// Else only one value</comment>
                                <else>else
                                <block>{<block_content>
                                    <expr_stmt><expr><name>valueList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxDisplay</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>

                                <comment type="line">// Output options and values</comment>
                                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>valueListIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>valueListIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>valueListIdx</name><operator>++</operator></expr></incr>)</control>
                                <block>{<block_content>
                                    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>valueListIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>cmdOptionStr</name></expr></argument>, <argument><expr><literal type="string">" --%s"</literal></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                                        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                                    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>cmdOptionStr</name></expr></argument>, <argument><expr><literal type="string">"=%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></for>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>cmdOptionStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cmdBegin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cfgCommand</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>cfgCmdNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// This is fairly expensive log message to generate so skip it if it won't be output</comment>
    <if_stmt><if>if <condition>(<expr><call><name>logAny</name><argument_list>(<argument><expr><call><name>cfgLogLevelDefault</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Basic info on command start</comment>
            <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>strCatFmt</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s command begin"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgCommandRoleName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Free the old option string if it exists. This is needed when more than one command is run in a row so an option</comment>
            <comment type="line">// string gets created for the new command.</comment>
            <expr_stmt><expr><call><name>strFree</name><argument_list>(<argument><expr><name>cmdOptionStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cmdOptionStr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

            <comment type="line">// Add version and options</comment>
            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">" %s:%s"</literal></expr></argument>, <argument><expr><name>PROJECT_VERSION</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cmdOption</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>cfgLogLevelDefault</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cmdEnd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>errorMessage</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>errorMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cfgCommand</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>cfgCmdNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Skip this log message if it won't be output.  It's not too expensive but since we skipped cmdBegin(), may as well.</comment>
    <if_stmt><if>if <condition>(<expr><call><name>logAny</name><argument_list>(<argument><expr><call><name>cfgLogLevelDefault</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Output statistics if there are any</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>statJson</name> <init>= <expr><call><name>statToJson</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>statJson</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>LOG_DETAIL_FMT</name><argument_list>(<argument><expr><literal type="string">"statistics: %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>statJson</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Basic info on command end</comment>
            <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>strCatFmt</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s command end: "</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgCommandRoleName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>errorMessage</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">"completed successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptLogTimestamp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="string">" (%"</literal> <name>PRIu64</name> <literal type="string">"ms)"</literal></expr></argument>, <argument><expr><call><name>timeMSec</name><argument_list>()</argument_list></call> <operator>-</operator> <name>timeBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><name>errorMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt><expr><call><name>LOG</name><argument_list>(<argument><expr><call><name>cfgLogLevelDefault</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Reset timeBegin in case there is another command following this one</comment>
    <expr_stmt><expr><name>timeBegin</name> <operator>=</operator> <call><name>timeMSec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
