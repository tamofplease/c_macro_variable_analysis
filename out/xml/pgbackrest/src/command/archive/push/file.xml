<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/archive/push/file.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Archive Push File
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/archive/push/file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/archive/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/control/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/cipherBlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/filter/group.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Catch write errors during processing

We want to continue when there are write errors during processing so add them to a list to be reported later and return false so the
caller knows to stop writing on the affected repo.
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><enum>enum
<block>{
    <decl><name>archivePushFileIoTypeOpen</name> <init>= <expr><call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"open"</literal></expr></argument>, <argument><expr><literal type="number">0x7160f0</literal></expr></argument>)</argument_list></call></expr></init></decl>,
    <decl><name>archivePushFileIoTypeWrite</name> <init>= <expr><call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"write"</literal></expr></argument>, <argument><expr><literal type="number">0x5a26570</literal></expr></argument>)</argument_list></call></expr></init></decl>,
    <decl><name>archivePushFileIoTypeClose</name> <init>= <expr><call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><literal type="number">0x59bd830</literal></expr></argument>)</argument_list></call></expr></init></decl>,
}</block></enum></type> <name>ArchivePushFileIoType</name>;</typedef>

<comment type="line">// Helper to add errors to the list</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>archivePushErrorAdd</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>errorList</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>repoIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING_LIST</name></expr></argument>, <argument><expr><name>errorList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strLstAddFmt</name><argument_list>(<argument><expr><name>errorList</name></expr></argument>, <argument><expr><literal type="string">"%s: [%s] %s"</literal></expr></argument>, <argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>errorTypeName</name><argument_list>(<argument><expr><call><name>errorType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>archivePushFileIo</name><parameter_list>(<parameter><decl><type><name>ArchivePushFileIoType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>repoIdx</name></decl></parameter>, <parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>errorList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>IO_WRITE</name></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING_LIST</name></expr></argument>, <argument><expr><name>errorList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>write</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>errorList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Process write operation</comment>
    <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>archivePushFileIoTypeOpen</name></expr>:</case>
                <expr_stmt><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>archivePushFileIoTypeWrite</name></expr>:</case>
                <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>archivePushFileIoTypeClose</name></expr>:</case>
                <expr_stmt><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block>
    <comment type="line">// Handle errors</comment>
    <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>archivePushErrorAdd</name><argument_list>(<argument><expr><name>errorList</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>ArchivePushFileResult</name></type>
<name>archivePushFile</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>walSource</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>headerCheck</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>modeCheck</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>pgVersion</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>pgSystemId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>archiveFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>CompressType</name></type> <name>compressType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>compressLevel</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>List</name> <modifier>*</modifier><specifier>const</specifier></type> <name>repoList</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>priorErrorList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>walSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>headerCheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>modeCheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>pgVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name>pgSystemId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>archiveFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>compressType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>compressLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>repoList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING_LIST</name></expr></argument>, <argument><expr><name>priorErrorList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>walSource</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>archiveFile</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>repoList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>priorErrorList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><name>repoList</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ArchivePushFileResult</name></type> <name>result</name> <init>= <expr><block>{<expr><operator>.</operator><name>warnList</name> <operator>=</operator> <macro><name>strLstNew</name><argument_list>()</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>errorList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>priorErrorList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Is this a WAL segment?</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>isSegment</name> <init>= <expr><call><name>walIsSegment</name><argument_list>(<argument><expr><name>archiveFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If this is a segment compare archive version and systemId to the WAL header</comment>
        <if_stmt><if>if <condition>(<expr><name>headerCheck</name> <operator>&amp;&amp;</operator> <name>isSegment</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>PgWal</name></type> <name>walInfo</name> <init>= <expr><call><name>pgWalFromFile</name><argument_list>(<argument><expr><name>walSource</name></expr></argument>, <argument><expr><call><name>storageLocal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>walInfo</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name>pgVersion</name> <operator>||</operator> <name><name>walInfo</name><operator>.</operator><name>systemId</name></name> <operator>!=</operator> <name>pgSystemId</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                    <argument><expr><name>ArchiveMismatchError</name></expr></argument>,
                    <argument><expr><literal type="string">"WAL file '%s' version %s, system-id %"</literal> <name>PRIu64</name> <literal type="string">" do not match stanza version %s, system-id %"</literal> <name>PRIu64</name></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>walSource</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>pgVersionToStr</name><argument_list>(<argument><expr><name><name>walInfo</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>walInfo</name><operator>.</operator><name>systemId</name></name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>pgVersionToStr</name><argument_list>(<argument><expr><name>pgVersion</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>pgSystemId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set archive destination initially to the archive file, this will be updated later for wal segments</comment>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>archiveDestination</name> <init>= <expr><call><name>strCat</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>archiveFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Assume that all repos need a copy of the archive file</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>destinationCopyAny</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>destinationCopy</name> <init>= <expr><call><name>memNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name>repoList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>repoListIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>repoListIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name>repoList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>repoListIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>destinationCopy</name><index>[<expr><name>repoListIdx</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// Get wal segment checksum and compare it to what exists in the repo, if any</comment>
        <if_stmt><if>if <condition>(<expr><name>isSegment</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Assume that no repos need a copy of the WAL segment and update when a repo needing a copy is found</comment>
            <expr_stmt><expr><name>destinationCopyAny</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

            <comment type="line">// Generate a sha1 checksum for the wal segment</comment>
            <decl_stmt><decl><type><name>IoRead</name> <modifier>*</modifier></type><name>read</name> <init>= <expr><call><name>storageReadIo</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageLocal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>walSource</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cryptoHashNew</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ioReadDrain</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>walSegmentChecksum</name> <init>= <expr><call><name>bufHex</name><argument_list>(
                <argument><expr><call><name>pckReadBinP</name><argument_list>(<argument><expr><call><name>ioFilterGroupResultP</name><argument_list>(<argument><expr><call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CRYPTO_HASH_FILTER_TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Check each repo for the WAL segment</comment>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>repoListIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>repoListIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name>repoList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>repoListIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>ArchivePushFileRepoData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>repoData</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name>repoList</name></expr></argument>, <argument><expr><name>repoListIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Check if the WAL segment already exists in the repo</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>walSegmentFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><name>walSegmentFile</name> <operator>=</operator> <call><name>walSegmentFind</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>repoIdx</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>archiveId</name></name></expr></argument>, <argument><expr><name>archiveFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>archivePushErrorAdd</name><argument_list>(<argument><expr><name>errorList</name></expr></argument>, <argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>repoIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>destinationCopy</name><index>[<expr><name>repoListIdx</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// If there was an error try the next repo</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>destinationCopy</name><index>[<expr><name>repoListIdx</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <comment type="line">// If the WAL segment was found validate the checksum</comment>
                <if_stmt><if>if <condition>(<expr><name>walSegmentFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>walSegmentRepoChecksum</name> <init>= <expr><call><name>strSubN</name><argument_list>(<argument><expr><name>walSegmentFile</name></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>archiveFile</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>HASH_TYPE_SHA1_SIZE_HEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// If the checksums are the same then succeed but warn if archive-mode-check is enabled in case this is a</comment>
                    <comment type="line">// symptom of some other issue</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>walSegmentChecksum</name></expr></argument>, <argument><expr><name>walSegmentRepoChecksum</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>modeCheck</name></expr>)</condition>
                        <block>{<block_content>
                            <comment type="line">// Add warning to the result that will be returned to the main process</comment>
                            <expr_stmt><expr><call><name>strLstAddFmt</name><argument_list>(
                                <argument><expr><name><name>result</name><operator>.</operator><name>warnList</name></name></expr></argument>,
                                <argument><expr><literal type="string">"WAL file '%s' already exists in the %s archive with the same checksum"</literal>
                                <literal type="string">"\nHINT: this is valid in some recovery scenarios but may also indicate a problem."</literal></expr></argument>,
                                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>archiveFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>, <argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>repoIdx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <comment type="line">// No need to copy to this repo</comment>
                        <expr_stmt><expr><name><name>destinationCopy</name><index>[<expr><name>repoListIdx</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <comment type="line">// Else error so we don't overwrite the existing segment. Do not continue processing after this error since it</comment>
                    <comment type="line">// indicates corruption, split brain, or some other unrecoverable error.</comment>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                            <argument><expr><name>ArchiveDuplicateError</name></expr></argument>, <argument><expr><literal type="string">"WAL file '%s' already exists in the %s archive with a different checksum"</literal></expr></argument>,
                            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>archiveFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>, <argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>repoIdx</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if>
                <comment type="line">// Else the repo needs a copy</comment>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>destinationCopyAny</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></for>

            <comment type="line">// Append the checksum to the archive destination</comment>
            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>archiveDestination</name></expr></argument>, <argument><expr><literal type="string">"-%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>walSegmentChecksum</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Copy the file if one or more repos require it</comment>
        <if_stmt><if>if <condition>(<expr><name>destinationCopyAny</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Source file is read once and copied to all repos</comment>
            <decl_stmt><decl><type><name>StorageRead</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageLocal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>walSource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Is the file compressible during the copy?</comment>
            <decl_stmt><decl><type><name>bool</name></type> <name>compressible</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// If the file will be compressed then add compression filter</comment>
            <if_stmt><if>if <condition>(<expr><name>isSegment</name> <operator>&amp;&amp;</operator> <name>compressType</name> <operator>!=</operator> <name>compressTypeNone</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>compressExtCat</name><argument_list>(<argument><expr><name>archiveDestination</name></expr></argument>, <argument><expr><name>compressType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>compressFilter</name><argument_list>(<argument><expr><name>compressType</name></expr></argument>, <argument><expr><name>compressLevel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>compressible</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Initialize per-repo destination files</comment>
            <decl_stmt><decl><type><name>StorageWrite</name> <modifier>*</modifier><modifier>*</modifier></type><name>destination</name> <init>= <expr><call><name>memNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StorageWrite</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name>repoList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>repoListIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>repoListIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name>repoList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>repoListIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>ArchivePushFileRepoData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>repoData</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name>repoList</name></expr></argument>, <argument><expr><name>repoListIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Does this repo need a copy?</comment>
                <if_stmt><if>if <condition>(<expr><name><name>destinationCopy</name><index>[<expr><name>repoListIdx</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Create destination file</comment>
                    <expr_stmt><expr><name><name>destination</name><index>[<expr><name>repoListIdx</name></expr>]</index></name> <operator>=</operator> <call><name>storageNewWriteP</name><argument_list>(
                        <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>repoIdx</name></name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>archiveId</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>archiveDestination</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><operator>.</operator><name>compressible</name> <operator>=</operator> <name>compressible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// If there is a cipher then add the encrypt filter</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>repoData</name><operator>-&gt;</operator><name>cipherType</name></name> <operator>!=</operator> <name>cipherTypeNone</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(
                            <argument><expr><call><name>ioWriteFilterGroup</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name><name>destination</name><index>[<expr><name>repoListIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>cipherBlockNewP</name><argument_list>(<argument><expr><name>cipherModeEncrypt</name></expr></argument>, <argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>cipherType</name></name></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>cipherPass</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <comment type="line">// Open source file</comment>
            <expr_stmt><expr><call><name>ioReadOpen</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Open the destination files now that we know the source file exists and is readable</comment>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>repoListIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>repoListIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name>repoList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>repoListIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>repoIdx</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ArchivePushFileRepoData</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name>repoList</name></expr></argument>, <argument><expr><name>repoListIdx</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>repoIdx</name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>destinationCopy</name><index>[<expr><name>repoListIdx</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>destinationCopy</name><index>[<expr><name>repoListIdx</name></expr>]</index></name> <operator>=</operator> <call><name>archivePushFileIo</name><argument_list>(
                        <argument><expr><name>archivePushFileIoTypeOpen</name></expr></argument>, <argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name><name>destination</name><index>[<expr><name>repoListIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>, <argument><expr><name>errorList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <comment type="line">// Copy data from source to destination</comment>
            <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>read</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><call><name>ioBufferSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <do>do
            <block>{<block_content>
                <comment type="line">// Read from source</comment>
                <expr_stmt><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Write to each destination</comment>
                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>repoListIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>repoListIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name>repoList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>repoListIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>repoIdx</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ArchivePushFileRepoData</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name>repoList</name></expr></argument>, <argument><expr><name>repoListIdx</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>repoIdx</name></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name><name>destinationCopy</name><index>[<expr><name>repoListIdx</name></expr>]</index></name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>destinationCopy</name><index>[<expr><name>repoListIdx</name></expr>]</index></name> <operator>=</operator> <call><name>archivePushFileIo</name><argument_list>(
                            <argument><expr><name>archivePushFileIoTypeWrite</name></expr></argument>, <argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name><name>destination</name><index>[<expr><name>repoListIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>read</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>, <argument><expr><name>errorList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

                <comment type="line">// Clear buffer</comment>
                <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            while <condition>(<expr><operator>!</operator><call><name>ioReadEof</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>

            <comment type="line">// Close the source and destination files</comment>
            <expr_stmt><expr><call><name>ioReadClose</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>repoListIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>repoListIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name>repoList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>repoListIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>repoIdx</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ArchivePushFileRepoData</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name>repoList</name></expr></argument>, <argument><expr><name>repoListIdx</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>repoIdx</name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>destinationCopy</name><index>[<expr><name>repoListIdx</name></expr>]</index></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>destinationCopy</name><index>[<expr><name>repoListIdx</name></expr>]</index></name> <operator>=</operator> <call><name>archivePushFileIo</name><argument_list>(
                        <argument><expr><name>archivePushFileIoTypeClose</name></expr></argument>, <argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name><name>destination</name><index>[<expr><name>repoListIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>, <argument><expr><name>errorList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Throw any errors, even if some pushes were successful. It is important that PostgreSQL receives an error so it does not</comment>
        <comment type="line">// remove the file.</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>errorList</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>CommandError</name></expr></argument>, <argument><expr><name>CFGCMD_ARCHIVE_PUSH</name> <literal type="string">" command encountered error(s):\n%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><name>errorList</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_STRUCT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
