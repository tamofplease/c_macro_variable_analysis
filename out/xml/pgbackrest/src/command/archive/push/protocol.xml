<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/archive/push/protocol.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Archive Push Protocol Handler
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/archive/push/file.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/archive/push/protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/memContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>archivePushFileProtocol</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>ProtocolServer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>server</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>PROTOCOL_SERVER</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>param</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>server</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Read parameters</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>walSource</name> <init>= <expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>headerCheck</name> <init>= <expr><call><name>pckReadBoolP</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>modeCheck</name> <init>= <expr><call><name>pckReadBoolP</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>pgVersion</name> <init>= <expr><call><name>pckReadU32P</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>pgSystemId</name> <init>= <expr><call><name>pckReadU64P</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>archiveFile</name> <init>= <expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>CompressType</name></type> <name>compressType</name> <init>= <expr><call><name>pckReadU32P</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>compressLevel</name> <init>= <expr><call><name>pckReadI32P</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>priorErrorList</name> <init>= <expr><call><name>pckReadStrLstP</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Read repo data</comment>
        <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>repoList</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ArchivePushFileRepoData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>pckReadArrayBeginP</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>(<expr><operator>!</operator><call><name>pckReadNullP</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>pckReadObjBeginP</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>ArchivePushFileRepoData</name></type> <name>repo</name> <init>= <expr><block>{<expr><operator>.</operator><name>repoIdx</name> <operator>=</operator> <macro><name>pckReadU32P</name><argument_list>(<argument>param</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>repo</name><operator>.</operator><name>archiveId</name></name> <operator>=</operator> <call><name>pckReadStrP</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>repo</name><operator>.</operator><name>cipherType</name></name> <operator>=</operator> <call><name>pckReadU64P</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>repo</name><operator>.</operator><name>cipherPass</name></name> <operator>=</operator> <call><name>pckReadStrP</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pckReadObjEndP</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>repoList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>repo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>pckReadArrayEndP</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Push file</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>ArchivePushFileResult</name></type> <name>fileResult</name> <init>= <expr><call><name>archivePushFile</name><argument_list>(
            <argument><expr><name>walSource</name></expr></argument>, <argument><expr><name>headerCheck</name></expr></argument>, <argument><expr><name>modeCheck</name></expr></argument>, <argument><expr><name>pgVersion</name></expr></argument>, <argument><expr><name>pgSystemId</name></expr></argument>, <argument><expr><name>archiveFile</name></expr></argument>, <argument><expr><name>compressType</name></expr></argument>, <argument><expr><name>compressLevel</name></expr></argument>, <argument><expr><name>repoList</name></expr></argument>,
            <argument><expr><name>priorErrorList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Return result</comment>
        <expr_stmt><expr><call><name>protocolServerDataPut</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>pckWriteStrLstP</name><argument_list>(<argument><expr><call><name>protocolPackNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>fileResult</name><operator>.</operator><name>warnList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>protocolServerDataEndPut</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
