<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/backup/pageChecksum.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Page Checksum Filter
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/filter/filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/backup/pageChecksum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/macro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/interface/static.vendor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>PageChecksum</name>
<block>{
    <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name></decl>;</decl_stmt>                                         <comment type="line">// Mem context of filter</comment>

    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>segmentPageTotal</name></decl>;</decl_stmt>                                  <comment type="line">// Total pages in a segment</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pageNoOffset</name></decl>;</decl_stmt>                                      <comment type="line">// Page number offset for subsequent segments</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>fileName</name></decl>;</decl_stmt>                                         <comment type="line">// Used to load the file to retry pages</comment>

    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pageBuffer</name></decl>;</decl_stmt>                                      <comment type="line">// Buffer to hold a page while verifying the checksum</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>valid</name></decl>;</decl_stmt>                                                     <comment type="line">// Is the relation structure valid?</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>align</name></decl>;</decl_stmt>                                                     <comment type="line">// Is the relation alignment valid?</comment>
    <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>error</name></decl>;</decl_stmt>                                               <comment type="line">// List of checksum errors</comment>
}</block></struct></type> <name>PageChecksum</name>;</typedef>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Macros for function logging
***********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>pageChecksumToLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PageChecksum</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"{valid: %s, align: %s}"</literal></expr></argument>, <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>valid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>align</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_PAGE_CHECKSUM_TYPE</name></cpp:macro>                                                                                            \
    <cpp:value>PageChecksum *</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_PAGE_CHECKSUM_FORMAT</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>buffer</name></type></parameter>, <parameter><type><name>bufferSize</name></type></parameter>)</parameter_list></cpp:macro>                                                               \
    <cpp:value>FUNCTION_LOG_STRING_OBJECT_FORMAT(value, pageChecksumToLog, buffer, bufferSize)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Count bytes in the input
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pageChecksumProcess</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>PageChecksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>PAGE_CHECKSUM</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>input</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Calculate total pages in the buffer</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pageTotal</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><call><name>bufUsed</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>PG_PAGE_SIZE_DEFAULT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <comment type="line">// If there is a partial page make sure there is enough of it to validate the checksum</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pageRemainder</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><call><name>bufUsed</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>PG_PAGE_SIZE_DEFAULT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>pageRemainder</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Misaligned blocks, if any, should only be at the end of the file</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>align</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"should not be possible to see two misaligned pages in a row"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Mark this buffer as misaligned in case we see another one</comment>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>align</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

        <comment type="line">// If there at least 512 bytes then we'll treat this as a partial write (modern file systems will have at least 4096)</comment>
        <if_stmt><if>if <condition>(<expr><name>pageRemainder</name> <operator>&gt;=</operator> <literal type="number">512</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>pageTotal</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// Else this appears to be a corrupted file and we'll stop doing page checksums</comment>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Verify the checksums of complete pages in the buffer</comment>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>pageIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pageIdx</name> <operator>&lt;</operator> <name>pageTotal</name></expr>;</condition> <incr><expr><name>pageIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// Get a pointer to the page header</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>PageHeaderData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pageHeader</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtrConst</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>pageIdx</name> <operator>*</operator> <name>PG_PAGE_SIZE_DEFAULT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

            <comment type="line">// Block number relative to all segments in the relation</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>blockNo</name> <init>= <expr><name><name>this</name><operator>-&gt;</operator><name>pageNoOffset</name></name> <operator>+</operator> <name>pageIdx</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// Only validate page checksum if the page is complete</comment>
            <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>align</name></name> <operator>||</operator> <name>pageIdx</name> <operator>&lt;</operator> <name>pageTotal</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Skip new pages indicated by pd_upper == 0</comment>
                <decl_stmt><decl><type><name>bool</name></type> <name>pdUpperValid</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>pageHeader</name><operator>-&gt;</operator><name>pd_upper</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Check that the entire page is zero in case pd_upper is corrupted</comment>
                    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>pageIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pageIdx</name> <operator>&lt;</operator> <name>PG_PAGE_SIZE_DEFAULT</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>pageIdx</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>size_t</name> <operator>*</operator><operator>)</operator><name>pageHeader</name><operator>)</operator><index>[<expr><name>pageIdx</name></expr>]</index> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>pdUpperValid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                            <break>break;</break>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>

                    <comment type="line">// If the entire page is zero it is valid</comment>
                    <if_stmt><if>if <condition>(<expr><name>pdUpperValid</name></expr>)</condition><block type="pseudo"><block_content>
                        <continue>continue;</continue></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Only validate the checksum if pd_upper is non-zero to avoid an assertion from pg_checksum_page()</comment>
                <if_stmt><if>if <condition>(<expr><name>pdUpperValid</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Make a copy of the page since it will be modified by the page checksum function</comment>
                    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pageBuffer</name></name></expr></argument>, <argument><expr><name>pageHeader</name></expr></argument>, <argument><expr><name>PG_PAGE_SIZE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Continue if the checksum matches</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>pageHeader</name><operator>-&gt;</operator><name>pd_checksum</name></name> <operator>==</operator> <call><name>pgPageChecksum</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pageBuffer</name></name></expr></argument>, <argument><expr><name>blockNo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <continue>continue;</continue></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// On error retry the page</comment>
                <decl_stmt><decl><type><name>bool</name></type> <name>changed</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

                <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <comment type="line">// Reload the page</comment>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pageRetry</name> <init>= <expr><call><name>storageGetP</name><argument_list>(
                        <argument><expr><call><name>storageNewReadP</name><argument_list>(
                            <argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>,
                            <argument><expr><operator>.</operator><name>offset</name> <operator>=</operator> <operator>(</operator><name>blockNo</name> <operator>%</operator> <name><name>this</name><operator>-&gt;</operator><name>segmentPageTotal</name></name><operator>)</operator> <operator>*</operator> <name>PG_PAGE_SIZE_DEFAULT</name></expr></argument>,
                            <argument><expr><operator>.</operator><name>limit</name> <operator>=</operator> <call><name>VARUINT64</name><argument_list>(<argument><expr><name>PG_PAGE_SIZE_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Check if the page has changed since it was last read</comment>
                    <expr_stmt><expr><name>changed</name> <operator>=</operator> <operator>!</operator><call><name>bufEq</name><argument_list>(<argument><expr><name>pageRetry</name></expr></argument>, <argument><expr><call><name>BUF</name><argument_list>(<argument><expr><name>pageHeader</name></expr></argument>, <argument><expr><name>PG_PAGE_SIZE_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// If the page has changed then PostgreSQL must be updating it so we won't consider it to be invalid. We are not</comment>
                <comment type="line">// concerned about whether this new page has a valid checksum or not, since the page will be replayed from WAL on</comment>
                <comment type="line">// recovery. This prevents (theoretically) limitless retries for a hot page.</comment>
                <if_stmt><if>if <condition>(<expr><name>changed</name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Create the error list if it does not exist yet</comment>
            <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>error</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>this-&gt;memContext</argument>)</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>pckWriteNewP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>pckWriteArrayBeginP</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Add page number and lsn to the error list</comment>
            <expr_stmt><expr><call><name>pckWriteObjBeginP</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name>blockNo</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pckWriteObjEndP</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pageNoOffset</name></name> <operator>+=</operator> <name>pageTotal</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Return filter result
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>Pack</name> <modifier>*</modifier></type>
<name>pageChecksumResult</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>PageChecksum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>PAGE_CHECKSUM</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Pack</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>this-&gt;memContext</argument>)</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// End the error array</comment>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>error</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>pckWriteArrayEndP</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// Else create a pack to hold the flags</comment>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <call><name>pckWriteNewP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pckWriteNullP</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// Valid and align flags</comment>
        <expr_stmt><expr><call><name>pckWriteBoolP</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>valid</name></name></expr></argument>, <argument><expr><operator>.</operator><name>defaultWrite</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteBoolP</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>align</name></name></expr></argument>, <argument><expr><operator>.</operator><name>defaultWrite</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// End pack</comment>
        <expr_stmt><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pckMove</name><argument_list>(<argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>PACK</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>IoFilter</name> <modifier>*</modifier></type>
<name>pageChecksumNew</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>segmentNo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>segmentPageTotal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fileName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>segmentNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>segmentPageTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IoFilter</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>PageChecksum</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PageChecksum</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>*</operator><name>driver</name> <operator>=</operator> <operator>(</operator><name>PageChecksum</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>memContext</name> <operator>=</operator> <call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr>,
            <expr><operator>.</operator><name>segmentPageTotal</name> <operator>=</operator> <name>segmentPageTotal</name></expr>,
            <expr><operator>.</operator><name>pageNoOffset</name> <operator>=</operator> <name>segmentNo</name> <operator>*</operator> <name>segmentPageTotal</name></expr>,
            <expr><operator>.</operator><name>fileName</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>pageBuffer</name> <operator>=</operator> <call><name>memNew</name><argument_list>(<argument><expr><name>PG_PAGE_SIZE_DEFAULT</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>valid</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>align</name> <operator>=</operator> <name>true</name></expr>,
        }</block></expr>;</expr_stmt>

        <comment type="line">// Create param list</comment>
        <decl_stmt><decl><type><name>Pack</name> <modifier>*</modifier></type><name>paramList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>packWrite</name> <init>= <expr><call><name>pckWriteNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>segmentNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>segmentPageTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>paramList</name> <operator>=</operator> <call><name>pckMove</name><argument_list>(<argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>ioFilterNewP</name><argument_list>(<argument><expr><name>PAGE_CHECKSUM_FILTER_TYPE</name></expr></argument>, <argument><expr><name>driver</name></expr></argument>, <argument><expr><name>paramList</name></expr></argument>, <argument><expr><operator>.</operator><name>in</name> <operator>=</operator> <name>pageChecksumProcess</name></expr></argument>, <argument><expr><operator>.</operator><name>result</name> <operator>=</operator> <name>pageChecksumResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>IO_FILTER</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>IoFilter</name> <modifier>*</modifier></type>
<name>pageChecksumNewPack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Pack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>paramList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>IoFilter</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PackRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>paramListPack</name> <init>= <expr><call><name>pckReadNew</name><argument_list>(<argument><expr><name>paramList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>segmentNo</name> <init>= <expr><call><name>pckReadU32P</name><argument_list>(<argument><expr><name>paramListPack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>segmentPageTotal</name> <init>= <expr><call><name>pckReadU32P</name><argument_list>(<argument><expr><name>paramListPack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fileName</name> <init>= <expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>paramListPack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ioFilterMove</name><argument_list>(<argument><expr><call><name>pageChecksumNew</name><argument_list>(<argument><expr><name>segmentNo</name></expr></argument>, <argument><expr><name>segmentPageTotal</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
