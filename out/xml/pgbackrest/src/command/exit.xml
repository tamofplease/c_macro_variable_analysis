<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/exit.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Exit Routines
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/exit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Return signal names
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>exitSignalName</name><parameter_list>(<parameter><decl><type><name>SignalType</name></type> <name>signalType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>signalType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>signalType</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>signalTypeHup</name></expr>:</case>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"HUP"</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>signalTypeInt</name></expr>:</case>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"INT"</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>signalTypeTerm</name></expr>:</case>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"TERM"</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>signalTypeNone</name></expr>:</case>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"no name for signal none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Catch signals
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>exitOnSignal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signalType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>signalType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><call><name>exitSafe</name><argument_list>(<argument><expr><call><name>errorTypeCode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TermError</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>(</operator><name>SignalType</name><operator>)</operator><name>signalType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>exitInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>exitOnSignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>exitOnSignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>exitOnSignal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Ignore SIGPIPE and check for EPIPE errors on write() instead</comment>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<comment type="line">// Helper to provide details for error logging</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>exitErrorDetail</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>role</name> <init>= <expr><call><name>cfgCommandRoleName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(
        <argument><expr><literal type="string">"--------------------------------------------------------------------\n"</literal>
        <literal type="string">"If SUBMITTING AN ISSUE please provide the following information:\n"</literal>
        <literal type="string">"\n"</literal>
        <literal type="string">"version: "</literal> <name>PROJECT_VERSION</name> <literal type="string">"\n"</literal>
        <literal type="string">"command: %s\n"</literal>
        <literal type="string">"options:%s\n"</literal>
        <literal type="string">"\n"</literal>
        <literal type="string">"stack trace:\n%s\n"</literal>
        <literal type="string">"--------------------------------------------------------------------"</literal></expr></argument>,
        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cmdOption</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>errorStackTrace</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>strFree</name><argument_list>(<argument><expr><name>role</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>exitSafe</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><name>SignalType</name></type> <name>signalType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>signalType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Report error if one was thrown</comment>
    <if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>LogLevel</name></type> <name>logLevel</name> <init>= <expr><ternary><condition><expr><call><name>errorCode</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>errorTypeCode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>AssertError</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>logLevelAssert</name></expr> </then><else>: <expr><name>logLevelError</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <comment type="line">// Output stack track on assert or when an output (e.g. console) is at least debug level</comment>
        <if_stmt><if>if <condition>(<expr><name>logLevel</name> <operator>==</operator> <name>logLevelAssert</name> <operator>||</operator> <call><name>logAny</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>detail</name> <init>= <expr><call><name>exitErrorDetail</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>LOG_INTERNAL_FMT</name><argument_list>(
                <argument><expr><name>logLevel</name></expr></argument>, <argument><expr><ternary><condition><expr><name>logLevel</name> <operator>==</operator> <name>logLevelAssert</name></expr> ?</condition><then> <expr><name>LOG_LEVEL_MIN</name></expr> </then><else>: <expr><name>logLevelDebug</name></expr></else></ternary></expr></argument>, <argument><expr><name>LOG_LEVEL_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>errorCode</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s\n%s"</literal></expr></argument>,
                <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>strFree</name><argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Log just the error to non-debug levels</comment>
        <if_stmt><if>if <condition>(<expr><name>logLevel</name> <operator>!=</operator> <name>logLevelAssert</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LOG_INTERNAL</name><argument_list>(<argument><expr><name>logLevel</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MIN</name></expr></argument>, <argument><expr><name>logLevelDetail</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>errorCode</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>errorCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Log command end if a command is set</comment>
    <if_stmt><if>if <condition>(<expr><call><name>cfgCommand</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>cfgCmdNone</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>errorMessage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// On error generate an error message</comment>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// On process terminate</comment>
            <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <call><name>errorTypeCode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TermError</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>errorMessage</name> <operator>=</operator> <call><name>strCatZ</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"terminated on signal "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Terminate from a child</comment>
                <if_stmt><if>if <condition>(<expr><name>signalType</name> <operator>==</operator> <name>signalTypeNone</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>errorMessage</name></expr></argument>, <argument><expr><literal type="string">"from child process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <comment type="line">// Else terminated directly</comment>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>errorMessage</name></expr></argument>, <argument><expr><literal type="string">"[SIG%s]"</literal></expr></argument>, <argument><expr><call><name>exitSignalName</name><argument_list>(<argument><expr><name>signalType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if>
            <comment type="line">// Standard error exit message</comment>
            <if type="elseif">else if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>errorMessage</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"aborted with exception [%03d]"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>cmdEnd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>errorMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strFree</name><argument_list>(<argument><expr><name>errorMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Release any locks but ignore errors</comment>
    <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>lockRelease</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Return result - caller should immediate pass this result to exit()</comment>
    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
