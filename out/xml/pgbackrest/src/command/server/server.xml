<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/server/server.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Server Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/wait.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/exit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/remote/remote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/server/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/fork.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/socket/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/tls/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/load.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/helper.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Local variables
***********************************************************************************************************************************/</comment>
<struct><specifier>static</specifier> struct <name>ServerLocal</name>
<block>{
    <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name></decl>;</decl_stmt>                                         <comment type="line">// Mem context for server</comment>

    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>argListSize</name></decl>;</decl_stmt>                                       <comment type="line">// Argument list size</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argList</name></decl>;</decl_stmt>                                           <comment type="line">// Argument list</comment>

    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>processList</name></decl>;</decl_stmt>                                              <comment type="line">// List of child processes</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>sigHup</name></decl>;</decl_stmt>                                                    <comment type="line">// SIGHUP was caught</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>sigTerm</name></decl>;</decl_stmt>                                                   <comment type="line">// SIGTERM was caught</comment>

    <decl_stmt><decl><type><name>IoServer</name> <modifier>*</modifier></type><name>socketServer</name></decl>;</decl_stmt>                                         <comment type="line">// Socket server</comment>
    <decl_stmt><decl><type><name>IoServer</name> <modifier>*</modifier></type><name>tlsServer</name></decl>;</decl_stmt>                                            <comment type="line">// TLS server</comment>
}</block> <decl><name>serverLocal</name></decl>;</struct>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Initialization can be redone when options change
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cmdServerInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Initialize mem context</comment>
    <if_stmt><if>if <condition>(<expr><name><name>serverLocal</name><operator>.</operator><name>memContext</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>memContextTop()</argument>)</argument_list></macro>
        <block>{<block_content>
            <macro><name>MEM_CONTEXT_NEW_BEGIN</name><argument_list>(<argument>Server</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>serverLocal</name><operator>.</operator><name>memContext</name></name> <operator>=</operator> <call><name>MEM_CONTEXT_NEW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>serverLocal</name><operator>.</operator><name>processList</name></name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>serverLocal.memContext</argument>)</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Free old servers</comment>
        <expr_stmt><expr><call><name>ioServerFree</name><argument_list>(<argument><expr><name><name>serverLocal</name><operator>.</operator><name>socketServer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioServerFree</name><argument_list>(<argument><expr><name><name>serverLocal</name><operator>.</operator><name>tlsServer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create new servers</comment>
        <expr_stmt><expr><name><name>serverLocal</name><operator>.</operator><name>socketServer</name></name> <operator>=</operator> <call><name>sckServerNew</name><argument_list>(
            <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptTlsServerAddress</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionUInt</name><argument_list>(<argument><expr><name>cfgOptTlsServerPort</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>serverLocal</name><operator>.</operator><name>tlsServer</name></name> <operator>=</operator> <call><name>tlsServerNew</name><argument_list>(
            <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptTlsServerAddress</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptTlsServerCaFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptTlsServerKeyFile</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptTlsServerCertFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Handlers to set flags on signals
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cmdServerSigHup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>signalType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>signalType</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>serverLocal</name><operator>.</operator><name>sigHup</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>cmdServerSigTerm</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>signalType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>signalType</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>serverLocal</name><operator>.</operator><name>sigTerm</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Handler to reap child processes
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cmdServerSigChild</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>signalType</name></decl></parameter>, <parameter><decl><type><name>siginfo_t</name> <modifier>*</modifier></type><name>signalInfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>signalType</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>context</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>signalInfo</name><operator>-&gt;</operator><name>si_code</name></name> <operator>==</operator> <name>CLD_EXITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Find the process and remove it</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>processIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>processIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>serverLocal</name><operator>.</operator><name>processList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>processIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name><name>serverLocal</name><operator>.</operator><name>processList</name></name></expr></argument>, <argument><expr><name>processIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>signalInfo</name><operator>-&gt;</operator><name>si_pid</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>lstRemoveIdx</name><argument_list>(<argument><expr><name><name>serverLocal</name><operator>.</operator><name>processList</name></name></expr></argument>, <argument><expr><name>processIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cmdServer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>argListSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argList</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>argListSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>CHARPY</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Initialize server</comment>
    <expr_stmt><expr><call><name>cmdServerInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set arguments used for reload</comment>
    <expr_stmt><expr><name><name>serverLocal</name><operator>.</operator><name>argListSize</name></name> <operator>=</operator> <name>argListSize</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>serverLocal</name><operator>.</operator><name>argList</name></name> <operator>=</operator> <name>argList</name></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Set signal handlers</comment>
        <macro><name>sigaction</name><argument_list>(<argument>SIGHUP</argument>, <argument>&amp;(struct sigaction){.sa_handler = cmdServerSigHup}</argument>, <argument>NULL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>sigaction</name><argument_list>(<argument>SIGTERM</argument>, <argument>&amp;(struct sigaction){.sa_handler = cmdServerSigTerm}</argument>, <argument>NULL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>sigaction</name><argument_list>(
            <argument>SIGCHLD</argument>, <argument>&amp;(struct sigaction){.sa_sigaction = cmdServerSigChild</argument>, <argument>.sa_flags = SA_NOCLDSTOP | SA_NOCLDWAIT | SA_SIGINFO}</argument>,
            <argument>NULL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Accept connections indefinitely. The only way to exit this loop is for the process to receive a signal.</comment>
        <do>do
        <block>{<block_content>
            <comment type="line">// Accept a new connection</comment>
            <decl_stmt><decl><type><name>IoSession</name> <modifier>*</modifier><specifier>const</specifier></type> <name>socketSession</name> <init>= <expr><call><name>ioServerAccept</name><argument_list>(<argument><expr><name><name>serverLocal</name><operator>.</operator><name>socketServer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>socketSession</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Fork off the child process</comment>
                <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>forkSafe</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Reset SIGCHLD to default</comment>
                    <macro><name>sigaction</name><argument_list>(<argument>SIGCHLD</argument>, <argument>&amp;(struct sigaction){.sa_handler = SIG_DFL}</argument>, <argument>NULL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

                    <comment type="line">// Set standard signal handlers</comment>
                    <expr_stmt><expr><call><name>exitInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Close the server socket so we don't hold the port open if the parent exits first</comment>
                    <expr_stmt><expr><call><name>ioServerFree</name><argument_list>(<argument><expr><name><name>serverLocal</name><operator>.</operator><name>socketServer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Disable logging and close log file</comment>
                    <expr_stmt><expr><call><name>logClose</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Start standard remote processing if a server is returned</comment>
                    <decl_stmt><decl><type><name>ProtocolServer</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><call><name>protocolServer</name><argument_list>(<argument><expr><name><name>serverLocal</name><operator>.</operator><name>tlsServer</name></name></expr></argument>, <argument><expr><name>socketSession</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>server</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>cmdRemote</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break>break;</break>
                </block_content>}</block></if>
                <comment type="line">// Add process to list</comment>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>serverLocal</name><operator>.</operator><name>processList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <comment type="line">// Free the socket since the child is now using it</comment>
                <expr_stmt><expr><call><name>ioSessionFree</name><argument_list>(<argument><expr><name>socketSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Reload configuration</comment>
            <if_stmt><if>if <condition>(<expr><name><name>serverLocal</name><operator>.</operator><name>sigHup</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>LOG_DETAIL</name><argument_list>(<argument><expr><literal type="string">"configuration reload begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Reload configuration</comment>
                <expr_stmt><expr><call><name>cfgLoad</name><argument_list>(<argument><expr><name><name>serverLocal</name><operator>.</operator><name>argListSize</name></name></expr></argument>, <argument><expr><name><name>serverLocal</name><operator>.</operator><name>argList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Reinitialize server</comment>
                <expr_stmt><expr><call><name>cmdServerInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>LOG_DETAIL</name><argument_list>(<argument><expr><literal type="string">"configuration reload end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Reset flag</comment>
                <expr_stmt><expr><name><name>serverLocal</name><operator>.</operator><name>sigHup</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        while <condition>(<expr><operator>!</operator><name><name>serverLocal</name><operator>.</operator><name>sigTerm</name></name></expr>)</condition>;</do>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Terminate any remaining children on SIGTERM. Disable the callback so it does not fire in the middle of the loop.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>serverLocal</name><operator>.</operator><name>sigTerm</name></name></expr>)</condition>
    <block>{<block_content>
        <macro><name>sigaction</name><argument_list>(<argument>SIGCHLD</argument>, <argument>&amp;(struct sigaction){.sa_flags = SA_NOCLDSTOP | SA_NOCLDWAIT}</argument>, <argument>NULL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>processIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>processIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>serverLocal</name><operator>.</operator><name>processList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>processIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name><name>serverLocal</name><operator>.</operator><name>processList</name></name></expr></argument>, <argument><expr><name>processIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>LOG_WARN_FMT</name><argument_list>(<argument><expr><literal type="string">"terminate child process %d"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name>pid</name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
