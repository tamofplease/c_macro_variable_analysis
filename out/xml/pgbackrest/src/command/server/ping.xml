<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/server/ping.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Server Ping Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/server/ping.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/tls/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/socket/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/helper.h"</cpp:file></cpp:include>

<function><type><name>void</name></type>
<name>cmdServerPing</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Check for user-specified host</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptTlsServerAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier></type><name>commandParam</name> <init>= <expr><call><name>cfgCommandParam</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>commandParam</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>host</name> <operator>=</operator> <call><name>strLstGet</name><argument_list>(<argument><expr><name>commandParam</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>commandParam</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>ParamInvalidError</name></expr></argument>, <argument><expr><literal type="string">"extra parameters found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Connect to server without any verification</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>TimeMSec</name></type> <name>timeout</name> <init>= <expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptIoTimeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>IoClient</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tlsClient</name> <init>= <expr><call><name>tlsClientNewP</name><argument_list>(
            <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>cfgOptionUInt</name><argument_list>(<argument><expr><name>cfgOptTlsServerPort</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IoSession</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tlsSession</name> <init>= <expr><call><name>ioClientOpen</name><argument_list>(<argument><expr><name>tlsClient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Send ping</comment>
        <decl_stmt><decl><type><name>ProtocolClient</name> <modifier>*</modifier><specifier>const</specifier></type> <name>protocolClient</name> <init>= <expr><call><name>protocolClientNew</name><argument_list>(
            <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>PROTOCOL_SERVICE_REMOTE</name> <literal type="string">" socket protocol on '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>,
            <argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ioSessionIoWrite</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>protocolClientNoExit</name><argument_list>(<argument><expr><name>protocolClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>protocolClientNoOp</name><argument_list>(<argument><expr><name>protocolClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>protocolClientFree</name><argument_list>(<argument><expr><name>protocolClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
