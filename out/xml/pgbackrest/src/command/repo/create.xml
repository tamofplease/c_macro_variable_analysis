<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/repo/create.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Repository Create Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/memContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/azure/storage.intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/gcs/storage.intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/s3/storage.intern.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cmdRepoCreate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <switch>switch <condition>(<expr><call><name>storageType</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>STORAGE_AZURE_TYPE</name></expr>:</case>
            <block>{<block_content>
                <expr_stmt><expr><call><name>storageAzureRequestP</name><argument_list>(
                    <argument><expr><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HTTP_VERB_PUT_STR</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <call><name>httpQueryAdd</name><argument_list>(<argument><expr><call><name>httpQueryNewP</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AZURE_QUERY_RESTYPE_STR</name></expr></argument>, <argument><expr><name>AZURE_QUERY_VALUE_CONTAINER_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </block_content>}</block>

            <case>case <expr><name>STORAGE_GCS_TYPE</name></expr>:</case>
            <block>{<block_content>
                <expr_stmt><expr><call><name>storageGcsRequestP</name><argument_list>(
                    <argument><expr><operator>(</operator><name>StorageGcs</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HTTP_VERB_POST_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>noBucket</name> <operator>=</operator> <name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <call><name>BUFSTR</name><argument_list>(
                        <argument><expr><call><name>jsonWriteResult</name><argument_list>(
                            <argument><expr><call><name>jsonWriteObjectEnd</name><argument_list>(
                                <argument><expr><call><name>jsonWriteStr</name><argument_list>(
                                    <argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(
                                        <argument><expr><call><name>jsonWriteObjectBegin</name><argument_list>(
                                            <argument><expr><call><name>jsonWriteNewP</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GCS_JSON_NAME</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptRepoGcsBucket</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </block_content>}</block>

            <case>case <expr><name>STORAGE_S3_TYPE</name></expr>:</case>
                <expr_stmt><expr><call><name>storageS3RequestP</name><argument_list>(<argument><expr><operator>(</operator><name>StorageS3</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HTTP_VERB_PUT_STR</name></expr></argument>, <argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <comment type="line">// Other storage types do not require the repo to be created</comment>
            <default>default:</default>
                <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
