<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/repo/ls.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Repository List Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/repo/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/memContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/regExp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Render storage list
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageListRenderInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StorageInfo</name> <modifier>*</modifier><specifier>const</specifier></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>IoWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>write</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>json</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_INFO</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>IO_WRITE</name></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>write</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Render in json</comment>
    <if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ioWriteStr</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">":{\"type\":\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch>switch <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>storageTypeFile</name></expr>:</case>
                <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"file\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>storageTypeLink</name></expr>:</case>
                <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"link\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>storageTypePath</name></expr>:</case>
                <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"path\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>storageTypeSpecial</name></expr>:</case>
                <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"special\""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>

        <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>storageTypeFile</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ioWriteStr</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">",\"size\":%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ioWriteStr</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">",\"time\":%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>info</name><operator>-&gt;</operator><name>timeModified</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>storageTypeLink</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ioWriteStr</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">",\"destination\":%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>linkDestination</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>BRACER_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// Render in text</comment>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>LF_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageListRender</name><parameter_list>(<parameter><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <macro><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument>logLevelDebug</argument>)</argument_list></macro>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_WRITE</name></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Get sort order</comment>
    <decl_stmt><decl><type><name>SortOrder</name></type> <name>sortOrder</name> <init>= <expr><name>sortOrderAsc</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><call><name>cfgOptionStrId</name><argument_list>(<argument><expr><name>cfgOptSort</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>CFGOPTVAL_SORT_DESC</name></expr>:</case>
            <expr_stmt><expr><name>sortOrder</name> <operator>=</operator> <name>sortOrderDesc</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>CFGOPTVAL_SORT_NONE</name></expr>:</case>
            <expr_stmt><expr><name>sortOrder</name> <operator>=</operator> <name>sortOrderNone</name></expr>;</expr_stmt>
            <break>break;</break>

        <default>default:</default>
            <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cfgOptionStrId</name><argument_list>(<argument><expr><name>cfgOptSort</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CFGOPTVAL_SORT_ASC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <comment type="line">// Get path</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Get and validate if path is valid for repo</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strLstSize</name><argument_list>(<argument><expr><call><name>cfgCommandParam</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>repoPathIsValid</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><call><name>cfgCommandParam</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strLstSize</name><argument_list>(<argument><expr><call><name>cfgCommandParam</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>ParamInvalidError</name></expr></argument>, <argument><expr><literal type="string">"only one path may be specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Get options</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>json</name> <init>= <expr><ternary><condition><expr><call><name>cfgOptionStrId</name><argument_list>(<argument><expr><name>cfgOptOutput</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CFGOPTVAL_OUTPUT_JSON</name></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>expression</name> <init>= <expr><call><name>cfgOptionStrNull</name><argument_list>(<argument><expr><name>cfgOptFilter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RegExp</name> <modifier>*</modifier></type><name>regExp</name> <init>= <expr><ternary><condition><expr><name>expression</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>regExpNew</name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>BRACEL_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Check if this is a file</comment>
    <decl_stmt><decl><type><name>StorageInfo</name></type> <name>info</name> <init>= <expr><call><name>storageInfoP</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>exists</name></name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>storageTypeFile</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>regExp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>regExpMatch</name><argument_list>(<argument><expr><name>regExp</name></expr></argument>, <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>info</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>DOT_STR</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>storageListRenderInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>write</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <comment type="line">// Else try to list the path</comment>
    <else>else
    <block>{<block_content>
        <comment type="line">// The path will always be reported as existing so we don't get different results from storage that does not support paths</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>json</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>regExp</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>regExpMatch</name><argument_list>(<argument><expr><name>regExp</name></expr></argument>, <argument><expr><name>DOT_STR</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <macro><name>storageListRenderInfo</name><argument_list>(<argument>&amp;(StorageInfo){.type = storageTypePath</argument>, <argument>.name = DOT_STR}</argument>, <argument>write</argument>, <argument>json</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// List content of the path</comment>
        <decl_stmt><decl><type><name>StorageIterator</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageItr</name> <init>= <expr><call><name>storageNewItrP</name><argument_list>(
            <argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>.</operator><name>sortOrder</name> <operator>=</operator> <name>sortOrder</name></expr></argument>, <argument><expr><operator>.</operator><name>expression</name> <operator>=</operator> <name>expression</name></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptRecurse</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name>storageItrMore</name><argument_list>(<argument><expr><name>storageItr</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>StorageInfo</name></type> <name>info</name> <init>= <expr><call><name>storageItrNext</name><argument_list>(<argument><expr><name>storageItr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Add separator character</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name> <operator>&amp;&amp;</operator> <name>json</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>COMMA_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt><expr><call><name>storageListRenderInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>write</name></expr></argument>, <argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>json</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>BRACER_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>LF_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cmdStorageList</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>storageListRender</name><argument_list>(<argument><expr><call><name>ioFdWriteNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"stdout"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptIoTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <comment type="line">// Ignore write errors because it's possible (even likely) that this output is being piped to something like head which</comment>
        <comment type="line">// will exit when it gets what it needs and leave us writing to a broken pipe.  It would be better to just ignore the broken</comment>
        <comment type="line">// pipe error but currently we don't store system error codes.</comment>
        <macro><name>CATCH</name><argument_list>(<argument>FileWriteError</argument>)</argument_list></macro>
        <block>{<block_content>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
