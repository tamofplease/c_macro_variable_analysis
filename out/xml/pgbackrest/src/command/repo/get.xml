<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/repo/get.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Repository Get Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/repo/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/cipherBlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/memContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoArchive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoBackup.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Write source file to destination IO
***********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>storageGetProcess</name><parameter_list>(<parameter><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>destination</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <macro><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument>logLevelDebug</argument>)</argument_list></macro>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_READ</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Get source file</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strLstSize</name><argument_list>(<argument><expr><call><name>cfgCommandParam</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>ParamRequiredError</name></expr></argument>, <argument><expr><literal type="string">"source file required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>strLstGet</name><argument_list>(<argument><expr><call><name>cfgCommandParam</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Assume the file is missing</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Is path valid for repo?</comment>
        <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>repoPathIsValid</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create new file read</comment>
        <decl_stmt><decl><type><name>IoRead</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><call><name>storageReadIo</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptIgnoreMissing</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Add decryption if needed</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptRaw</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>CipherType</name></type> <name>repoCipherType</name> <init>= <expr><call><name>cfgOptionStrId</name><argument_list>(<argument><expr><name>cfgOptRepoCipherType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>repoCipherType</name> <operator>!=</operator> <name>cipherTypeNone</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Check for a passphrase parameter</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>cipherPass</name> <init>= <expr><call><name>cfgOptionStrNull</name><argument_list>(<argument><expr><name>cfgOptCipherPass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// If not passed as a parameter then determine the passphrase using the following pattern:</comment>
                <comment type="line">//</comment>
                <comment type="line">// REPO / (repo passphrase)</comment>
                <comment type="line">//      / archive / (repo passphrase)</comment>
                <comment type="line">//      / archive / stanza / (archive passphrase)</comment>
                <comment type="line">//      / backup  / (repo passphrase)</comment>
                <comment type="line">//      / backup  / stanza / (backup passphrase)</comment>
                <comment type="line">//      / backup  / stanza / set / (manifest passphrase)</comment>
                <comment type="line">//      / backup  / stanza / backup.history / (backup passphrase)</comment>
                <comment type="line">//</comment>
                <comment type="line">// Nothing should be stored at the top level of the repo except the backup/archive paths. The backup/archive paths</comment>
                <comment type="line">// should contain only stanza paths.</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <if_stmt><if>if <condition>(<expr><name>cipherPass</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>filePathSplitLst</name> <init>= <expr><call><name>strLstNewSplit</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// At a minimum the path must contain archive/backup, a stanza, and a file</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>filePathSplitLst</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>stanza</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>filePathSplitLst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <comment type="line">// If stanza option is specified then it must match the given file path</comment>
                        <if_stmt><if>if <condition>(<expr><call><name>cfgOptionStrNull</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name>stanza</name></expr></argument>, <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                                <argument><expr><name>OptionInvalidValueError</name></expr></argument>, <argument><expr><literal type="string">"stanza name '%s' given in option doesn't match the given path"</literal></expr></argument>,
                                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <comment type="line">// Archive path</comment>
                        <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>filePathSplitLst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_PATH_ARCHIVE_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>cipherPass</name> <operator>=</operator> <call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <comment type="line">// Find the archive passphrase</comment>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEndsWithZ</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>INFO_ARCHIVE_FILE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><macro><name>strEndsWithZ</name><argument_list>(<argument>file</argument>, <argument>INFO_ARCHIVE_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr>)</condition>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>InfoArchive</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>infoArchiveLoadFile</name><argument_list>(
                                    <argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_PATH_ARCHIVE</name> <literal type="string">"/%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stanza</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_FILE</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>repoCipherType</name></expr></argument>, <argument><expr><name>cipherPass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><name>cipherPass</name> <operator>=</operator> <call><name>infoArchiveCipherPass</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>

                        <comment type="line">// Backup path</comment>
                        <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>filePathSplitLst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_PATH_BACKUP_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>cipherPass</name> <operator>=</operator> <call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEndsWithZ</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>INFO_BACKUP_FILE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><macro><name>strEndsWithZ</name><argument_list>(<argument>file</argument>, <argument>INFO_BACKUP_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr>)</condition>
                            <block>{<block_content>
                                <comment type="line">// Find the backup passphrase</comment>
                                <decl_stmt><decl><type><name>InfoBackup</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><call><name>infoBackupLoadFile</name><argument_list>(
                                    <argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_PATH_BACKUP</name> <literal type="string">"/%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stanza</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_FILE</name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><name>repoCipherType</name></expr></argument>, <argument><expr><name>cipherPass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><name>cipherPass</name> <operator>=</operator> <call><name>infoBackupCipherPass</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <comment type="line">// Find the manifest passphrase</comment>
                                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>filePathSplitLst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>BACKUP_PATH_HISTORY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                                    <operator>!</operator><call><name>strEndsWithZ</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>BACKUP_MANIFEST_FILE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                                    <operator>!</operator><macro><name>strEndsWithZ</name><argument_list>(<argument>file</argument>, <argument>BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr>)</condition>
                                <block>{<block_content>
                                    <decl_stmt><decl><type><specifier>const</specifier> <name>Manifest</name> <modifier>*</modifier></type><name>manifest</name> <init>= <expr><call><name>manifestLoadFile</name><argument_list>(
                                        <argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_PATH_BACKUP</name> <literal type="string">"/%s/%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stanza</name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>filePathSplitLst</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BACKUP_MANIFEST_FILE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>repoCipherType</name></expr></argument>, <argument><expr><name>cipherPass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                    <expr_stmt><expr><name>cipherPass</name> <operator>=</operator> <call><name>manifestCipherSubPass</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if></if_stmt>
                            </block_content>}</block></if></if_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Error when unable to determine cipher passphrase</comment>
                <if_stmt><if>if <condition>(<expr><name>cipherPass</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>OptionInvalidValueError</name></expr></argument>, <argument><expr><literal type="string">"unable to determine cipher passphrase for '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Add encryption filter</comment>
                <expr_stmt><expr><call><name>cipherBlockFilterGroupAdd</name><argument_list>(<argument><expr><call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>repoCipherType</name></expr></argument>, <argument><expr><name>cipherModeDecrypt</name></expr></argument>, <argument><expr><name>cipherPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Open source</comment>
        <if_stmt><if>if <condition>(<expr><call><name>ioReadOpen</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Open the destination file now that we know the source exists and is readable</comment>
            <expr_stmt><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Copy data from source to destination</comment>
            <expr_stmt><expr><call><name>ioCopyP</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Close the source and destination</comment>
            <expr_stmt><expr><call><name>ioReadClose</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Source file exists</comment>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>cmdStorageGet</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Assume the file is missing</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>storageGetProcess</name><argument_list>(<argument><expr><call><name>ioFdWriteNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"stdout"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptIoTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <comment type="line">// Ignore write errors because it's possible (even likely) that this output is being piped to something like head which</comment>
        <comment type="line">// will exit when it gets what it needs and leave us writing to a broken pipe.  It would be better to just ignore the broken</comment>
        <comment type="line">// pipe error but currently we don't store system error codes.</comment>
        <macro><name>CATCH</name><argument_list>(<argument>FileWriteError</argument>)</argument_list></macro>
        <block>{<block_content>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
