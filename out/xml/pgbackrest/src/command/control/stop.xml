<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/control/stop.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Stop Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/control/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/convert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/storage.intern.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cmdStop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>stopFile</name> <init>= <expr><call><name>lockStopFileName</name><argument_list>(<argument><expr><call><name>cfgOptionStrNull</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If the stop file does not already exist, then create it</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>storageExistsP</name><argument_list>(<argument><expr><call><name>storageLocal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>stopFile</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Create the lock path (ignore if already created)</comment>
            <expr_stmt><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><call><name>storageLocalWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strPath</name><argument_list>(<argument><expr><name>stopFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0770</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Create the stop file with without truncating an existing file</comment>
            <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>stopWrite</name> <init>= <expr><call><name>storageWriteIo</name><argument_list>(
                <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><call><name>storageLocalWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>stopFile</name></expr></argument>, <argument><expr><operator>.</operator><name>noAtomic</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>noTruncate</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>modePath</name> <operator>=</operator> <literal type="number">0770</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><name>stopWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><name>stopWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// If --force was specified then send term signals to running processes</comment>
            <if_stmt><if>if <condition>(<expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptForce</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>lockPath</name> <init>= <expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptLockPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>lockPathFileList</name> <init>= <expr><call><name>strLstSort</name><argument_list>(
                    <argument><expr><call><name>storageListP</name><argument_list>(<argument><expr><call><name>storageLocal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>lockPath</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Find each lock file and send term signals to the processes</comment>
                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>lockPathFileIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lockPathFileIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>lockPathFileList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>lockPathFileIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>lockFile</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>lockPathFileList</name></expr></argument>, <argument><expr><name>lockPathFileIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Skip any file that is not a lock file. Skip lock files for other stanzas if a stanza is provided.</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEndsWithZ</name><argument_list>(<argument><expr><name>lockFile</name></expr></argument>, <argument><expr><name>LOCK_FILE_EXT</name></expr></argument>)</argument_list></call> <operator>||</operator>
                        <operator>(</operator><call><name>cfgOptionTest</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                         <operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name>lockFile</name></expr></argument>, <argument><expr><call><name>lockFileName</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeArchive</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                         <operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name>lockFile</name></expr></argument>, <argument><expr><call><name>lockFileName</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeBackup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
                    <block>{<block_content>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>

                    <comment type="line">// Read the lock file</comment>
                    <expr_stmt><expr><name>lockFile</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>lockPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>lockFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>LockReadResult</name></type> <name>lockRead</name> <init>= <expr><call><name>lockReadFileP</name><argument_list>(<argument><expr><name>lockFile</name></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// If we cannot read the lock file for any reason then warn and continue to next file</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>lockRead</name><operator>.</operator><name>status</name></name> <operator>!=</operator> <name>lockReadStatusValid</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>LOG_WARN_FMT</name><argument_list>(<argument><expr><literal type="string">"unable to read lock file %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>lockFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <continue>continue;</continue>
                    </block_content>}</block></if></if_stmt>

                    <comment type="line">// The lock file is valid so that means there is a running process -- send a term signal to the process</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>kill</name><argument_list>(<argument><expr><name><name>lockRead</name><operator>.</operator><name>data</name><operator>.</operator><name>processId</name></name></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>LOG_WARN_FMT</name><argument_list>(<argument><expr><literal type="string">"unable to send term signal to process %d"</literal></expr></argument>, <argument><expr><name><name>lockRead</name><operator>.</operator><name>data</name><operator>.</operator><name>processId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>LOG_INFO_FMT</name><argument_list>(<argument><expr><literal type="string">"sent term signal to process %d"</literal></expr></argument>, <argument><expr><name><name>lockRead</name><operator>.</operator><name>data</name><operator>.</operator><name>processId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>LOG_WARN_FMT</name><argument_list>(
                <argument><expr><literal type="string">"stop file already exists for %s"</literal></expr></argument>,
                <argument><expr><ternary><condition><expr><call><name>cfgOptionTest</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"stanza %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"all stanzas"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
