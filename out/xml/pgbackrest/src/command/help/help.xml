<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/command/help/help.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Help Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/bz2/decompress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/memContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/pack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Define the console width - use a fixed width of 80 since this should be safe on virtually all consoles
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONSOLE_WIDTH</name></cpp:macro>                                               <cpp:value>80</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Helper function to split a string into a string list based on a delimiter and max size per item. In other words each item in the
list will be no longer than size even if multiple delimiters are skipped. This is useful for breaking up text on spaces, for
example.
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>StringList</name> <modifier>*</modifier></type>
<name>helpRenderSplitSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delimiter</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>string</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>delimiter</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create the list</comment>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Base points to the beginning of the string that is being searched</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stringBase</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Match points to the next delimiter match that has been found</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stringMatchLast</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stringMatch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext((List *)this)</argument>)</argument_list></macro>
    <block>{<block_content>
        <do>do
        <block>{<block_content>
            <comment type="line">// Find a delimiter match</comment>
            <expr_stmt><expr><name>stringMatch</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><ternary><condition><expr><name>stringMatchLast</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>stringBase</name></expr> </then><else>: <expr><name>stringMatchLast</name></expr></else></ternary></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// If a match was found then add the string</comment>
            <if_stmt><if>if <condition>(<expr><name>stringMatch</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>stringMatch</name> <operator>-</operator> <name>stringBase</name><operator>)</operator> <operator>&gt;=</operator> <name>size</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>stringMatchLast</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>stringMatch</name> <operator>=</operator> <name>stringMatchLast</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt><expr><call><name>strLstAddZSub</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>stringBase</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>stringMatch</name> <operator>-</operator> <name>stringBase</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>stringBase</name> <operator>=</operator> <name>stringMatch</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>stringMatchLast</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>stringMatchLast</name> <operator>=</operator> <name>stringMatch</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else make whatever is left the last string</comment>
            <else>else
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>stringMatchLast</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>stringBase</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>size</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>strLstAddZSub</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>stringBase</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>stringMatchLast</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>-</operator> <name>stringBase</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>stringBase</name> <operator>=</operator> <name>stringMatchLast</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>stringBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        while <condition>(<expr><name>stringMatch</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING_LIST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Helper function for helpRender() to make output look good on a console
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>helpRenderText</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>internal</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>indent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>indentFirst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>indentFirst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>text</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Split the text into paragraphs</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lineList</name> <init>= <expr><call><name>strLstNewSplitZ</name><argument_list>(
            <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>internal</name></expr> ?</condition><then> <expr><literal type="string">"\n\nFOR INTERNAL USE ONLY. DO NOT USE IN PRODUCTION."</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Iterate through each paragraph and split the lines according to the line length</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>lineIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lineIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>lineList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>lineIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// Add LF if there is already content</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>LF_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Split the paragraph into lines that don't exceed the line length</comment>
            <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>partList</name> <init>= <expr><call><name>helpRenderSplitSize</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>lineList</name></expr></argument>, <argument><expr><name>lineIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name>length</name> <operator>-</operator> <name>indent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>partIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>partIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>partList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>partIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// Indent when required</comment>
                <if_stmt><if>if <condition>(<expr><name>partIdx</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>indentFirst</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>partIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>LF_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><call><name>strSize</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>partList</name></expr></argument>, <argument><expr><name>partIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%*s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>indent</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Add the line</comment>
                <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>partList</name></expr></argument>, <argument><expr><name>partIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Helper function for helpRender() to output values as strings
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>helpRenderValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionIdxSource</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>cfgSourceDefault</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name> <init>= <expr><call><name>cfgOptionIdxVar</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch>switch <condition>(<expr><call><name>varType</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <case>case <expr><name>varTypeKeyValue</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>KeyValue</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optionKv</name> <init>= <expr><call><name>varKv</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>VariantList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>keyList</name> <init>= <expr><call><name>kvKeyList</name><argument_list>(<argument><expr><name>optionKv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>keyIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>keyIdx</name> <operator>&lt;</operator> <call><name>varLstSize</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>keyIdx</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>keyIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                            <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%s=%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>keyIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>varStrForce</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>optionKv</name></expr></argument>, <argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>keyIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>

                    <break>break;</break>
                </block_content>}</block>

                <case>case <expr><name>varTypeVariantList</name></expr>:</case>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>VariantList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>list</name> <init>= <expr><call><name>varVarLst</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>listIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>listIdx</name> <operator>&lt;</operator> <call><name>varLstSize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>listIdx</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>listIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>listIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>

                    <break>break;</break>
                </block_content>}</block>

                <default>default:</default>
                    <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxDisplay</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Render help to a string
***********************************************************************************************************************************/</comment>
<comment type="line">// Stored unpacked command data</comment>
<typedef>typedef <type><struct>struct <name>HelpCommandData</name>
<block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>internal</name></decl>;</decl_stmt>                                                  <comment type="line">// Is the command internal?</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>summary</name></decl>;</decl_stmt>                                                <comment type="line">// Short summary of the command</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>description</name></decl>;</decl_stmt>                                            <comment type="line">// Full description of the command</comment>
}</block></struct></type> <name>HelpCommandData</name>;</typedef>

<comment type="line">// Stored unpacked option data</comment>
<typedef>typedef <type><struct>struct <name>HelpOptionData</name>
<block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>internal</name></decl>;</decl_stmt>                                                  <comment type="line">// Is the option internal?</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>section</name></decl>;</decl_stmt>                                                <comment type="line">// eg. general, command</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>summary</name></decl>;</decl_stmt>                                                <comment type="line">// Short summary of the option</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>description</name></decl>;</decl_stmt>                                            <comment type="line">// Full description of the option</comment>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>deprecatedNames</name></decl>;</decl_stmt>                                    <comment type="line">// Deprecated names for the option</comment>
}</block></struct></type> <name>HelpOptionData</name>;</typedef>

<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>helpRender</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>helpData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>strCatZ</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PROJECT_NAME</name> <literal type="string">" "</literal> <name>PROJECT_VERSION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Set a small buffer size to minimize memory usage</comment>
        <expr_stmt><expr><call><name>ioBufferSizeSet</name><argument_list>(<argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Read pack from compressed buffer</comment>
        <decl_stmt><decl><type><name>IoRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>helpRead</name> <init>= <expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><name>helpRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bz2DecompressNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioReadOpen</name><argument_list>(<argument><expr><name>helpRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>pckHelp</name> <init>= <expr><call><name>pckReadNewIo</name><argument_list>(<argument><expr><name>helpRead</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Unpack command data</comment>
        <decl_stmt><decl><type><name>HelpCommandData</name> <modifier>*</modifier></type><name>commandData</name> <init>= <expr><call><name>memNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HelpCommandData</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CFG_COMMAND_TOTAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>pckReadArrayBeginP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>ConfigCommand</name></type> <name>commandId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>commandId</name> <operator>&lt;</operator> <name>CFG_COMMAND_TOTAL</name></expr>;</condition> <incr><expr><name>commandId</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>commandData</name><index>[<expr><name>commandId</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>HelpCommandData</name><operator>)</operator>
            <block>{
                <expr><operator>.</operator><name>internal</name> <operator>=</operator> <call><name>pckReadBoolP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>,
                <expr><operator>.</operator><name>summary</name> <operator>=</operator> <call><name>pckReadStrP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>,
                <expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>pckReadStrP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>,
            }</block></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>pckReadArrayEndP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Message for more help when it is available</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>more</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Display general help</comment>
        <if_stmt><if>if <condition>(<expr><call><name>cfgCommand</name><argument_list>()</argument_list></call> <operator>==</operator> <name>cfgCmdHelp</name> <operator>||</operator> <call><name>cfgCommand</name><argument_list>()</argument_list></call> <operator>==</operator> <name>cfgCmdNone</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
                <argument><expr><name>result</name></expr></argument>,
                <argument><expr><literal type="string">" - General help\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Usage:\n"</literal>
                <literal type="string">"    "</literal> <name>PROJECT_BIN</name> <literal type="string">" [options] [command]\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"Commands:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Find size of longest command name</comment>
            <decl_stmt><decl><type><name>size_t</name></type> <name>commandSizeMax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>ConfigCommand</name></type> <name>commandId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>commandId</name> <operator>&lt;</operator> <name>CFG_COMMAND_TOTAL</name></expr>;</condition> <incr><expr><name>commandId</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>commandData</name><index>[<expr><name>commandId</name></expr>]</index></name><operator>.</operator><name>internal</name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>cfgParseCommandName</name><argument_list>(<argument><expr><name>commandId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>commandSizeMax</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>commandSizeMax</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>cfgParseCommandName</name><argument_list>(<argument><expr><name>commandId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>

            <comment type="line">// Output help for each command</comment>
            <for>for <control>(<init><decl><type><name>ConfigCommand</name></type> <name>commandId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>commandId</name> <operator>&lt;</operator> <name>CFG_COMMAND_TOTAL</name></expr>;</condition> <incr><expr><name>commandId</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>commandData</name><index>[<expr><name>commandId</name></expr>]</index></name><operator>.</operator><name>internal</name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                    <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"    %s%*s%s\n"</literal></expr></argument>, <argument><expr><call><name>cfgParseCommandName</name><argument_list>(<argument><expr><name>commandId</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>commandSizeMax</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>cfgParseCommandName</name><argument_list>(<argument><expr><name>commandId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>helpRenderText</name><argument_list>(<argument><expr><name><name>commandData</name><index>[<expr><name>commandId</name></expr>]</index></name><operator>.</operator><name>summary</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>commandSizeMax</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>CONSOLE_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <comment type="line">// Construct message for more help</comment>
            <expr_stmt><expr><name>more</name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"[command]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <decl_stmt><decl><type><name>ConfigCommand</name></type> <name>commandId</name> <init>= <expr><call><name>cfgCommand</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>commandName</name> <init>= <expr><call><name>cfgParseCommandName</name><argument_list>(<argument><expr><name>commandId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Unpack option data</comment>
            <decl_stmt><decl><type><name>HelpOptionData</name> <modifier>*</modifier></type><name>optionData</name> <init>= <expr><call><name>memNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HelpOptionData</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>pckReadArrayBeginP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>ConfigOption</name></type> <name>optionId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr>;</condition> <incr><expr><name>optionId</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <expr_stmt><expr><name><name>optionData</name><index>[<expr><name>optionId</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>HelpOptionData</name><operator>)</operator>
                <block>{
                    <expr><operator>.</operator><name>internal</name> <operator>=</operator> <call><name>pckReadBoolP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>,
                    <expr><operator>.</operator><name>section</name> <operator>=</operator> <call><name>pckReadStrP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"general"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
                    <expr><operator>.</operator><name>summary</name> <operator>=</operator> <call><name>pckReadStrP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>,
                    <expr><operator>.</operator><name>description</name> <operator>=</operator> <call><name>pckReadStrP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>,
                }</block></expr>;</expr_stmt>

                <comment type="line">// Unpack deprecated names</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pckReadNullP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>optionData</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>deprecatedNames</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>pckReadArrayBeginP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <while>while <condition>(<expr><call><name>pckReadNext</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name><name>optionData</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>deprecatedNames</name></expr></argument>, <argument><expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

                    <expr_stmt><expr><call><name>pckReadArrayEndP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Unpack command overrides</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pckReadNullP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>pckReadArrayBeginP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <while>while <condition>(<expr><call><name>pckReadNext</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// Get command override id</comment>
                        <decl_stmt><decl><type><name>ConfigCommand</name></type> <name>commandIdArray</name> <init>= <expr><call><name>pckReadId</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

                        <comment type="line">// Unpack override data</comment>
                        <expr_stmt><expr><call><name>pckReadObjBeginP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name>commandIdArray</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <decl_stmt><decl><type><name>bool</name></type> <name>internal</name> <init>= <expr><call><name>pckReadBoolP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <name><name>optionData</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>internal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>summary</name> <init>= <expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <name><name>optionData</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>summary</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>description</name> <init>= <expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <name><name>optionData</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>description</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name>pckReadObjEndP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Only use overrides for the current command</comment>
                        <if_stmt><if>if <condition>(<expr><name>commandId</name> <operator>==</operator> <name>commandIdArray</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name><name>optionData</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>internal</name> <operator>=</operator> <name>internal</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>optionData</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>section</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>optionData</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>summary</name> <operator>=</operator> <name>summary</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>optionData</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>description</name> <operator>=</operator> <name>description</name></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></while>

                    <expr_stmt><expr><call><name>pckReadArrayEndP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name>pckReadArrayEndP</name><argument_list>(<argument><expr><name>pckHelp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Output command part of title</comment>
            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">" - '%s' command"</literal></expr></argument>, <argument><expr><name>commandName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// If no additional params then this is command help</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strLstEmpty</name><argument_list>(<argument><expr><call><name>cfgCommandParam</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Output command summary and description. Add a warning for internal commands.</comment>
                <expr_stmt><expr><call><name>CHECK</name><argument_list>(
                    <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name><name>commandData</name><index>[<expr><name>commandId</name></expr>]</index></name><operator>.</operator><name>summary</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>commandData</name><index>[<expr><name>commandId</name></expr>]</index></name><operator>.</operator><name>description</name> <operator>!=</operator> <name>NULL</name></expr></argument>,
                    <argument><expr><literal type="string">"command help missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                    <argument><expr><name>result</name></expr></argument>,
                    <argument><expr><literal type="string">" help\n"</literal>
                    <literal type="string">"\n"</literal>
                    <literal type="string">"%s\n"</literal>
                    <literal type="string">"\n"</literal>
                    <literal type="string">"%s\n"</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>helpRenderText</name><argument_list>(<argument><expr><name><name>commandData</name><index>[<expr><name>commandId</name></expr>]</index></name><operator>.</operator><name>summary</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>CONSOLE_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(
                        <argument><expr><call><name>helpRenderText</name><argument_list>(
                            <argument><expr><name><name>commandData</name><index>[<expr><name>commandId</name></expr>]</index></name><operator>.</operator><name>description</name></expr></argument>, <argument><expr><name><name>commandData</name><index>[<expr><name>commandId</name></expr>]</index></name><operator>.</operator><name>internal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>CONSOLE_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Construct key/value of sections and options</comment>
                <decl_stmt><decl><type><name>KeyValue</name> <modifier>*</modifier></type><name>optionKv</name> <init>= <expr><call><name>kvNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>size_t</name></type> <name>optionSizeMax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optionId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr>;</condition> <incr><expr><name>optionId</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>cfgParseOptionValid</name><argument_list>(<argument><expr><name>commandId</name></expr></argument>, <argument><expr><name>cfgCmdRoleMain</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>optionData</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>internal</name></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><name><name>optionData</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>section</name></expr></init></decl>;</decl_stmt>

                        <if_stmt><if>if <condition>(<expr><name>section</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
                            <operator>(</operator><operator>!</operator><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><literal type="string">"general"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><literal type="string">"repository"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                             <operator>!</operator><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><literal type="string">"stanza"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>section</name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <expr_stmt><expr><call><name>kvAdd</name><argument_list>(<argument><expr><name>optionKv</name></expr></argument>, <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARUINT</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>cfgParseOptionName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>optionSizeMax</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name>optionSizeMax</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>cfgParseOptionName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

                <comment type="line">// Output sections</comment>
                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>sectionList</name> <init>= <expr><call><name>strLstSort</name><argument_list>(<argument><expr><call><name>strLstNewVarLst</name><argument_list>(<argument><expr><call><name>kvKeyList</name><argument_list>(<argument><expr><name>optionKv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>sectionIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>sectionIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>sectionList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>sectionIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>sectionList</name></expr></argument>, <argument><expr><name>sectionIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\n%s Options:\n\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strFirstUpper</name><argument_list>(<argument><expr><call><name>strDup</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Output options</comment>
                    <decl_stmt><decl><type><name>VariantList</name> <modifier>*</modifier></type><name>optionList</name> <init>= <expr><call><name>kvGetList</name><argument_list>(<argument><expr><name>optionKv</name></expr></argument>, <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optionIdx</name> <operator>&lt;</operator> <call><name>varLstSize</name><argument_list>(<argument><expr><name>optionList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optionIdx</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>ConfigOption</name></type> <name>optionId</name> <init>= <expr><call><name>varUInt</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><name>optionList</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <comment type="line">// Get option summary and lower-case first letter if it does not appear to be part of an acronym</comment>
                        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>summary</name> <init>= <expr><call><name>strCatN</name><argument_list>(
                            <argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>optionData</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>summary</name></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name><name>optionData</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>summary</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>summary</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isupper</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>summary</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isalpha</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>summary</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>strFirstLower</name><argument_list>(<argument><expr><name>summary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <comment type="line">// Output current and default values if they exist</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>defaultValue</name> <init>= <expr><call><name>cfgOptionDefault</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>helpRenderValue</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>defaultValue</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>summary</name></expr></argument>, <argument><expr><literal type="string">" ["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>summary</name></expr></argument>, <argument><expr><literal type="string">"current=%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>cfgParseOptionSecure</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"&lt;redacted&gt;"</literal></expr> </then><else>: <expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <if_stmt><if>if <condition>(<expr><name>defaultValue</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                            <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                                    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>summary</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>summary</name></expr></argument>, <argument><expr><literal type="string">"default=%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>

                            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>summary</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <comment type="line">// Output option help</comment>
                        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                            <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"  --%s%*s%s\n"</literal></expr></argument>,
                            <argument><expr><call><name>cfgParseOptionName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>optionSizeMax</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>cfgParseOptionName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
                            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>helpRenderText</name><argument_list>(<argument><expr><name>summary</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>optionSizeMax</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>CONSOLE_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></for>

                <comment type="line">// Construct message for more help if there are options</comment>
                <if_stmt><if>if <condition>(<expr><name>optionSizeMax</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>more</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s [option]"</literal></expr></argument>, <argument><expr><name>commandName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else option help for the specified command</comment>
            <else>else
            <block>{<block_content>
                <comment type="line">// Make sure only one option was specified</comment>
                <if_stmt><if>if <condition>(<expr><call><name>strLstSize</name><argument_list>(<argument><expr><call><name>cfgCommandParam</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>ParamInvalidError</name></expr></argument>, <argument><expr><literal type="string">"only one option allowed for option help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Ensure the option is valid</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>optionName</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><call><name>cfgCommandParam</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>CfgParseOptionResult</name></type> <name>option</name> <init>= <expr><call><name>cfgParseOptionP</name><argument_list>(<argument><expr><name>optionName</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissingIndex</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Error when option is not found or is invalid for the current command</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>option</name><operator>.</operator><name>found</name></name> <operator>||</operator> <operator>!</operator><call><name>cfgParseOptionValid</name><argument_list>(<argument><expr><call><name>cfgCommand</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfgCmdRoleMain</name></expr></argument>, <argument><expr><name><name>option</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>OptionInvalidError</name></expr></argument>, <argument><expr><literal type="string">"option '%s' is not valid for command '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>optionName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>commandName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Output option summary and description. Add a warning for internal options.</comment>
                <expr_stmt><expr><call><name>CHECK</name><argument_list>(
                    <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name><name>optionData</name><index>[<expr><name><name>option</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name>summary</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>optionData</name><index>[<expr><name><name>option</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name>description</name> <operator>!=</operator> <name>NULL</name></expr></argument>,
                    <argument><expr><literal type="string">"option help missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                    <argument><expr><name>result</name></expr></argument>,
                    <argument><expr><literal type="string">" - '%s' option help\n"</literal>
                    <literal type="string">"\n"</literal>
                    <literal type="string">"%s\n"</literal>
                    <literal type="string">"\n"</literal>
                    <literal type="string">"%s\n"</literal></expr></argument>,
                    <argument><expr><call><name>cfgParseOptionName</name><argument_list>(<argument><expr><name><name>option</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>helpRenderText</name><argument_list>(<argument><expr><name><name>optionData</name><index>[<expr><name><name>option</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name>summary</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>CONSOLE_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(
                        <argument><expr><call><name>helpRenderText</name><argument_list>(<argument><expr><name><name>optionData</name><index>[<expr><name><name>option</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name>description</name></expr></argument>, <argument><expr><name><name>optionData</name><index>[<expr><name><name>option</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name>internal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>CONSOLE_WIDTH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Output current and default values if they exist</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>defaultValue</name> <init>= <expr><call><name>cfgOptionDefault</name><argument_list>(<argument><expr><name><name>option</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>helpRenderValue</name><argument_list>(<argument><expr><name><name>option</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>defaultValue</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>LF_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"current: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>cfgParseOptionSecure</name><argument_list>(<argument><expr><name><name>option</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"&lt;redacted&gt;"</literal></expr> </then><else>: <expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>defaultValue</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"default: %s\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Output alternate name (call it deprecated so the user will know not to use it)</comment>
                <if_stmt><if>if <condition>(<expr><name><name>optionData</name><index>[<expr><name><name>option</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name>deprecatedNames</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                        <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\ndeprecated name%s: %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name><name>optionData</name><index>[<expr><name><name>option</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name>deprecatedNames</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"s"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><name><name>optionData</name><index>[<expr><name><name>option</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>.</operator><name>deprecatedNames</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// If there is more help available output a message to let the user know</comment>
        <if_stmt><if>if <condition>(<expr><name>more</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\nUse '"</literal> <name>PROJECT_BIN</name> <literal type="string">" help %s' for more information.\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>more</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cmdHelp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>helpData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ioFdWriteOneStr</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><call><name>helpRender</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
