<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/protocol/parallel.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Protocol Parallel Executor
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/macro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/keyValue.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/parallel.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<struct>struct <name>ProtocolParallel</name>
<block>{
    <decl_stmt><decl><type><name>TimeMSec</name></type> <name>timeout</name></decl>;</decl_stmt>                                               <comment type="line">// Max time to wait for jobs before returning</comment>
    <decl_stmt><decl><type><name>ParallelJobCallback</name> <modifier>*</modifier></type><name>callbackFunction</name></decl>;</decl_stmt>                          <comment type="line">// Function to get new jobs</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>callbackData</name></decl>;</decl_stmt>                                             <comment type="line">// Data to pass to callback function</comment>

    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>clientList</name></decl>;</decl_stmt>                                               <comment type="line">// List of clients to process jobs</comment>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>jobList</name></decl>;</decl_stmt>                                                  <comment type="line">// List of jobs to be processed</comment>

    <decl_stmt><decl><type><name>ProtocolParallelJob</name> <modifier>*</modifier><modifier>*</modifier></type><name>clientJobList</name></decl>;</decl_stmt>                            <comment type="line">// Jobs being processing by each client</comment>

    <decl_stmt><decl><type><name>ProtocolParallelJobState</name></type> <name>state</name></decl>;</decl_stmt>                                 <comment type="line">// Overall state of job processing</comment>
}</block>;</struct>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>ProtocolParallel</name> <modifier>*</modifier></type>
<name>protocolParallelNew</name><parameter_list>(<parameter><decl><type><name>TimeMSec</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>ParallelJobCallback</name> <modifier>*</modifier></type><name>callbackFunction</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callbackData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>FUNCTIONP</name></expr></argument>, <argument><expr><name>callbackFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>callbackData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>callbackFunction</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>callbackData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ProtocolParallel</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>ProtocolParallel</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>(</operator><name>ProtocolParallel</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>timeout</name> <operator>=</operator> <name>timeout</name></expr>,
            <expr><operator>.</operator><name>callbackFunction</name> <operator>=</operator> <name>callbackFunction</name></expr>,
            <expr><operator>.</operator><name>callbackData</name> <operator>=</operator> <name>callbackData</name></expr>,
            <expr><operator>.</operator><name>clientList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ProtocolClient</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>jobList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ProtocolParallelJob</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>state</name> <operator>=</operator> <name>protocolParallelJobStatePending</name></expr>,
        }</block></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>PROTOCOL_PARALLEL</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>protocolParallelClientAdd</name><parameter_list>(<parameter><decl><type><name>ProtocolParallel</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>ProtocolClient</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>PROTOCOL_PARALLEL</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>PROTOCOL_CLIENT</name></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>client</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>protocolParallelJobStatePending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>protocolClientIoReadFd</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"client with read fd is required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>clientList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>protocolParallelProcess</name><parameter_list>(<parameter><decl><type><name>ProtocolParallel</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>PROTOCOL_PARALLEL</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>protocolParallelJobStateDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// If called for the first time, initialize processing</comment>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>protocolParallelJobStatePending</name></expr>)</condition>
        <block>{<block_content>
            <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>clientJobList</name></name> <operator>=</operator> <call><name>memNewPtrArray</name><argument_list>(<argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>clientList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>protocolParallelJobStateRunning</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Initialize the file descriptor set used for select</comment>
        <decl_stmt><decl><type><name>fd_set</name></type> <name>selectSet</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>selectSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>fdMax</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Find clients that are running jobs</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>clientRunningTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>clientIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>clientList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>clientIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>clientJobList</name><index>[<expr><name>clientIdx</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>protocolClientIoReadFd</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>ProtocolClient</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>clientList</name></name></expr></argument>, <argument><expr><name>clientIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>selectSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Find the max file descriptor needed for select()</comment>
                <expr_stmt><expr><call><name>MAX_ASSIGN</name><argument_list>(<argument><expr><name>fdMax</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>clientRunningTotal</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="line">// If clients are running then wait for one to finish</comment>
        <if_stmt><if>if <condition>(<expr><name>clientRunningTotal</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Initialize timeout struct used for select.  Recreate this structure each time since Linux (at least) will modify it.</comment>
            <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>timeoutSelect</name></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>timeoutSelect</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name><name>this</name><operator>-&gt;</operator><name>timeout</name></name> <operator>/</operator> <name>MSEC_PER_SEC</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>timeoutSelect</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>suseconds_t</name><operator>)</operator><operator>(</operator><name><name>this</name><operator>-&gt;</operator><name>timeout</name></name> <operator>%</operator> <name>MSEC_PER_SEC</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>

            <comment type="line">// Determine if there is data to be read</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>completed</name> <init>= <expr><call><name>select</name><argument_list>(<argument><expr><name>fdMax</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>selectSet</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timeoutSelect</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><name>completed</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to select from parallel client(s)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// If any jobs have completed then get the results</comment>
            <if_stmt><if>if <condition>(<expr><name>completed</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>clientIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>clientList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>clientIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>ProtocolParallelJob</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><name><name>this</name><operator>-&gt;</operator><name>clientJobList</name><index>[<expr><name>clientIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>job</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
                        <call><name>FD_ISSET</name><argument_list>(
                            <argument><expr><call><name>protocolClientIoReadFd</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>ProtocolClient</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>clientList</name></name></expr></argument>, <argument><expr><name>clientIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name>selectSet</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
                        <block>{<block_content>
                            <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>ProtocolClient</name> <modifier>*</modifier><specifier>const</specifier></type> <name>client</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ProtocolClient</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>clientList</name></name></expr></argument>, <argument><expr><name>clientIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <expr_stmt><expr><call><name>protocolParallelJobResultSet</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>protocolClientDataGet</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>protocolClientDataEndGet</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block>
                            <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>protocolParallelJobErrorSet</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>errorCode</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block>
                            <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt><expr><call><name>protocolParallelJobStateSet</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>protocolParallelJobStateDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>clientJobList</name><index>[<expr><name>clientIdx</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                        </block_content>}</block>
                        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>

                <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>completed</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Find new jobs to be run</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>clientIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>clientList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>clientIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// If nothing is running for this client</comment>
            <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>clientJobList</name><index>[<expr><name>clientIdx</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Get a new job</comment>
                <decl_stmt><decl><type><name>ProtocolParallelJob</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext(this-&gt;jobList)</argument>)</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><name>job</name> <operator>=</operator> <call><name><name>this</name><operator>-&gt;</operator><name>callbackFunction</name></name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>callbackData</name></name></expr></argument>, <argument><expr><name>clientIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// If a new job was found</comment>
                <if_stmt><if>if <condition>(<expr><name>job</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Add to the job list</comment>
                    <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>jobList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Put command</comment>
                    <expr_stmt><expr><call><name>protocolClientCommandPut</name><argument_list>(
                        <argument><expr><operator>*</operator><operator>(</operator><name>ProtocolClient</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>clientList</name></name></expr></argument>, <argument><expr><name>clientIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>protocolParallelJobCommand</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Set client id and running state</comment>
                    <expr_stmt><expr><call><name>protocolParallelJobProcessIdSet</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>clientIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>protocolParallelJobStateSet</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>protocolParallelJobStateRunning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>clientJobList</name><index>[<expr><name>clientIdx</name></expr>]</index></name> <operator>=</operator> <name>job</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <comment type="line">// Else no more jobs for this client so free it</comment>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>protocolLocalFree</name><argument_list>(<argument><expr><name>clientIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>ProtocolParallelJob</name> <modifier>*</modifier></type>
<name>protocolParallelResult</name><parameter_list>(<parameter><decl><type><name>ProtocolParallel</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>PROTOCOL_PARALLEL</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>protocolParallelJobStateRunning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ProtocolParallelJob</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Find the next completed job</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>jobIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>jobIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>jobList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>jobIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ProtocolParallelJob</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ProtocolParallelJob</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>jobList</name></name></expr></argument>, <argument><expr><name>jobIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>protocolParallelJobState</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>protocolParallelJobStateDone</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>protocolParallelJobMove</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lstRemoveIdx</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>jobList</name></name></expr></argument>, <argument><expr><name>jobIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>PROTOCOL_PARALLEL_JOB</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>protocolParallelDone</name><parameter_list>(<parameter><decl><type><name>ProtocolParallel</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>PROTOCOL_PARALLEL</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>protocolParallelJobStatePending</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If there are no jobs left then we are done</comment>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>state</name></name> <operator>!=</operator> <name>protocolParallelJobStateDone</name> <operator>&amp;&amp;</operator> <call><name>lstEmpty</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>jobList</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>protocolParallelJobStateDone</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>state</name></name> <operator>==</operator> <name>protocolParallelJobStateDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>protocolParallelToLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProtocolParallel</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strNewFmt</name><argument_list>(
        <argument><expr><literal type="string">"{state: %s, clientTotal: %u, jobTotal: %u}"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>clientList</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>jobList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
