<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/time.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Time Management
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/time.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Constants describing number of sub-units in an interval
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MSEC_PER_USEC</name></cpp:macro>                                               <cpp:value>((TimeMSec)1000)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>TimeMSec</name></type>
<name>timeMSec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>currentTime</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>currentTime</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>TIME_MSEC</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>TimeMSec</name><operator>)</operator><name><name>currentTime</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <name>MSEC_PER_SEC</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>TimeMSec</name><operator>)</operator><name><name>currentTime</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <name>MSEC_PER_USEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>sleepMSec</name><parameter_list>(<parameter><decl><type><name>TimeMSec</name></type> <name>sleepMSec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name>sleepMSec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>sleepMSec</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>delay</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>delay</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>sleepMSec</name> <operator>/</operator> <name>MSEC_PER_SEC</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>delay</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <operator>(</operator><name>suseconds_t</name><operator>)</operator><operator>(</operator><name>sleepMSec</name> <operator>%</operator> <name>MSEC_PER_SEC</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>select</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>datePartsValid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>month</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>day</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>month</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>daysPerMonth</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>=
    <expr><block>{
        <expr><block>{<expr><literal type="number">31</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="number">31</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>}</block></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>year</name> <operator>&gt;=</operator> <literal type="number">1970</literal> <operator>&amp;&amp;</operator> <name>month</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>month</name> <operator>&lt;=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name>day</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>day</name> <operator>&lt;=</operator> <name><name>daysPerMonth</name><index>[<expr><ternary><condition><expr><call><name>yearIsLeap</name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index><index>[<expr><name>month</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"invalid date %04d-%02d-%02d"</literal></expr></argument>, <argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>timePartsValid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hour</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minute</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>second</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>hour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>hour</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>hour</name> <operator>&lt;</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator> <name>minute</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>minute</name> <operator>&lt;</operator> <literal type="number">60</literal> <operator>&amp;&amp;</operator> <name>second</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>second</name> <operator>&lt;</operator> <literal type="number">60</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"invalid time %02d:%02d:%02d"</literal></expr></argument>, <argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>tzPartsValid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tzHour</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tzMinute</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>tzHour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                           <comment type="line">// signed hour part of timezone</comment>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>tzMinute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                         <comment type="line">// minutes part of timezone</comment>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Valid time zones range from GMT-12 all the way to GMT+14 (i.e. -1200 and +1400 are the min/max).</comment>
    <comment type="line">// ??? This is only a sanity check for basic validity of timezone offset of 15 minute intervals until the timezone</comment>
    <comment type="line">// database is implemented.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>tzHour</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">12</literal> <operator>&amp;&amp;</operator> <name>tzHour</name> <operator>&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>tzMinute</name> <operator>%</operator> <literal type="number">15</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tzHour</name> <operator>==</operator> <operator>-</operator><literal type="number">12</literal> <operator>&amp;&amp;</operator> <name>tzMinute</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name>tzHour</name> <operator>==</operator> <literal type="number">14</literal> <operator>&amp;&amp;</operator> <name>tzMinute</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"invalid timezone %02d%02d"</literal></expr></argument>, <argument><expr><name>tzHour</name></expr></argument>, <argument><expr><name>tzMinute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>tzOffsetSeconds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>tzHour</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tzMinute</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>tzHour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                           <comment type="line">// signed hour part of timezone (e.g. -7)</comment>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>tzMinute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                         <comment type="line">// minutes part of timezone</comment>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Validate the timezone hour and minute</comment>
    <expr_stmt><expr><call><name>tzPartsValid</name><argument_list>(<argument><expr><name>tzHour</name></expr></argument>, <argument><expr><name>tzMinute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Preserve the sign and convert the hours to a positive number for calculating seconds</comment>
    <if_stmt><if>if <condition>(<expr><name>tzHour</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>tzHour</name> <operator>=</operator> <name>sign</name> <operator>*</operator> <name>tzHour</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>sign</name> <operator>*</operator> <operator>(</operator><name>tzHour</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>tzMinute</name> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>yearIsLeap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><operator>(</operator><name>year</name> <operator>%</operator> <literal type="number">4</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>year</name> <operator>%</operator> <literal type="number">100</literal> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>year</name> <operator>%</operator> <literal type="number">400</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>dayOfYear</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>month</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>day</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>month</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>datePartsValid</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>cumulativeDaysPerMonth</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>=
    <expr><block>{
        <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">243</literal></expr>, <expr><literal type="number">273</literal></expr>, <expr><literal type="number">304</literal></expr>, <expr><literal type="number">334</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">213</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">274</literal></expr>, <expr><literal type="number">305</literal></expr>, <expr><literal type="number">335</literal></expr>}</block></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name><name>cumulativeDaysPerMonth</name><index>[<expr><ternary><condition><expr><call><name>yearIsLeap</name><argument_list>(<argument><expr><name>year</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index><index>[<expr><name>month</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>time_t</name></type>
<name>epochFromParts</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>year</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>month</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>day</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hour</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minute</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>second</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tzOffsetSecond</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>year</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>month</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>hour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>tzOffsetSecond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>timePartsValid</name><argument_list>(<argument><expr><name>hour</name></expr></argument>, <argument><expr><name>minute</name></expr></argument>, <argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Return epoch using calculation from https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16</comment>
    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(
        <argument><expr><name>TIME</name></expr></argument>,
        <argument><expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name>tzOffsetSecond</name> <operator>+</operator> <name>second</name> <operator>+</operator> <name>minute</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>hour</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator>
        <operator>(</operator><call><name>dayOfYear</name><argument_list>(<argument><expr><name>year</name></expr></argument>, <argument><expr><name>month</name></expr></argument>, <argument><expr><name>day</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">86400</literal> <operator>+</operator> <operator>(</operator><name>year</name> <operator>-</operator> <literal type="number">1900</literal> <operator>-</operator> <literal type="number">70</literal><operator>)</operator> <operator>*</operator> <literal type="number">31536000</literal> <operator>+</operator>
        <operator>(</operator><operator>(</operator><name>year</name> <operator>-</operator> <literal type="number">1900</literal> <operator>-</operator> <literal type="number">69</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <literal type="number">86400</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>year</name> <operator>-</operator> <literal type="number">1900</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>*</operator> <literal type="number">86400</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>year</name> <operator>-</operator> <literal type="number">1900</literal> <operator>+</operator> <literal type="number">299</literal><operator>)</operator> <operator>/</operator> <literal type="number">400</literal><operator>)</operator> <operator>*</operator> <literal type="number">86400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
