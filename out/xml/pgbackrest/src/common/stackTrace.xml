<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/stackTrace.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Stack Trace Handler
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_BACKTRACE</name></cpp:ifdef>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;backtrace.h&gt;</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;backtrace-supported.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/macro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/stackTrace.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Max call stack depth
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STACK_TRACE_MAX</name></cpp:macro>                                             <cpp:value>128</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Local variables
***********************************************************************************************************************************/</comment>
<comment type="line">// Stack trace function data</comment>
<typedef>typedef <type><struct>struct <name>StackTraceData</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>fileLine</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LogLevel</name></type> <name>functionLogLevel</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tryDepth</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>paramOverflow</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>paramLog</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>param</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>paramSize</name></decl>;</decl_stmt>
}</block></struct></type> <name>StackTraceData</name>;</typedef>

<struct><specifier>static</specifier> struct <name>StackTraceLocal</name>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>stackSize</name></decl>;</decl_stmt>                                                  <comment type="line">// Stack size</comment>
    <decl_stmt><decl><type><name>StackTraceData</name></type> <name><name>stack</name><index>[<expr><name>STACK_TRACE_MAX</name></expr>]</index></name></decl>;</decl_stmt>                          <comment type="line">// Stack data</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>functionParamBuffer</name><index>[<expr><literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>                            <comment type="line">// Buffer to hold function parameters</comment>
}</block> <decl><name>stackTraceLocal</name></decl>;</struct>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_BACKTRACE</name></cpp:ifdef>

<struct><specifier>static</specifier> struct <name>StackTraceBackLocal</name>
<block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>backtrace_state</name></name> <modifier>*</modifier></type><name>backTraceState</name></decl>;</decl_stmt>                         <comment type="line">// Backtrace state struct</comment>
}</block> <decl><name>stackTraceBackLocal</name></decl>;</struct>

<function><type><name>void</name></type>
<name>stackTraceInit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exe</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>stackTraceBackLocal</name><operator>.</operator><name>backTraceState</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>stackTraceBackLocal</name><operator>.</operator><name>backTraceState</name></name> <operator>=</operator> <call><name>backtrace_create_state</name><argument_list>(<argument><expr><name>exe</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>backTraceCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uintptr_t</name></type> <name>pc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lineno</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>function</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><name>data</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><name>pc</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><name>filename</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><operator>(</operator><name>function</name><operator>)</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fileLine</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>lineno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>backTraceCallbackError</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>msg</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>errnum</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>

<struct><specifier>static</specifier> struct <name>StackTraceTestLocal</name>
<block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>testFlag</name></decl>;</decl_stmt>                                        <comment type="line">// Don't log in parameter logging functions to avoid recursion</comment>
}</block> <decl><name>stackTraceTestLocal</name> <init>= <expr><block>{<expr><operator>.</operator><name>testFlag</name> <operator>=</operator> <name>true</name></expr>}</block></expr></init></decl>;</struct>

<function><type><name>void</name></type>
<name>stackTraceTestStart</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>stackTraceTestLocal</name><operator>.</operator><name>testFlag</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>stackTraceTestStop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>stackTraceTestLocal</name><operator>.</operator><name>testFlag</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>stackTraceTest</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>stackTraceTestLocal</name><operator>.</operator><name>testFlag</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>stackTraceTestFileLineSet</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>fileLine</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fileLine</name> <operator>=</operator> <name>fileLine</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>LogLevel</name></type>
<name>stackTracePush</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name></decl></parameter>, <parameter><decl><type><name>LogLevel</name></type> <name>functionLogLevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>&lt;</operator> <name>STACK_TRACE_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Get line number from backtrace if available</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_BACKTRACE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>backtrace_full</name><argument_list>(<argument><expr><name><name>stackTraceBackLocal</name><operator>.</operator><name>backTraceState</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>backTraceCallback</name></expr></argument>, <argument><expr><name>backTraceCallbackError</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Set function info</comment>
    <decl_stmt><decl><type><name>StackTraceData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>&amp;</operator><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>data</name> <operator>=</operator> <operator>(</operator><name>StackTraceData</name><operator>)</operator>
    <block>{
        <expr><operator>.</operator><name>fileName</name> <operator>=</operator> <name>fileName</name></expr>,
        <expr><operator>.</operator><name>functionName</name> <operator>=</operator> <name>functionName</name></expr>,
        <expr><operator>.</operator><name>tryDepth</name> <operator>=</operator> <call><name>errorTryDepth</name><argument_list>()</argument_list></call></expr>,
    }</block></expr>;</expr_stmt>

    <comment type="line">// Set param pointer</comment>
    <if_stmt><if>if <condition>(<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name><name>stackTraceLocal</name><operator>.</operator><name>functionParamBuffer</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>functionLogLevel</name></name> <operator>=</operator> <name>functionLogLevel</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>StackTraceData</name> <modifier>*</modifier></type><name>dataPrior</name> <init>= <expr><operator>&amp;</operator><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>param</name></name> <operator>=</operator> <name><name>dataPrior</name><operator>-&gt;</operator><name>param</name></name> <operator>+</operator> <name><name>dataPrior</name><operator>-&gt;</operator><name>paramSize</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <comment type="line">// Log level cannot be lower than the prior function</comment>
        <if_stmt><if>if <condition>(<expr><name>functionLogLevel</name> <operator>&lt;</operator> <name><name>dataPrior</name><operator>-&gt;</operator><name>functionLogLevel</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>functionLogLevel</name></name> <operator>=</operator> <name><name>dataPrior</name><operator>-&gt;</operator><name>functionLogLevel</name></name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>functionLogLevel</name></name> <operator>=</operator> <name>functionLogLevel</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name><operator>++</operator></expr>;</expr_stmt>

    <return>return <expr><name><name>data</name><operator>-&gt;</operator><name>functionLogLevel</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>stackTraceParamIdx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stackIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stackIdx</name> <operator>&lt;</operator> <name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StackTraceData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>&amp;</operator><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name>stackIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>paramLog</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>paramOverflow</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="string">"buffer full - parameters not available"</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>paramSize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="string">"void"</literal></expr>;</return></block_content></block></if></if_stmt>

        <return>return <expr><name><name>data</name><operator>-&gt;</operator><name>param</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// If no parameters return the log level required to get them</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_LEVEL_REQUIRED</name></cpp:macro> <cpp:value>" log level required for parameters"</cpp:value></cpp:define>
    <return>return <expr><ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>functionLogLevel</name></name> <operator>==</operator> <name>logLevelTrace</name></expr> ?</condition><then> <expr><literal type="string">"trace"</literal> <name>LOG_LEVEL_REQUIRED</name></expr> </then><else>: <expr><literal type="string">"debug"</literal> <name>LOG_LEVEL_REQUIRED</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>stackTraceParam</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>stackTraceParamIdx</name><argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>stackTraceParamBuffer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>paramName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StackTraceData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>&amp;</operator><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>paramNameSize</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>paramName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Make sure that adding this parameter will not overflow the buffer</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>param</name></name> <operator>-</operator> <name><name>stackTraceLocal</name><operator>.</operator><name>functionParamBuffer</name></name><operator>)</operator> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>paramSize</name></name> <operator>+</operator> <name>paramNameSize</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator>
        <sizeof>sizeof<argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>functionParamBuffer</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><name>STACK_TRACE_PARAM_MAX</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Set overflow to true</comment>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>paramOverflow</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <comment type="line">// There's no way to stop the parameter from being formatted so we reserve a space at the end where the format can safely</comment>
        <comment type="line">// take place and not disturb the rest of the buffer.  Hopefully overflows just won't happen but we need to be prepared in</comment>
        <comment type="line">// case of runaway recursion or some other issue that fills the buffer because we don't want a segfault.</comment>
        <return>return <expr><name><name>stackTraceLocal</name><operator>.</operator><name>functionParamBuffer</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>functionParamBuffer</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>STACK_TRACE_PARAM_MAX</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Add a comma if a parameter is already in the list</comment>
    <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>paramSize</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>param</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>paramSize</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>param</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>paramSize</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Add the parameter name</comment>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>param</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>paramSize</name></name></expr></argument>, <argument><expr><name>paramName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>paramSize</name></name> <operator>+=</operator> <name>paramNameSize</name></expr>;</expr_stmt>

    <comment type="line">// Add param/value separator</comment>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>param</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>paramSize</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">':'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>param</name><index>[<expr><name><name>data</name><operator>-&gt;</operator><name>paramSize</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

    <return>return <expr><name><name>data</name><operator>-&gt;</operator><name>param</name></name> <operator>+</operator> <name><name>data</name><operator>-&gt;</operator><name>paramSize</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>stackTraceParamAdd</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>bufferSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StackTraceData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>&amp;</operator><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>data</name><operator>-&gt;</operator><name>paramOverflow</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>paramSize</name></name> <operator>+=</operator> <name>bufferSize</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>stackTraceParamLog</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>paramLog</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>

<function><type><name>void</name></type>
<name>stackTracePop</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>test</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>test</name> <operator>||</operator> <call><name>stackTraceTest</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name><operator>--</operator></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StackTraceData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>&amp;</operator><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"popping %s:%s but expected %s:%s"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><name>void</name></type>
<name>stackTracePop</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name><operator>--</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Stack trace format
***********************************************************************************************************************************/</comment>
<macro><name>__attribute__</name><argument_list>(<argument>(format(printf, <literal type="number">4</literal>, <literal type="number">5</literal>))</argument>)</argument_list></macro> <function><type><specifier>static</specifier> <name>size_t</name></type>
<name>stackTraceFmt</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufferSize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufferUsed</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>va_list</name></type> <name>argumentList</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argumentList</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>vsnprintf</name><argument_list>(
        <argument><expr><name>buffer</name> <operator>+</operator> <name>bufferUsed</name></expr></argument>, <argument><expr><ternary><condition><expr><name>bufferUsed</name> <operator>&lt;</operator> <name>bufferSize</name></expr> ?</condition><then> <expr><name>bufferSize</name> <operator>-</operator> <name>bufferUsed</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>argumentList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argumentList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>size_t</name></type>
<name>stackTraceToZ</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufferSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>fileLine</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><literal type="string">"test build required for parameters"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>stackIdx</name> <init>= <expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// If the current function passed in is the same as the top function on the stack then use the parameters for that function</comment>
    <if_stmt><if>if <condition>(<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name>stackIdx</name></expr>]</index></name><operator>.</operator><name>fileName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
        <call><name>strcmp</name><argument_list>(<argument><expr><name>functionName</name></expr></argument>, <argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name>stackIdx</name></expr>]</index></name><operator>.</operator><name>functionName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>param</name> <operator>=</operator> <call><name>stackTraceParamIdx</name><argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>stackIdx</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Output the current function</comment>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>stackTraceFmt</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s:%s:%u:(%s)"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>, <argument><expr><name>fileLine</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Output stack if there is anything on it</comment>
    <if_stmt><if>if <condition>(<expr><name>stackIdx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// If the function passed in was not at the top of the stack then some functions are missing</comment>
        <if_stmt><if>if <condition>(<expr><name>stackIdx</name> <operator>==</operator> <name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>stackTraceFmt</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\n    ... function(s) omitted ..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Output the rest of the stack</comment>
        <for>for <control>(<init>;</init> <condition><expr><name>stackIdx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>stackIdx</name><operator>--</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>StackTraceData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>&amp;</operator><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name>stackIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>stackTraceFmt</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\n%s:%s"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>functionName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>fileLine</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>stackTraceFmt</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">":%u"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>fileLine</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>stackTraceFmt</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">":(%s)"</literal></expr></argument>, <argument><expr><call><name>stackTraceParamIdx</name><argument_list>(<argument><expr><name>stackIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>stackTraceClean</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>tryDepth</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>fatal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>fatal</name></expr>;</expr_stmt>                                                    <comment type="line">// Cleanup is the same for fatal errors</comment>

    <while>while <condition>(<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>tryDepth</name> <operator>&gt;=</operator> <name>tryDepth</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>
</unit>
