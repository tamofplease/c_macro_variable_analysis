<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/fork.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Fork Handler
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>forkSafe</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>fork</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>KernelError</name></expr></argument>, <argument><expr><literal type="string">"unable to fork"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>forkDetach</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make this process a group leader so the parent process won't block waiting for it to finish</comment>
    <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>setsid</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>KernelError</name></expr></argument>, <argument><expr><literal type="string">"unable to create new session group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// The process should never receive a SIGHUP but ignore it just in case</comment>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// There should be no way the child process can exit first (after the next fork) but just in case ignore SIGCHLD.  This means</comment>
    <comment type="line">// that the child process will automatically be reaped by the kernel should it finish first rather than becoming defunct.</comment>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Fork again and let the parent process terminate to ensure that we get rid of the session leading process. Only session</comment>
    <comment type="line">// leaders may get a TTY again.</comment>
    <if_stmt><if>if <condition>(<expr><call><name>forkSafe</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Reset SIGCHLD to the default handler so waitpid() calls in the process will work as expected</comment>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>, <argument><expr><name>SIG_DFL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Change the working directory to / so there is no dependency on the original working directory</comment>
    <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>chdir</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>PathMissingError</name></expr></argument>, <argument><expr><literal type="string">"unable to change directory to '/'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Close standard file descriptors</comment>
    <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr><name>STDIN_FILENO</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileCloseError</name></expr></argument>, <argument><expr><literal type="string">"unable to close stdin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileCloseError</name></expr></argument>, <argument><expr><literal type="string">"unable to close stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr><name>STDERR_FILENO</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileCloseError</name></expr></argument>, <argument><expr><literal type="string">"unable to close stderr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
