<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/lock.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Lock Handler
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/file.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/memContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/user.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/wait.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/storage.intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Constants
***********************************************************************************************************************************/</comment>
<comment type="line">// Indicates a lock that was made by matching exec-id rather than holding an actual lock. This disguishes it from -1, which is a</comment>
<comment type="line">// general system error.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_ON_EXEC_ID</name></cpp:macro>                                             <cpp:value>-2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_KEY_EXEC_ID</name></cpp:macro>                                            <cpp:value>STRID6("execId", 0x12e0c56051)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_KEY_PERCENT_COMPLETE</name></cpp:macro>                                   <cpp:value>STRID6("pctCplt", 0x14310a140d01)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_KEY_PROCESS_ID</name></cpp:macro>                                         <cpp:value>STRID5("pid", 0x11300)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Lock type names
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>lockTypeName</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><literal type="string">"archive"</literal></expr>,                                                      <comment type="line">// lockTypeArchive</comment>
    <expr><literal type="string">"backup"</literal></expr>,                                                       <comment type="line">// lockTypeBackup</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Mem context and local variables
***********************************************************************************************************************************/</comment>
<struct><specifier>static</specifier> struct <name>LockLocal</name>
<block>{
    <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name></decl>;</decl_stmt>                                         <comment type="line">// Mem context for locks</comment>
    <decl_stmt><decl><type><name>LockType</name></type> <name>held</name></decl>;</decl_stmt>                                                  <comment type="line">// Current lock type held</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>execId</name></decl>;</decl_stmt>                                           <comment type="line">// Process exec id</comment>

    <struct>struct
    <block>{
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>                                               <comment type="line">// Name of lock file</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>                                                     <comment type="line">// File descriptor for lock file</comment>
    }</block> <decl><name><name>file</name><index>[<expr><name>lockTypeAll</name></expr>]</index></name></decl>;</struct>
}</block> <decl><name>lockLocal</name> <init>=
<expr><block>{
    <expr><operator>.</operator><name>held</name> <operator>=</operator> <name>lockTypeNone</name></expr>,
}</block></expr></init></decl>;</struct>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>lockFileName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>stanza</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LockType</name></type> <name>lockType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>stanza</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>lockType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s-%s"</literal> <name>LOCK_FILE_EXT</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stanza</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lockTypeName</name><index>[<expr><name>lockType</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Read contents of lock file

If a seek is required to get to the beginning of the data, that must be done before calling this function.
***********************************************************************************************************************************/</comment>
<comment type="line">// Size of initial buffer used to load lock file</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCK_BUFFER_SIZE</name></cpp:macro>                                            <cpp:value>128</cpp:value></cpp:define>

<comment type="line">// Helper to read data</comment>
<function><type><specifier>static</specifier> <name>LockData</name></type>
<name>lockReadFileData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lockFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>lockFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>lockFile</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LockData</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Read contents of file</comment>
            <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><name>LOCK_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>write</name> <init>= <expr><call><name>ioBufferWriteNewOpen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>ioCopyP</name><argument_list>(<argument><expr><call><name>ioFdReadNewOpen</name><argument_list>(<argument><expr><name>lockFile</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>JsonRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>json</name> <init>= <expr><call><name>jsonReadNew</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>jsonReadObjectBegin</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>MEM_CONTEXT_PRIOR_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>.</operator><name>execId</name></name> <operator>=</operator> <call><name>jsonReadStr</name><argument_list>(<argument><expr><call><name>jsonReadKeyRequireStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>LOCK_KEY_EXEC_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>jsonReadKeyExpectStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>LOCK_KEY_PERCENT_COMPLETE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>percentComplete</name></name> <operator>=</operator> <call><name>varNewUInt</name><argument_list>(<argument><expr><call><name>jsonReadUInt</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name><name>result</name><operator>.</operator><name>processId</name></name> <operator>=</operator> <call><name>jsonReadInt</name><argument_list>(<argument><expr><call><name>jsonReadKeyRequireStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>LOCK_KEY_PROCESS_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_PRIOR_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>THROWP_FMT</name><argument_list>(<argument><expr><call><name>errorType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"unable to read lock file '%s': %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>lockFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_STRUCT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>LockReadResult</name></type>
<name>lockReadFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lockFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LockReadFileParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>lockFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>remove</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>lockFile</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LockReadResult</name></type> <name>result</name> <init>= <expr><block>{<expr><operator>.</operator><name>status</name> <operator>=</operator> <name>lockReadStatusValid</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// If we cannot open the lock file for any reason then warn and continue to next file</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>lockFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>lockReadStatusMissing</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// Attempt a lock on the file - if a lock can be acquired that means the original process died without removing the lock</comment>
            <if_stmt><if>if <condition>(<expr><call><name>flock</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>LOCK_EX</name> <operator>|</operator> <name>LOCK_NB</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>lockReadStatusUnlocked</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else attempt to read the file</comment>
            <else>else
            <block>{<block_content>
                <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <macro><name>MEM_CONTEXT_PRIOR_BEGIN</name><argument_list>()</argument_list></macro>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>data</name></name> <operator>=</operator> <call><name>lockReadFileData</name><argument_list>(<argument><expr><name>lockFile</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><call><name>MEM_CONTEXT_PRIOR_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>lockReadStatusInvalid</name></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">// Remove lock file if requested but do not report failures</comment>
            <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>remove</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>lockFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Close after unlinking to prevent a race condition where another process creates the file as we remove it</comment>
            <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_STRUCT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>LockReadResult</name></type>
<name>lockRead</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lockPath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>stanza</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LockType</name></type> <name>lockType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>lockPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>stanza</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>lockType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LockReadResult</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lockFile</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>lockPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>lockFileName</name><argument_list>(<argument><expr><name>stanza</name></expr></argument>, <argument><expr><name>lockType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <macro><name>MEM_CONTEXT_PRIOR_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lockReadFileP</name><argument_list>(<argument><expr><name>lockFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_PRIOR_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_STRUCT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Write contents of lock file
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>lockWriteData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LockType</name></type> <name>lockType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>LockWriteDataParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>lockType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>percentComplete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>lockType</name> <operator>&lt;</operator> <name>lockTypeAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockType</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockType</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Build the json object</comment>
        <decl_stmt><decl><type><name>JsonWrite</name> <modifier>*</modifier></type><name>json</name> <init>= <expr><call><name>jsonWriteNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>jsonWriteObjectBegin</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>jsonWriteStr</name><argument_list>(<argument><expr><call><name>jsonWriteKeyStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>LOCK_KEY_EXEC_ID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>lockLocal</name><operator>.</operator><name>execId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>percentComplete</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>jsonWriteUInt</name><argument_list>(<argument><expr><call><name>jsonWriteKeyStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>LOCK_KEY_PERCENT_COMPLETE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varUInt</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>percentComplete</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>jsonWriteInt</name><argument_list>(<argument><expr><call><name>jsonWriteKeyStrId</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>LOCK_KEY_PROCESS_ID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>jsonWriteObjectEnd</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>lockType</name> <operator>==</operator> <name>lockTypeBackup</name> <operator>&amp;&amp;</operator> <name><name>lockLocal</name><operator>.</operator><name>held</name></name> <operator>!=</operator> <name>lockTypeNone</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Seek to beginning of backup lock file</comment>
            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(
                <argument><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockType</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_READ_SEEK</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockType</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// In case the current write is ever shorter than the previous one</comment>
            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(
                <argument><expr><call><name>ftruncate</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockType</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileWriteError</name></expr></argument>, <argument><expr><literal type="string">"unable to truncate '%s'"</literal></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockType</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Write lock file data</comment>
        <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>write</name> <init>= <expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockType</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockType</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>ioCopyP</name><argument_list>(<argument><expr><call><name>ioBufferReadNewOpen</name><argument_list>(<argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><call><name>jsonWriteResult</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<comment type="line">// Helper to acquire a file lock</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>lockAcquireFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lockFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TimeMSec</name></type> <name>lockTimeout</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>failOnNoLock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>lockFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TIMEMSEC</name></expr></argument>, <argument><expr><name>lockTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>failOnNoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>lockFile</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Wait</name> <modifier>*</modifier></type><name>wait</name> <init>= <expr><call><name>waitNew</name><argument_list>(<argument><expr><name>lockTimeout</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>retry</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>errNo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <do>do
        <block>{<block_content>
            <comment type="line">// Assume there will be no retry</comment>
            <expr_stmt><expr><name>retry</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

            <comment type="line">// Attempt to open the file</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>lockFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>O_RDWR</name> <operator>|</operator> <name>O_CREAT</name></expr></argument>, <argument><expr><name>STORAGE_MODE_FILE_DEFAULT</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Save the error for reporting outside the loop</comment>
                <expr_stmt><expr><name>errNo</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

                <comment type="line">// If the path does not exist then create it</comment>
                <if_stmt><if>if <condition>(<expr><name>errNo</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>FSLASH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strPath</name><argument_list>(<argument><expr><name>lockFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>retry</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// Attempt to lock the file</comment>
                <if_stmt><if>if <condition>(<expr><call><name>flock</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>LOCK_EX</name> <operator>|</operator> <name>LOCK_NB</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Save the error for reporting outside the loop</comment>
                    <expr_stmt><expr><name>errNo</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>

                    <comment type="line">// Get execId from lock file and close it</comment>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>execId</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                    <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
                    <block>{<block_content>
                        <expr_stmt><expr><name>execId</name> <operator>=</operator> <call><name>lockReadFileData</name><argument_list>(<argument><expr><name>lockFile</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>.</operator><name>execId</name></expr>;</expr_stmt>
                    </block_content>}</block>
                    <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
                    <block>{<block_content>
                        <comment type="line">// Any errors will be reported as unable to acquire a lock. If a process is trying to get a lock but is not</comment>
                        <comment type="line">// synchronized with the process holding the actual lock, it is possible that it could see a short read or</comment>
                        <comment type="line">// have some other problem reading. Reporting the error will likely be misleading when the actual problem is</comment>
                        <comment type="line">// that another process owns the lock file.</comment>
                    </block_content>}</block>
                    <macro><name>FINALLY</name><argument_list>()</argument_list></macro>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Even though we were unable to lock the file, it may be that it is already locked by another process with the</comment>
                    <comment type="line">// same exec-id, i.e. spawned by the same original main process. If so, report the lock as successful.</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>execId</name></expr></argument>, <argument><expr><name><name>lockLocal</name><operator>.</operator><name>execId</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>LOCK_ON_EXEC_ID</name></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block>
        while <condition>(<expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>waitMore</name><argument_list>(<argument><expr><name>wait</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>retry</name><operator>)</operator></expr>)</condition>;</do>

        <comment type="line">// If the lock was not successful</comment>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Error when requested</comment>
            <if_stmt><if>if <condition>(<expr><name>failOnNoLock</name> <operator>||</operator> <name>errNo</name> <operator>!=</operator> <name>EWOULDBLOCK</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>errorHint</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>errNo</name> <operator>==</operator> <name>EWOULDBLOCK</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>errorHint</name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"\nHINT: is another "</literal> <name>PROJECT_NAME</name> <literal type="string">" process running?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><name>errNo</name> <operator>==</operator> <name>EACCES</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Get information for the current user</comment>
                    <expr_stmt><expr><call><name>userInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name>errorHint</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(
                        <argument><expr><literal type="string">"\nHINT: does '%s:%s' running "</literal> <name>PROJECT_NAME</name> <literal type="string">" have permissions on the '%s' file?"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>userName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>groupName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>lockFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                    <argument><expr><name>LockAcquireError</name></expr></argument>, <argument><expr><literal type="string">"unable to acquire lock on file '%s': %s%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>lockFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errNo</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><ternary><condition><expr><name>errorHint</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name>strZ</name><argument_list>(<argument><expr><name>errorHint</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>lockAcquire</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>lockPath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>stanza</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>execId</name></decl></parameter>, <parameter><decl><type><name>LockType</name></type> <name>lockType</name></decl></parameter>, <parameter><decl><type><name>TimeMSec</name></type> <name>lockTimeout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>failOnNoLock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>lockPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>stanza</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>execId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>lockType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TIMEMSEC</name></expr></argument>, <argument><expr><name>lockTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>failOnNoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>lockPath</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>stanza</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>execId</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Don't allow failures when locking more than one file.  This makes cleanup difficult and there are no known use cases.</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>failOnNoLock</name> <operator>||</operator> <name>lockType</name> <operator>!=</operator> <name>lockTypeAll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Don't allow another lock if one is already held</comment>
    <if_stmt><if>if <condition>(<expr><name><name>lockLocal</name><operator>.</operator><name>held</name></name> <operator>!=</operator> <name>lockTypeNone</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"lock is already held by this process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Allocate a mem context to hold lock filenames if one does not already exist</comment>
    <if_stmt><if>if <condition>(<expr><name><name>lockLocal</name><operator>.</operator><name>memContext</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>memContextTop()</argument>)</argument_list></macro>
        <block>{<block_content>
            <macro><name>MEM_CONTEXT_NEW_BEGIN</name><argument_list>(<argument>Lock</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>lockLocal</name><operator>.</operator><name>memContext</name></name> <operator>=</operator> <call><name>MEM_CONTEXT_NEW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>lockLocal</name><operator>.</operator><name>execId</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>execId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Exec id should never change</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>strEq</name><argument_list>(<argument><expr><name>execId</name></expr></argument>, <argument><expr><name><name>lockLocal</name><operator>.</operator><name>execId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Lock files</comment>
    <decl_stmt><decl><type><name>LockType</name></type> <name>lockMin</name> <init>= <expr><ternary><condition><expr><name>lockType</name> <operator>==</operator> <name>lockTypeAll</name></expr> ?</condition><then> <expr><name>lockTypeArchive</name></expr> </then><else>: <expr><name>lockType</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LockType</name></type> <name>lockMax</name> <init>= <expr><ternary><condition><expr><name>lockType</name> <operator>==</operator> <name>lockTypeAll</name></expr> ?</condition><then> <expr><operator>(</operator><name>lockTypeAll</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>lockType</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>LockType</name></type> <name>lockIdx</name> <init>= <expr><name>lockMin</name></expr></init></decl>;</init> <condition><expr><name>lockIdx</name> <operator>&lt;=</operator> <name>lockMax</name></expr>;</condition> <incr><expr><name>lockIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lockLocal.memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockIdx</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>lockPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>lockFileName</name><argument_list>(<argument><expr><name>stanza</name></expr></argument>, <argument><expr><name>lockIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockIdx</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>lockAcquireFile</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockIdx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>lockTimeout</name></expr></argument>, <argument><expr><name>failOnNoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockIdx</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Free the lock context and reset lock data</comment>
            <expr_stmt><expr><call><name>memContextFree</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>memContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lockLocal</name> <operator>=</operator> <operator>(</operator>struct <name>LockLocal</name><operator>)</operator><block>{<expr><operator>.</operator><name>held</name> <operator>=</operator> <name>lockTypeNone</name></expr>}</block></expr>;</expr_stmt>

            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if>
        <comment type="line">// Else write lock data unless we locked an execId match</comment>
        <if type="elseif">else if <condition>(<expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockIdx</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>!=</operator> <name>LOCK_ON_EXEC_ID</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>lockWriteDataP</name><argument_list>(<argument><expr><name>lockIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>lockLocal</name><operator>.</operator><name>held</name></name> <operator>=</operator> <name>lockType</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<comment type="line">// Helper to release a file lock</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>lockReleaseFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lockFd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lockFile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>lockFd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>lockFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Can't release lock if there isn't one</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>lockFd</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Remove file first and then close it to release the lock. If we close it first then another process might grab the lock</comment>
        <comment type="line">// right before the delete which means the file locked by the other process will get deleted.</comment>
        <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>FSLASH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>lockFd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>lockRelease</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>failOnNoLock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>failOnNoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>lockLocal</name><operator>.</operator><name>held</name></name> <operator>==</operator> <name>lockTypeNone</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>failOnNoLock</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"no lock is held by this process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// Release locks</comment>
        <decl_stmt><decl><type><name>LockType</name></type> <name>lockMin</name> <init>= <expr><ternary><condition><expr><name><name>lockLocal</name><operator>.</operator><name>held</name></name> <operator>==</operator> <name>lockTypeAll</name></expr> ?</condition><then> <expr><name>lockTypeArchive</name></expr> </then><else>: <expr><name><name>lockLocal</name><operator>.</operator><name>held</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LockType</name></type> <name>lockMax</name> <init>= <expr><ternary><condition><expr><name><name>lockLocal</name><operator>.</operator><name>held</name></name> <operator>==</operator> <name>lockTypeAll</name></expr> ?</condition><then> <expr><operator>(</operator><name>lockTypeAll</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name><name>lockLocal</name><operator>.</operator><name>held</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>LockType</name></type> <name>lockIdx</name> <init>= <expr><name>lockMin</name></expr></init></decl>;</init> <condition><expr><name>lockIdx</name> <operator>&lt;=</operator> <name>lockMax</name></expr>;</condition> <incr><expr><name>lockIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockIdx</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>!=</operator> <name>LOCK_ON_EXEC_ID</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>lockReleaseFile</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockIdx</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockIdx</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="line">// Free the lock context and reset lock data</comment>
        <expr_stmt><expr><call><name>memContextFree</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>memContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lockLocal</name> <operator>=</operator> <operator>(</operator>struct <name>LockLocal</name><operator>)</operator><block>{<expr><operator>.</operator><name>held</name> <operator>=</operator> <name>lockTypeNone</name></expr>}</block></expr>;</expr_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
