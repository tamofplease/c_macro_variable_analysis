<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/encode.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Binary to String Encode/Decode
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/encode.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/error.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Assert that encoding type is valid. This needs to be kept up to date with the last item in the enum.
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_ENCODE_TYPE_VALID</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>                                                                                             \
    <cpp:value>ASSERT(type &lt;= encodeBase64Url);</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Base64 encoding/decoding
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>encodeBase64Lookup</name><index>[]</index></name> <init>= <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>encodeToStrBase64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sourceSize</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>destination</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>UCHARDATA</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>sourceSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>CHARDATA</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>source</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>destination</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>destinationIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Encode the string from three bytes to four characters</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>sourceIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>sourceIdx</name> <operator>&lt;</operator> <name>sourceSize</name></expr>;</condition> <incr><expr><name>sourceIdx</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control>
    <block>{<block_content>
        <comment type="line">// First encoded character is always used completely</comment>
        <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>encodeBase64Lookup</name><index>[<expr><name><name>source</name><index>[<expr><name>sourceIdx</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <comment type="line">// If there is only one byte to encode then the second encoded character is only partly used and the third and fourth</comment>
        <comment type="line">// encoded characters are padded.</comment>
        <if_stmt><if>if <condition>(<expr><name>sourceSize</name> <operator>-</operator> <name>sourceIdx</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>encodeBase64Lookup</name><index>[<expr><operator>(</operator><name><name>source</name><index>[<expr><name>sourceIdx</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x3d</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x3d</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// Else if more than one byte to encode</comment>
        <else>else
        <block>{<block_content>
            <comment type="line">// If there is more than one byte to encode then the second encoded character is used completely</comment>
            <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
                <name><name>encodeBase64Lookup</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>source</name><index>[<expr><name>sourceIdx</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>source</name><index>[<expr><name>sourceIdx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

            <comment type="line">// If there are only two bytes to encode then the third encoded character is only partly used and the fourth encoded</comment>
            <comment type="line">// character is padded.</comment>
            <if_stmt><if>if <condition>(<expr><name>sourceSize</name> <operator>-</operator> <name>sourceIdx</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>encodeBase64Lookup</name><index>[<expr><operator>(</operator><name><name>source</name><index>[<expr><name>sourceIdx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0x3d</literal></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else the third and fourth encoded characters are used completely</comment>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
                    <name><name>encodeBase64Lookup</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>source</name><index>[<expr><name>sourceIdx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>source</name><index>[<expr><name>sourceIdx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>encodeBase64Lookup</name><index>[<expr><name><name>source</name><index>[<expr><name>sourceIdx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// Zero-terminate the string</comment>
    <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>encodeToStrSizeBase64</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>sourceSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>sourceSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Calculate how many groups of three are in the source</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>encodeGroupTotal</name> <init>= <expr><name>sourceSize</name> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Increase by one if there is a partial group</comment>
    <if_stmt><if>if <condition>(<expr><name>sourceSize</name> <operator>%</operator> <literal type="number">3</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>encodeGroupTotal</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Four characters are needed to encode each group</comment>
    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>encodeGroupTotal</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>decodeBase64Lookup</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">63</literal></expr>,
    <expr><literal type="number">52</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>,
    <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>,
    <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>decodeToBinValidateBase64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check for the correct length</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>sourceSize</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>sourceSize</name> <operator>%</operator> <literal type="number">4</literal> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"base64 size %zu is not evenly divisible by 4"</literal></expr></argument>, <argument><expr><name>sourceSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Check all characters</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>sourceIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>sourceIdx</name> <operator>&lt;</operator> <name>sourceSize</name></expr>;</condition> <incr><expr><name>sourceIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <comment type="line">// Check terminators</comment>
        <if_stmt><if>if <condition>(<expr><name><name>source</name><index>[<expr><name>sourceIdx</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x3d</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Make sure they are only in the last two positions</comment>
            <if_stmt><if>if <condition>(<expr><name>sourceIdx</name> <operator>&lt;</operator> <name>sourceSize</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"base64 '=' character may only appear in last two positions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// If second to last char is = then last char must also be</comment>
            <if_stmt><if>if <condition>(<expr><name>sourceIdx</name> <operator>==</operator> <name>sourceSize</name> <operator>-</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>source</name><index>[<expr><name>sourceSize</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x3d</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"base64 last character must be '=' if second to last is"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// Error on any invalid characters</comment>
            <if_stmt><if>if <condition>(<expr><name><name>decodeBase64Lookup</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>source</name><index>[<expr><name>sourceIdx</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"base64 invalid character found at position %u"</literal></expr></argument>, <argument><expr><name>sourceIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>decodeToBinBase64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>destination</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>UCHARDATA</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Validate encoded string</comment>
    <expr_stmt><expr><call><name>decodeToBinValidateBase64</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>destinationIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Decode the binary data from four characters to three bytes</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>sourceIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>sourceIdx</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>sourceIdx</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control>
    <block>{<block_content>
        <comment type="line">// Always decode the first character</comment>
        <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
            <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name><name>decodeBase64Lookup</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>source</name><index>[<expr><name>sourceIdx</name></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>|</operator> <name><name>decodeBase64Lookup</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>source</name><index>[<expr><name>sourceIdx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

        <comment type="line">// Second character is optional</comment>
        <if_stmt><if>if <condition>(<expr><name><name>source</name><index>[<expr><name>sourceIdx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x3d</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator>
                <operator>(</operator><name><name>decodeBase64Lookup</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>source</name><index>[<expr><name>sourceIdx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <name><name>decodeBase64Lookup</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>source</name><index>[<expr><name>sourceIdx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Third character is optional</comment>
        <if_stmt><if>if <condition>(<expr><name><name>source</name><index>[<expr><name>sourceIdx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x3d</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator>
                <operator>(</operator><operator>(</operator><operator>(</operator><name><name>decodeBase64Lookup</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>source</name><index>[<expr><name>sourceIdx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>|</operator> <name><name>decodeBase64Lookup</name><index>[<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>source</name><index>[<expr><name>sourceIdx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>decodeToBinSizeBase64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Validate encoded string</comment>
    <expr_stmt><expr><call><name>decodeToBinValidateBase64</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Start with size calculated directly from source length</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>sourceSize</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>destinationSize</name> <init>= <expr><name>sourceSize</name> <operator>/</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Subtract last character if it is not present</comment>
    <if_stmt><if>if <condition>(<expr><name><name>source</name><index>[<expr><name>sourceSize</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x3d</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>destinationSize</name><operator>--</operator></expr>;</expr_stmt>

        <comment type="line">// Subtract second to last character if it is not present</comment>
        <if_stmt><if>if <condition>(<expr><name><name>source</name><index>[<expr><name>sourceSize</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x3d</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>destinationSize</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>destinationSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Base64 encoding
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>encodeBase64LookupUrl</name><index>[]</index></name> <init>= <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>encodeToStrBase64Url</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sourceSize</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>destination</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>UCHARDATA</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>sourceSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>CHARDATA</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>source</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>destination</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>destinationIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Encode the string from three bytes to four characters</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>sourceIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>sourceIdx</name> <operator>&lt;</operator> <name>sourceSize</name></expr>;</condition> <incr><expr><name>sourceIdx</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control>
    <block>{<block_content>
        <comment type="line">// First encoded character is always used completely</comment>
        <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>encodeBase64LookupUrl</name><index>[<expr><name><name>source</name><index>[<expr><name>sourceIdx</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

        <comment type="line">// If there is only one byte to encode then the second encoded character is only partly used</comment>
        <if_stmt><if>if <condition>(<expr><name>sourceSize</name> <operator>-</operator> <name>sourceIdx</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>encodeBase64LookupUrl</name><index>[<expr><operator>(</operator><name><name>source</name><index>[<expr><name>sourceIdx</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// Else if more than one byte to encode</comment>
        <else>else
        <block>{<block_content>
            <comment type="line">// If there is more than one byte to encode then the second encoded character is used completely</comment>
            <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
                <name><name>encodeBase64LookupUrl</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>source</name><index>[<expr><name>sourceIdx</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>source</name><index>[<expr><name>sourceIdx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

            <comment type="line">// If there are only two bytes to encode then the third encoded character is only partly used</comment>
            <if_stmt><if>if <condition>(<expr><name>sourceSize</name> <operator>-</operator> <name>sourceIdx</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>encodeBase64LookupUrl</name><index>[<expr><operator>(</operator><name><name>source</name><index>[<expr><name>sourceIdx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else the third and fourth encoded characters are used completely</comment>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator>
                    <name><name>encodeBase64LookupUrl</name><index>[<expr><operator>(</operator><operator>(</operator><name><name>source</name><index>[<expr><name>sourceIdx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>source</name><index>[<expr><name>sourceIdx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>encodeBase64LookupUrl</name><index>[<expr><name><name>source</name><index>[<expr><name>sourceIdx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// Zero-terminate the string</comment>
    <expr_stmt><expr><name><name>destination</name><index>[<expr><name>destinationIdx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>encodeToStrSizeBase64Url</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>sourceSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>sourceSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Calculate how many groups of three are in the source. Each group of three is encoded with four bytes.</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>encodeTotal</name> <init>= <expr><name>sourceSize</name> <operator>/</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Determine additional required bytes for the partial group, if any</comment>
    <switch>switch <condition>(<expr><name>sourceSize</name> <operator>%</operator> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// One byte requires two characters to encode</comment>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <expr_stmt><expr><name>encodeTotal</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <break>break;</break>

        <comment type="line">// Two bytes require three characters to encode</comment>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
            <expr_stmt><expr><name>encodeTotal</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            <break>break;</break>

        <comment type="line">// If mod is zero then sourceSize was evenly divisible and no additional bytes are required</comment>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
            <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>encodeTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Generic encoding/decoding
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>encodeToStr</name><parameter_list>(<parameter><decl><type><name>EncodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sourceSize</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>destination</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>UCHARDATA</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>sourceSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>CHARDATA</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_ENCODE_TYPE_VALID</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>encodeBase64</name></expr>:</case>
            <expr_stmt><expr><call><name>encodeToStrBase64</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>sourceSize</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>encodeBase64Url</name></expr>:</case>
            <expr_stmt><expr><call><name>encodeToStrBase64Url</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>sourceSize</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>size_t</name></type>
<name>encodeToStrSize</name><parameter_list>(<parameter><decl><type><name>EncodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>sourceSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>sourceSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_ENCODE_TYPE_VALID</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>destinationSize</name> <init>= <expr><name>SIZE_MAX</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>encodeBase64</name></expr>:</case>
            <expr_stmt><expr><name>destinationSize</name> <operator>=</operator> <call><name>encodeToStrSizeBase64</name><argument_list>(<argument><expr><name>sourceSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>encodeBase64Url</name></expr>:</case>
            <expr_stmt><expr><name>destinationSize</name> <operator>=</operator> <call><name>encodeToStrSizeBase64Url</name><argument_list>(<argument><expr><name>sourceSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>destinationSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>decodeToBin</name><parameter_list>(<parameter><decl><type><name>EncodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>destination</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>UCHARDATA</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_ENCODE_TYPE_VALID</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>encodeBase64</name></expr>:</case>
            <expr_stmt><expr><call><name>decodeToBinBase64</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <default>default:</default>
            <expr_stmt><expr><call><name>ASSERT_MSG</name><argument_list>(<argument><expr><literal type="string">"unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>size_t</name></type>
<name>decodeToBinSize</name><parameter_list>(<parameter><decl><type><name>EncodeType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_ENCODE_TYPE_VALID</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>destinationSize</name> <init>= <expr><name>SIZE_MAX</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>encodeBase64</name></expr>:</case>
            <expr_stmt><expr><name>destinationSize</name> <operator>=</operator> <call><name>decodeToBinSizeBase64</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <default>default:</default>
            <expr_stmt><expr><call><name>ASSERT_MSG</name><argument_list>(<argument><expr><literal type="string">"unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>destinationSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
