<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/wait.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Wait Handler
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/wait.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<struct>struct <name>Wait</name>
<block>{
    <decl_stmt><decl><type><name>WaitPub</name></type> <name>pub</name></decl>;</decl_stmt>                                                    <comment type="line">// Publicly accessible variables</comment>
    <decl_stmt><decl><type><name>TimeMSec</name></type> <name>waitTime</name></decl>;</decl_stmt>                                              <comment type="line">// Total time to wait (in usec)</comment>
    <decl_stmt><decl><type><name>TimeMSec</name></type> <name>sleepTime</name></decl>;</decl_stmt>                                             <comment type="line">// Next sleep time (in usec)</comment>
    <decl_stmt><decl><type><name>TimeMSec</name></type> <name>sleepPrevTime</name></decl>;</decl_stmt>                                         <comment type="line">// Previous time slept (in usec)</comment>
    <decl_stmt><decl><type><name>TimeMSec</name></type> <name>beginTime</name></decl>;</decl_stmt>                                             <comment type="line">// Time the wait began (in epoch usec)</comment>
}</block>;</struct>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>Wait</name> <modifier>*</modifier></type>
<name>waitNew</name><parameter_list>(<parameter><decl><type><name>TimeMSec</name></type> <name>waitTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TIMEMSEC</name></expr></argument>, <argument><expr><name>waitTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>waitTime</name> <operator>&lt;=</operator> <literal type="number">999999000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Allocate wait object</comment>
    <decl_stmt><decl><type><name>Wait</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Wait</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Create object</comment>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>(</operator><name>Wait</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pub</name> <operator>=</operator>
            <block>{
                <expr><operator>.</operator><name>remainTime</name> <operator>=</operator> <name>waitTime</name></expr>,
            }</block></expr>,
            <expr><operator>.</operator><name>waitTime</name> <operator>=</operator> <name>waitTime</name></expr>,
        }</block></expr>;</expr_stmt>

        <comment type="line">// Calculate first sleep time -- start with 1/10th of a second for anything &gt;= 1 second</comment>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>waitTime</name></name> <operator>&gt;=</operator> <name>MSEC_PER_SEC</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>sleepTime</name></name> <operator>=</operator> <name>MSEC_PER_SEC</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>
        <comment type="line">// Unless the wait time is really small -- in that case divide wait time by 10</comment>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>sleepTime</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>waitTime</name></name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// Get beginning time</comment>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>beginTime</name></name> <operator>=</operator> <call><name>timeMSec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>WAIT</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>waitMore</name><parameter_list>(<parameter><decl><type><name>Wait</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>WAIT</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// If sleep is 0 then the wait time has already ended</comment>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>sleepTime</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Sleep required amount</comment>
        <expr_stmt><expr><call><name>sleepMSec</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>sleepTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Get the end time</comment>
        <decl_stmt><decl><type><name>TimeMSec</name></type> <name>elapsedTime</name> <init>= <expr><call><name>timeMSec</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>this</name><operator>-&gt;</operator><name>beginTime</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Is there more time to go?</comment>
        <if_stmt><if>if <condition>(<expr><name>elapsedTime</name> <operator>&lt;</operator> <name><name>this</name><operator>-&gt;</operator><name>waitTime</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Calculate sleep time as a sum of current and last (a Fibonacci-type sequence)</comment>
            <decl_stmt><decl><type><name>TimeMSec</name></type> <name>sleepNextTime</name> <init>= <expr><name><name>this</name><operator>-&gt;</operator><name>sleepTime</name></name> <operator>+</operator> <name><name>this</name><operator>-&gt;</operator><name>sleepPrevTime</name></name></expr></init></decl>;</decl_stmt>

            <comment type="line">// Make sure sleep time does not go beyond end time (this won't be negative because of the if condition above)</comment>
            <if_stmt><if>if <condition>(<expr><name>sleepNextTime</name> <operator>&gt;</operator> <name><name>this</name><operator>-&gt;</operator><name>waitTime</name></name> <operator>-</operator> <name>elapsedTime</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>sleepNextTime</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>waitTime</name></name> <operator>-</operator> <name>elapsedTime</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Store new sleep times</comment>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>sleepPrevTime</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>sleepTime</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>sleepTime</name></name> <operator>=</operator> <name>sleepNextTime</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>remainTime</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>waitTime</name></name> <operator>-</operator> <name>elapsedTime</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// Else set sleep to zero so next call will return false</comment>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>sleepTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// Need to wait more</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
