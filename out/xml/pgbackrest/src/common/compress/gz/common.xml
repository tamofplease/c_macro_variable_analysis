<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/compress/gz/common.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Gz Common
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/gz/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/memContext.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>gzError</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name>error</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errorMsg</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type><name>errorType</name> <init>= <expr><operator>&amp;</operator><name>AssertError</name></expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><name>error</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Not exactly an error, but since we are not using custom dictionaries it shouldn't be possible to get this result</comment>
            <case>case <expr><name>Z_NEED_DICT</name></expr>:</case>
                <expr_stmt><expr><name>errorMsg</name> <operator>=</operator> <literal type="string">"need dictionary"</literal></expr>;</expr_stmt>
                <break>break;</break>

            <comment type="line">// We should not get this error -- included for completeness</comment>
            <case>case <expr><name>Z_ERRNO</name></expr>:</case>
                <expr_stmt><expr><name>errorMsg</name> <operator>=</operator> <literal type="string">"file error"</literal></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>Z_STREAM_ERROR</name></expr>:</case>
                <expr_stmt><expr><name>errorMsg</name> <operator>=</operator> <literal type="string">"stream error"</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>errorType</name> <operator>=</operator> <operator>&amp;</operator><name>FormatError</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>Z_DATA_ERROR</name></expr>:</case>
                <expr_stmt><expr><name>errorMsg</name> <operator>=</operator> <literal type="string">"data error"</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>errorType</name> <operator>=</operator> <operator>&amp;</operator><name>FormatError</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>Z_MEM_ERROR</name></expr>:</case>
                <expr_stmt><expr><name>errorMsg</name> <operator>=</operator> <literal type="string">"insufficient memory"</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>errorType</name> <operator>=</operator> <operator>&amp;</operator><name>MemoryError</name></expr>;</expr_stmt>
                <break>break;</break>

            <comment type="line">// This error indicates an error in the code -- there should always be space in the buffer</comment>
            <case>case <expr><name>Z_BUF_ERROR</name></expr>:</case>
                <expr_stmt><expr><name>errorMsg</name> <operator>=</operator> <literal type="string">"no space in buffer"</literal></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>Z_VERSION_ERROR</name></expr>:</case>
                <expr_stmt><expr><name>errorMsg</name> <operator>=</operator> <literal type="string">"incompatible version"</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>errorType</name> <operator>=</operator> <operator>&amp;</operator><name>FormatError</name></expr>;</expr_stmt>
                <break>break;</break>

            <default>default:</default>
                <expr_stmt><expr><name>errorMsg</name> <operator>=</operator> <literal type="string">"unknown error"</literal></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>

        <expr_stmt><expr><call><name>THROWP_FMT</name><argument_list>(<argument><expr><name>errorType</name></expr></argument>, <argument><expr><literal type="string">"zlib threw error: [%d] %s"</literal></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><name>errorMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>
</unit>
