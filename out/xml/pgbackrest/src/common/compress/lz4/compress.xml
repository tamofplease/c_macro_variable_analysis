<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/compress/lz4/compress.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
LZ4 Compress

Developed against version r131 using the documentation in https://github.com/lz4/lz4/blob/r131/lib/lz4frame.h.
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBLZ4</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lz4frame.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/lz4/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/lz4/compress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/filter/filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/pack.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Older versions of lz4 do not define the max header size.  This seems to be the max for any version.
***********************************************************************************************************************************/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LZ4F_HEADER_SIZE_MAX</name></cpp:ifndef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LZ4F_HEADER_SIZE_MAX</name></cpp:macro>                                    <cpp:value>19</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>Lz4Compress</name>
<block>{
    <decl_stmt><decl><type><name>LZ4F_compressionContext_t</name></type> <name>context</name></decl>;</decl_stmt>                              <comment type="line">// LZ4 compression context</comment>
    <decl_stmt><decl><type><name>LZ4F_preferences_t</name></type> <name>prefs</name></decl>;</decl_stmt>                                       <comment type="line">// Preferences -- just compress level set</comment>
    <decl_stmt><decl><type><name>IoFilter</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>                                               <comment type="line">// Filter interface</comment>

    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>                                                 <comment type="line">// For when the output buffer can't accept all compressed data</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>first</name></decl>;</decl_stmt>                                                     <comment type="line">// Is this the first call to process?</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>inputSame</name></decl>;</decl_stmt>                                                 <comment type="line">// Is the same input required on the next process call?</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>flushing</name></decl>;</decl_stmt>                                                  <comment type="line">// Is input complete and flushing in progress?</comment>
}</block></struct></type> <name>Lz4Compress</name>;</typedef>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Render as string for logging
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>lz4CompressToLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Lz4Compress</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strNewFmt</name><argument_list>(
        <argument><expr><literal type="string">"{level: %d, first: %s, inputSame: %s, flushing: %s}"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>prefs</name><operator>.</operator><name>compressionLevel</name></name></expr></argument>,
        <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>inputSame</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>flushing</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_LZ4_COMPRESS_TYPE</name></cpp:macro>                                                                                             \
    <cpp:value>Lz4Compress *</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_LZ4_COMPRESS_FORMAT</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>buffer</name></type></parameter>, <parameter><type><name>bufferSize</name></type></parameter>)</parameter_list></cpp:macro>                                                                \
    <cpp:value>FUNCTION_LOG_STRING_OBJECT_FORMAT(value, lz4CompressToLog, buffer, bufferSize)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Free compression context
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>lz4CompressFreeResource</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>Lz4Compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>LZ4_COMPRESS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LZ4F_freeCompressionContext</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Compress data
***********************************************************************************************************************************/</comment>
<comment type="line">// Helper to return a buffer where output will be written.  If there is enough space in the provided output buffer then use it,</comment>
<comment type="line">// otherwise allocate an internal buffer to hold the compressed data.  Once we start using the internal buffer we'll need to</comment>
<comment type="line">// continue using it until it is completely flushed.</comment>
<function><type><specifier>static</specifier> <name>Buffer</name> <modifier>*</modifier></type>
<name>lz4CompressBuffer</name><parameter_list>(<parameter><decl><type><name>Lz4Compress</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>required</name></decl></parameter>, <parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>LZ4_COMPRESS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>required</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>output</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Is an internal buffer required to hold the compressed data?</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufEmpty</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name>required</name> <operator>&gt;=</operator> <call><name>bufRemains</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Reallocate buffer if it is not large enough</comment>
        <if_stmt><if>if <condition>(<expr><name>required</name> <operator>&gt;=</operator> <call><name>bufRemains</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>bufResize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>required</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Helper to flush output data to compressed buffer</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>lz4CompressFlush</name><parameter_list>(<parameter><decl><type><name>Lz4Compress</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>compressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>LZ4_COMPRESS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If the compressed buffer can hold all the output</comment>
    <if_stmt><if>if <condition>(<expr><call><name>bufRemains</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>bufUsed</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>bufCat</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>inputSame</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// Else flush as much as possible and set inputSame to flush more once the compressed buffer has been emptied</comment>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>catSize</name> <init>= <expr><call><name>bufRemains</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bufCatSub</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>catSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>catSize</name></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>catSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>catSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>inputSame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>lz4CompressProcess</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>uncompressed</name></decl></parameter>, <parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>compressed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>Lz4Compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>LZ4_COMPRESS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>uncompressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name><name>this</name><operator>-&gt;</operator><name>flushing</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>inputSame</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>context</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>compressed</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>flushing</name></name> <operator>||</operator> <name>uncompressed</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Flush overflow output to the compressed buffer</comment>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>inputSame</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>lz4CompressFlush</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// If first call to process then begin compression</comment>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>lz4CompressBuffer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>LZ4F_HEADER_SIZE_MAX</name></expr></argument>, <argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bufUsedInc</name><argument_list>(
                <argument><expr><name>output</name></expr></argument>, <argument><expr><call><name>lz4Error</name><argument_list>(<argument><expr><call><name>LZ4F_compressBegin</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><call><name>bufRemainsPtr</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufRemains</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>prefs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Normal processing call</comment>
        <if_stmt><if>if <condition>(<expr><name>uncompressed</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>lz4CompressBuffer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>lz4Error</name><argument_list>(<argument><expr><call><name>LZ4F_compressBound</name><argument_list>(<argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>uncompressed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>prefs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>bufUsedInc</name><argument_list>(
                <argument><expr><name>output</name></expr></argument>,
                <argument><expr><call><name>lz4Error</name><argument_list>(
                    <argument><expr><call><name>LZ4F_compressUpdate</name><argument_list>(
                        <argument><expr><name><name>this</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><call><name>bufRemainsPtr</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufRemains</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufPtrConst</name><argument_list>(<argument><expr><name>uncompressed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>uncompressed</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// Else flush remaining output</comment>
        <else>else
        <block>{<block_content>
            <comment type="line">// Pass 1 as src size to help allocate enough space for the final flush. This is required for some versions that don't</comment>
            <comment type="line">// allocate enough memory unless autoFlush is enabled. Other versions fail if autoFlush is only enabled before the final</comment>
            <comment type="line">// flush. This will hopefully work across all versions even if it does allocate a larger buffer than needed.</comment>
            <expr_stmt><expr><name>output</name> <operator>=</operator> <call><name>lz4CompressBuffer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>lz4Error</name><argument_list>(<argument><expr><call><name>LZ4F_compressBound</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>prefs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bufUsedInc</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><call><name>lz4Error</name><argument_list>(<argument><expr><call><name>LZ4F_compressEnd</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><call><name>bufRemainsPtr</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufRemains</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>flushing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// If the output buffer was allocated locally it will need to be flushed to the compressed buffer</comment>
        <if_stmt><if>if <condition>(<expr><name>output</name> <operator>!=</operator> <name>compressed</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>lz4CompressFlush</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Is compress done?
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>lz4CompressDone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Lz4Compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>LZ4_COMPRESS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>flushing</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>inputSame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Is the same input required on the next process call?
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>lz4CompressInputSame</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><specifier>const</specifier> <name>Lz4Compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>LZ4_COMPRESS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>inputSame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>IoFilter</name> <modifier>*</modifier></type>
<name>lz4CompressNew</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>level</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IoFilter</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Lz4Compress</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.callbackQty = <literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Lz4Compress</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>*</operator><name>driver</name> <operator>=</operator> <operator>(</operator><name>Lz4Compress</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>prefs</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>compressionLevel</name> <operator>=</operator> <name>level</name></expr>, <expr><operator>.</operator><name>frameInfo</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>contentChecksumFlag</name> <operator>=</operator> <name>LZ4F_contentChecksumEnabled</name></expr>}</block></expr>}</block></expr>,
            <expr><operator>.</operator><name>first</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>buffer</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
        }</block></expr>;</expr_stmt>

        <comment type="line">// Create lz4 context</comment>
        <expr_stmt><expr><call><name>lz4Error</name><argument_list>(<argument><expr><call><name>LZ4F_createCompressionContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>driver</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>LZ4F_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set callback to ensure lz4 context is freed</comment>
        <expr_stmt><expr><call><name>memContextCallbackSet</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>driver</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lz4CompressFreeResource</name></expr></argument>, <argument><expr><name>driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create param list</comment>
        <decl_stmt><decl><type><name>Pack</name> <modifier>*</modifier></type><name>paramList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>packWrite</name> <init>= <expr><call><name>pckWriteNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>pckWriteI32P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>paramList</name> <operator>=</operator> <call><name>pckMove</name><argument_list>(<argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create filter interface</comment>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>ioFilterNewP</name><argument_list>(
            <argument><expr><name>LZ4_COMPRESS_FILTER_TYPE</name></expr></argument>, <argument><expr><name>driver</name></expr></argument>, <argument><expr><name>paramList</name></expr></argument>, <argument><expr><operator>.</operator><name>done</name> <operator>=</operator> <name>lz4CompressDone</name></expr></argument>, <argument><expr><operator>.</operator><name>inOut</name> <operator>=</operator> <name>lz4CompressProcess</name></expr></argument>,
            <argument><expr><operator>.</operator><name>inputSame</name> <operator>=</operator> <name>lz4CompressInputSame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>IO_FILTER</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_LIBLZ4</comment>
</unit>
