<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/compress/helper.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Compression Helper
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/bz2/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/bz2/compress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/bz2/decompress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/gz/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/gz/compress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/gz/decompress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/lz4/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/lz4/compress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/lz4/decompress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/zst/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/zst/compress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/zst/decompress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Compression type constants
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPRESS_TYPE_NONE</name></cpp:macro>                                          <cpp:value>"none"</cpp:value></cpp:define>

<comment type="line">// Constants for currently unsupported compression types</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XZ_EXT</name></cpp:macro>                                                      <cpp:value>"xz"</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Configuration for supported and future compression types
***********************************************************************************************************************************/</comment>
<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>CompressHelperLocal</name>
<block>{
    <decl_stmt><decl><type><name>StringId</name></type> <name>typeId</name></decl>;</decl_stmt>                                                <comment type="line">// Compress type id</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>type</name></decl>;</decl_stmt>                                       <comment type="line">// Compress type -- must be extension without period prefixed</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ext</name></decl>;</decl_stmt>                                        <comment type="line">// File extension with period prefixed</comment>
    <decl_stmt><decl><type><name>StringId</name></type> <name>compressType</name></decl>;</decl_stmt>                                          <comment type="line">// Type of the compression filter</comment>
    <function_decl><type><name>IoFilter</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>compressNew</name>)<parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>                                  <comment type="line">// Function to create new compression filter</comment>
    <decl_stmt><decl><type><name>StringId</name></type> <name>decompressType</name></decl>;</decl_stmt>                                        <comment type="line">// Type of the decompression filter</comment>
    <function_decl><type><name>IoFilter</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>decompressNew</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>                               <comment type="line">// Function to create new decompression filter</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>levelDefault</name></decl>;</decl_stmt>                                               <comment type="line">// Default compression level</comment>
}</block> <decl><name><name>compressHelperLocal</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><operator>.</operator><name>typeId</name> <operator>=</operator> <call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>, <argument><expr><literal type="number">0x2b9ee0</literal></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>COMPRESS_TYPE_NONE</name></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>ext</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>typeId</name> <operator>=</operator> <call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"bz2"</literal></expr></argument>, <argument><expr><literal type="number">0x73420</literal></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>BZ2_EXT</name></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>ext</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"."</literal> <name>BZ2_EXT</name></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>compressType</name> <operator>=</operator> <name>BZ2_COMPRESS_FILTER_TYPE</name></expr>,
        <expr><operator>.</operator><name>compressNew</name> <operator>=</operator> <name>bz2CompressNew</name></expr>,
        <expr><operator>.</operator><name>decompressType</name> <operator>=</operator> <name>BZ2_DECOMPRESS_FILTER_TYPE</name></expr>,
        <expr><operator>.</operator><name>decompressNew</name> <operator>=</operator> <name>bz2DecompressNew</name></expr>,
        <expr><operator>.</operator><name>levelDefault</name> <operator>=</operator> <literal type="number">9</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>typeId</name> <operator>=</operator> <call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"gz"</literal></expr></argument>, <argument><expr><literal type="number">0x3470</literal></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>GZ_EXT</name></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>ext</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"."</literal> <name>GZ_EXT</name></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>compressType</name> <operator>=</operator> <name>GZ_COMPRESS_FILTER_TYPE</name></expr>,
        <expr><operator>.</operator><name>compressNew</name> <operator>=</operator> <name>gzCompressNew</name></expr>,
        <expr><operator>.</operator><name>decompressType</name> <operator>=</operator> <name>GZ_DECOMPRESS_FILTER_TYPE</name></expr>,
        <expr><operator>.</operator><name>decompressNew</name> <operator>=</operator> <name>gzDecompressNew</name></expr>,
        <expr><operator>.</operator><name>levelDefault</name> <operator>=</operator> <literal type="number">6</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>typeId</name> <operator>=</operator> <call><name>STRID6</name><argument_list>(<argument><expr><literal type="string">"lz4"</literal></expr></argument>, <argument><expr><literal type="number">0x2068c1</literal></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>LZ4_EXT</name></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>ext</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"."</literal> <name>LZ4_EXT</name></expr></argument>)</argument_list></call></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBLZ4</name></cpp:ifdef>
        <expr><operator>.</operator><name>compressType</name> <operator>=</operator> <name>LZ4_COMPRESS_FILTER_TYPE</name></expr>,
        <expr><operator>.</operator><name>compressNew</name> <operator>=</operator> <name>lz4CompressNew</name></expr>,
        <expr><operator>.</operator><name>decompressType</name> <operator>=</operator> <name>LZ4_DECOMPRESS_FILTER_TYPE</name></expr>,
        <expr><operator>.</operator><name>decompressNew</name> <operator>=</operator> <name>lz4DecompressNew</name></expr>,
        <expr><operator>.</operator><name>levelDefault</name> <operator>=</operator> <literal type="number">1</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>typeId</name> <operator>=</operator> <call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"zst"</literal></expr></argument>, <argument><expr><literal type="number">0x527a0</literal></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>ZST_EXT</name></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>ext</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"."</literal> <name>ZST_EXT</name></expr></argument>)</argument_list></call></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZST</name></cpp:ifdef>
        <expr><operator>.</operator><name>compressType</name> <operator>=</operator> <name>ZST_COMPRESS_FILTER_TYPE</name></expr>,
        <expr><operator>.</operator><name>compressNew</name> <operator>=</operator> <name>zstCompressNew</name></expr>,
        <expr><operator>.</operator><name>decompressType</name> <operator>=</operator> <name>ZST_DECOMPRESS_FILTER_TYPE</name></expr>,
        <expr><operator>.</operator><name>decompressNew</name> <operator>=</operator> <name>zstDecompressNew</name></expr>,
        <expr><operator>.</operator><name>levelDefault</name> <operator>=</operator> <literal type="number">3</literal></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>typeId</name> <operator>=</operator> <call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"xz"</literal></expr></argument>, <argument><expr><literal type="number">0x3580</literal></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>XZ_EXT</name></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>ext</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"."</literal> <name>XZ_EXT</name></expr></argument>)</argument_list></call></expr>,
    }</block></expr>,
}</block></expr></init></decl>;</struct>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>CompressType</name></type>
<name>compressTypeEnum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringId</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CompressType</name></type> <name>result</name> <init>= <expr><name>compressTypeNone</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init>;</init> <condition><expr><name>result</name> <operator>&lt;</operator> <call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>compressHelperLocal</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>result</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name><name>compressHelperLocal</name><index>[<expr><name>result</name></expr>]</index></name><operator>.</operator><name>typeId</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>compressHelperLocal</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"invalid compression type '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>compressTypePresent</name><parameter_list>(<parameter><decl><type><name>CompressType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>&lt;</operator> <call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>compressHelperLocal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>compressTypeNone</name> <operator>&amp;&amp;</operator> <name><name>compressHelperLocal</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>compressNew</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>OptionInvalidValueError</name></expr></argument>, <argument><expr><name>PROJECT_NAME</name> <literal type="string">" not compiled with %s support"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>compressHelperLocal</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type>
<name>compressTypeStr</name><parameter_list>(<parameter><decl><type><name>CompressType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>&lt;</operator> <call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>compressHelperLocal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>compressHelperLocal</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>CompressType</name></type>
<name>compressTypeFromName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CompressType</name></type> <name>result</name> <init>= <expr><name>compressTypeNone</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init>;</init> <condition><expr><name>result</name> <operator>&lt;</operator> <call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>compressHelperLocal</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>result</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strEndsWith</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>compressHelperLocal</name><index>[<expr><name>result</name></expr>]</index></name><operator>.</operator><name>ext</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>compressHelperLocal</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>compressTypeNone</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>compressLevelDefault</name><parameter_list>(<parameter><decl><type><name>CompressType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>&lt;</operator> <call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>compressHelperLocal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>compressTypePresent</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name><name>compressHelperLocal</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>levelDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>IoFilter</name> <modifier>*</modifier></type>
<name>compressFilter</name><parameter_list>(<parameter><decl><type><name>CompressType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>&lt;</operator> <call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>compressHelperLocal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>!=</operator> <name>compressTypeNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>compressTypePresent</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>IO_FILTER</name></expr></argument>, <argument><expr><name><name>compressHelperLocal</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><call><name>compressNew</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>IoFilter</name> <modifier>*</modifier></type>
<name>compressFilterPack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringId</name></type> <name>filterType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Pack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>filterParam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>filterType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>VARIANT_LIST</name></expr></argument>, <argument><expr><name>filterParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filterType</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IoFilter</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>CompressType</name></type> <name>compressIdx</name> <init>= <expr><name>compressTypeNone</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>compressIdx</name> <operator>&lt;</operator> <call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>compressHelperLocal</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>compressIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>CompressHelperLocal</name></name> <modifier>*</modifier></type><name>compress</name> <init>= <expr><operator>&amp;</operator><name><name>compressHelperLocal</name><index>[<expr><name>compressIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>filterType</name> <operator>==</operator> <name><name>compress</name><operator>-&gt;</operator><name>compressType</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filterParam</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ioFilterMove</name><argument_list>(<argument><expr><call><name><name>compress</name><operator>-&gt;</operator><name>compressNew</name></name><argument_list>(<argument><expr><call><name>pckReadI32P</name><argument_list>(<argument><expr><call><name>pckReadNew</name><argument_list>(<argument><expr><name>filterParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><name>filterType</name> <operator>==</operator> <name><name>compress</name><operator>-&gt;</operator><name>decompressType</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>ioFilterMove</name><argument_list>(<argument><expr><call><name><name>compress</name><operator>-&gt;</operator><name>decompressNew</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>IO_FILTER</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>IoFilter</name> <modifier>*</modifier></type>
<name>decompressFilter</name><parameter_list>(<parameter><decl><type><name>CompressType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>&lt;</operator> <call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>compressHelperLocal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>!=</operator> <name>compressTypeNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>compressTypePresent</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>IO_FILTER</name></expr></argument>, <argument><expr><name><name>compressHelperLocal</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><call><name>decompressNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type>
<name>compressExtStr</name><parameter_list>(<parameter><decl><type><name>CompressType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>&lt;</operator> <call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>compressHelperLocal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>compressHelperLocal</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>compressExtCat</name><parameter_list>(<parameter><decl><type><name>String</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>CompressType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>compressExtStr</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>compressExtStrip</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>CompressType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEndsWith</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>compressExtStr</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"'%s' must have '%s' extension"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>compressExtStr</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>strSubN</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strSize</name><argument_list>(<argument><expr><call><name>compressExtStr</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
