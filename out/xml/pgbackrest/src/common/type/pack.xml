<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/type/pack.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Pack Type

Each pack field begins with a one byte tag. The four high order bits of the tag contain the field type (PackTypeMap). To allow more
types than four bits will allow, the type bits can be set to 0xF and the rest of the type (- 0xF) will be stored by a base-128
encoded integer immediately following the tag. The four lower order bits vary by type.

When the "more ID delta" indicator is set then the tag (and type, if any) will be followed by a base-128 encoded integer with the
higher order ID delta bits. The ID delta represents the delta from the ID of the previous field. When the "more value indicator"
then the tag (and the type and ID delta, if any) will be followed by a base-128 encoded integer with the high order value bits, i.e.
the bits that were not stored directly in the tag.

For integer types the value is the integer being stored but for string and binary types the value is 1 if the size is greater than 0
and 0 if the size is 0. When the size is greater than 0 the tag is immediately followed by (or after the delta ID if "more ID delta"
is set) the base-128 encoded size and then by the string/binary bytes. For string and binary types the value bit indicates if there
is data, not the length of the data, which is why the length is stored immediately following the tag when the value bit is set. This
prevents storing an additional byte when the string/binary length is zero.

The following are definitions for the pack tag field and examples of how it is interpreted.

Integer types (packTypeMapData[type].valueMultiBit) when an unsigned value is &lt;= 1 or a signed value is &gt;= -1 and &lt;= 0:
  3 - more value indicator bit set to 0
  2 - value low order bit
  1 - more ID delta indicator bit
  0 - ID delta low order bit

  Example: b704
    b = unsigned int 64 type
    7 = tag byte low bits: 0 1 1 1 meaning:
        "value low order bit" - the value of the u64 field is 1
        "more ID delta indicator bit" - there exists a gap (i.e. NULLs are not stored so there is a gap between the stored IDs)
        "ID delta low order bit" - gaps are interpreted as the currently stored ID minus previously stored ID minus 1, therefore if
            the previously store ID is 1 and the ID of this u64 field is 11 then a gap of 10 exists. 10 is represented internally as
            9 since there is always at least a gap of 1 which never needs to be recorded (it is a given). 9 in bit format is
            1 0 0 1 - the low-order bit is 1 so the "ID delta low order bit" is set.
    04 = since the low order bit of the internal ID delta was already set in bit 0 of the tag byte, then the remain bits are shifted
        right by one and represented in this second byte as 4. To get the ID delta for 04, shift the 4 back to the left one and then
        add back the "ID delta low order bit" to give a binary representation of 1 0 0 1 = 9. Add back the 1 which is never
        recorded and the ID gap is 10.

Integer types (packTypeMapData[type].valueMultiBit) when an unsigned value is &gt; 1 or a signed value is &lt; -1 or &gt; 0:
  3 - more value indicator bit set to 1
  2 - more ID delta indicator bit
0-1 - ID delta low order bits

  Example: 5e021f
    5 = signed int 64 type
    e = tag byte low bits:  1 1 1 0 meaning:
        "more value indicator bit set to 1" - the actual value is &lt; -1 or &gt; 0
        "more ID delta indicator bit" - there exists a gap (i.e. NULLs are not stored so there is a gap between the stored IDs)
        "ID delta low order bits" - here the bit 1 is set to 1 and bit 0 is not so the ID delta has the second low order bit set but
        not the first
    02 = since bit 0 and bit 1 of the tag byte are accounted for then the 02 is the result of shifting the ID delta right by 2.
        Shifting the 2 back to the left by 2 and adding back the second low order bit as 1 and the first low order bit as 0 then
        the bit representation would be 1 0 1 0 which is ten (10) so the gap between the IDs is 11.
    1f = signed, zigzag representation of -16 (the actual value)

String, binary types, and boolean (packTypeMapData[type].valueSingleBit):
  3 - value bit
  2 - more ID delta indicator bit
0-1 - ID delta low order bits
  Note: binary type is interpreted the same way as string type

  Example: 8c090673616d706c65
    8 = string type
    c = tag byte low bits:  1 1 0 0 meaning:
        "value bit" - there is data
        "more ID delta indicator bit" - there exists a gap (i.e. NULLs are not stored so there is a gap between the stored IDs)
    09 = since neither "ID delta low order bits" is set in the tag, they are both 0, so shifting 9 left by 2, the 2 low order bits
        are now 0 so the result is 0x24 = 36 in decimal. Add back the 1 which is never recorded and the ID gap is 37.
    06 = the length of the string is 6 bytes
    73616d706c65 = the 6 bytes of the string value ("sample")

  Example: 30
    3 = boolean type
    0 = "value bit" 0 means the value is false
    Note that if the boolean had been pack written with .defaultWrite = false there would have been a gap instead of the 30.

Array and object types:
  3 - more ID delta indicator bit
0-2 - ID delta low order bits
  Note: arrays and objects are merely containers for the other pack types.

  Example: 1801 (container begin)
    1 = array type
    8 = "more ID delta indicator bit" - there exists a gap (i.e. NULLs are not stored so there is a gap between the stored IDs)
    01 = since there are three "ID delta low order bits", the 01 will be shifted left by 3 with zeros, resulting in 8. Add back
        the 1 which is never recorded and the ID gap is 9.
    ...
    00 = container end - the array/object container end will occur when a 0 byte (00) is encountered that is not part of a pack
        field within the array/object

***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/read.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/write.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/convert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/pack.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Map PackType types to the types that will be written into the pack. This hides the details of the type IDs from the user and allows
the IDs used in the pack to differ from the IDs the user sees.
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><enum>enum
<block>{
    <decl><name>pckTypeMapUnknown</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,                                          <comment type="line">// Used internally when the type is not known</comment>
    <decl><name>pckTypeMapArray</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,                                            <comment type="line">// Maps to pckTypeArray</comment>
    <decl><name>pckTypeMapBool</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,                                             <comment type="line">// Maps to pckTypeBool</comment>
    <decl><name>pckTypeMapI32</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,                                              <comment type="line">// Maps to pckTypeI32</comment>
    <decl><name>pckTypeMapI64</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,                                              <comment type="line">// Maps to pckTypeI64</comment>
    <decl><name>pckTypeMapObj</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,                                              <comment type="line">// Maps to pckTypeObj</comment>
    <decl><name>pckTypeMapPtr</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,                                              <comment type="line">// Maps to pckTypePtr</comment>
    <decl><name>pckTypeMapStr</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,                                              <comment type="line">// Maps to pckTypeStr</comment>
    <decl><name>pckTypeMapU32</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,                                              <comment type="line">// Maps to pckTypeU32</comment>
    <decl><name>pckTypeMapU64</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>,                                              <comment type="line">// Maps to pckTypeU64</comment>
    <decl><name>pckTypeMapStrId</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>,                                           <comment type="line">// Maps to pckTypeStrId</comment>

    <comment type="line">// The empty positions before 15 can be used for new types that will be encoded entirely in the tag</comment>

    <decl><name>pckTypeMapTime</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>,                                            <comment type="line">// Maps to pckTypeTime</comment>
    <decl><name>pckTypeMapBin</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,                                             <comment type="line">// Maps to pckTypeBin</comment>
    <decl><name>pckTypeMapPack</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>,                                            <comment type="line">// Maps to pckTypePack</comment>
    <decl><name>pckTypeMapMode</name> <init>= <expr><literal type="number">18</literal></expr></init></decl>,                                            <comment type="line">// Maps to pckTypeMode</comment>
}</block></enum></type> <name>PackTypeMap</name>;</typedef>

<typedef>typedef <type><struct>struct <name>PackTypeMapData</name>
<block>{
    <decl_stmt><decl><type><name>PackType</name></type> <name>type</name></decl>;</decl_stmt>                                                  <comment type="line">// Data type</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>valueSingleBit</name></decl>;</decl_stmt>                                            <comment type="line">// Can the value be stored in a single bit (e.g. bool)</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>valueMultiBit</name></decl>;</decl_stmt>                                             <comment type="line">// Can the value require multiple bits (e.g. integer)</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>size</name></decl>;</decl_stmt>                                                      <comment type="line">// Does the type require a size (e.g. string)</comment>
}</block></struct></type> <name>PackTypeMapData</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>PackTypeMapData</name></type> <name><name>packTypeMapData</name><index>[]</index></name> <init>=
<expr><block>{
    <comment type="line">// Unknown type map data should not be used</comment>
    <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>,

    <comment type="line">// Formats that can be encoded entirely in the tag</comment>
    <expr><block>{
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>pckTypeArray</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>pckTypeBool</name></expr>,
        <expr><operator>.</operator><name>valueSingleBit</name> <operator>=</operator> <name>true</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>pckTypeI32</name></expr>,
        <expr><operator>.</operator><name>valueMultiBit</name> <operator>=</operator> <name>true</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>pckTypeI64</name></expr>,
        <expr><operator>.</operator><name>valueMultiBit</name> <operator>=</operator> <name>true</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>pckTypeObj</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>pckTypePtr</name></expr>,
        <expr><operator>.</operator><name>valueMultiBit</name> <operator>=</operator> <name>true</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>pckTypeStr</name></expr>,
        <expr><operator>.</operator><name>valueSingleBit</name> <operator>=</operator> <name>true</name></expr>,
        <expr><operator>.</operator><name>size</name> <operator>=</operator> <name>true</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>pckTypeU32</name></expr>,
        <expr><operator>.</operator><name>valueMultiBit</name> <operator>=</operator> <name>true</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>pckTypeU64</name></expr>,
        <expr><operator>.</operator><name>valueMultiBit</name> <operator>=</operator> <name>true</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>pckTypeStrId</name></expr>,
        <expr><operator>.</operator><name>valueMultiBit</name> <operator>=</operator> <name>true</name></expr>,
    }</block></expr>,

    <comment type="line">// Placeholders for unused types that can be encoded entirely in the tag</comment>
    <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>,

    <comment type="line">// Formats that require an extra byte to encode</comment>
    <expr><block>{
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>pckTypeTime</name></expr>,
        <expr><operator>.</operator><name>valueMultiBit</name> <operator>=</operator> <name>true</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>pckTypeBin</name></expr>,
        <expr><operator>.</operator><name>valueSingleBit</name> <operator>=</operator> <name>true</name></expr>,
        <expr><operator>.</operator><name>size</name> <operator>=</operator> <name>true</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>pckTypePack</name></expr>,
        <expr><operator>.</operator><name>size</name> <operator>=</operator> <name>true</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>pckTypeMode</name></expr>,
        <expr><operator>.</operator><name>valueMultiBit</name> <operator>=</operator> <name>true</name></expr>,
    }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object types
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>PackTagStackItem</name>
<block>{
    <decl_stmt><decl><type><name>PackTypeMap</name></type> <name>typeMap</name></decl>;</decl_stmt>                                            <comment type="line">// Tag type map</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>idLast</name></decl>;</decl_stmt>                                            <comment type="line">// Last id in the container</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>nullTotal</name></decl>;</decl_stmt>                                         <comment type="line">// Total nulls since last tag written</comment>
}</block></struct></type> <name>PackTagStackItem</name>;</typedef>

<typedef>typedef <type><struct>struct <name>PackTagStack</name>
<block>{
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>stack</name></decl>;</decl_stmt>                                                    <comment type="line">// Stack of object/array tags</comment>
    <decl_stmt><decl><type><name>PackTagStackItem</name></type> <name>bottom</name></decl>;</decl_stmt>                                        <comment type="line">// Static bottom of the stack</comment>
    <decl_stmt><decl><type><name>PackTagStackItem</name> <modifier>*</modifier></type><name>top</name></decl>;</decl_stmt>                                          <comment type="line">// Top tag on the stack</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>depth</name></decl>;</decl_stmt>                                             <comment type="line">// Stack depth</comment>
}</block></struct></type> <name>PackTagStack</name>;</typedef>

<struct>struct <name>PackRead</name>
<block>{
    <decl_stmt><decl><type><name>IoRead</name> <modifier>*</modifier></type><name>read</name></decl>;</decl_stmt>                                                   <comment type="line">// Read pack from</comment>
    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>                                                 <comment type="line">// Buffer containing read data</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bufferPtr</name></decl>;</decl_stmt>                                       <comment type="line">// Pointer to buffer</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bufferPos</name></decl>;</decl_stmt>                                               <comment type="line">// Position in the buffer</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>bufferUsed</name></decl>;</decl_stmt>                                              <comment type="line">// Amount of data in the buffer</comment>

    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tagNextId</name></decl>;</decl_stmt>                                         <comment type="line">// Next tag id</comment>
    <decl_stmt><decl><type><name>PackTypeMap</name></type> <name>tagNextTypeMap</name></decl>;</decl_stmt>                                     <comment type="line">// Next tag type map</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>tagNextValue</name></decl>;</decl_stmt>                                          <comment type="line">// Next tag value</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>tagNextSize</name></decl>;</decl_stmt>                                             <comment type="line">// Next tag size</comment>

    <decl_stmt><decl><type><name>PackTagStack</name></type> <name>tagStack</name></decl>;</decl_stmt>                                          <comment type="line">// Stack of object/array tags</comment>
}</block>;</struct>

<struct>struct <name>PackWrite</name>
<block>{
    <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name></decl>;</decl_stmt>                                                 <comment type="line">// Write pack to</comment>
    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buffer</name></decl>;</decl_stmt>                                                 <comment type="line">// Buffer to contain write data</comment>

    <decl_stmt><decl><type><name>PackTagStack</name></type> <name>tagStack</name></decl>;</decl_stmt>                                          <comment type="line">// Stack of object/array tags</comment>
}</block>;</struct>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Push a container onto the tag stack
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pckTagStackPush</name><parameter_list>(<parameter><decl><type><name>MemContext</name> <modifier>*</modifier><specifier>const</specifier></type> <name>memContext</name></decl></parameter>, <parameter><decl><type><name>PackTagStack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tagStack</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PackTypeMap</name></type> <name>typeMap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MEM_CONTEXT</name></expr></argument>, <argument><expr><name>memContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>tagStack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>typeMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tagStack</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>typeMap</name> <operator>==</operator> <name>pckTypeMapArray</name> <operator>||</operator> <name>typeMap</name> <operator>==</operator> <name>pckTypeMapObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>tagStack</name><operator>-&gt;</operator><name>stack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name><name>tagStack</name><operator>-&gt;</operator><name>stack</name></name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PackTagStackItem</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>tagStack</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <macro><name>lstAdd</name><argument_list>(<argument>tagStack-&gt;stack</argument>, <argument>&amp;(PackTagStackItem){.typeMap = typeMap}</argument>)</argument_list></macro></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tagStack</name><operator>-&gt;</operator><name>depth</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Check that a container can be popped off the stack
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pckTagStackPopCheck</name><parameter_list>(<parameter><decl><type><name>PackTagStack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tagStack</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PackTypeMap</name></type> <name>typeMap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>tagStack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>typeMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tagStack</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>typeMap</name> <operator>==</operator> <name>pckTypeMapArray</name> <operator>||</operator> <name>typeMap</name> <operator>==</operator> <name>pckTypeMapObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>tagStack</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>tagStack</name><operator>-&gt;</operator><name>top</name><operator>-&gt;</operator><name>typeMap</name></name> <operator>!=</operator> <name>typeMap</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"not in %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><name><name>packTypeMapData</name><index>[<expr><name>typeMap</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Pop a container off the tag stack
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pckTagStackPop</name><parameter_list>(<parameter><decl><type><name>PackTagStack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tagStack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>tagStack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tagStack</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>tagStack</name><operator>-&gt;</operator><name>depth</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>tagStack</name><operator>-&gt;</operator><name>stack</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lstRemoveLast</name><argument_list>(<argument><expr><name><name>tagStack</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tagStack</name><operator>-&gt;</operator><name>depth</name></name><operator>--</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>tagStack</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>tagStack</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>tagStack</name><operator>-&gt;</operator><name>bottom</name></name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>tagStack</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <call><name>lstGetLast</name><argument_list>(<argument><expr><name><name>tagStack</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<comment type="line">// Helper to create common data</comment>
<function><type><specifier>static</specifier> <name>PackRead</name> <modifier>*</modifier></type>
<name>pckReadNewInternal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>PackRead</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>(</operator><name>PackRead</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>tagStack</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>typeMap</name> <operator>=</operator> <name>pckTypeMapObj</name></expr>}</block></expr>}</block></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PackRead</name> <modifier>*</modifier></type>
<name>pckReadNewIo</name><parameter_list>(<parameter><decl><type><name>IoRead</name> <modifier>*</modifier></type><name>read</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>IO_READ</name></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>read</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><call><name>pckReadNewInternal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <name>read</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><call><name>ioBufferSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>bufferPtr</name></name> <operator>=</operator> <call><name>bufPtr</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PackRead</name> <modifier>*</modifier></type>
<name>pckReadNew</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Pack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK</name></expr></argument>, <argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pack</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><call><name>pckReadNewC</name><argument_list>(<argument><expr><call><name>bufPtrConst</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Buffer</name> <operator>*</operator><operator>)</operator><name>pack</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>Buffer</name> <operator>*</operator><operator>)</operator><name>pack</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PackRead</name> <modifier>*</modifier></type>
<name>pckReadNewC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><call><name>pckReadNewInternal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>bufferPtr</name></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>bufferUsed</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Read bytes from the buffer

IMPORTANT NOTE: To avoid having dynamically created return buffers the current buffer position (this-&gt;bufferPos) is stored in the
object. Therefore this function should not be used as a parameter in other function calls since the value of this-&gt;bufferPos will
change.
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>pckReadBuffer</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>remaining</name> <init>= <expr><name><name>this</name><operator>-&gt;</operator><name>bufferUsed</name></name> <operator>-</operator> <name><name>this</name><operator>-&gt;</operator><name>bufferPos</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&lt;</operator> <name>size</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>read</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Nothing can be remaining since each read fetches exactly the number of bytes required</comment>
            <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>remaining</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Limit the buffer for the next read so we don't read past the end of the pack</comment>
            <expr_stmt><expr><call><name>bufLimitSet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>size</name> <operator>&lt;</operator> <call><name>bufSizeAlloc</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>size</name></expr> </then><else>: <expr><call><name>bufSizeAlloc</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Read bytes</comment>
            <expr_stmt><expr><call><name>ioReadSmall</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>read</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>bufferPos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>bufferUsed</name></name> <operator>=</operator> <call><name>bufUsed</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>remaining</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>bufferUsed</name></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>remaining</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"unexpected EOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><ternary><condition><expr><name>remaining</name> <operator>&lt;</operator> <name>size</name></expr> ?</condition><then> <expr><name>remaining</name></expr> </then><else>: <expr><name>size</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Consume buffer left in tagNextSize
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pckReadConsumeBuffer</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>tagNextSize</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>pckReadBuffer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>bufferPos</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextSize</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Unpack an unsigned 64-bit integer from base-128 varint encoding
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>pckReadU64Internal</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>read</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Internal buffer should be empty</comment>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>bufferUsed</name></name> <operator>==</operator> <name><name>this</name><operator>-&gt;</operator><name>bufferPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><call><name>ioReadVarIntU64</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>read</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><call><name>cvtUInt64FromVarInt128</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>bufferPtr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>bufferUsed</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Read next field tag
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>pckReadTagNext</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Read the tag byte</comment>
    <expr_stmt><expr><call><name>pckReadBuffer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tag</name> <init>= <expr><name><name>this</name><operator>-&gt;</operator><name>bufferPtr</name><index>[<expr><name><name>this</name><operator>-&gt;</operator><name>bufferPos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>bufferPos</name></name><operator>++</operator></expr>;</expr_stmt>

    <comment type="line">// If the current container is complete (e.g. object)</comment>
    <if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// Else a regular tag</comment>
    <else>else
    <block>{<block_content>
        <comment type="line">// Read field type (e.g. int64, string)</comment>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextTypeMap</name></name> <operator>=</operator> <name>tag</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>tagNextTypeMap</name></name> <operator>==</operator> <literal type="number">0xF</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextTypeMap</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>pckReadU64Internal</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0xF</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>CHECK</name><argument_list>(
            <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextTypeMap</name></name> <operator>&lt;</operator> <call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>packTypeMapData</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>packTypeMapData</name><index>[<expr><name><name>this</name><operator>-&gt;</operator><name>tagNextTypeMap</name></name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>,
            <argument><expr><literal type="string">"invalid tag type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// If the value can contain multiple bits (e.g. integer)</comment>
        <if_stmt><if>if <condition>(<expr><name><name>packTypeMapData</name><index>[<expr><name><name>this</name><operator>-&gt;</operator><name>tagNextTypeMap</name></name></expr>]</index></name><operator>.</operator><name>valueMultiBit</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// If the value is stored following the tag (value &gt; 1 bit)</comment>
            <if_stmt><if>if <condition>(<expr><name>tag</name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Read low order bits of the field ID delta</comment>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name> <operator>=</operator> <name>tag</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

                <comment type="line">// Read high order bits of the field ID delta when specified</comment>
                <if_stmt><if>if <condition>(<expr><name>tag</name> <operator>&amp;</operator> <literal type="number">0x4</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>pckReadU64Internal</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Read value</comment>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextValue</name></name> <operator>=</operator> <call><name>pckReadU64Internal</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else the value is stored in the tag (value == 1 bit)</comment>
            <else>else
            <block>{<block_content>
                <comment type="line">// Read low order bit of the field ID delta</comment>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name> <operator>=</operator> <name>tag</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>

                <comment type="line">// Read high order bits of the field ID delta when specified</comment>
                <if_stmt><if>if <condition>(<expr><name>tag</name> <operator>&amp;</operator> <literal type="number">0x2</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>pckReadU64Internal</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Read value</comment>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextValue</name></name> <operator>=</operator> <operator>(</operator><name>tag</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if>
        <comment type="line">// Else the value is a single bit (e.g. boolean)</comment>
        <if type="elseif">else if <condition>(<expr><name><name>packTypeMapData</name><index>[<expr><name><name>this</name><operator>-&gt;</operator><name>tagNextTypeMap</name></name></expr>]</index></name><operator>.</operator><name>valueSingleBit</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Read low order bits of the field ID delta</comment>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name> <operator>=</operator> <name>tag</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>

            <comment type="line">// Read high order bits of the field ID delta when specified</comment>
            <if_stmt><if>if <condition>(<expr><name>tag</name> <operator>&amp;</operator> <literal type="number">0x4</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>pckReadU64Internal</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Read value</comment>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextValue</name></name> <operator>=</operator> <operator>(</operator><name>tag</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// Else the value is multiple tags (e.g. container)</comment>
        <else>else
        <block>{<block_content>
            <comment type="line">// Read low order bits of the field ID delta</comment>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name> <operator>=</operator> <name>tag</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>

            <comment type="line">// Read high order bits of the field ID delta when specified</comment>
            <if_stmt><if>if <condition>(<expr><name>tag</name> <operator>&amp;</operator> <literal type="number">0x8</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name> <operator>|=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>pckReadU64Internal</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Value length is variable so is stored after the tag</comment>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextValue</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// Increment the next tag id</comment>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name> <operator>+=</operator> <name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name><operator>-&gt;</operator><name>idLast</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <comment type="line">// Get tag size if it exists</comment>
        <if_stmt><if>if <condition>(<expr><name><name>packTypeMapData</name><index>[<expr><name><name>this</name><operator>-&gt;</operator><name>tagNextTypeMap</name></name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&amp;&amp;</operator>
            <operator>(</operator><name><name>this</name><operator>-&gt;</operator><name>tagNextValue</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>packTypeMapData</name><index>[<expr><name><name>this</name><operator>-&gt;</operator><name>tagNextTypeMap</name></name></expr>]</index></name><operator>.</operator><name>valueSingleBit</name><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextSize</name></name> <operator>=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>pckReadU64Internal</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// Tag was found</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Read field tag

Some tags and data may be skipped based on the value of the id parameter.
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>uint64_t</name></type>
<name>pckReadTag</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>id</name></decl></parameter>, <parameter><decl><type><name>PackTypeMap</name></type> <name>typeMap</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>peek</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>typeMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>peek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                            <comment type="line">// Look at the next tag without advancing the field id</comment>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>peek</name> <operator>&amp;&amp;</operator> <name>typeMap</name> <operator>==</operator> <name>pckTypeMapUnknown</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>peek</name> <operator>&amp;&amp;</operator> <name>typeMap</name> <operator>!=</operator> <name>pckTypeMapUnknown</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Increment the id by one if no id was specified</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>id</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name><operator>-&gt;</operator><name>idLast</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// Else check that the id has been incremented</comment>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><name>id</name> <operator>&lt;=</operator> <name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name><operator>-&gt;</operator><name>idLast</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"field %u was already read"</literal></expr></argument>, <argument><expr><operator>*</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Search for the requested id</comment>
    <do>do
    <block>{<block_content>
        <comment type="line">// Get the next tag if it has not been read yet</comment>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pckReadTagNext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Return if the id does not exist</comment>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>id</name> <operator>&lt;</operator> <name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name></expr>)</condition>
        <block>{<block_content>
            <break>break;</break>
        </block_content>}</block></if>
        <comment type="line">// Else the id exists</comment>
        <if type="elseif">else if <condition>(<expr><operator>*</operator><name>id</name> <operator>==</operator> <name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// When not peeking the next tag (just to see what it is) then error if the type map is not as specified</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>peek</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>tagNextTypeMap</name></name> <operator>!=</operator> <name>typeMap</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                        <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"field %u is type '%s' but expected '%s'"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name></expr></argument>,
                        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><name><name>packTypeMapData</name><index>[<expr><name><name>this</name><operator>-&gt;</operator><name>tagNextTypeMap</name></name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><name><name>packTypeMapData</name><index>[<expr><name>typeMap</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name><operator>-&gt;</operator><name>idLast</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Read data for the field being skipped if this is not the field requested</comment>
        <expr_stmt><expr><call><name>pckReadConsumeBuffer</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Increment the last id to the id just read</comment>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name><operator>-&gt;</operator><name>idLast</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name></expr>;</expr_stmt>

        <comment type="line">// Read tag on the next iteration</comment>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block>
    while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>pckReadNext</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><call><name>pckReadTagNext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>pckReadId</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>size_t</name></type>
<name>pckReadSize</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>packTypeMapData</name><index>[<expr><name><name>this</name><operator>-&gt;</operator><name>tagNextTypeMap</name></name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>pckReadConsume</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>pckTypeMapUnknown</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextTypeMap</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pckReadConsumeBuffer</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type>
<name>pckReadBufPtr</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>packTypeMapData</name><index>[<expr><name><name>this</name><operator>-&gt;</operator><name>tagNextTypeMap</name></name></expr>]</index></name><operator>.</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST_P</name><argument_list>(<argument><expr><name>UCHARDATA</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>bufferPtr</name></name> <operator>+</operator> <name><name>this</name><operator>-&gt;</operator><name>bufferPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<comment type="line">// Internal version of pckReadNull() that does not require a PackIdParam struct. Some functions already have an id variable so</comment>
<comment type="line">// assigning that to a PackIdParam struct and then copying it back is wasteful.</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>pckReadNullInternal</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>id</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Read tag at specified id</comment>
    <expr_stmt><expr><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>pckTypeMapUnknown</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If the field is NULL then set idLast (to avoid rechecking the same id on the next call) and return true</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>id</name> <operator>&lt;</operator> <name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name><operator>-&gt;</operator><name>idLast</name></name> <operator>=</operator> <operator>*</operator><name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// The field is not NULL</comment>
    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>pckReadNull</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PackIdParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><call><name>pckReadNullInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackType</name></type>
<name>pckReadType</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name><name>packTypeMapData</name><index>[<expr><name><name>this</name><operator>-&gt;</operator><name>tagNextTypeMap</name></name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>pckReadArrayBegin</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PackIdParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Read array begin</comment>
    <expr_stmt><expr><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>pckTypeMapArray</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add array to the tag stack so IDs can be tracked separately from the parent container</comment>
    <expr_stmt><expr><call><name>pckTagStackPush</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>tagStack</name></name></expr></argument>, <argument><expr><name>pckTypeMapArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pckReadArrayEnd</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check tag stack pop</comment>
    <expr_stmt><expr><call><name>pckTagStackPopCheck</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>tagStack</name></name></expr></argument>, <argument><expr><name>pckTypeMapArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure we are at the end of the array</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name> <init>= <expr><name>UINT_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>pckTypeMapUnknown</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Pop array off the stack</comment>
    <expr_stmt><expr><call><name>pckTagStackPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>tagStack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Reset tagNextId to keep reading</comment>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>Buffer</name> <modifier>*</modifier></type>
<name>pckReadBin</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PckReadBinParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pckReadNullInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// If buffer size &gt; 0</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>pckTypeMapBin</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Get the buffer size</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Read the buffer out in chunks</comment>
        <while>while <condition>(<expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>bufSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>pckReadBuffer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>bufRemains</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>bufCatC</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>bufferPtr</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>bufferPos</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if>
    <comment type="line">// Else return a zero-sized buffer</comment>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>pckReadBool</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PckReadBoolParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pckReadNullInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>pckTypeMapBool</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>int32_t</name></type>
<name>pckReadI32</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PckReadI32Param</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pckReadNullInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><call><name>cvtInt32FromZigZag</name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>pckTypeMapI32</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>int64_t</name></type>
<name>pckReadI64</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PckReadI64Param</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT64</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pckReadNullInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>INT64</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>INT64</name></expr></argument>, <argument><expr><call><name>cvtInt64FromZigZag</name><argument_list>(<argument><expr><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>pckTypeMapI64</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>mode_t</name></type>
<name>pckReadMode</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PckReadModeParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MODE</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pckReadNullInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>MODE</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>MODE</name></expr></argument>, <argument><expr><operator>(</operator><name>mode_t</name><operator>)</operator><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>pckTypeMapMode</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>pckReadObjBegin</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PackIdParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Read object begin</comment>
    <expr_stmt><expr><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>pckTypeMapObj</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add object to the tag stack so IDs can be tracked separately from the parent container</comment>
    <expr_stmt><expr><call><name>pckTagStackPush</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>tagStack</name></name></expr></argument>, <argument><expr><name>pckTypeMapObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pckReadObjEnd</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check tag stack pop</comment>
    <expr_stmt><expr><call><name>pckTagStackPopCheck</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>tagStack</name></name></expr></argument>, <argument><expr><name>pckTypeMapObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure we are at the end of the object</comment>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>id</name> <init>= <expr><name>UINT_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>pckTypeMapUnknown</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Pop object off the stack</comment>
    <expr_stmt><expr><call><name>pckTagStackPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>tagStack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Reset tagNextId to keep reading</comment>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackRead</name> <modifier>*</modifier></type>
<name>pckReadPackRead</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PckReadPackParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Pack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pack</name> <init>= <expr><call><name>pckReadPack</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PackRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>pckReadNew</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pckMove</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PackRead</name> <modifier>*</modifier></type>
<name>pckReadPackReadConst</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PckReadPackParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pckReadNullInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Read the tag</comment>
    <expr_stmt><expr><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>pckTypeMapPack</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PackRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>pckReadNewC</name><argument_list>(<argument><expr><call><name>pckReadBufPtr</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>pckReadSize</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>pckReadConsumeBuffer</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Pack</name> <modifier>*</modifier></type>
<name>pckReadPack</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><name>PckReadPackParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pckReadNullInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Read the tag</comment>
    <expr_stmt><expr><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>pckTypeMapPack</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Get the pack size</comment>
    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Read the pack out in chunks</comment>
    <while>while <condition>(<expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>bufSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>pckReadBuffer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>bufRemains</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bufCatC</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>bufferPtr</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>bufferPos</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK</name></expr></argument>, <argument><expr><operator>(</operator><name>Pack</name> <operator>*</operator><operator>)</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>pckReadPtr</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PckReadPtrParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pckReadNullInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>pckTypeMapPtr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>pckReadStr</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PckReadStrParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pckReadNullInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>strDup</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// If string size &gt; 0</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>pckTypeMapStr</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Read the string size</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>sizeExpected</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>this</name><operator>-&gt;</operator><name>tagNextSize</name></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Read the string out in chunks</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>(<expr><call><name>strSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>sizeExpected</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>sizeRead</name> <init>= <expr><call><name>pckReadBuffer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>sizeExpected</name> <operator>-</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>strCatZN</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>this</name><operator>-&gt;</operator><name>bufferPtr</name></name> <operator>+</operator> <name><name>this</name><operator>-&gt;</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><name>sizeRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>bufferPos</name></name> <operator>+=</operator> <name>sizeRead</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if>
    <comment type="line">// Else return an empty string</comment>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>StringId</name></type>
<name>pckReadStrId</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PckReadStrIdParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pckReadNullInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>pckTypeMapStrId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>StringList</name> <modifier>*</modifier></type>
<name>pckReadStrLst</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><name>PckReadStrLstParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pckReadNullInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING_LIST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>pckReadArrayBeginP</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <while>while <condition>(<expr><operator>!</operator><call><name>pckReadNullP</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pckReadArrayEndP</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING_LIST</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>time_t</name></type>
<name>pckReadTime</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PckReadTimeParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>TIME</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pckReadNullInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>TIME</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>TIME</name></expr></argument>, <argument><expr><operator>(</operator><name>time_t</name><operator>)</operator><call><name>cvtInt64FromZigZag</name><argument_list>(<argument><expr><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>pckTypeMapTime</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>uint32_t</name></type>
<name>pckReadU32</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PckReadU32Param</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT32</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pckReadNullInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>UINT32</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>UINT32</name></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>pckTypeMapU32</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>uint64_t</name></type>
<name>pckReadU64</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PckReadU64Param</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>pckReadNullInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>pckTypeMapU64</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>pckReadEnd</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>depth</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"invalid pack end read in container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure we are at the end of the pack</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name> <init>= <expr><name>UINT_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>pckReadTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>pckTypeMapUnknown</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>pckReadToLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PackRead</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strNewFmt</name><argument_list>(
        <argument><expr><literal type="string">"{depth: %u, idLast: %u, tagNextId: %u, tagNextType: %u, tagNextValue %"</literal> <name>PRIu64</name> <literal type="string">"}"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>depth</name></name></expr></argument>,
        <argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name><operator>-&gt;</operator><name>idLast</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextId</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextTypeMap</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagNextValue</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<comment type="line">// Helper to create common data</comment>
<function><type><specifier>static</specifier> <name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteNewInternal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>PackWrite</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>(</operator><name>PackWrite</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>tagStack</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>bottom</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>typeMap</name> <operator>=</operator> <name>pckTypeMapObj</name></expr>}</block></expr>}</block></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteNew</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PckWriteNewParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><call><name>pckWriteNewInternal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>PACK_EXTRA_MIN</name></expr> </then><else>: <expr><name><name>param</name><operator>.</operator><name>size</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteNewIo</name><parameter_list>(<parameter><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>IO_WRITE</name></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>write</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><call><name>pckWriteNewInternal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <name>write</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><call><name>ioBufferSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Write to io or buffer
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pckWriteBuffer</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If writing directly to a buffer</comment>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>write</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Add space in the buffer to write and add extra space so future writes won't always need to resize the buffer</comment>
        <if_stmt><if>if <condition>(<expr><call><name>bufRemains</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>bufUsed</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>bufResize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><operator>(</operator><call><name>bufSizeAlloc</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>bufUsed</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator> <name>PACK_EXTRA_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Write to the buffer</comment>
        <expr_stmt><expr><call><name>bufCat</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// Else writing to io</comment>
    <else>else
    <block>{<block_content>
        <comment type="line">// If there's enough space to write to the internal buffer then do that</comment>
        <if_stmt><if>if <condition>(<expr><call><name>bufRemains</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>bufUsed</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>bufCat</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <comment type="line">// Flush the internal buffer if it has data</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufEmpty</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// If there's enough space to write to the internal buffer then do that</comment>
            <if_stmt><if>if <condition>(<expr><call><name>bufRemains</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>bufUsed</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>bufCat</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else write directly to io</comment>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Pack an unsigned 64-bit integer to base-128 varint encoding
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pckWriteU64Internal</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><name>CVT_VARINT128_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>cvtUInt64ToVarInt128</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Write encoded bytes to the buffer</comment>
    <expr_stmt><expr><call><name>pckWriteBuffer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>BUF</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Write field tag
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>pckWriteTag</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PackTypeMap</name></type> <name>typeMap</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>typeMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If id is not specified then add one to previous tag (and include all NULLs)</comment>
    <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name><operator>-&gt;</operator><name>idLast</name></name> <operator>+</operator> <name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name><operator>-&gt;</operator><name>nullTotal</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// Else the id must be greater than the last one</comment>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>id</name> <operator>&gt;</operator> <name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name><operator>-&gt;</operator><name>idLast</name></name></expr></argument>, <argument><expr><literal type="string">"field id must be greater than last id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="line">// Clear NULLs now that field id has been calculated</comment>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name><operator>-&gt;</operator><name>nullTotal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line">// Calculate field ID delta</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>tagId</name> <init>= <expr><name>id</name> <operator>-</operator> <name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name><operator>-&gt;</operator><name>idLast</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Write field type map (e.g. int64, string)</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>tag</name> <init>= <expr><ternary><condition><expr><name>typeMap</name> <operator>&gt;=</operator> <literal type="number">0xF</literal></expr> ?</condition><then> <expr><literal type="number">0xF0</literal></expr> </then><else>: <expr><name>typeMap</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <comment type="line">// If the value can contain multiple bits (e.g. integer)</comment>
    <if_stmt><if>if <condition>(<expr><name><name>packTypeMapData</name><index>[<expr><name>typeMap</name></expr>]</index></name><operator>.</operator><name>valueMultiBit</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// If the value is stored in the tag (value == 1 bit)</comment>
        <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Write low order bit of the value</comment>
            <expr_stmt><expr><name>tag</name> <operator>|=</operator> <operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>value</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <comment type="line">// Write low order bit of the field ID delta</comment>
            <expr_stmt><expr><name>tag</name> <operator>|=</operator> <name>tagId</name> <operator>&amp;</operator> <literal type="number">0x1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>tagId</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <comment type="line">// Set bit to indicate that high order bits of the field ID delta are be written after the tag</comment>
            <if_stmt><if>if <condition>(<expr><name>tagId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>tag</name> <operator>|=</operator> <literal type="number">0x2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <comment type="line">// Else the value is stored following the tag (value &gt; 1 bit)</comment>
        <else>else
        <block>{<block_content>
            <comment type="line">// Set bit to indicate that the value is written after the tag</comment>
            <expr_stmt><expr><name>tag</name> <operator>|=</operator> <literal type="number">0x8</literal></expr>;</expr_stmt>

            <comment type="line">// Write low order bits of the field ID delta</comment>
            <expr_stmt><expr><name>tag</name> <operator>|=</operator> <name>tagId</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>tagId</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

            <comment type="line">// Set bit to indicate that high order bits of the field ID delta are be written after the tag</comment>
            <if_stmt><if>if <condition>(<expr><name>tagId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>tag</name> <operator>|=</operator> <literal type="number">0x4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <comment type="line">// Else the value is a single bit (e.g. boolean)</comment>
    <if type="elseif">else if <condition>(<expr><name><name>packTypeMapData</name><index>[<expr><name>typeMap</name></expr>]</index></name><operator>.</operator><name>valueSingleBit</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Write value</comment>
        <expr_stmt><expr><name>tag</name> <operator>|=</operator> <operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>value</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <comment type="line">// Write low order bits of the field ID delta</comment>
        <expr_stmt><expr><name>tag</name> <operator>|=</operator> <name>tagId</name> <operator>&amp;</operator> <literal type="number">0x3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>tagId</name> <operator>&gt;&gt;=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

        <comment type="line">// Set bit to indicate that high order bits of the field ID delta are be written after the tag</comment>
        <if_stmt><if>if <condition>(<expr><name>tagId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>tag</name> <operator>|=</operator> <literal type="number">0x4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <comment type="line">// No value expected</comment>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write low order bits of the field ID delta</comment>
        <expr_stmt><expr><name>tag</name> <operator>|=</operator> <name>tagId</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>tagId</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

        <comment type="line">// Set bit to indicate that high order bits of the field ID delta must be written after the tag</comment>
        <if_stmt><if>if <condition>(<expr><name>tagId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>tag</name> <operator>|=</operator> <literal type="number">0x8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// Write tag</comment>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>tagByte</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name>tag</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>pckWriteBuffer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>BUF</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tagByte</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Write remaining type map</comment>
    <if_stmt><if>if <condition>(<expr><name>typeMap</name> <operator>&gt;=</operator> <literal type="number">0xF</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pckWriteU64Internal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>typeMap</name> <operator>-</operator> <literal type="number">0xF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Write low order bits of the field ID delta</comment>
    <if_stmt><if>if <condition>(<expr><name>tagId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pckWriteU64Internal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>tagId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Write low order bits of the value</comment>
    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pckWriteU64Internal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Set last field id</comment>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name><operator>-&gt;</operator><name>idLast</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Write a default as NULL (missing)
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>pckWriteDefaultNull</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>defaultWrite</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>defaultEqual</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>defaultWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>defaultEqual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Write a NULL if not forcing the default to be written and the value passed equals the default</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>defaultWrite</name> <operator>&amp;&amp;</operator> <name>defaultEqual</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name><operator>-&gt;</operator><name>nullTotal</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Let the caller know that it should write the value</comment>
    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteNull</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name><operator>-&gt;</operator><name>nullTotal</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteArrayBegin</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PackIdParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Write the array tag</comment>
    <expr_stmt><expr><call><name>pckWriteTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pckTypeMapArray</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add array to the tag stack so IDs can be tracked separately from the parent container</comment>
    <expr_stmt><expr><call><name>pckTagStackPush</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>tagStack</name></name></expr></argument>, <argument><expr><name>pckTypeMapArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteArrayEnd</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check tag stack pop</comment>
    <expr_stmt><expr><call><name>pckTagStackPopCheck</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>tagStack</name></name></expr></argument>, <argument><expr><name>pckTypeMapArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Write end of array tag</comment>
    <expr_stmt><expr><call><name>pckWriteU64Internal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Pop array off the stack to revert to ID tracking for the prior container</comment>
    <expr_stmt><expr><call><name>pckTagStackPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>tagStack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteBin</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>PckWriteBinParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pckWriteDefaultNull</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>value</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write buffer size if &gt; 0</comment>
        <expr_stmt><expr><call><name>pckWriteTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pckTypeMapBin</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><operator>!</operator><call><name>bufEmpty</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write buffer data if size &gt; 0</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufEmpty</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>pckWriteU64Internal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pckWriteBuffer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteBool</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>PckWriteBoolParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pckWriteDefaultNull</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>, <argument><expr><name>value</name> <operator>==</operator> <name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pckWriteTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pckTypeMapBool</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteI32</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>PckWriteI32Param</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pckWriteDefaultNull</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>, <argument><expr><name>value</name> <operator>==</operator> <name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pckWriteTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pckTypeMapI32</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>cvtInt32ToZigZag</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteI64</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>PckWriteI64Param</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT64</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT64</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pckWriteDefaultNull</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>, <argument><expr><name>value</name> <operator>==</operator> <name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pckWriteTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pckTypeMapI64</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>cvtInt64ToZigZag</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteMode</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>mode_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>PckWriteModeParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT32</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>MODE</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pckWriteDefaultNull</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>, <argument><expr><name>value</name> <operator>==</operator> <name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pckWriteTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pckTypeMapMode</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteObjBegin</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>PackIdParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Write the object tag</comment>
    <expr_stmt><expr><call><name>pckWriteTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pckTypeMapObj</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add object to the tag stack so IDs can be tracked separately from the parent container</comment>
    <expr_stmt><expr><call><name>pckTagStackPush</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>tagStack</name></name></expr></argument>, <argument><expr><name>pckTypeMapObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteObjEnd</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check tag stack pop</comment>
    <expr_stmt><expr><call><name>pckTagStackPopCheck</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>tagStack</name></name></expr></argument>, <argument><expr><name>pckTypeMapObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Write end of object tag</comment>
    <expr_stmt><expr><call><name>pckWriteU64Internal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Pop object off the stack to revert to ID tracking for the prior container</comment>
    <expr_stmt><expr><call><name>pckTagStackPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>tagStack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWritePack</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Pack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PckWritePackParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pckWriteDefaultNull</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>value</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>pckWriteTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pckTypeMapPack</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteU64Internal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><operator>(</operator><name>Buffer</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteBuffer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>(</operator><name>Buffer</name> <operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWritePtr</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>PckWritePtrParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pckWriteDefaultNull</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>, <argument><expr><name>value</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pckWriteTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pckTypeMapPtr</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteStr</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>PckWriteStrParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pckWriteDefaultNull</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>, <argument><expr><call><name>strEq</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write string size if &gt; 0</comment>
        <expr_stmt><expr><call><name>pckWriteTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pckTypeMapStr</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write string data if size &gt; 0</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strSize</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>pckWriteU64Internal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pckWriteBuffer</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>BUF</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteStrId</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>PckWriteStrIdParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pckWriteDefaultNull</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>, <argument><expr><name>value</name> <operator>==</operator> <name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pckWriteTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pckTypeMapStrId</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteStrLst</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PckWriteStrLstParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING_LIST</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pckWriteDefaultNull</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>value</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>pckWriteArrayBeginP</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>valueIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>valueIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>valueIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>valueIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>pckWriteArrayEndP</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteTime</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>PckWriteTimeParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>TIME</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>TIME</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pckWriteDefaultNull</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>, <argument><expr><name>value</name> <operator>==</operator> <name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pckWriteTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pckTypeMapTime</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><call><name>cvtInt64ToZigZag</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteU32</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>PckWriteU32Param</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT32</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT32</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pckWriteDefaultNull</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>, <argument><expr><name>value</name> <operator>==</operator> <name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pckWriteTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pckTypeMapU32</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteU64</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>PckWriteU64Param</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pckWriteDefaultNull</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>defaultWrite</name></name></expr></argument>, <argument><expr><name>value</name> <operator>==</operator> <name><name>param</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>pckWriteTag</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pckTypeMapU64</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackWrite</name> <modifier>*</modifier></type>
<name>pckWriteEnd</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>depth</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pckWriteU64Internal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="line">// If writing to io flush the internal buffer</comment>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>write</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufEmpty</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <comment type="line">// Else resize the external buffer to trim off extra space added during processing</comment>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>bufResize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>Pack</name> <modifier>*</modifier></type>
<name>pckWriteResult</name><parameter_list>(<parameter><decl><type><name>PackWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>PACK_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Pack</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>Pack</name> <operator>*</operator><operator>)</operator><name><name>this</name><operator>-&gt;</operator><name>buffer</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PACK</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>pckWriteToLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PackWrite</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"{depth: %u, idLast: %u}"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>depth</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>this</name><operator>-&gt;</operator><name>tagStack</name><operator>.</operator><name>top</name><operator>-&gt;</operator><name>idLast</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
