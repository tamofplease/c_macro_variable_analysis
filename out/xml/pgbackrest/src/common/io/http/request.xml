<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/io/http/request.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
HTTP Request
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/http/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/http/request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/stat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/wait.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
HTTP constants
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_VERSION_STR</name></expr></argument>,                                     <argument><expr><name>HTTP_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_VERSION_10_STR</name></expr></argument>,                                  <argument><expr><name>HTTP_VERSION_10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_VERB_DELETE_STR</name></expr></argument>,                                 <argument><expr><name>HTTP_VERB_DELETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_VERB_GET_STR</name></expr></argument>,                                    <argument><expr><name>HTTP_VERB_GET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_VERB_HEAD_STR</name></expr></argument>,                                   <argument><expr><name>HTTP_VERB_HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_VERB_POST_STR</name></expr></argument>,                                   <argument><expr><name>HTTP_VERB_POST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_VERB_PUT_STR</name></expr></argument>,                                    <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_HEADER_AUTHORIZATION_STR</name></expr></argument>,                        <argument><expr><name>HTTP_HEADER_AUTHORIZATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_HEADER_CONTENT_LENGTH_STR</name></expr></argument>,                       <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_HEADER_CONTENT_MD5_STR</name></expr></argument>,                          <argument><expr><name>HTTP_HEADER_CONTENT_MD5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_HEADER_CONTENT_RANGE_STR</name></expr></argument>,                        <argument><expr><name>HTTP_HEADER_CONTENT_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_HEADER_CONTENT_TYPE_STR</name></expr></argument>,                         <argument><expr><name>HTTP_HEADER_CONTENT_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_HEADER_CONTENT_TYPE_APP_FORM_URL_STR</name></expr></argument>,            <argument><expr><name>HTTP_HEADER_CONTENT_TYPE_APP_FORM_URL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_HEADER_CONTENT_TYPE_JSON_STR</name></expr></argument>,                    <argument><expr><name>HTTP_HEADER_CONTENT_TYPE_JSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_HEADER_CONTENT_TYPE_XML_STR</name></expr></argument>,                     <argument><expr><name>HTTP_HEADER_CONTENT_TYPE_XML</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_HEADER_ETAG_STR</name></expr></argument>,                                 <argument><expr><name>HTTP_HEADER_ETAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_HEADER_DATE_STR</name></expr></argument>,                                 <argument><expr><name>HTTP_HEADER_DATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_HEADER_HOST_STR</name></expr></argument>,                                 <argument><expr><name>HTTP_HEADER_HOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_HEADER_LAST_MODIFIED_STR</name></expr></argument>,                        <argument><expr><name>HTTP_HEADER_LAST_MODIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HTTP_HEADER_RANGE_STR</name></expr></argument>,                                <argument><expr><name>HTTP_HEADER_RANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_HEADER_USER_AGENT</name></cpp:macro>                                      <cpp:value>"user-agent"</cpp:value></cpp:define>

<comment type="line">// 5xx errors that should always be retried</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_RESPONSE_CODE_RETRY_CLASS</name></cpp:macro>                              <cpp:value>5</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<struct>struct <name>HttpRequest</name>
<block>{
    <decl_stmt><decl><type><name>HttpRequestPub</name></type> <name>pub</name></decl>;</decl_stmt>                                             <comment type="line">// Publicly accessible variables</comment>
    <decl_stmt><decl><type><name>HttpClient</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>                                             <comment type="line">// HTTP client</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>                                          <comment type="line">// HTTP content</comment>

    <decl_stmt><decl><type><name>HttpSession</name> <modifier>*</modifier></type><name>session</name></decl>;</decl_stmt>                                           <comment type="line">// Session for async requests</comment>
}</block>;</struct>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Process the request
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>HttpResponse</name> <modifier>*</modifier></type>
<name>httpRequestProcess</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>waitForResponse</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>contentCache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <macro><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument>logLevelDebug</argument>)</argument_list></macro>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_REQUEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>waitForResponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>contentCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// HTTP Response</comment>
    <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>retry</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Wait</name> <modifier>*</modifier></type><name>wait</name> <init>= <expr><call><name>waitNew</name><argument_list>(<argument><expr><call><name>httpClientTimeout</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <do>do
        <block>{<block_content>
            <comment type="line">// Assume there will be no retry</comment>
            <expr_stmt><expr><name>retry</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

            <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>HttpSession</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                    <comment type="line">// If a session is saved then the request was already successfully sent</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>session</name> <operator>=</operator> <call><name>httpSessionMove</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <comment type="line">// Else the request has not been sent yet or this is a retry</comment>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><name>session</name> <operator>=</operator> <call><name>httpClientOpen</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Format the request and user agent</comment>
                        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>requestStr</name> <init>=
                            <expr><call><name>strCatFmt</name><argument_list>(
                                <argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><literal type="string">"%s %s%s%s "</literal> <name>HTTP_VERSION</name> <literal type="string">"\r\n"</literal> <name>HTTP_HEADER_USER_AGENT</name> <literal type="string">":"</literal> <name>PROJECT_NAME</name> <literal type="string">"/"</literal> <name>PROJECT_VERSION</name> <literal type="string">"\r\n"</literal></expr></argument>,
                                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpRequestVerb</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpRequestPath</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><call><name>httpRequestQuery</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"?"</literal></expr></else></ternary></expr></argument>,
                                <argument><expr><ternary><condition><expr><call><name>httpRequestQuery</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpQueryRenderP</name><argument_list>(<argument><expr><call><name>httpRequestQuery</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <comment type="line">// Add headers</comment>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier></type><name>headerList</name> <init>= <expr><call><name>httpHeaderList</name><argument_list>(<argument><expr><call><name>httpRequestHeader</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>headerIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>headerIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>headerList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>headerIdx</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>headerKey</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>headerList</name></expr></argument>, <argument><expr><name>headerIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                                <argument><expr><name>requestStr</name></expr></argument>, <argument><expr><literal type="string">"%s:%s\r\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>headerKey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><call><name>httpRequestHeader</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>headerKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></for>

                        <comment type="line">// Add blank line to end of headers and write the request as a buffer so secrets do not show up in logs</comment>
                        <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>requestStr</name></expr></argument>, <argument><expr><name>CRLF_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><call><name>httpSessionIoWrite</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><name>requestStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Write out content if any</comment>
                        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><call><name>httpSessionIoWrite</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <comment type="line">// Flush all writes</comment>
                        <expr_stmt><expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>httpSessionIoWrite</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// If not waiting for the response then move the session to the object context</comment>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>waitForResponse</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <call><name>httpSessionMove</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>

                    <comment type="line">// Wait for response</comment>
                    <if_stmt><if>if <condition>(<expr><name>waitForResponse</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>httpResponseNew</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>httpRequestVerb</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>contentCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Retry when response code is 5xx.  These errors generally represent a server error for a request that</comment>
                        <comment type="line">// looks valid. There are a few errors that might be permanently fatal but they are rare and it seems best</comment>
                        <comment type="line">// not to try and pick and choose errors in this class to retry.</comment>
                        <if_stmt><if>if <condition>(<expr><call><name>httpResponseCode</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">100</literal> <operator>==</operator> <name>HTTP_RESPONSE_CODE_RETRY_CLASS</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>ServiceError</name></expr></argument>, <argument><expr><literal type="string">"[%u] %s"</literal></expr></argument>, <argument><expr><call><name>httpResponseCode</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpResponseReason</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <comment type="line">// Move response to outer temp context</comment>
                        <expr_stmt><expr><call><name>httpResponseMove</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Sleep and then retry unless the total wait time has expired</comment>
                <if_stmt><if>if <condition>(<expr><call><name>waitMore</name><argument_list>(<argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>LOG_DEBUG_FMT</name><argument_list>(<argument><expr><literal type="string">"retry %s: %s"</literal></expr></argument>, <argument><expr><call><name>errorTypeName</name><argument_list>(<argument><expr><call><name>errorType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>retry</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>statInc</name><argument_list>(<argument><expr><name>HTTP_STAT_RETRY_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>RETHROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><name>retry</name></expr>)</condition>;</do>

        <comment type="line">// Move response to calling context</comment>
        <expr_stmt><expr><call><name>httpResponseMove</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>HTTP_RESPONSE</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>HttpRequest</name> <modifier>*</modifier></type>
<name>httpRequestNew</name><parameter_list>(<parameter><decl><type><name>HttpClient</name> <modifier>*</modifier></type><name>client</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>verb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>HttpRequestNewParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <macro><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument>logLevelDebug</argument>)</argument_list></macro>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_CLIENT</name></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_QUERY</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_HEADER</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>verb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>HttpRequest</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>(</operator><name>HttpRequest</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pub</name> <operator>=</operator>
            <block>{
                <expr><operator>.</operator><name>verb</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>,
                <expr><operator>.</operator><name>path</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>,
                <expr><operator>.</operator><name>query</name> <operator>=</operator> <call><name>httpQueryDupP</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>,
                <expr><operator>.</operator><name>header</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>NULL</name> <operator>?</operator> <call><name>httpHeaderNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>httpHeaderDup</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>header</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
            }</block></expr>,
            <expr><operator>.</operator><name>client</name> <operator>=</operator> <name>client</name></expr>,
            <expr><operator>.</operator><name>content</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>content</name></name> <operator>==</operator> <name>NULL</name> <operator>?</operator> <name>NULL</name> <operator>:</operator> <call><name>bufDup</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>,
        }</block></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Send the request</comment>
    <expr_stmt><expr><call><name>httpRequestProcess</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>statInc</name><argument_list>(<argument><expr><name>HTTP_STAT_REQUEST_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>HTTP_REQUEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>HttpResponse</name> <modifier>*</modifier></type>
<name>httpRequestResponse</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>contentCache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <macro><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument>logLevelDebug</argument>)</argument_list></macro>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_REQUEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>contentCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>HTTP_RESPONSE</name></expr></argument>, <argument><expr><call><name>httpRequestProcess</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>contentCache</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>httpRequestError</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HttpRequest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>HttpResponse</name> <modifier>*</modifier></type><name>response</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <macro><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument>logLevelTrace</argument>)</argument_list></macro>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_REQUEST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_RESPONSE</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>response</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Error code</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><call><name>strCatFmt</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"HTTP request failed with %u"</literal></expr></argument>, <argument><expr><call><name>httpResponseCode</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add reason when present</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strSize</name><argument_list>(<argument><expr><call><name>httpResponseReason</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">" (%s)"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpResponseReason</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Output path/query</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">":\n*** Path/Query ***:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"\n%s %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpRequestVerb</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpRequestPath</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>httpRequestQuery</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"?%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpQueryRenderP</name><argument_list>(<argument><expr><call><name>httpRequestQuery</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>redact</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Output request headers</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier></type><name>requestHeaderList</name> <init>= <expr><call><name>httpHeaderList</name><argument_list>(<argument><expr><call><name>httpRequestHeader</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strLstEmpty</name><argument_list>(<argument><expr><name>requestHeaderList</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"\n*** Request Headers ***:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>requestHeaderIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>requestHeaderIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>requestHeaderList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>requestHeaderIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>requestHeaderList</name></expr></argument>, <argument><expr><name>requestHeaderIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                <argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"\n%s: %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><ternary><condition><expr><call><name>httpHeaderRedact</name><argument_list>(<argument><expr><call><name>httpRequestHeader</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"&lt;redacted&gt;"</literal></expr> </then><else>: <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><call><name>httpRequestHeader</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Output response headers</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>HttpHeader</name> <modifier>*</modifier></type><name>responseHeader</name> <init>= <expr><call><name>httpResponseHeader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier></type><name>responseHeaderList</name> <init>= <expr><call><name>httpHeaderList</name><argument_list>(<argument><expr><name>responseHeader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strLstEmpty</name><argument_list>(<argument><expr><name>responseHeaderList</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"\n*** Response Headers ***:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>responseHeaderIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>responseHeaderIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>responseHeaderList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>responseHeaderIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>responseHeaderList</name></expr></argument>, <argument><expr><name>responseHeaderIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"\n%s: %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><name>responseHeader</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Add response content, if any</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufEmpty</name><argument_list>(<argument><expr><call><name>httpResponseContent</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"\n*** Response Content ***:\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>httpResponseContent</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>ProtocolError</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>httpRequestToLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HttpRequest</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strNewFmt</name><argument_list>(
        <argument><expr><literal type="string">"{verb: %s, path: %s, query: %s, header: %s, contentSize: %zu}"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpRequestVerb</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpRequestPath</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><ternary><condition><expr><call><name>httpRequestQuery</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpQueryToLog</name><argument_list>(<argument><expr><call><name>httpRequestQuery</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpHeaderToLog</name><argument_list>(<argument><expr><call><name>httpRequestHeader</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name><name>this</name><operator>-&gt;</operator><name>content</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>bufUsed</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
