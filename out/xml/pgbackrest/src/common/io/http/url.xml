<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/io/http/url.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
HTTP URL
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/http/url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/stringList.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/regExp.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Regular expression for URLs. This is not intended to be completely comprehensive, e.g. it is still possible to enter bad hostnames.
The goal is to make sure the syntax is correct enough for the rest of the parsing to succeed.
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(
    <argument><expr><name>HTTP_URL_REGEXP_STR</name></expr></argument>,
    <argument><expr><literal type="string">"^(http[s]{0,1}:\\/\\/){0,1}"</literal>                                   <comment type="line">// Optional protocol (http or https)</comment>
    <literal type="string">"([^\\[\\:\\/?]+|\\[[a-fA-F0-9:]+\\])"</literal>                          <comment type="line">// host/ipv4/ipv6</comment>
    <literal type="string">"(:[1-9][0-9]{0,4}){0,1}"</literal>                                       <comment type="line">// Optional port</comment>
    <literal type="string">"(\\/[^?\\/]*)*$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                             <comment type="line">// Optional path</comment>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<struct>struct <name>HttpUrl</name>
<block>{
    <decl_stmt><decl><type><name>HttpUrlPub</name></type> <name>pub</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Convert protocol type to a string
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>HTTP_PROTOCOL_HTTP_STR</name></expr></argument>,                               <argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>HTTP_PROTOCOL_HTTPS_STR</name></expr></argument>,                              <argument><expr><literal type="string">"https"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>String</name> <modifier>*</modifier></type>
<name>httpProtocolTypeStr</name><parameter_list>(<parameter><decl><type><name>HttpProtocolType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>httpProtocolTypeHttp</name></expr>:</case>
            <return>return <expr><name>HTTP_PROTOCOL_HTTP_STR</name></expr>;</return>

        <case>case <expr><name>httpProtocolTypeHttps</name></expr>:</case>
            <return>return <expr><name>HTTP_PROTOCOL_HTTPS_STR</name></expr>;</return>

        <default>default:</default>
            <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>HttpUrl</name> <modifier>*</modifier></type>
<name>httpUrlNewParse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>url</name></decl></parameter>, <parameter><decl><type><name>HttpUrlNewParseParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>url</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>HttpUrl</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>HttpUrl</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Allocate state and set context</comment>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>(</operator><name>HttpUrl</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pub</name> <operator>=</operator>
            <block>{
                <expr><operator>.</operator><name>url</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>,
            }</block></expr>,
        }</block></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Check that URL format is one we accept</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>HTTP_URL_REGEXP_STR</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"invalid URL '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Determine whether the first part is protocol or host</comment>
            <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>splitUrl</name> <init>= <expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>splitUrl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"http:"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>httpProtocolTypeHttp</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>splitUrl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"https:"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>httpProtocolTypeHttps</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// If no protocol found then the first part is the host</comment>
            <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>httpProtocolTypeAny</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Protocol must be set explicitly</comment>
                <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>httpProtocolTypeAny</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else protocol was found</comment>
            <else>else
            <block>{<block_content>
                <comment type="line">// Protocol must match expected</comment>
                <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>httpProtocolTypeAny</name> <operator>&amp;&amp;</operator> <name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name><name>param</name><operator>.</operator><name>type</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"expected protocol '%s' in URL '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpProtocolTypeStr</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Remove protocol parts from split</comment>
                <expr_stmt><expr><call><name>strLstRemoveIdx</name><argument_list>(<argument><expr><name>splitUrl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strLstRemoveIdx</name><argument_list>(<argument><expr><name>splitUrl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">// Get host</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>splitUrl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>port</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// If an IPv6 address</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strBeginsWithZ</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"["</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Split closing bracket</comment>
                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>splitHost</name> <init>= <expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>splitHost</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Remove opening bracket</comment>
                <expr_stmt><expr><name>host</name> <operator>=</operator> <call><name>strSub</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>splitHost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Get port if specified</comment>
                <if_stmt><if>if <condition>(<expr><call><name>strSize</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>splitHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>strSub</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>splitHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else IPv4 or host name</comment>
            <else>else
            <block>{<block_content>
                <comment type="line">// Split on colon</comment>
                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>splitHost</name> <init>= <expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>splitHost</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// First part is the host</comment>
                <expr_stmt><expr><name>host</name> <operator>=</operator> <call><name>strLstGet</name><argument_list>(<argument><expr><name>splitHost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Second part is the port, if it exists</comment>
                <if_stmt><if>if <condition>(<expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>splitHost</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>splitHost</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>strLstGet</name><argument_list>(<argument><expr><name>splitHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">// Copy host into object context</comment>
            <macro><name>MEM_CONTEXT_PRIOR_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>host</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_PRIOR_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Get port if specified</comment>
            <if_stmt><if>if <condition>(<expr><name>port</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>port</name></name> <operator>=</operator> <call><name>cvtZToUInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else set default port based on the protocol</comment>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>httpProtocolTypeAny</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>httpProtocolTypeHttp</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>port</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>port</name></name> <operator>=</operator> <literal type="number">443</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">// Check for path</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>splitUrl</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Remove host part so it is easier to construct the path</comment>
                <expr_stmt><expr><call><name>strLstRemoveIdx</name><argument_list>(<argument><expr><name>splitUrl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Construct path and copy into local context</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>strLstJoin</name><argument_list>(<argument><expr><name>splitUrl</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <macro><name>MEM_CONTEXT_PRIOR_BEGIN</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>path</name></name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>MEM_CONTEXT_PRIOR_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else default path is /</comment>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>path</name></name> <operator>=</operator> <name>FSLASH_STR</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>HTTP_URL</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>httpUrlToLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HttpUrl</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Is IPv6 address?</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>ipv6</name> <init>= <expr><call><name>strChr</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>strNewFmt</name><argument_list>(
        <argument><expr><literal type="string">"{%s://%s%s%s:%u%s}"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpProtocolTypeStr</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>ipv6</name></expr> ?</condition><then> <expr><literal type="string">"["</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>ipv6</name></expr> ?</condition><then> <expr><literal type="string">"]"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
        <argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>port</name></name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
