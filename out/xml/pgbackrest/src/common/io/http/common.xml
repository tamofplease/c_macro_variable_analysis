<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/io/http/common.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
HTTP Common
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/http/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/time.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Convert the time using the format specified in https://tools.ietf.org/html/rfc7231#section-7.1.1.1 which is used by HTTP 1.1 (the
only version we support).
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>httpCommonMonthList</name><index>[]</index></name> <init>=
    <expr><block>{<expr><literal type="string">"Jan"</literal></expr>, <expr><literal type="string">"Feb"</literal></expr>, <expr><literal type="string">"Mar"</literal></expr>, <expr><literal type="string">"Apr"</literal></expr>, <expr><literal type="string">"May"</literal></expr>, <expr><literal type="string">"Jun"</literal></expr>, <expr><literal type="string">"Jul"</literal></expr>, <expr><literal type="string">"Aug"</literal></expr>, <expr><literal type="string">"Sep"</literal></expr>, <expr><literal type="string">"Oct"</literal></expr>, <expr><literal type="string">"Nov"</literal></expr>, <expr><literal type="string">"Dec"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>httpCommonDayList</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"Sun"</literal></expr>, <expr><literal type="string">"Mon"</literal></expr>, <expr><literal type="string">"Tue"</literal></expr>, <expr><literal type="string">"Wed"</literal></expr>, <expr><literal type="string">"Thu"</literal></expr>, <expr><literal type="string">"Fri"</literal></expr>, <expr><literal type="string">"Sat"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>time_t</name></type>
<name>httpDateToTime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lastModified</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>lastModified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Find the month</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>month</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><name>lastModified</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>monthIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init>;</init> <condition><expr><name>monthIdx</name> <operator>&lt;</operator> <call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>httpCommonMonthList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>monthIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>month</name></expr></argument>, <argument><expr><name><name>httpCommonMonthList</name><index>[<expr><name>monthIdx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>monthIdx</name> <operator>==</operator> <call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>httpCommonMonthList</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"invalid month '%.3s'"</literal></expr></argument>, <argument><expr><name>month</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Convert to time_t</comment>
    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(
        <argument><expr><name>TIME</name></expr></argument>,
        <argument><expr><call><name>epochFromParts</name><argument_list>(
            <argument><expr><call><name>cvtZSubNToInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>lastModified</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>monthIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>cvtZSubNToInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>lastModified</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>cvtZSubNToInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>lastModified</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cvtZSubNToInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>lastModified</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>cvtZSubNToInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>lastModified</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>String</name> <modifier>*</modifier></type>
<name>httpDateFromTime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>TIME</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>timePart</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timePart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(
        <argument><expr><name>STRING</name></expr></argument>,
        <argument><expr><call><name>strNewFmt</name><argument_list>(
            <argument><expr><literal type="string">"%s, %02d %s %04d %02d:%02d:%02d GMT"</literal></expr></argument>, <argument><expr><name><name>httpCommonDayList</name><index>[<expr><name><name>timePart</name><operator>.</operator><name>tm_wday</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>timePart</name><operator>.</operator><name>tm_mday</name></name></expr></argument>,
            <argument><expr><name><name>httpCommonMonthList</name><index>[<expr><name><name>timePart</name><operator>.</operator><name>tm_mon</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>timePart</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>timePart</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>timePart</name><operator>.</operator><name>tm_min</name></name></expr></argument>,
            <argument><expr><name><name>timePart</name><operator>.</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>httpUriDecode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>uri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Decode if the string is not null</comment>
    <if_stmt><if>if <condition>(<expr><name>uri</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Iterate all characters in the string</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>uriIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>uriIdx</name> <operator>&lt;</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>uriIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name>uriChar</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call><index>[<expr><name>uriIdx</name></expr>]</index></expr></init></decl>;</decl_stmt>

            <comment type="line">// Convert escaped characters</comment>
            <if_stmt><if>if <condition>(<expr><name>uriChar</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Sequence must be exactly three characters (% and two hex digits)</comment>
                <if_stmt><if>if <condition>(<expr><call><name>strSize</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>uriIdx</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"invalid escape sequence length in '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Convert hex digits</comment>
                <expr_stmt><expr><name>uriChar</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><call><name>cvtZSubNToUIntBase</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>uriIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Skip to next character or escape</comment>
                <expr_stmt><expr><name>uriIdx</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>uriChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>httpUriEncode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>uri</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Encode if the string is not null</comment>
    <if_stmt><if>if <condition>(<expr><name>uri</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Iterate all characters in the string</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name></type> <name>uriIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>uriIdx</name> <operator>&lt;</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>uriIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name>uriChar</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call><index>[<expr><name>uriIdx</name></expr>]</index></expr></init></decl>;</decl_stmt>

            <comment type="line">// These characters are reproduced verbatim</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uriChar</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>uriChar</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>uriChar</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>uriChar</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>uriChar</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>uriChar</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator> <operator>||</operator>
                <name>uriChar</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <name>uriChar</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>uriChar</name> <operator>==</operator> <literal type="char">'~'</literal> <operator>||</operator> <name>uriChar</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>||</operator> <operator>(</operator><name>path</name> <operator>&amp;&amp;</operator> <name>uriChar</name> <operator>==</operator> <literal type="char">'/'</literal><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>uriChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// All other characters are hex-encoded</comment>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%%%02X"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name>uriChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
