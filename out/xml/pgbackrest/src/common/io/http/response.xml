<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/io/http/response.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
HTTP Response
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/http/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/http/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/http/request.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/http/response.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/read.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/stat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/wait.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
HTTP constants
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_HEADER_CONNECTION</name></cpp:macro>                                      <cpp:value>"connection"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>HTTP_HEADER_CONNECTION_STR</name></expr></argument>,                       <argument><expr><name>HTTP_HEADER_CONNECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_HEADER_TRANSFER_ENCODING</name></cpp:macro>                               <cpp:value>"transfer-encoding"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>HTTP_HEADER_TRANSFER_ENCODING_STR</name></expr></argument>,                <argument><expr><name>HTTP_HEADER_TRANSFER_ENCODING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_VALUE_CONNECTION_CLOSE</name></cpp:macro>                                 <cpp:value>"close"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>HTTP_VALUE_CONNECTION_CLOSE_STR</name></expr></argument>,                  <argument><expr><name>HTTP_VALUE_CONNECTION_CLOSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTTP_VALUE_TRANSFER_ENCODING_CHUNKED</name></cpp:macro>                        <cpp:value>"chunked"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>HTTP_VALUE_TRANSFER_ENCODING_CHUNKED_STR</name></expr></argument>,         <argument><expr><name>HTTP_VALUE_TRANSFER_ENCODING_CHUNKED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<struct>struct <name>HttpResponse</name>
<block>{
    <decl_stmt><decl><type><name>HttpResponsePub</name></type> <name>pub</name></decl>;</decl_stmt>                                            <comment type="line">// Publicly accessible variables</comment>
    <decl_stmt><decl><type><name>HttpSession</name> <modifier>*</modifier></type><name>session</name></decl>;</decl_stmt>                                           <comment type="line">// HTTP session</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>contentChunked</name></decl>;</decl_stmt>                                            <comment type="line">// Is the response content chunked?</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>contentSize</name></decl>;</decl_stmt>                                           <comment type="line">// Content size (ignored for chunked)</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>contentRemaining</name></decl>;</decl_stmt>                                      <comment type="line">// Content remaining (per chunk if chunked)</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>closeOnContentEof</name></decl>;</decl_stmt>                                         <comment type="line">// Will server close after content is sent?</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>contentExists</name></decl>;</decl_stmt>                                             <comment type="line">// Does content exist?</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>contentEof</name></decl>;</decl_stmt>                                                <comment type="line">// Has all content been read?</comment>
    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>                                                <comment type="line">// Caches content once requested</comment>
}</block>;</struct>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
When response is done close/reuse the connection
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>httpResponseDone</name><parameter_list>(<parameter><decl><type><name>HttpResponse</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_RESPONSE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If close was requested by the server then free the session</comment>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>closeOnContentEof</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>httpSessionFree</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Only update the close stats after a successful response so it is not counted if there was an error/retry</comment>
        <expr_stmt><expr><call><name>statInc</name><argument_list>(<argument><expr><name>HTTP_STAT_CLOSE_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// Else return it to the client so it can be reused</comment>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>httpSessionDone</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Read content
***********************************************************************************************************************************/</comment>
<comment type="line">// Helper to determine if it is OK to accept unexpected EOF, e.g. the server closed the socket with properly closing the TLS</comment>
<comment type="line">// connection. The idea is that since these types of responses can be validated we should be able to detect a short read.</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>httpResponseReadIgnoreUnexpectedEof</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HttpResponse</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_RESPONSE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>contentType</name> <init>= <expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>header</name></name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_TYPE_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(
        <argument><expr><name>BOOL</name></expr></argument>, <argument><expr><call><name>strEq</name><argument_list>(<argument><expr><name>contentType</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_TYPE_XML_STR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEq</name><argument_list>(<argument><expr><name>contentType</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_TYPE_JSON_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>httpResponseRead</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>HttpResponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_RESPONSE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>bufFull</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>contentEof</name></name> <operator>||</operator> <name><name>this</name><operator>-&gt;</operator><name>session</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Read if EOF has not been reached</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>actualBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>contentEof</name></name></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// If close was requested and no content specified then the server may send content up until the eof</comment>
            <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>closeOnContentEof</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>contentChunked</name></name> <operator>&amp;&amp;</operator> <name><name>this</name><operator>-&gt;</operator><name>contentSize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>IoRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>rawRead</name> <init>= <expr><call><name>httpSessionIoReadP</name><argument_list>(
                    <argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreUnexpectedEof</name> <operator>=</operator> <call><name>httpResponseReadIgnoreUnexpectedEof</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>ioRead</name><argument_list>(<argument><expr><name>rawRead</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>contentEof</name></name> <operator>=</operator> <call><name>ioReadEof</name><argument_list>(<argument><expr><name>rawRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else read using specified encoding or size</comment>
            <else>else
            <block>{<block_content>
                <decl_stmt><decl><type><name>IoRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>rawRead</name> <init>= <expr><call><name>httpSessionIoReadP</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <do>do
                <block>{<block_content>
                    <comment type="line">// If chunked content and no content remaining</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>contentChunked</name></name> <operator>&amp;&amp;</operator> <name><name>this</name><operator>-&gt;</operator><name>contentRemaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// Read length of next chunk</comment>
                        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>contentRemaining</name></name> <operator>=</operator> <call><name>cvtZToUInt64Base</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>ioReadLine</name><argument_list>(<argument><expr><name>rawRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// If content remaining is still zero then eof</comment>
                        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>contentRemaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>contentEof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>

                    <comment type="line">// Read if there is content remaining</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>contentRemaining</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// If the buffer is larger than the content that needs to be read then limit the buffer size so the read</comment>
                        <comment type="line">// won't block or read too far.  Casting to size_t is safe on 32-bit because we know the max buffer size is</comment>
                        <comment type="line">// defined as less than 2^32 so content remaining can't be more than that.</comment>
                        <if_stmt><if>if <condition>(<expr><call><name>bufRemains</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>this</name><operator>-&gt;</operator><name>contentRemaining</name></name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>bufLimitSet</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><call><name>bufRemains</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>this</name><operator>-&gt;</operator><name>contentRemaining</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt><expr><name>actualBytes</name> <operator>=</operator> <call><name>bufRemains</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>contentRemaining</name></name> <operator>-=</operator> <call><name>ioRead</name><argument_list>(<argument><expr><name>rawRead</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Error if EOF but content read is not complete</comment>
                        <if_stmt><if>if <condition>(<expr><call><name>ioReadEof</name><argument_list>(<argument><expr><name>rawRead</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>FileReadError</name></expr></argument>, <argument><expr><literal type="string">"unexpected EOF reading HTTP content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <comment type="line">// Clear limit (this works even if the limit was not set and it is easier than checking)</comment>
                        <expr_stmt><expr><call><name>bufLimitClear</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <comment type="line">// If no content remaining</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>contentRemaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// If chunked then consume the blank line that follows every chunk.  There might be more chunk data so loop back</comment>
                        <comment type="line">// around to check.</comment>
                        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>contentChunked</name></name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>ioReadLine</name><argument_list>(<argument><expr><name>rawRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <comment type="line">// If total content size was provided then this is eof</comment>
                        <else>else<block type="pseudo"><block_content>
                            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>contentEof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block>
                while <condition>(<expr><operator>!</operator><call><name>bufFull</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>contentEof</name></name></expr>)</condition>;</do>
            </block_content>}</block></else></if_stmt>

            <comment type="line">// If all content has been read</comment>
            <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>contentEof</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>httpResponseDone</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>actualBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Has all content been read?
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>httpResponseEof</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>HttpResponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_RESPONSE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>contentEof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>HttpResponse</name> <modifier>*</modifier></type>
<name>httpResponseNew</name><parameter_list>(<parameter><decl><type><name>HttpSession</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>verb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>contentCache</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <macro><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument>logLevelDebug</argument>)</argument_list></macro>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_SESSION</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>contentCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>session</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>verb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>HttpResponse</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>(</operator><name>HttpResponse</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pub</name> <operator>=</operator>
            <block>{
                <expr><operator>.</operator><name>header</name> <operator>=</operator> <call><name>httpHeaderNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>,
            }</block></expr>,
            <expr><operator>.</operator><name>session</name> <operator>=</operator> <call><name>httpSessionMove</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>,
        }</block></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Read status</comment>
            <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>status</name> <init>= <expr><call><name>ioReadLine</name><argument_list>(<argument><expr><call><name>httpSessionIoReadP</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Check status ends with a CR and remove it to make error formatting easier and more accurate</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEndsWith</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>CR_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"HTTP response status '%s' should be CR-terminated"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>strSubN</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Check status is at least the minimum required length to avoid harder to interpret errors later on</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strSize</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_VERSION</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"HTTP response '%s' has invalid length"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strTrim</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// If HTTP/1.0 then the connection will be closed on content eof since connections are not reused by default</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strBeginsWith</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>HTTP_VERSION_10_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>closeOnContentEof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else check that the version is the default (1.1)</comment>
            <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strBeginsWith</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>HTTP_VERSION_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"HTTP version of response '%s' must be "</literal> <name>HTTP_VERSION</name> <literal type="string">" or "</literal> <name>HTTP_VERSION_10</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Read status code</comment>
            <expr_stmt><expr><name>status</name> <operator>=</operator> <call><name>strSub</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HTTP_VERSION</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>spacePos</name> <init>= <expr><call><name>strChr</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>spacePos</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"response status '%s' must have a space after the status code"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>code</name></name> <operator>=</operator> <call><name>cvtZSubNToUInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>spacePos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Read reason phrase. A missing reason phrase will be represented as an empty string.</comment>
            <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>reason</name></name> <operator>=</operator> <call><name>strSub</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>spacePos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Read headers</comment>
            <do>do
            <block>{<block_content>
                <comment type="line">// Read the next header</comment>
                <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>header</name> <init>= <expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>ioReadLine</name><argument_list>(<argument><expr><call><name>httpSessionIoReadP</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// If the header is empty then we have reached the end of the headers</comment>
                <if_stmt><if>if <condition>(<expr><call><name>strSize</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>

                <comment type="line">// Split the header and store it</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>colonPos</name> <init>= <expr><call><name>strChr</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>colonPos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"header '%s' missing colon"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strTrim</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>headerKey</name> <init>= <expr><call><name>strLower</name><argument_list>(<argument><expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>strSubN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>colonPos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>headerValue</name> <init>= <expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>strSub</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>colonPos</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Read transfer encoding (only chunked is supported)</comment>
                <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>headerKey</name></expr></argument>, <argument><expr><name>HTTP_HEADER_TRANSFER_ENCODING_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Error if transfer encoding is not chunked</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name>headerValue</name></expr></argument>, <argument><expr><name>HTTP_VALUE_TRANSFER_ENCODING_CHUNKED_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                            <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"only '%s' is supported for '%s' header"</literal></expr></argument>, <argument><expr><name>HTTP_VALUE_TRANSFER_ENCODING_CHUNKED</name></expr></argument>,
                            <argument><expr><name>HTTP_HEADER_TRANSFER_ENCODING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>contentChunked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Read content size</comment>
                <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>headerKey</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>contentSize</name></name> <operator>=</operator> <call><name>cvtZToUInt64</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>headerValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>contentRemaining</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>contentSize</name></name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// If the server notified of a closed connection then close the client connection after reading content.  This</comment>
                <comment type="line">// prevents doing a retry on the next request when using the closed connection.</comment>
                <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>headerKey</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONNECTION_STR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strEq</name><argument_list>(<argument><expr><call><name>strLower</name><argument_list>(<argument><expr><name>headerValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HTTP_VALUE_CONNECTION_CLOSE_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>closeOnContentEof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Add after header checks in case the value was modified</comment>
                <expr_stmt><expr><call><name>httpHeaderAdd</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>header</name></name></expr></argument>, <argument><expr><name>headerKey</name></expr></argument>, <argument><expr><name>headerValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

            <comment type="line">// Error if transfer encoding and content length are both set</comment>
            <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>contentChunked</name></name> <operator>&amp;&amp;</operator> <name><name>this</name><operator>-&gt;</operator><name>contentSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                    <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"'%s' and '%s' headers are both set"</literal></expr></argument>, <argument><expr><name>HTTP_HEADER_TRANSFER_ENCODING</name></expr></argument>,
                    <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Was content returned in the response?  HEAD will report content but not actually return any.</comment>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>contentExists</name></name> <operator>=</operator>
                <operator>(</operator><name><name>this</name><operator>-&gt;</operator><name>contentChunked</name></name> <operator>||</operator> <name><name>this</name><operator>-&gt;</operator><name>contentSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>this</name><operator>-&gt;</operator><name>closeOnContentEof</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name>verb</name></expr></argument>, <argument><expr><name>HTTP_VERB_HEAD_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>contentEof</name></name> <operator>=</operator> <operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>contentExists</name></name></expr>;</expr_stmt>

            <comment type="line">// Create an io object, even if there is no content.  This makes the logic for readers easier -- they can just check eof</comment>
            <comment type="line">// rather than also checking if the io object exists.</comment>
            <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>contentRead</name></name> <operator>=</operator> <call><name>ioReadNewP</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>.</operator><name>eof</name> <operator>=</operator> <name>httpResponseEof</name></expr></argument>, <argument><expr><operator>.</operator><name>read</name> <operator>=</operator> <name>httpResponseRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioReadOpen</name><argument_list>(<argument><expr><call><name>httpResponseIoRead</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// If there is no content then we are done with the client</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>contentExists</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>httpResponseDone</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else cache content when requested or on error</comment>
            <if type="elseif">else if <condition>(<expr><name>contentCache</name> <operator>||</operator> <operator>!</operator><call><name>httpResponseCodeOk</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>httpResponseContent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>HTTP_RESPONSE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type>
<name>httpResponseContent</name><parameter_list>(<parameter><decl><type><name>HttpResponse</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>HTTP_RESPONSE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>content</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>content</name></name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>contentExists</name></name></expr>)</condition>
        <block>{<block_content>
            <do>do
            <block>{<block_content>
                <expr_stmt><expr><call><name>bufResize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ioBufferSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>httpResponseRead</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            while <condition>(<expr><operator>!</operator><call><name>httpResponseEof</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

            <expr_stmt><expr><call><name>bufResize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>content</name></name></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>httpResponseToLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HttpResponse</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strNewFmt</name><argument_list>(
        <argument><expr><literal type="string">"{code: %u, reason: %s, header: %s, contentChunked: %s, contentSize: %"</literal> <name>PRIu64</name> <literal type="string">", contentRemaining: %"</literal> <name>PRIu64</name>
            <literal type="string">", closeOnContentEof: %s, contentExists: %s, contentEof: %s, contentCached: %s}"</literal></expr></argument>,
        <argument><expr><call><name>httpResponseCode</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpResponseReason</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpHeaderToLog</name><argument_list>(<argument><expr><call><name>httpResponseHeader</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>contentChunked</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>contentSize</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>contentRemaining</name></name></expr></argument>, <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>closeOnContentEof</name></name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>contentExists</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>contentEof</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>content</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
