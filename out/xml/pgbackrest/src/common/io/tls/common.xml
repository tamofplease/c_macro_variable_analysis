<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/io/tls/common.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
TLS Common
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/ssl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/tls/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/user.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>tlsAsn1ToStr</name><parameter_list>(<parameter><decl><type><name>ASN1_STRING</name> <modifier>*</modifier><specifier>const</specifier></type> <name>nameAsn1</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>nameAsn1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// The name should not be null</comment>
    <if_stmt><if>if <condition>(<expr><name>nameAsn1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>                                                                                           <comment type="line">// {vm_covered}</comment>
        <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"TLS certificate name entry is missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(                                                                                           <comment type="line">// {vm_covered}</comment>
        <argument><expr><name>STRING</name></expr></argument>,
        <argument><expr><call><name>strNewZN</name><argument_list>(
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000L</literal></expr></cpp:if>
            <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>ASN1_STRING_data</name><argument_list>(<argument><expr><name>nameAsn1</name></expr></argument>)</argument_list></call></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><call><name>ASN1_STRING_get0_data</name><argument_list>(<argument><expr><name>nameAsn1</name></expr></argument>)</argument_list></call></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>ASN1_STRING_length</name><argument_list>(<argument><expr><name>nameAsn1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>tlsCertNameVerify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check for embedded NULLs</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"TLS certificate name contains embedded null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>tlsCertCommonName</name><parameter_list>(<parameter><decl><type><name>X509</name> <modifier>*</modifier><specifier>const</specifier></type> <name>certificate</name></decl></parameter>)</parameter_list>                                                                          <comment type="line">// {vm_covered}</comment>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>                                                                                          <comment type="line">// {vm_covered}</comment>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>certificate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                                   <comment type="line">// {vm_covered}</comment>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>                                                                                            <comment type="line">// {vm_covered}</comment>

    <decl_stmt><decl><type><name>X509_NAME</name> <modifier>*</modifier><specifier>const</specifier></type> <name>subjectName</name> <init>= <expr><call><name>X509_get_subject_name</name><argument_list>(<argument><expr><name>certificate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                                              <comment type="line">// {vm_covered}</comment>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><name>subjectName</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"subject name is missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                             <comment type="line">// {vm_covered}</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>commonNameIndex</name> <init>= <expr><call><name>X509_NAME_get_index_by_NID</name><argument_list>(<argument><expr><name>subjectName</name></expr></argument>, <argument><expr><name>NID_commonName</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                        <comment type="line">// {vm_covered}</comment>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><name>commonNameIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"common name is missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                             <comment type="line">// {vm_covered}</comment>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>tlsAsn1ToStr</name><argument_list>(<argument><expr><call><name>X509_NAME_ENTRY_get_data</name><argument_list>(<argument><expr><call><name>X509_NAME_get_entry</name><argument_list>(<argument><expr><name>subjectName</name></expr></argument>, <argument><expr><name>commonNameIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>     <comment type="line">// {vm_covered}</comment>

    <comment type="line">// Check for NULLs in the name</comment>
    <expr_stmt><expr><call><name>tlsCertNameVerify</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                                                      <comment type="line">// {vm_covered}</comment>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                                           <comment type="line">// {vm_covered}</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<comment type="line">// Callback to process cert passwords</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>tlsCertPwd</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>rwFlag</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>userData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>ServiceError</name></expr></argument>, <argument><expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"buffer has zero size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>rwFlag</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>userData</name></expr>;</expr_stmt>

    <comment type="line">// No password is currently supplied</comment>
    <expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>tlsCertKeyLoad</name><parameter_list>(<parameter><decl><type><name>SSL_CTX</name> <modifier>*</modifier><specifier>const</specifier></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>certFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>keyFile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>certFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>keyFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>context</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>certFile</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>keyFile</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>certFile</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>keyFile</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>certFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>userInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Set cert password callback</comment>
            <expr_stmt><expr><call><name>SSL_CTX_set_default_passwd_cb</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>tlsCertPwd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Load certificate</comment>
            <expr_stmt><expr><call><name>cryptoError</name><argument_list>(
                <argument><expr><call><name>SSL_CTX_use_certificate_chain_file</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>certFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr></argument>,
                <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"unable to load cert file '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>certFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Check that key has the correct permissions</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>StorageInfo</name></type> <name>keyInfo</name> <init>= <expr><call><name>storageInfoP</name><argument_list>(
                <argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyFile</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>followLink</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>keyInfo</name><operator>.</operator><name>exists</name></name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>keyInfo</name><operator>.</operator><name>userId</name></name> <operator>!=</operator> <call><name>userId</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>keyInfo</name><operator>.</operator><name>userId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>                                              <comment type="line">// {vm_covered}</comment>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(                                                                                      <comment type="line">// {vm_covered}</comment>
                        <argument><expr><name>FileReadError</name></expr></argument>, <argument><expr><literal type="string">"key file '%s' must be owned by the '%s' user or root"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>keyFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>userName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>keyInfo</name><operator>.</operator><name>userId</name></name> <operator>==</operator> <call><name>userId</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>keyInfo</name><operator>.</operator><name>mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>S_IRWXG</name> <operator>|</operator> <name>S_IRWXO</name><operator>)</operator><operator>)</operator> <operator>||</operator>                           <comment type="line">// {vm_covered}</comment>
                    <operator>(</operator><name><name>keyInfo</name><operator>.</operator><name>userId</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>keyInfo</name><operator>.</operator><name>mode</name></name> <operator>&amp;</operator> <operator>(</operator><name>S_IWGRP</name> <operator>|</operator> <name>S_IXGRP</name> <operator>|</operator> <name>S_IRWXO</name><operator>)</operator><operator>)</operator></expr>)</condition>                          <comment type="line">// {vm_covered}</comment>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                        <argument><expr><name>FileReadError</name></expr></argument>,
                        <argument><expr><literal type="string">"key file '%s' has group or other permissions\n"</literal>
                        <literal type="string">"HINT: file must have permissions u=rw (0600) or less if owned by the '%s' user\n"</literal>
                        <literal type="string">"HINT: file must have permissions u=rw, g=r (0640) or less if owned by root\n"</literal></expr></argument>,
                        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>keyFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>userName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Load key and verify that the key and cert go together</comment>
            <expr_stmt><expr><call><name>cryptoError</name><argument_list>(
                <argument><expr><call><name>SSL_CTX_use_PrivateKey_file</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>keyFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SSL_FILETYPE_PEM</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr></argument>,
                <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"unable to load key file '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>keyFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Verify again that the cert and key go together. It is not clear why this is needed since the key has already been</comment>
            <comment type="line">// verified in SSL_CTX_use_PrivateKey_file(), but it may be that older versions of OpenSSL need it.</comment>
            <expr_stmt><expr><call><name>cryptoError</name><argument_list>(
                <argument><expr><call><name>SSL_CTX_check_private_key</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr></argument>,
                <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"cert '%s' and key '%s' do not match"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>certFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>keyFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>SSL_CTX</name> <modifier>*</modifier></type>
<name>tlsContext</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>cryptoInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Select the TLS method to use. To maintain compatibility with older versions of OpenSSL we need to use an SSL method, but</comment>
    <comment type="line">// SSL versions will be excluded in SSL_CTX_set_options().</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>SSL_METHOD</name> <modifier>*</modifier><specifier>const</specifier></type> <name>method</name> <init>= <expr><call><name>SSLv23_method</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cryptoError</name><argument_list>(<argument><expr><name>method</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"unable to load TLS method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create TLS context</comment>
    <decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>SSL_CTX_new</name><argument_list>(<argument><expr><name>method</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cryptoError</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"unable to create TLS context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set options</comment>
    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(
        <argument><expr><name>result</name></expr></argument>,
        <comment type="line">// Disable SSL</comment>
        <argument><expr><name>SSL_OP_NO_SSLv2</name> <operator>|</operator> <name>SSL_OP_NO_SSLv3</name> <operator>|</operator>
        <comment type="line">// Disable compression</comment>
        <name>SSL_OP_NO_COMPRESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Disable auto-retry to prevent SSL_read() from hanging</comment>
    <expr_stmt><expr><call><name>SSL_CTX_clear_mode</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>SSL_MODE_AUTO_RETRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE_P</name><argument_list>(<argument><expr><name>SSL_CTX</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
