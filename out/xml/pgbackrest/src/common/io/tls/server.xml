<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/io/tls/server.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
TLS Server
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/tls/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/tls/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/tls/session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/stat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/object.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Statistics constants
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>TLS_STAT_SERVER_STR</name></expr></argument>,                                  <argument><expr><name>TLS_STAT_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>TlsServer</name>
<block>{
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>                                                   <comment type="line">// Host</comment>
    <decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>                                               <comment type="line">// TLS context</comment>
    <decl_stmt><decl><type><name>TimeMSec</name></type> <name>timeout</name></decl>;</decl_stmt>                                               <comment type="line">// Timeout for any i/o operation (connect, read, etc.)</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>verifyPeer</name></decl>;</decl_stmt>                                                <comment type="line">// Will the client cert be verified?</comment>
}</block></struct></type> <name>TlsServer</name>;</typedef>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Macros for function logging
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>tlsServerToLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TlsServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"{host: %s, timeout: %"</literal> <name>PRIu64</name> <literal type="string">"}"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_TLS_SERVER_TYPE</name></cpp:macro>                                                                                               \
    <cpp:value>TlsServer *</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_TLS_SERVER_FORMAT</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>buffer</name></type></parameter>, <parameter><type><name>bufferSize</name></type></parameter>)</parameter_list></cpp:macro>                                                                  \
    <cpp:value>FUNCTION_LOG_STRING_OBJECT_FORMAT(value, tlsServerToLog, buffer, bufferSize)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Free context
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tlsServerFreeResource</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>TlsServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TLS_SERVER</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Set DH parameters for generating ephemeral DH keys. The DH parameters can take a long time to compute, so they must be precomputed
using parameters provided by the OpenSSL project.

These values can be static since the OpenSSL library can efficiently generate random keys from the information provided.

Adapted from PostgreSQL initialize_dh() in src/backend/libpq/be-secure-openssl.c. Also see https://weakdh.org and
https://en.wikipedia.org/wiki/Logjam_(computer_security).
***********************************************************************************************************************************/</comment>
<comment type="line">// Hardcoded DH parameters, used in ephemeral DH keying. This is the 2048-bit DH parameter from RFC 3526. The generation of the</comment>
<comment type="line">// prime is specified in RFC 2412 Appendix E, which also discusses the design choice of the generator. Note that when loaded with</comment>
<comment type="line">// OpenSSL this causes DH_check() to fail on DH_NOT_SUITABLE_GENERATOR, where leaking a bit is preferred.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DH_2048</name></cpp:macro>                                                                                                                    \
    <cpp:value>"-----BEGIN DH PARAMETERS-----\n"                                                                                              \
    "MIIBCAKCAQEA///////////JD9qiIWjCNMTGYouA3BzRKQJOCIpnzHQCC76mOxOb\n"                                                           \
    "IlFKCHmONATd75UZs806QxswKwpt8l8UN0/hNW1tUcJF5IW1dmJefsb0TELppjft\n"                                                           \
    "awv/XLb0Brft7jhr+1qJn6WunyQRfEsf5kkoZlHs5Fs9wgB8uKFjvwWY2kg2HFXT\n"                                                           \
    "mmkWP6j9JM9fg2VdI9yjrZYcYvNWIIVSu57VKQdwlpZtZww1Tkq8mATxdGwIyhgh\n"                                                           \
    "fDKQXkYuNs474553LBgOhgObJ4Oi7Aeij7XFXfBvTFLJ3ivL9pVYFxg5lUl86pVq\n"                                                           \
    "5RXSJhiY+gUQFXKOWoqsqmj//////////wIBAg==\n"                                                                                   \
    "-----END DH PARAMETERS-----"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tlsServerDh</name><parameter_list>(<parameter><decl><type><name>SSL_CTX</name> <modifier>*</modifier><specifier>const</specifier></type> <name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SSL_OP_SINGLE_DH_USE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>BIO</name> <modifier>*</modifier><specifier>const</specifier></type> <name>bio</name> <init>= <expr><call><name>BIO_new_mem_buf</name><argument_list>(<argument><expr><name>DH_2048</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DH_2048</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cryptoError</name><argument_list>(<argument><expr><name>bio</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"unable create buffer for DH parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wdeprecated-declarations"</cpp:literal></cpp:pragma>
    	<decl_stmt><decl><type><name>DH</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dh</name> <init>= <expr><call><name>PEM_read_bio_DHparams</name><argument_list>(<argument><expr><name>bio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>

        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>cryptoError</name><argument_list>(<argument><expr><call><name>SSL_CTX_set_tmp_dh</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>dh</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unable to set temp dh parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>FINALLY</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wdeprecated-declarations"</cpp:literal></cpp:pragma>
            <expr_stmt><expr><call><name>DH_free</name><argument_list>(<argument><expr><name>dh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <macro><name>FINALLY</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Set ECDH parameters for generating ephemeral Elliptic Curve DH keys.

Adapted from PostgreSQL initialize_ecdh() in src/backend/libpq/be-secure-openssl.c.
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ECHD_CURVE</name></cpp:macro>                                                  <cpp:value>"prime256v1"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>tlsServerEcdh</name><parameter_list>(<parameter><decl><type><name>SSL_CTX</name> <modifier>*</modifier><specifier>const</specifier></type> <name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nid</name> <init>= <expr><call><name>OBJ_sn2nid</name><argument_list>(<argument><expr><name>ECHD_CURVE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cryptoError</name><argument_list>(<argument><expr><name>nid</name> <operator>==</operator> <name>NID_undef</name></expr></argument>, <argument><expr><literal type="string">"unrecognized ECDH curve "</literal> <name>ECHD_CURVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wdeprecated-declarations"</cpp:literal></cpp:pragma>
    <decl_stmt><decl><type><name>EC_KEY</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ecdh</name> <init>= <expr><call><name>EC_KEY_new_by_curve_name</name><argument_list>(<argument><expr><name>nid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
    <expr_stmt><expr><call><name>cryptoError</name><argument_list>(<argument><expr><name>ecdh</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"could not create ecdh key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SSL_OP_SINGLE_ECDH_USE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cryptoError</name><argument_list>(<argument><expr><call><name>SSL_CTX_set_tmp_ecdh</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ecdh</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unable to set temp ecdh key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <macro><name>FINALLY</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wdeprecated-declarations"</cpp:literal></cpp:pragma>
        <expr_stmt><expr><call><name>EC_KEY_free</name><argument_list>(<argument><expr><name>ecdh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
    </block_content>}</block>
    <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Authenticate client

Adapted from PostgreSQL be_tls_open_server() in src/backend/libpq/be-secure-openssl.c.
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tlsServerAuth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TlsServer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><name>IoSession</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ioSession</name></decl></parameter>, <parameter><decl><type><name>SSL</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tlsSession</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TLS_SERVER</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_SESSION</name></expr></argument>, <argument><expr><name>ioSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// If peer verification requested</comment>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>verifyPeer</name></name></expr>)</condition>                                                                                       <comment type="line">// {vm_covered}</comment>
        <block>{<block_content>
            <comment type="line">// If the client cert was presented then the session is authenticated. An error will be thrown automatically if the</comment>
            <comment type="line">// client cert is not valid.</comment>
            <decl_stmt><decl><type><name>X509</name> <modifier>*</modifier><specifier>const</specifier></type> <name>clientCert</name> <init>= <expr><call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                                          <comment type="line">// {vm_covered}</comment>
            <expr_stmt><expr><call><name>ioSessionAuthenticatedSet</name><argument_list>(<argument><expr><name>ioSession</name></expr></argument>, <argument><expr><name>clientCert</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                               <comment type="line">// {vm_covered}</comment>

            <comment type="line">// Set the peer name to the client cert common name</comment>
            <if_stmt><if>if <condition>(<expr><name>clientCert</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>                                                                                 <comment type="line">// {vm_covered}</comment>
                <expr_stmt><expr><call><name>ioSessionPeerNameSet</name><argument_list>(<argument><expr><name>ioSession</name></expr></argument>, <argument><expr><call><name>tlsCertCommonName</name><argument_list>(<argument><expr><name>clientCert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>                                     <comment type="line">// {vm_covered}</comment>

            <comment type="line">// Free the cert</comment>
            <expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>clientCert</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                                                  <comment type="line">// {vm_covered}</comment>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>IoSession</name> <modifier>*</modifier></type>
<name>tlsServerAccept</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><name>IoSession</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ioSession</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>TlsServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TLS_SERVER</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_SESSION</name></expr></argument>, <argument><expr><name>ioSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ioSession</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IoSession</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Open TLS session</comment>
        <decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>tlsSession</name> <init>= <expr><call><name>SSL_new</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tlsSessionNew</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>, <argument><expr><name>ioSession</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Authenticate TLS session</comment>
        <expr_stmt><expr><call><name>tlsServerAuth</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Move session</comment>
        <expr_stmt><expr><call><name>ioSessionMove</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>statInc</name><argument_list>(<argument><expr><name>TLS_STAT_SESSION_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>IO_SESSION</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>String</name> <modifier>*</modifier></type>
<name>tlsServerName</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>                                                                                            <comment type="line">// {vm_covered}</comment>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>TlsServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                                                                <comment type="line">// {vm_covered}</comment>

    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>                                                                                          <comment type="line">// {vm_covered}</comment>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>TLS_SERVER</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                                      <comment type="line">// {vm_covered}</comment>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>                                                                                            <comment type="line">// {vm_covered}</comment>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                                                           <comment type="line">// {vm_covered}</comment>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                                 <comment type="line">// {vm_covered}</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Initialize TLS context with all required security features

Adapted from PostgreSQL be_tls_init() in src/backend/libpq/be-secure-openssl.c.
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>IoServerInterface</name></type> <name>tlsServerInterface</name> <init>=
<expr><block>{
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>IO_SERVER_TLS_TYPE</name></expr>,
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <name>tlsServerName</name></expr>,
    <expr><operator>.</operator><name>accept</name> <operator>=</operator> <name>tlsServerAccept</name></expr>,
    <expr><operator>.</operator><name>toLog</name> <operator>=</operator> <name>tlsServerToLog</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>IoServer</name> <modifier>*</modifier></type>
<name>tlsServerNew</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>caFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>keyFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>certFile</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>TimeMSec</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>caFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>keyFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>certFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TIME_MSEC</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>host</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>keyFile</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>certFile</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IoServer</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>TlsServer</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.callbackQty = <literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TlsServer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>driver</name> <init>= <expr><call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>*</operator><name>driver</name> <operator>=</operator> <operator>(</operator><name>TlsServer</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>host</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>context</name> <operator>=</operator> <call><name>tlsContext</name><argument_list>()</argument_list></call></expr>,
            <expr><operator>.</operator><name>timeout</name> <operator>=</operator> <name>timeout</name></expr>,
        }</block></expr>;</expr_stmt>

        <comment type="line">// Set callback to free context</comment>
        <expr_stmt><expr><call><name>memContextCallbackSet</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>driver</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tlsServerFreeResource</name></expr></argument>, <argument><expr><name>driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set options</comment>
        <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>context</name></name></expr></argument>,
            <comment type="line">// Disable SSL and TLS v1/v1.1</comment>
            <argument><expr><name>SSL_OP_NO_TLSv1</name> <operator>|</operator> <name>SSL_OP_NO_TLSv1_1</name> <operator>|</operator>
            <comment type="line">// Let server set cipher order</comment>
            <name>SSL_OP_CIPHER_SERVER_PREFERENCE</name> <operator>|</operator>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SSL_OP_NO_RENEGOTIATION</name></cpp:ifdef>
	        <comment type="line">// Disable renegotiation, available since 1.1.0h. This affects only TLSv1.2 and older protocol versions as TLSv1.3 has</comment>
            <comment type="line">// no support for renegotiation.</comment>
	        <name>SSL_OP_NO_RENEGOTIATION</name> <operator>|</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        	<comment type="line">// Disable session tickets</comment>
	        <name>SSL_OP_NO_TICKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Disable session caching</comment>
        <expr_stmt><expr><call><name>SSL_CTX_set_session_cache_mode</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>SSL_SESS_CACHE_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Setup ephemeral DH and ECDH keys</comment>
        <expr_stmt><expr><call><name>tlsServerDh</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tlsServerEcdh</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Load certificate and key</comment>
        <expr_stmt><expr><call><name>tlsCertKeyLoad</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>certFile</name></expr></argument>, <argument><expr><name>keyFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// If a CA store is specified then client certificates will be verified</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <if_stmt><if>if <condition>(<expr><name>caFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>                                                                                         <comment type="line">// {vm_covered}</comment>
        <block>{<block_content>
            <comment type="line">// Load CA store</comment>
            <expr_stmt><expr><call><name>cryptoError</name><argument_list>(                                                                                            <comment type="line">// {vm_covered}</comment>
                <argument><expr><call><name>SSL_CTX_load_verify_locations</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>caFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr></argument>,                            <comment type="line">// {vm_covered}</comment>
                <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"unable to load CA file '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>caFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                              <comment type="line">// {vm_covered}</comment>

            <comment type="line">// Tell OpenSSL to send the list of root certs we trust to clients in CertificateRequests. This lets a client with a</comment>
            <comment type="line">// keystore select the appropriate client certificate to send to us. Also, this ensures that the SSL context will own</comment>
            <comment type="line">// the rootCertList and free it when no longer needed.</comment>
            <expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>X509_NAME</name></expr></argument>)</argument_list></call> <operator>*</operator><name>rootCertList</name> <operator>=</operator> <call><name>SSL_load_client_CA_file</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>caFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                              <comment type="line">// {vm_covered}</comment>
            <expr_stmt><expr><call><name>cryptoError</name><argument_list>(<argument><expr><name>rootCertList</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"unable to generate CA list from '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>caFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="line">// {vm_covered}</comment>

            <expr_stmt><expr><call><name>SSL_CTX_set_client_CA_list</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>rootCertList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                              <comment type="line">// {vm_covered}</comment>

            <comment type="line">// Always ask for SSL client cert, but don't fail when not presented. In this case the server will disconnect after</comment>
            <comment type="line">// sending a data end message to the client. The client can use this to verify that the server is running without the</comment>
            <comment type="line">// need to authenticate.</comment>
            <expr_stmt><expr><call><name>SSL_CTX_set_verify</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>SSL_VERIFY_PEER</name> <operator>|</operator> <name>SSL_VERIFY_CLIENT_ONCE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    <comment type="line">// {vm_covered}</comment>

            <comment type="line">// Set a flag so the client cert will be checked later</comment>
            <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>verifyPeer</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>                                                                              <comment type="line">// {vm_covered}</comment>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>statInc</name><argument_list>(<argument><expr><name>TLS_STAT_SERVER_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>ioServerNew</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlsServerInterface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>IO_SERVER</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
