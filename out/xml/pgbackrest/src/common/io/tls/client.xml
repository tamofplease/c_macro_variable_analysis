<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/io/tls/client.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
TLS Client
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/tls/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/tls/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/tls/session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/stat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/wait.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Statistics constants
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>TLS_STAT_CLIENT_STR</name></expr></argument>,                                  <argument><expr><name>TLS_STAT_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>TLS_STAT_RETRY_STR</name></expr></argument>,                                   <argument><expr><name>TLS_STAT_RETRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>TLS_STAT_SESSION_STR</name></expr></argument>,                                 <argument><expr><name>TLS_STAT_SESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>TlsClient</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>                                             <comment type="line">// Host to use for peer verification</comment>
    <decl_stmt><decl><type><name>TimeMSec</name></type> <name>timeoutConnect</name></decl>;</decl_stmt>                                        <comment type="line">// Timeout for connection</comment>
    <decl_stmt><decl><type><name>TimeMSec</name></type> <name>timeoutSession</name></decl>;</decl_stmt>                                        <comment type="line">// Timeout passed to session</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>verifyPeer</name></decl>;</decl_stmt>                                                <comment type="line">// Should the peer (server) certificate be verified?</comment>
    <decl_stmt><decl><type><name>IoClient</name> <modifier>*</modifier></type><name>ioClient</name></decl>;</decl_stmt>                                             <comment type="line">// Underlying client (usually a SocketClient)</comment>

    <decl_stmt><decl><type><name>SSL_CTX</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>                                               <comment type="line">// TLS context</comment>
}</block></struct></type> <name>TlsClient</name>;</typedef>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Macros for function logging
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>tlsClientToLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TlsClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>strNewFmt</name><argument_list>(
        <argument><expr><literal type="string">"{ioClient: %s, timeoutConnect: %"</literal> <name>PRIu64</name> <literal type="string">", timeoutSession: %"</literal> <name>PRIu64</name> <literal type="string">", verifyPeer: %s}"</literal></expr></argument>,
        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>ioClientToLog</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>ioClient</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>timeoutConnect</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>timeoutSession</name></name></expr></argument>, <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>verifyPeer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_TLS_CLIENT_TYPE</name></cpp:macro>                                                                                               \
    <cpp:value>TlsClient *</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_TLS_CLIENT_FORMAT</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>buffer</name></type></parameter>, <parameter><type><name>bufferSize</name></type></parameter>)</parameter_list></cpp:macro>                                                                  \
    <cpp:value>FUNCTION_LOG_STRING_OBJECT_FORMAT(value, tlsClientToLog, buffer, bufferSize)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Free connection
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tlsClientFreeResource</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>TlsClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TLS_CLIENT</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SSL_CTX_free</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Check if a name from the server certificate matches the hostname

Matching is always case-insensitive since DNS is case insensitive.
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>tlsClientHostVerifyName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>host</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check for NULLs in the name</comment>
    <expr_stmt><expr><call><name>tlsCertNameVerify</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Try an exact match</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>                                                                    <comment type="line">// {vm_covered}</comment>
    <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>                                                                                              <comment type="line">// {vm_covered}</comment>
    </block_content>}</block></if>
    <comment type="line">// Else check if a wildcard certificate matches the host name</comment>
    <comment type="line">//</comment>
    <comment type="line">// The rules are:</comment>
    <comment type="line">// 1. Only match the '*' character as wildcard</comment>
    <comment type="line">// 2. Only match wildcards at the start of the string</comment>
    <comment type="line">// 3. The '*' character does *not* match '.', meaning that we match only a single pathname component.</comment>
    <comment type="line">// 4. Don't support more than one '*' in a single pattern.</comment>
    <comment type="line">//</comment>
    <comment type="line">// This is roughly in line with RFC2818, but contrary to what most browsers appear to be implementing (point 3 being the</comment>
    <comment type="line">// difference)</comment>
    <if type="elseif">else if <condition>(<expr><call><name>strZ</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'*'</literal> <operator>&amp;&amp;</operator> <call><name>strZ</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>                                   <comment type="line">// {vm_covered}</comment>
             <call><name>strSize</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>                                                                       <comment type="line">// {vm_covered}</comment>
             <call><name>strcasecmp</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>                     <comment type="line">// {vm_covered}</comment>
             <call><name>strChr</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>strSize</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>                                             <comment type="line">// {vm_covered}</comment>
    <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>                                                                                              <comment type="line">// {vm_covered}</comment>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Verify that the server certificate matches the hostname we connected to

The certificate's Common Name and Subject Alternative Names are considered.
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>tlsClientHostVerify</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>X509</name> <modifier>*</modifier></type><name>certificate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>certificate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>host</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Error if the certificate is NULL</comment>
    <if_stmt><if>if <condition>(<expr><name>certificate</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>                                                                                        <comment type="line">// {vm_covered}</comment>
        <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"No certificate presented by the TLS server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>                                           <comment type="line">// {vm_covered}</comment>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>                                                                                        <comment type="line">// {vm_covered}</comment>
    <block>{<block_content>
        <comment type="line">// First get the subject alternative names from the certificate and compare them against the hostname</comment>
        <expr_stmt><expr><call><name>STACK_OF</name><argument_list>(<argument><expr><name>GENERAL_NAME</name></expr></argument>)</argument_list></call> <operator>*</operator><name>altNameStack</name> <operator>=</operator> <operator>(</operator><call><name>STACK_OF</name><argument_list>(<argument><expr><name>GENERAL_NAME</name></expr></argument>)</argument_list></call> <operator>*</operator><operator>)</operator><call><name>X509_get_ext_d2i</name><argument_list>(                          <comment type="line">// {vm_covered}</comment>
            <argument><expr><name>certificate</name></expr></argument>, <argument><expr><name>NID_subject_alt_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                         <comment type="line">// {vm_covered}</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>altNameFound</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>                                                                                  <comment type="line">// {vm_covered}</comment>

        <if_stmt><if>if <condition>(<expr><name>altNameStack</name></expr>)</condition>                                                                                           <comment type="line">// {vm_covered}</comment>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>altNameIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>altNameIdx</name> <operator>&lt;</operator> <call><name>sk_GENERAL_NAME_num</name><argument_list>(<argument><expr><name>altNameStack</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>altNameIdx</name><operator>++</operator></expr></incr>)</control>                  <comment type="line">// {vm_covered}</comment>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>GENERAL_NAME</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>sk_GENERAL_NAME_value</name><argument_list>(<argument><expr><name>altNameStack</name></expr></argument>, <argument><expr><name>altNameIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                         <comment type="line">// {vm_covered}</comment>
                <expr_stmt><expr><name>altNameFound</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>                                                                                <comment type="line">// {vm_covered}</comment>

                <if_stmt><if>if <condition>(<expr><name><name>name</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>GEN_DNS</name></expr>)</condition><block type="pseudo"><block_content>                                                                          <comment type="line">// {vm_covered}</comment>
                    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tlsClientHostVerifyName</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>tlsAsn1ToStr</name><argument_list>(<argument><expr><name><name>name</name><operator>-&gt;</operator><name>d</name><operator>.</operator><name>dNSName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>                          <comment type="line">// {vm_covered}</comment>

                <if_stmt><if>if <condition>(<expr><name>result</name> <operator>!=</operator> <name>false</name></expr>)</condition><block type="pseudo"><block_content>                                                                                <comment type="line">// {vm_covered}</comment>
                    <break>break;</break></block_content></block></if></if_stmt>                                                                                          <comment type="line">// {vm_covered}</comment>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name>sk_GENERAL_NAME_pop_free</name><argument_list>(<argument><expr><name>altNameStack</name></expr></argument>, <argument><expr><name>GENERAL_NAME_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                              <comment type="line">// {vm_covered}</comment>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// If no subject alternative name was found then check the common name. Per RFC 2818 and RFC 6125, if the subjectAltName</comment>
        <comment type="line">// extension of type dNSName is present the CN must be ignored.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>altNameFound</name></expr>)</condition><block type="pseudo"><block_content>                                                                                          <comment type="line">// {vm_covered}</comment>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tlsClientHostVerifyName</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>tlsCertCommonName</name><argument_list>(<argument><expr><name>certificate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>                                 <comment type="line">// {vm_covered}</comment>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>                                                                                         <comment type="line">// {vm_covered}</comment>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                                              <comment type="line">// {vm_covered}</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Authenticate server

Adapted from PostgreSQL open_client_SSL() in src/interfaces/libpq/fe-secure-openssl.c.
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>tlsClientAuth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>TlsClient</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><name>SSL</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tlsSession</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TLS_CLIENT</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Verify that the certificate presented by the server is valid</comment>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>verifyPeer</name></name></expr>)</condition>                                                                                       <comment type="line">// {vm_covered}</comment>
        <block>{<block_content>
            <comment type="line">// Verify that the chain of trust leads to a valid CA</comment>
            <decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>verifyResult</name> <init>= <expr><call><name>SSL_get_verify_result</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                                              <comment type="line">// {vm_covered}</comment>

            <if_stmt><if>if <condition>(<expr><name>verifyResult</name> <operator>!=</operator> <name>X509_V_OK</name></expr>)</condition>                                                                          <comment type="line">// {vm_covered}</comment>
            <block>{<block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(                                                                                          <comment type="line">// {vm_covered}</comment>
                    <argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"unable to verify certificate presented by '%s': [%ld] %s"</literal></expr></argument>,                        <comment type="line">// {vm_covered}</comment>
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>ioClientName</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>ioClient</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>verifyResult</name></expr></argument>,                                               <comment type="line">// {vm_covered}</comment>
                    <argument><expr><call><name>X509_verify_cert_error_string</name><argument_list>(<argument><expr><name>verifyResult</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                   <comment type="line">// {vm_covered}</comment>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Verify that the hostname appears in the certificate</comment>
            <decl_stmt><decl><type><name>X509</name> <modifier>*</modifier></type><name>certificate</name> <init>= <expr><call><name>SSL_get_peer_certificate</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                                               <comment type="line">// {vm_covered}</comment>
            <decl_stmt><decl><type><name>bool</name></type> <name>nameResult</name> <init>= <expr><call><name>tlsClientHostVerify</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name>certificate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                                         <comment type="line">// {vm_covered}</comment>
            <expr_stmt><expr><call><name>X509_free</name><argument_list>(<argument><expr><name>certificate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                                                 <comment type="line">// {vm_covered}</comment>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>nameResult</name></expr>)</condition>                                                                                        <comment type="line">// {vm_covered}</comment>
            <block>{<block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(                                                                                          <comment type="line">// {vm_covered}</comment>
                    <argument><expr><name>CryptoError</name></expr></argument>,                                                                                    <comment type="line">// {vm_covered}</comment>
                    <argument><expr><literal type="string">"unable to find hostname '%s' in certificate common name or subject alternative names"</literal></expr></argument>,         <comment type="line">// {vm_covered}</comment>
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                                              <comment type="line">// {vm_covered}</comment>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Open TLS session on a socket
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>IoSession</name> <modifier>*</modifier></type>
<name>tlsClientOpen</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>TlsClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TLS_CLIENT</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IoSession</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>retry</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Wait</name> <modifier>*</modifier></type><name>wait</name> <init>= <expr><call><name>waitNew</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>timeoutConnect</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>tlsSession</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <do>do
        <block>{<block_content>
            <comment type="line">// Assume there will be no retry</comment>
            <expr_stmt><expr><name>retry</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

            <comment type="line">// Create the TLS session</comment>
            <expr_stmt><expr><name>tlsSession</name> <operator>=</operator> <call><name>SSL_new</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cryptoError</name><argument_list>(<argument><expr><name>tlsSession</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"unable to create TLS session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Set server host name used for validation</comment>
            <expr_stmt><expr><call><name>cryptoError</name><argument_list>(<argument><expr><call><name>SSL_set_tlsext_host_name</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unable to set TLS host name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Open TLS session</comment>
            <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Open the underlying session first since this is mostly likely to fail</comment>
                <decl_stmt><decl><type><name>IoSession</name> <modifier>*</modifier></type><name>ioSession</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><name>ioSession</name> <operator>=</operator> <call><name>ioClientOpen</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>ioClient</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>RETHROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Open session</comment>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tlsSessionNew</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>, <argument><expr><name>ioSession</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>timeoutSession</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

                <comment type="line">// Retry if wait time has not expired</comment>
                <if_stmt><if>if <condition>(<expr><call><name>waitMore</name><argument_list>(<argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>LOG_DEBUG_FMT</name><argument_list>(<argument><expr><literal type="string">"retry %s: %s"</literal></expr></argument>, <argument><expr><call><name>errorTypeName</name><argument_list>(<argument><expr><call><name>errorType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>retry</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>statInc</name><argument_list>(<argument><expr><name>TLS_STAT_RETRY_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>RETHROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><name>retry</name></expr>)</condition>;</do>

        <comment type="line">// Authenticate TLS session</comment>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioSessionAuthenticatedSet</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>tlsClientAuth</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Move session</comment>
        <expr_stmt><expr><call><name>ioSessionMove</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>statInc</name><argument_list>(<argument><expr><name>TLS_STAT_SESSION_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>IO_SESSION</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>String</name> <modifier>*</modifier></type>
<name>tlsClientName</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>TlsClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>TLS_CLIENT</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>ioClientName</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>ioClient</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Initialize TLS session with all required security features

Adapted from PostgreSQL initialize_SSL() in src/interfaces/libpq/fe-secure-openssl.c.
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>IoClientInterface</name></type> <name>tlsClientInterface</name> <init>=
<expr><block>{
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>IO_CLIENT_TLS_TYPE</name></expr>,
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <name>tlsClientName</name></expr>,
    <expr><operator>.</operator><name>open</name> <operator>=</operator> <name>tlsClientOpen</name></expr>,
    <expr><operator>.</operator><name>toLog</name> <operator>=</operator> <name>tlsClientToLog</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>IoClient</name> <modifier>*</modifier></type>
<name>tlsClientNew</name><parameter_list>(
    <parameter><decl><type><name>IoClient</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ioClient</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TimeMSec</name></type> <name>timeoutConnect</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TimeMSec</name></type> <name>timeoutSession</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>verifyPeer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TlsClientNewParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_CLIENT</name></expr></argument>, <argument><expr><name>ioClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TIME_MSEC</name></expr></argument>, <argument><expr><name>timeoutConnect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TIME_MSEC</name></expr></argument>, <argument><expr><name>timeoutSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>verifyPeer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>caFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>caPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>certFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>keyFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ioClient</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IoClient</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>TlsClient</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.callbackQty = <literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TlsClient</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>*</operator><name>driver</name> <operator>=</operator> <operator>(</operator><name>TlsClient</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>ioClient</name> <operator>=</operator> <call><name>ioClientMove</name><argument_list>(<argument><expr><name>ioClient</name></expr></argument>, <argument><expr><call><name>MEM_CONTEXT_NEW</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>host</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>timeoutConnect</name> <operator>=</operator> <name>timeoutConnect</name></expr>,
            <expr><operator>.</operator><name>timeoutSession</name> <operator>=</operator> <name>timeoutSession</name></expr>,
            <expr><operator>.</operator><name>verifyPeer</name> <operator>=</operator> <name>verifyPeer</name></expr>,
            <expr><operator>.</operator><name>context</name> <operator>=</operator> <call><name>tlsContext</name><argument_list>()</argument_list></call></expr>,
        }</block></expr>;</expr_stmt>

        <comment type="line">// Set callback to free context</comment>
        <expr_stmt><expr><call><name>memContextCallbackSet</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>driver</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tlsClientFreeResource</name></expr></argument>, <argument><expr><name>driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Enable safe compatibility options</comment>
        <expr_stmt><expr><call><name>SSL_CTX_set_options</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>SSL_OP_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set location of CA certificates if the server certificate will be verified</comment>
        <if_stmt><if>if <condition>(<expr><name><name>driver</name><operator>-&gt;</operator><name>verifyPeer</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// If the user specified a location</comment>
            <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>caFile</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>param</name><operator>.</operator><name>caPath</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>                                                       <comment type="line">// {vm_covered}</comment>
            <block>{<block_content>
                <expr_stmt><expr><call><name>cryptoError</name><argument_list>(                                                                                        <comment type="line">// {vm_covered}</comment>
                    <argument><expr><call><name>SSL_CTX_load_verify_locations</name><argument_list>(                                                                  <comment type="line">// {vm_covered}</comment>
                        <argument><expr><name><name>driver</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><call><name>strZNull</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>caFile</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZNull</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>caPath</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr></argument>,                      <comment type="line">// {vm_covered}</comment>
                    <argument><expr><literal type="string">"unable to set user-defined CA certificate location"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                          <comment type="line">// {vm_covered}</comment>
            </block_content>}</block></if>
            <comment type="line">// Else use the defaults</comment>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>cryptoError</name><argument_list>(
                    <argument><expr><call><name>SSL_CTX_set_default_verify_paths</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unable to set default CA certificate location"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Load certificate and key, if specified</comment>
        <expr_stmt><expr><call><name>tlsCertKeyLoad</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>certFile</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>keyFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Increment stat</comment>
        <expr_stmt><expr><call><name>statInc</name><argument_list>(<argument><expr><name>TLS_STAT_CLIENT_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create client interface</comment>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>ioClientNew</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlsClientInterface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>IO_CLIENT</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
