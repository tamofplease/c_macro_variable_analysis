<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/io/tls/session.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
TLS Session
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/err.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/read.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/tls/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/tls/session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/write.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/object.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>TlsSession</name>
<block>{
    <decl_stmt><decl><type><name>IoSession</name> <modifier>*</modifier></type><name>ioSession</name></decl>;</decl_stmt>                                           <comment type="line">// Io session</comment>
    <decl_stmt><decl><type><name>SSL</name> <modifier>*</modifier></type><name>session</name></decl>;</decl_stmt>                                                   <comment type="line">// TLS session on the file descriptor</comment>
    <decl_stmt><decl><type><name>TimeMSec</name></type> <name>timeout</name></decl>;</decl_stmt>                                               <comment type="line">// Timeout for any i/o operation (read, write, etc.)</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>shutdownOnClose</name></decl>;</decl_stmt>                                           <comment type="line">// Shutdown the TLS connection when closing the session</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>ignoreUnexpectedEof</name></decl>;</decl_stmt>                                       <comment type="line">// Ignore unexpected EOF when requested</comment>

    <decl_stmt><decl><type><name>IoRead</name> <modifier>*</modifier></type><name>read</name></decl>;</decl_stmt>                                                   <comment type="line">// Read interface</comment>
    <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name></decl>;</decl_stmt>                                                 <comment type="line">// Write interface</comment>
}</block></struct></type> <name>TlsSession</name>;</typedef>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Macros for function logging
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>tlsSessionToLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TlsSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>strNewFmt</name><argument_list>(
        <argument><expr><literal type="string">"{ioSession: %s, timeout: %"</literal> <name>PRIu64</name><literal type="string">", shutdownOnClose: %s}"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>ioSessionToLog</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>ioSession</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>,
        <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>shutdownOnClose</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_TLS_SESSION_TYPE</name></cpp:macro>                                                                                              \
    <cpp:value>TlsSession *</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_TLS_SESSION_FORMAT</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>buffer</name></type></parameter>, <parameter><type><name>bufferSize</name></type></parameter>)</parameter_list></cpp:macro>                                                                 \
    <cpp:value>FUNCTION_LOG_STRING_OBJECT_FORMAT(value, tlsSessionToLog, buffer, bufferSize)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Free connection
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tlsSessionFreeResource</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>TlsSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TLS_SESSION</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SSL_free</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tlsSessionClose</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>TlsSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TLS_SESSION</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If not already closed</comment>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Shutdown on request</comment>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>shutdownOnClose</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>SSL_shutdown</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Close the io session</comment>
        <expr_stmt><expr><call><name>ioSessionClose</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>ioSession</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Free the TLS session</comment>
        <expr_stmt><expr><call><name>memContextCallbackClear</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tlsSessionFreeResource</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Process result from SSL_read(), SSL_write(), SSL_connect(), and SSL_accept().

Returns:
0 if the function should be tried again with the same parameters
-1 if the connection was closed gracefully
&gt; 0 with the read/write size if SSL_read()/SSL_write() was called
***********************************************************************************************************************************/</comment>
<comment type="line">// Helper to process error conditions</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>tlsSessionResultProcess</name><parameter_list>(<parameter><decl><type><name>TlsSession</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errorTls</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>unsigned</name> <name>int</name></type> <name>errorTlsDetail</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errorSys</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>closeOk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TLS_SESSION</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>errorTls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name>errorTlsDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>errorSys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>closeOk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>errorTls</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Try again after waiting for read ready</comment>
        <case>case <expr><name>SSL_ERROR_WANT_READ</name></expr>:</case>
            <expr_stmt><expr><call><name>ioReadReadyP</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>ioSession</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>error</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>

        <comment type="line">// Try again after waiting for write ready</comment>
        <case>case <expr><name>SSL_ERROR_WANT_WRITE</name></expr>:</case>
            <expr_stmt><expr><call><name>ioWriteReadyP</name><argument_list>(<argument><expr><call><name>ioSessionIoWrite</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>ioSession</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>error</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>

        <comment type="line">// Handle graceful termination by the server or unexpected EOF/error</comment>
        <default>default:</default>
        <block>{<block_content>
            <comment type="line">// Close connection on graceful termination by the server or unexpected EOF/error when allowed</comment>
            <if_stmt><if>if <condition>(<expr><name>errorTls</name> <operator>==</operator> <name>SSL_ERROR_ZERO_RETURN</name> <operator>||</operator> <name><name>this</name><operator>-&gt;</operator><name>ignoreUnexpectedEof</name></name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>closeOk</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>ProtocolError</name></expr></argument>, <argument><expr><literal type="string">"unexpected TLS eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>shutdownOnClose</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>tlsSessionClose</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else error</comment>
            <else>else
            <block>{<block_content>
                <comment type="line">// Get detailed error message when available</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errorTlsDetailMessage</name> <init>= <expr><call><name>ERR_reason_error_string</name><argument_list>(<argument><expr><name>errorTlsDetail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                    <argument><expr><name>ServiceError</name></expr></argument>, <argument><expr><literal type="string">"TLS error [%d:%lu] %s"</literal></expr></argument>, <argument><expr><name>errorTls</name></expr></argument>, <argument><expr><name>errorTlsDetail</name></expr></argument>,
                    <argument><expr><ternary><condition><expr><name>errorTlsDetailMessage</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"no details available"</literal></expr> </then><else>: <expr><name>errorTlsDetailMessage</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <break>break;</break>
        </block_content>}</block>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>tlsSessionResult</name><parameter_list>(<parameter><decl><type><name>TlsSession</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>closeOk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TLS_SESSION</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>closeOk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Process errors</comment>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Get TLS error and store errno in case of syscall error</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>errorTls</name> <init>= <expr><call><name>SSL_get_error</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>unsigned</name> <name>int</name></type> <name>errorTlsDetail</name> <init>= <expr><call><name>ERR_get_error</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>errorSys</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tlsSessionResultProcess</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>errorTls</name></expr></argument>, <argument><expr><name>errorTlsDetail</name></expr></argument>, <argument><expr><name>errorSys</name></expr></argument>, <argument><expr><name>closeOk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Read from the TLS session
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>tlsSessionRead</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>TlsSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TLS_SESSION</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>bufFull</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// If blocking read keep reading until buffer is full</comment>
    <do>do
    <block>{<block_content>
        <comment type="line">// If no TLS data pending then check the io to reduce blocking</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SSL_pending</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>ioReadReadyP</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>ioSession</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>error</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Read and handle errors. The error queue must be cleared before this operation.</comment>
        <expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tlsSessionResult</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>SSL_read</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><call><name>bufRemainsPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>bufRemains</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Update amount of buffer used</comment>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>bufUsedInc</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// If the connection was closed then we are at eof. It is up to the layer above TLS to decide if this is an error.</comment>
        <if type="elseif">else if <condition>(<expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block>
    while <condition>(<expr><name>block</name> <operator>&amp;&amp;</operator> <call><name>bufRemains</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Write to the TLS session
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>tlsSessionWrite</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>TlsSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TLS_SESSION</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Write and handle errors. The error queue must be cleared before this operation.</comment>
        <expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tlsSessionResult</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>SSL_write</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><call><name>bufPtrConst</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>bufUsed</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>ServiceError</name></expr></argument>, <argument><expr><name>result</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>result</name> <operator>==</operator> <call><name>bufUsed</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"expected retry or complete write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Has session been closed by the server?
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>tlsSessionEof</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>TlsSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TLS_SESSION</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>session</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>IoRead</name> <modifier>*</modifier></type>
<name>tlsSessionIoRead</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>ignoreUnexpectedEof</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>TlsSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>TLS_SESSION</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>ignoreUnexpectedEof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>ignoreUnexpectedEof</name></name> <operator>=</operator> <name>ignoreUnexpectedEof</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>IO_READ</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>IoWrite</name> <modifier>*</modifier></type>
<name>tlsSessionIoWrite</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>TlsSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>TLS_SESSION</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>IO_WRITE</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>IoSessionRole</name></type>
<name>tlsSessionRole</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><specifier>const</specifier> <name>TlsSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>TLS_SESSION</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><call><name>ioSessionRole</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>ioSession</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>IoSessionInterface</name></type> <name>tlsSessionInterface</name> <init>=
<expr><block>{
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>IO_CLIENT_TLS_TYPE</name></expr>,
    <expr><operator>.</operator><name>close</name> <operator>=</operator> <name>tlsSessionClose</name></expr>,
    <expr><operator>.</operator><name>ioRead</name> <operator>=</operator> <name>tlsSessionIoRead</name></expr>,
    <expr><operator>.</operator><name>ioWrite</name> <operator>=</operator> <name>tlsSessionIoWrite</name></expr>,
    <expr><operator>.</operator><name>role</name> <operator>=</operator> <name>tlsSessionRole</name></expr>,
    <expr><operator>.</operator><name>toLog</name> <operator>=</operator> <name>tlsSessionToLog</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>IoSession</name> <modifier>*</modifier></type>
<name>tlsSessionNew</name><parameter_list>(<parameter><decl><type><name>SSL</name> <modifier>*</modifier></type><name>session</name></decl></parameter>, <parameter><decl><type><name>IoSession</name> <modifier>*</modifier></type><name>ioSession</name></decl></parameter>, <parameter><decl><type><name>TimeMSec</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <macro><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument>logLevelDebug</argument>)</argument_list></macro>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>session</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_SESSION</name></expr></argument>, <argument><expr><name>ioSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TIME_MSEC</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>session</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ioSession</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IoSession</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>TlsSession</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.callbackQty = <literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TlsSession</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>*</operator><name>driver</name> <operator>=</operator> <operator>(</operator><name>TlsSession</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>session</name> <operator>=</operator> <name>session</name></expr>,
            <expr><operator>.</operator><name>ioSession</name> <operator>=</operator> <call><name>ioSessionMove</name><argument_list>(<argument><expr><name>ioSession</name></expr></argument>, <argument><expr><call><name>MEM_CONTEXT_NEW</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>timeout</name> <operator>=</operator> <name>timeout</name></expr>,
            <expr><operator>.</operator><name>shutdownOnClose</name> <operator>=</operator> <name>true</name></expr>,
        }</block></expr>;</expr_stmt>

        <comment type="line">// Ensure session is freed</comment>
        <expr_stmt><expr><call><name>memContextCallbackSet</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>driver</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tlsSessionFreeResource</name></expr></argument>, <argument><expr><name>driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Assign file descriptor to TLS session</comment>
        <expr_stmt><expr><call><name>cryptoError</name><argument_list>(<argument><expr><call><name>SSL_set_fd</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><call><name>ioSessionFd</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>ioSession</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unable to add fd to TLS session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Negotiate TLS session. The error queue must be cleared before this operation.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ERR_clear_error</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>ioSessionRole</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>ioSession</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>ioSessionRoleClient</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tlsSessionResult</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><call><name>SSL_connect</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>tlsSessionResult</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><call><name>SSL_accept</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></while>

        <comment type="line">// Create read and write interfaces</comment>
        <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>write</name></name> <operator>=</operator> <call><name>ioWriteNewP</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>tlsSessionWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <call><name>ioReadNewP</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><operator>.</operator><name>block</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>eof</name> <operator>=</operator> <name>tlsSessionEof</name></expr></argument>, <argument><expr><operator>.</operator><name>read</name> <operator>=</operator> <name>tlsSessionRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioReadOpen</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create session interface</comment>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>ioSessionNew</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tlsSessionInterface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>IO_SESSION</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
