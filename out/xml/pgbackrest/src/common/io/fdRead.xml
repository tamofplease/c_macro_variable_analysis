<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/io/fdRead.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
File Descriptor Io Read
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/read.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/object.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>IoFdRead</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>                                             <comment type="line">// File descriptor name for error messages</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>                                                         <comment type="line">// File descriptor to read data from</comment>
    <decl_stmt><decl><type><name>TimeMSec</name></type> <name>timeout</name></decl>;</decl_stmt>                                               <comment type="line">// Timeout for read operation</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>eof</name></decl>;</decl_stmt>                                                       <comment type="line">// Has the end of the stream been reached?</comment>
}</block></struct></type> <name>IoFdRead</name>;</typedef>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Macros for function logging
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_IO_FD_READ_TYPE</name></cpp:macro>                                                                                               \
    <cpp:value>IoFdRead *</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_IO_FD_READ_FORMAT</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>buffer</name></type></parameter>, <parameter><type><name>bufferSize</name></type></parameter>)</parameter_list></cpp:macro>                                                                  \
    <cpp:value>objToLog(value, "IoFdRead", buffer, bufferSize)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Are there bytes ready to read immediately?
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ioFdReadReady</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>IoFdRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_FD_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Check if the file descriptor is ready to read</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fdReadyRead</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Error if requested</comment>
        <if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FileReadError</name></expr></argument>, <argument><expr><literal type="string">"timeout after %"</literal> <name>PRIu64</name> <literal type="string">"ms waiting for read from '%s'"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// File descriptor is not ready to read</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Read data from the file descriptor
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>ioFdRead</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>IoFdRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_FD_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>bufFull</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ssize_t</name></type> <name>actualBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// If blocking keep reading until buffer is full or eof</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition>
    <block>{<block_content>
        <do>do
        <block>{<block_content>
            <comment type="line">// Check if there is data to be read and error if not</comment>
            <expr_stmt><expr><call><name>ioFdReadReady</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Read and handle errors</comment>
            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(
                <argument><expr><operator>(</operator><name>actualBytes</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><call><name>bufRemainsPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufRemains</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileReadError</name></expr></argument>,
                <argument><expr><literal type="string">"unable to read from %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Update amount of buffer used</comment>
            <expr_stmt><expr><call><name>bufUsedInc</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>actualBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// If zero bytes were returned then eof</comment>
            <if_stmt><if>if <condition>(<expr><name>actualBytes</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block>
        while <condition>(<expr><call><name>bufRemains</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <name>block</name></expr>)</condition>;</do>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>actualBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Have all bytes been read from the buffer?
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ioFdReadEof</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>IoFdRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_FD_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>eof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Get file descriptor
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>ioFdReadFd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><specifier>const</specifier> <name>IoFdRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>IO_FD_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>IoRead</name> <modifier>*</modifier></type>
<name>ioFdReadNew</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><name>TimeMSec</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TIME_MSEC</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IoRead</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>IoFdRead</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>IoFdRead</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>*</operator><name>driver</name> <operator>=</operator> <operator>(</operator><name>IoFdRead</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>fd</name> <operator>=</operator> <name>fd</name></expr>,
            <expr><operator>.</operator><name>timeout</name> <operator>=</operator> <name>timeout</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>ioReadNewP</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><operator>.</operator><name>block</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>eof</name> <operator>=</operator> <name>ioFdReadEof</name></expr></argument>, <argument><expr><operator>.</operator><name>fd</name> <operator>=</operator> <name>ioFdReadFd</name></expr></argument>, <argument><expr><operator>.</operator><name>read</name> <operator>=</operator> <name>ioFdRead</name></expr></argument>, <argument><expr><operator>.</operator><name>ready</name> <operator>=</operator> <name>ioFdReadReady</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>IO_READ</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
