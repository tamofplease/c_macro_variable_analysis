<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/io/filter/group.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
IO Filter Group
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/filter/buffer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/filter/filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/filter/group.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/list.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Filter and buffer structure

Contains the filter object and inout/output buffers.
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>IoFilterData</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>                                           <comment type="line">// Input buffer for filter</comment>
    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>inputLocal</name></decl>;</decl_stmt>                                             <comment type="line">// Non-null if a locally created buffer that can be cleared</comment>
    <decl_stmt><decl><type><name>IoFilter</name> <modifier>*</modifier></type><name>filter</name></decl>;</decl_stmt>                                               <comment type="line">// Filter to apply</comment>
    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>                                                 <comment type="line">// Output buffer for filter</comment>
}</block></struct></type> <name>IoFilterData</name>;</typedef>

<comment type="line">// Macros for logging</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_IO_FILTER_DATA_TYPE</name></cpp:macro>                                                                                           \
    <cpp:value>IoFilterData *</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_IO_FILTER_DATA_FORMAT</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>buffer</name></type></parameter>, <parameter><type><name>bufferSize</name></type></parameter>)</parameter_list></cpp:macro>                                                              \
    <cpp:value>objToLog(value, "IoFilterData", buffer, bufferSize)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Filter results
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>IoFilterResult</name>
<block>{
    <decl_stmt><decl><type><name>StringId</name></type> <name>type</name></decl>;</decl_stmt>                                                  <comment type="line">// Filter type</comment>
    <decl_stmt><decl><type><name>Pack</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>                                                   <comment type="line">// Filter result</comment>
}</block></struct></type> <name>IoFilterResult</name>;</typedef>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<struct>struct <name>IoFilterGroup</name>
<block>{
    <decl_stmt><decl><type><name>IoFilterGroupPub</name></type> <name>pub</name></decl>;</decl_stmt>                                           <comment type="line">// Publicly accessible variables</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>input</name></decl>;</decl_stmt>                                            <comment type="line">// Input buffer passed in for processing</comment>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>filterResult</name></decl>;</decl_stmt>                                             <comment type="line">// Filter results (if any)</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <decl_stmt><decl><type><name>bool</name></type> <name>flushing</name></decl>;</decl_stmt>                                                  <comment type="line">// Is output being flushed?</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block>;</struct>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>IoFilterGroup</name> <modifier>*</modifier></type>
<name>ioFilterGroupNew</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IoFilterGroup</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>IoFilterGroup</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>(</operator><name>IoFilterGroup</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pub</name> <operator>=</operator>
            <block>{
                <expr><operator>.</operator><name>done</name> <operator>=</operator> <name>false</name></expr>,
                <expr><operator>.</operator><name>filterList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IoFilterData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,
            }</block></expr>,

            <expr><operator>.</operator><name>filterResult</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IoFilterResult</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,
        }</block></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>IO_FILTER_GROUP</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>IoFilterGroup</name> <modifier>*</modifier></type>
<name>ioFilterGroupAdd</name><parameter_list>(<parameter><decl><type><name>IoFilterGroup</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>IoFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_FILTER_GROUP</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_FILTER</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>opened</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>closed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filter</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Move the filter to this object's mem context</comment>
    <expr_stmt><expr><call><name>ioFilterMove</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add the filter</comment>
    <decl_stmt><decl><type><name>IoFilterData</name></type> <name>filterData</name> <init>= <expr><block>{<expr><operator>.</operator><name>filter</name> <operator>=</operator> <name>filter</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>filterList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filterData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>IO_FILTER_GROUP</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>IoFilterGroup</name> <modifier>*</modifier></type>
<name>ioFilterGroupInsert</name><parameter_list>(<parameter><decl><type><name>IoFilterGroup</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>listIdx</name></decl></parameter>, <parameter><decl><type><name>IoFilter</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_FILTER_GROUP</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_FILTER</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>opened</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>closed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filter</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Move the filter to this object's mem context</comment>
    <expr_stmt><expr><call><name>ioFilterMove</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add the filter</comment>
    <decl_stmt><decl><type><name>IoFilterData</name></type> <name>filterData</name> <init>= <expr><block>{<expr><operator>.</operator><name>filter</name> <operator>=</operator> <name>filter</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>lstInsert</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>filterList</name></name></expr></argument>, <argument><expr><name>listIdx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filterData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>IO_FILTER_GROUP</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Get a filter
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>IoFilterData</name> <modifier>*</modifier></type>
<name>ioFilterGroupGet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IoFilterGroup</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>filterIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>IO_FILTER_GROUP</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>filterIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>IO_FILTER_DATA</name></expr></argument>, <argument><expr><operator>(</operator><name>IoFilterData</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>filterList</name></name></expr></argument>, <argument><expr><name>filterIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>IoFilterGroup</name> <modifier>*</modifier></type>
<name>ioFilterGroupClear</name><parameter_list>(<parameter><decl><type><name>IoFilterGroup</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_FILTER_GROUP</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>opened</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>filterIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>filterIdx</name> <operator>&lt;</operator> <call><name>ioFilterGroupSize</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>filterIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ioFilterFree</name><argument_list>(<argument><expr><call><name>ioFilterGroupGet</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>filterIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>lstClear</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>filterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>IO_FILTER_GROUP</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Setup the filter group and allocate any required buffers
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>ioFilterGroupOpen</name><parameter_list>(<parameter><decl><type><name>IoFilterGroup</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_FILTER_GROUP</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// If the last filter is not an output filter then add a filter to buffer/copy data.  Input filters won't copy to an output</comment>
        <comment type="line">// buffer so we need some way to get the data to the output buffer.</comment>
        <if_stmt><if>if <condition>(<expr><call><name>ioFilterGroupSize</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
            <operator>!</operator><call><name>ioFilterOutput</name><argument_list>(<argument><expr><operator>(</operator><call><name>ioFilterGroupGet</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>ioFilterGroupSize</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>ioBufferNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Create filter input/output buffers.  Input filters do not get an output buffer since they don't produce output.</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>lastOutputBuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>filterIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>filterIdx</name> <operator>&lt;</operator> <call><name>ioFilterGroupSize</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>filterIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>IoFilterData</name> <modifier>*</modifier></type><name>filterData</name> <init>= <expr><call><name>ioFilterGroupGet</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>filterIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// If there is no last output buffer yet, then use the input buffer that will be provided by the caller</comment>
            <if_stmt><if>if <condition>(<expr><name>lastOutputBuffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>filterData</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>input</name></name></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else assign the last output buffer to the input</comment>
            <else>else
            <block>{<block_content>
                <comment type="line">// This cast is required because the compiler can't guarantee the const-ness of this object, i.e. it could be</comment>
                <comment type="line">// modified in other parts of the code.  This is actually expected and the only reason we need this const is to</comment>
                <comment type="line">// match the const-ness of the input buffer provided by the caller.</comment>
                <expr_stmt><expr><name><name>filterData</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>Buffer</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>lastOutputBuffer</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>filterData</name><operator>-&gt;</operator><name>inputLocal</name></name> <operator>=</operator> <operator>*</operator><name>lastOutputBuffer</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">// If this is not the last output filter then create a new output buffer for it.  The output buffer for the last filter</comment>
            <comment type="line">// will be provided to the process function.</comment>
            <if_stmt><if>if <condition>(<expr><call><name>ioFilterOutput</name><argument_list>(<argument><expr><name><name>filterData</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>filterIdx</name> <operator>&lt;</operator> <call><name>ioFilterGroupSize</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>filterData</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><call><name>ioBufferSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>lastOutputBuffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>filterData</name><operator>-&gt;</operator><name>output</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Filter group is open</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>opened</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>ioFilterGroupProcess</name><parameter_list>(<parameter><decl><type><name>IoFilterGroup</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_FILTER_GROUP</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>opened</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>closed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>input</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>bufEmpty</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>flushing</name></name> <operator>||</operator> <name>input</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>output</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>bufRemains</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Once input goes to NULL then flushing has started</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>input</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>flushing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Assign input and output buffers</comment>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>input</name></name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><call><name>ioFilterGroupGet</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>ioFilterGroupSize</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>output</name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>

    <comment type="line">//</comment>
    <do>do
    <block>{<block_content>
        <comment type="line">// Start from the first filter by default</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>filterIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Search from the end of the list for a filter that needs the same input.  This indicates that the filter was not able to</comment>
        <comment type="line">// empty the input buffer on the last call.  Maybe it won't this time either -- we can but try.</comment>
        <if_stmt><if>if <condition>(<expr><call><name>ioFilterGroupInputSame</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>inputSame</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>filterIdx</name> <operator>=</operator> <call><name>ioFilterGroupSize</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <do>do
            <block>{<block_content>
                <expr_stmt><expr><name>filterIdx</name><operator>--</operator></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>ioFilterInputSame</name><argument_list>(<argument><expr><operator>(</operator><call><name>ioFilterGroupGet</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>filterIdx</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>inputSame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
            while <condition>(<expr><name>filterIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

            <comment type="line">// If no filter is found that needs the same input that means we are done with the current input.  So end the loop and</comment>
            <comment type="line">// get some more input.</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ioFilterGroupInputSame</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Process forward from the filter that has input to process.  This may be a filter that needs the same input or it may be</comment>
        <comment type="line">// new input for the first filter.</comment>
        <for>for <control>(<init>;</init> <condition><expr><name>filterIdx</name> <operator>&lt;</operator> <call><name>ioFilterGroupSize</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>filterIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>IoFilterData</name> <modifier>*</modifier></type><name>filterData</name> <init>= <expr><call><name>ioFilterGroupGet</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>filterIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Process the filter if it is not done</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ioFilterDone</name><argument_list>(<argument><expr><name><name>filterData</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// If the filter produces output</comment>
                <if_stmt><if>if <condition>(<expr><call><name>ioFilterOutput</name><argument_list>(<argument><expr><name><name>filterData</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name><name>filterData</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>filterData</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name><name>filterData</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// If inputSame is set then the output buffer for this filter is full and it will need to be re-processed with</comment>
                    <comment type="line">// the same input once the output buffer is cleared</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>ioFilterInputSame</name><argument_list>(<argument><expr><name><name>filterData</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>inputSame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <comment type="line">// Else clear the buffer if it was locally allocated.  If the input buffer was passed in then the caller is</comment>
                    <comment type="line">// responsible for clearing it.</comment>
                    <if type="elseif">else if <condition>(<expr><name><name>filterData</name><operator>-&gt;</operator><name>inputLocal</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name><name>filterData</name><operator>-&gt;</operator><name>inputLocal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <comment type="line">// If the output buffer is not full and the filter is not done then more data is required</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufFull</name><argument_list>(<argument><expr><name><name>filterData</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ioFilterDone</name><argument_list>(<argument><expr><name><name>filterData</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <break>break;</break></block_content></block></if></if_stmt>
                </block_content>}</block></if>
                <comment type="line">// Else the filter does not produce output</comment>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>ioFilterProcessIn</name><argument_list>(<argument><expr><name><name>filterData</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>, <argument><expr><operator>*</operator><name><name>filterData</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// If the filter is done and has no more output then null the output buffer.  Downstream filters have a pointer to this</comment>
            <comment type="line">// buffer so their inputs will also change to null and they'll flush.</comment>
            <if_stmt><if>if <condition>(<expr><name><name>filterData</name><operator>-&gt;</operator><name>output</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>ioFilterDone</name><argument_list>(<argument><expr><name><name>filterData</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>bufUsed</name><argument_list>(<argument><expr><name><name>filterData</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>filterData</name><operator>-&gt;</operator><name>output</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>
    while <condition>(<expr><operator>!</operator><call><name>bufFull</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>ioFilterGroupInputSame</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

    <comment type="line">// Scan the filter list to determine if inputSame is set or done is not set for any filter. We can't trust</comment>
    <comment type="line">// ioFilterGroupInputSame() when it is true without going through the loop above again. We need to scan to set this-&gt;pub.done</comment>
    <comment type="line">// anyway so set this-&gt;pub.inputSame in the same loop.</comment>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>inputSame</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>filterIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>filterIdx</name> <operator>&lt;</operator> <call><name>ioFilterGroupSize</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>filterIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>IoFilterData</name> <modifier>*</modifier></type><name>filterData</name> <init>= <expr><call><name>ioFilterGroupGet</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>filterIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// When inputSame then this-&gt;pub.done = false and we can exit the loop immediately</comment>
        <if_stmt><if>if <condition>(<expr><call><name>ioFilterInputSame</name><argument_list>(<argument><expr><name><name>filterData</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>inputSame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set this-&gt;pub.done = false if any filter is not done</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ioFilterDone</name><argument_list>(<argument><expr><name><name>filterData</name><operator>-&gt;</operator><name>filter</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>ioFilterGroupClose</name><parameter_list>(<parameter><decl><type><name>IoFilterGroup</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_FILTER_GROUP</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>opened</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>closed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Gather results from the filters</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>filterIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>filterIdx</name> <operator>&lt;</operator> <call><name>ioFilterGroupSize</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>filterIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>IoFilter</name> <modifier>*</modifier><specifier>const</specifier></type> <name>filter</name> <init>= <expr><call><name>ioFilterGroupGet</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>filterIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>filter</name></expr></init></decl>;</decl_stmt>

        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext(this-&gt;filterResult)</argument>)</argument_list></macro>
        <block>{<block_content>
            <macro><name>lstAdd</name><argument_list>(<argument>this-&gt;filterResult</argument>, <argument>&amp;(IoFilterResult){.type = ioFilterType(filter)</argument>, <argument>.result = ioFilterResult(filter)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Filter group is open</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>closed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>Pack</name> <modifier>*</modifier></type>
<name>ioFilterGroupParamAll</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IoFilterGroup</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_FILTER_GROUP</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>opened</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>filterList</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Pack</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>packWrite</name> <init>= <expr><call><name>pckWriteNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>filterIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>filterIdx</name> <operator>&lt;</operator> <call><name>ioFilterGroupSize</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>filterIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>IoFilter</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>ioFilterGroupGet</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>filterIdx</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>filter</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>pckWriteStrIdP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>ioFilterType</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pckWritePackP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>ioFilterParamList</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pckMove</name><argument_list>(<argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>PACK</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>Pack</name> <modifier>*</modifier></type>
<name>ioFilterGroupResultPack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IoFilterGroup</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StringId</name></type> <name>filterType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IoFilterGroupResultParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_FILTER_GROUP</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>filterType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>opened</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>filterType</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>Pack</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Search for the result</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>foundIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>filterResultIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>filterResultIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>filterResult</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>filterResultIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>IoFilterResult</name> <modifier>*</modifier><specifier>const</specifier></type> <name>filterResult</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>filterResult</name></name></expr></argument>, <argument><expr><name>filterResultIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If the filter matches check the index</comment>
        <if_stmt><if>if <condition>(<expr><name><name>filterResult</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>filterType</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// If the index matches return the result</comment>
            <if_stmt><if>if <condition>(<expr><name>foundIdx</name> <operator>==</operator> <name><name>param</name><operator>.</operator><name>idx</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>filterResult</name><operator>-&gt;</operator><name>result</name></name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Increment the index and keep searching</comment>
            <expr_stmt><expr><name>foundIdx</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_CONST</name><argument_list>(<argument><expr><name>PACK</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>PackRead</name> <modifier>*</modifier></type>
<name>ioFilterGroupResult</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IoFilterGroup</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StringId</name></type> <name>filterType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>IoFilterGroupResultParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_FILTER_GROUP</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>filterType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><call><name>pckReadNew</name><argument_list>(<argument><expr><call><name>ioFilterGroupResultPack</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>filterType</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>Pack</name> <modifier>*</modifier></type>
<name>ioFilterGroupResultAll</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IoFilterGroup</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_FILTER_GROUP</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>closed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Pack</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Pack the result list</comment>
    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>packWrite</name> <init>= <expr><call><name>pckWriteNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>filterResultIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>filterResultIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>filterResult</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>filterResultIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>IoFilterResult</name> <modifier>*</modifier><specifier>const</specifier></type> <name>filterResult</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>filterResult</name></name></expr></argument>, <argument><expr><name>filterResultIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>pckWriteStrIdP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name><name>filterResult</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pckWritePackP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name><name>filterResult</name><operator>-&gt;</operator><name>result</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pckMove</name><argument_list>(<argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>PACK</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>ioFilterGroupResultAllSet</name><parameter_list>(<parameter><decl><type><name>IoFilterGroup</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Pack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>filterResultPack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_FILTER_GROUP</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>PACK</name></expr></argument>, <argument><expr><name>filterResultPack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>filterResultPack</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Unpack the results into a list</comment>
        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>PackRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>packRead</name> <init>= <expr><call><name>pckReadNew</name><argument_list>(<argument><expr><name>filterResultPack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext(this-&gt;filterResult)</argument>)</argument_list></macro>
            <block>{<block_content>
                <while>while <condition>(<expr><operator>!</operator><call><name>pckReadNullP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>StringId</name></type> <name>type</name> <init>= <expr><call><name>pckReadStrIdP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Pack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>pckReadPackP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <macro><name>lstAdd</name><argument_list>(<argument>this-&gt;filterResult</argument>, <argument>&amp;(IoFilterResult){.type = type</argument>, <argument>.result = result}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
                </block_content>}</block></while>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>ioFilterGroupToLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>IoFilterGroup</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strNewFmt</name><argument_list>(
        <argument><expr><literal type="string">"{inputSame: %s, done: %s"</literal>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
            <literal type="string">", opened %s, flushing %s, closed %s"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <literal type="string">"}"</literal></expr></argument>,
        <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>inputSame</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>done</name></name></expr></argument>)</argument_list></call></expr></argument>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
        , <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>opened</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>flushing</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>closed</name></name></expr></argument>)</argument_list></call></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    )</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
