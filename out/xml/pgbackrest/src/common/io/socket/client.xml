<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/io/socket/client.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Socket Client
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/socket/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/socket/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/socket/session.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/stat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/wait.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Statistics constants
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>SOCKET_STAT_CLIENT_STR</name></expr></argument>,                               <argument><expr><name>SOCKET_STAT_CLIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>SOCKET_STAT_RETRY_STR</name></expr></argument>,                                <argument><expr><name>SOCKET_STAT_RETRY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>SOCKET_STAT_SESSION_STR</name></expr></argument>,                              <argument><expr><name>SOCKET_STAT_SESSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>SocketClient</name>
<block>{
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>                                                   <comment type="line">// Hostname or IP address</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>port</name></decl>;</decl_stmt>                                              <comment type="line">// Port to connect to host on</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>                                                   <comment type="line">// Socket name (host:port)</comment>
    <decl_stmt><decl><type><name>TimeMSec</name></type> <name>timeoutConnect</name></decl>;</decl_stmt>                                        <comment type="line">// Timeout for connection</comment>
    <decl_stmt><decl><type><name>TimeMSec</name></type> <name>timeoutSession</name></decl>;</decl_stmt>                                        <comment type="line">// Timeout passed to session</comment>
}</block></struct></type> <name>SocketClient</name>;</typedef>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Macros for function logging
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>sckClientToLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><specifier>const</specifier> <name>SocketClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>strNewFmt</name><argument_list>(
        <argument><expr><literal type="string">"{host: %s, port: %u, timeoutConnect: %"</literal> <name>PRIu64</name> <literal type="string">", timeoutSession: %"</literal> <name>PRIu64</name> <literal type="string">"}"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>port</name></name></expr></argument>,
        <argument><expr><name><name>this</name><operator>-&gt;</operator><name>timeoutConnect</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>timeoutSession</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_SOCKET_CLIENT_TYPE</name></cpp:macro>                                                                                            \
    <cpp:value>SocketClient *</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_SOCKET_CLIENT_FORMAT</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>buffer</name></type></parameter>, <parameter><type><name>bufferSize</name></type></parameter>)</parameter_list></cpp:macro>                                                               \
    <cpp:value>FUNCTION_LOG_STRING_OBJECT_FORMAT(value, sckClientToLog, buffer, bufferSize)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>IoSession</name> <modifier>*</modifier></type>
<name>sckClientOpen</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>SocketClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>SOCKET_CLIENT</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IoSession</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>retry</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Wait</name> <modifier>*</modifier></type><name>wait</name> <init>= <expr><call><name>waitNew</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>timeoutConnect</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <do>do
        <block>{<block_content>
            <comment type="line">// Assume there will be no retry</comment>
            <expr_stmt><expr><name>retry</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

            <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Get an address for the host. We are only going to try the first address returned.</comment>
                <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>addressFound</name> <init>= <expr><call><name>sckHostLookup</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Connect to the host</comment>
                <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>addressFound</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>addressFound</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>, <argument><expr><name><name>addressFound</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>HostConnectError</name></expr></argument>, <argument><expr><literal type="string">"unable to create socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>sckOptionSet</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>sckConnect</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name>addressFound</name></expr></argument>, <argument><expr><call><name>waitRemaining</name><argument_list>(<argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <macro><name>FINALLY</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>addressFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Create the session</comment>
                <macro><name>MEM_CONTEXT_PRIOR_BEGIN</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>sckSessionNew</name><argument_list>(<argument><expr><name>ioSessionRoleClient</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>timeoutSession</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>MEM_CONTEXT_PRIOR_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Retry if wait time has not expired</comment>
                <if_stmt><if>if <condition>(<expr><call><name>waitMore</name><argument_list>(<argument><expr><name>wait</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>LOG_DEBUG_FMT</name><argument_list>(<argument><expr><literal type="string">"retry %s: %s"</literal></expr></argument>, <argument><expr><call><name>errorTypeName</name><argument_list>(<argument><expr><call><name>errorType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>retry</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>statInc</name><argument_list>(<argument><expr><name>SOCKET_STAT_RETRY_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>RETHROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><name>retry</name></expr>)</condition>;</do>

        <expr_stmt><expr><call><name>statInc</name><argument_list>(<argument><expr><name>SOCKET_STAT_SESSION_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>IO_SESSION</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>String</name> <modifier>*</modifier></type>
<name>sckClientName</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>SocketClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>SOCKET_CLIENT</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>IoClientInterface</name></type> <name>sckClientInterface</name> <init>=
<expr><block>{
    <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>IO_CLIENT_SOCKET_TYPE</name></expr>,
    <expr><operator>.</operator><name>name</name> <operator>=</operator> <name>sckClientName</name></expr>,
    <expr><operator>.</operator><name>open</name> <operator>=</operator> <name>sckClientOpen</name></expr>,
    <expr><operator>.</operator><name>toLog</name> <operator>=</operator> <name>sckClientToLog</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>IoClient</name> <modifier>*</modifier></type>
<name>sckClientNew</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>host</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TimeMSec</name></type> <name>timeoutConnect</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TimeMSec</name></type> <name>timeoutSession</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <macro><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument>logLevelDebug</argument>)</argument_list></macro>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TIME_MSEC</name></expr></argument>, <argument><expr><name>timeoutConnect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TIME_MSEC</name></expr></argument>, <argument><expr><name>timeoutSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>host</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IoClient</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>SocketClient</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>SocketClient</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>*</operator><name>driver</name> <operator>=</operator> <operator>(</operator><name>SocketClient</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>host</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>port</name> <operator>=</operator> <name>port</name></expr>,
            <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>timeoutConnect</name> <operator>=</operator> <name>timeoutConnect</name></expr>,
            <expr><operator>.</operator><name>timeoutSession</name> <operator>=</operator> <name>timeoutSession</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>statInc</name><argument_list>(<argument><expr><name>SOCKET_STAT_CLIENT_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>ioClientNew</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sckClientInterface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>IO_CLIENT</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
