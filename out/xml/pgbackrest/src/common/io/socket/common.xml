<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/io/socket/common.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Socket Common Functions
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/tcp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/socket/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/wait.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Local variables
***********************************************************************************************************************************/</comment>
<struct><specifier>static</specifier> struct <name>SocketLocal</name>
<block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>init</name></decl>;</decl_stmt>                                                      <comment type="line">// sckInit() has been called</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>block</name></decl>;</decl_stmt>                                                     <comment type="line">// Use blocking mode socket</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>keepAlive</name></decl>;</decl_stmt>                                                 <comment type="line">// Is socket keep-alive enabled?</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>tcpKeepAliveCount</name></decl>;</decl_stmt>                                          <comment type="line">// TCP keep alive count (0 disables)</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>tcpKeepAliveIdle</name></decl>;</decl_stmt>                                           <comment type="line">// TCP keep alive idle (0 disables)</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>tcpKeepAliveInterval</name></decl>;</decl_stmt>                                       <comment type="line">// TCP keep alive interval (0 disables)</comment>
}</block> <decl><name>socketLocal</name></decl>;</struct>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>sckInit</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>keepAlive</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tcpKeepAliveCount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tcpKeepAliveIdle</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tcpKeepAliveInterval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>keepAlive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>tcpKeepAliveCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>tcpKeepAliveIdle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>tcpKeepAliveInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tcpKeepAliveCount</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tcpKeepAliveIdle</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tcpKeepAliveInterval</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>socketLocal</name><operator>.</operator><name>init</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>socketLocal</name><operator>.</operator><name>block</name></name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>socketLocal</name><operator>.</operator><name>keepAlive</name></name> <operator>=</operator> <name>keepAlive</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>socketLocal</name><operator>.</operator><name>tcpKeepAliveCount</name></name> <operator>=</operator> <name>tcpKeepAliveCount</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>socketLocal</name><operator>.</operator><name>tcpKeepAliveIdle</name></name> <operator>=</operator> <name>tcpKeepAliveIdle</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>socketLocal</name><operator>.</operator><name>tcpKeepAliveInterval</name></name> <operator>=</operator> <name>tcpKeepAliveInterval</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type>
<name>sckHostLookup</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>port</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>host</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>port</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set hints that narrow the type of address we are looking for -- we'll take ipv4 or ipv6</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>= <expr><operator>(</operator>struct <name>addrinfo</name><operator>)</operator>
    <block>{
        <expr><operator>.</operator><name>ai_family</name> <operator>=</operator> <name>AF_UNSPEC</name></expr>,
        <expr><operator>.</operator><name>ai_flags</name> <operator>=</operator> <name>AI_PASSIVE</name></expr>,
        <expr><operator>.</operator><name>ai_socktype</name> <operator>=</operator> <name>SOCK_STREAM</name></expr>,
        <expr><operator>.</operator><name>ai_protocol</name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="line">// Convert the port to a zero-terminated string for use with getaddrinfo()</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>portZ</name><index>[<expr><name>CVT_BASE10_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>cvtUIntToZ</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>portZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>portZ</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Do the lookup</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>error</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>portZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>HostConnectError</name></expr></argument>, <argument><expr><literal type="string">"unable to get address for '%s': [%d] %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>error</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>sckOptionSet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>socketLocal</name><operator>.</operator><name>init</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Disable the Nagle algorithm. This means that segments are always sent as soon as possible, even if there is only a small</comment>
    <comment type="line">// amount of data. Our internal buffering minimizes the benefit of this optimization so lower latency is preferred.</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TCP_NODELAY</name></cpp:ifdef>
    <decl_stmt><decl><type><name>int</name></type> <name>socketValue</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
        <argument><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_NODELAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socketValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>, <argument><expr><literal type="string">"unable to set TCP_NODELAY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Put the socket in non-blocking mode</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>socketLocal</name><operator>.</operator><name>block</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><operator>(</operator><name>flags</name> <operator>=</operator> <call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETFL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>, <argument><expr><literal type="string">"unable to get flags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFL</name></expr></argument>, <argument><expr><name>flags</name> <operator>|</operator> <name>O_NONBLOCK</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>, <argument><expr><literal type="string">"unable to set O_NONBLOCK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Automatically close the socket (in the child process) on a successful execve() call. Connections are never shared between</comment>
    <comment type="line">// processes so there is no reason to leave them open.</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>F_SETFD</name></cpp:ifdef>
	<expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_SETFD</name></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>, <argument><expr><literal type="string">"unable to set FD_CLOEXEC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Enable TCP keepalives</comment>
    <if_stmt><if>if <condition>(<expr><name><name>socketLocal</name><operator>.</operator><name>keepAlive</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>socketValue</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
            <argument><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_KEEPALIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socketValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>, <argument><expr><literal type="string">"unable to set SO_KEEPALIVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set TCP_KEEPCNT when available</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TCP_KEEPIDLE</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name><name>socketLocal</name><operator>.</operator><name>tcpKeepAliveCount</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>socketValue</name> <operator>=</operator> <name><name>socketLocal</name><operator>.</operator><name>tcpKeepAliveCount</name></name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
                <argument><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPCNT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socketValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                <argument><expr><literal type="string">"unable to set TCP_KEEPCNT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">// Set TCP_KEEPIDLE when available</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TCP_KEEPIDLE</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name><name>socketLocal</name><operator>.</operator><name>tcpKeepAliveIdle</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>socketValue</name> <operator>=</operator> <name><name>socketLocal</name><operator>.</operator><name>tcpKeepAliveIdle</name></name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
                <argument><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPIDLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socketValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                <argument><expr><literal type="string">"unable to set SO_KEEPIDLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Set TCP_KEEPINTVL when available</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TCP_KEEPIDLE</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name><name>socketLocal</name><operator>.</operator><name>tcpKeepAliveInterval</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>socketValue</name> <operator>=</operator> <name><name>socketLocal</name><operator>.</operator><name>tcpKeepAliveInterval</name></name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
                <argument><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPINTVL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socketValue</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                <argument><expr><literal type="string">"unable to set SO_KEEPINTVL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>sckConnectInProgress</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errNo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>errNo</name> <operator>==</operator> <name>EINPROGRESS</name> <operator>||</operator> <name>errNo</name> <operator>==</operator> <name>EINTR</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>sckConnect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hostAddress</name></decl></parameter>, <parameter><decl><type><name>TimeMSec</name></type> <name>timeout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>hostAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TIME_MSEC</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>host</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>hostAddress</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Attempt connection</comment>
    <if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>hostAddress</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>hostAddress</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Save the error</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>errNo</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// The connection has started but since we are in non-blocking mode it has not completed yet</comment>
        <if_stmt><if>if <condition>(<expr><call><name>sckConnectInProgress</name><argument_list>(<argument><expr><name>errNo</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Wait for write-ready</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fdReadyWrite</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>HostConnectError</name></expr></argument>, <argument><expr><literal type="string">"timeout connecting to '%s:%u'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Check for success or error. If the connection was successful this will set errNo to 0.</comment>
            <decl_stmt><decl><type><name>socklen_t</name></type> <name>errNoLen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>errNo</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
                <argument><expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_ERROR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errNo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errNoLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>HostConnectError</name></expr></argument>, <argument><expr><literal type="string">"unable to get socket error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Throw error if it is still set</comment>
        <if_stmt><if>if <condition>(<expr><name>errNo</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW_SYS_ERROR_CODE_FMT</name><argument_list>(<argument><expr><name>errNo</name></expr></argument>, <argument><expr><name>HostConnectError</name></expr></argument>, <argument><expr><literal type="string">"unable to connect to '%s:%u'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
