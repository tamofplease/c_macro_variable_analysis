<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/error.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Error Handler
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/macro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/stackTrace.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Represents an error type
***********************************************************************************************************************************/</comment>
<struct>struct <name>ErrorType</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>code</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>fatal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ErrorType</name></name> <modifier>*</modifier></type><name>parentType</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="line">// Macro for defining new error types</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_DEFINE</name><parameter_list>(<parameter><type><name>code</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>fatal</name></type></parameter>, <parameter><type><name>parentType</name></type></parameter>)</parameter_list></cpp:macro>                                                                                \
    <cpp:value>const ErrorType name = {code, fatal, #name, &amp;parentType}</cpp:value></cpp:define>

<comment type="line">// Define test error</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>ERROR_DEFINE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TestError</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>RuntimeError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Include error type definitions</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/error.auto.c.inc"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Maximum allowed number of nested try blocks
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_TRY_MAX</name></cpp:macro>                                             <cpp:value>64</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
States for each try
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><enum>enum <block>{<decl><name>errorStateTry</name></decl>, <decl><name>errorStateCatch</name></decl>, <decl><name>errorStateEnd</name></decl>}</block></enum></type> <name>ErrorState</name>;</typedef>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Track error handling
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>Error</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type><name>errorType</name></decl>;</decl_stmt>                                     <comment type="line">// Error type</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl>;</decl_stmt>                                           <comment type="line">// Source file where the error occurred</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name></decl>;</decl_stmt>                                       <comment type="line">// Function where the error occurred</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>fileLine</name></decl>;</decl_stmt>                                                   <comment type="line">// Source file line where the error occurred</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>                                            <comment type="line">// Description of the error</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>stackTrace</name></decl>;</decl_stmt>                                         <comment type="line">// Stack trace</comment>
}</block></struct></type> <name>Error</name>;</typedef>

<struct><specifier>static</specifier> struct
<block>{
    <comment type="line">// Array of jump buffers</comment>
    <decl_stmt><decl><type><name>jmp_buf</name></type> <name><name>jumpList</name><index>[<expr><name>ERROR_TRY_MAX</name></expr>]</index></name></decl>;</decl_stmt>

    <comment type="line">// Handler list</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ErrorHandlerFunction</name> <modifier>*</modifier></type><name>handlerList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>handlerTotal</name></decl>;</decl_stmt>

    <comment type="line">// State of each try</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>tryTotal</name></decl>;</decl_stmt>

    <struct>struct
    <block>{
        <decl_stmt><decl><type><name>ErrorState</name></type> <name>state</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>uncaught</name></decl>;</decl_stmt>
    }</block> <decl><name><name>tryList</name><index>[<expr><name>ERROR_TRY_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</struct>

    <comment type="line">// Last error</comment>
    <decl_stmt><decl><type><name>Error</name></type> <name>error</name></decl>;</decl_stmt>
}</block> <decl><name>errorContext</name></decl>;</struct>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Message buffer and buffer size

The message buffer is statically allocated so there is some space to store error messages.  Not being able to allocate such a small
amount of memory seems pretty unlikely so just keep the code simple and let the loader deal with massively constrained memory
situations.

The temp buffer is required because the error message being passed might be the error already stored in the message buffer.
***********************************************************************************************************************************/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ERROR_MESSAGE_BUFFER_SIZE</name></cpp:ifndef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_MESSAGE_BUFFER_SIZE</name></cpp:macro>                                   <cpp:value>8192</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>messageBuffer</name><index>[<expr><name>ERROR_MESSAGE_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>messageBufferTemp</name><index>[<expr><name>ERROR_MESSAGE_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>stackTraceBuffer</name><index>[<expr><name>ERROR_MESSAGE_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type> <name>errorHandlerSet</name><parameter_list>(<parameter><decl><type><name>ErrorHandlerFunction</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>total</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>total</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>list</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>handlerList</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>handlerTotal</name></name> <operator>=</operator> <name>total</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>errorTypeCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type><name>errorType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>errorType</name><operator>-&gt;</operator><name>code</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>errorTypeFatal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier><specifier>const</specifier></type> <name>errorType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>errorType</name><operator>-&gt;</operator><name>fatal</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type>
<name>errorTypeFromCode</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Search for error type by code</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>errorTypeIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name><name>errorTypeList</name><index>[<expr><name>errorTypeIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>code</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <name><name>errorTypeList</name><index>[<expr><operator>++</operator><name>errorTypeIdx</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="line">// Error if type was not found</comment>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>&amp;</operator><name>UnknownError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>errorTypeName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type><name>errorType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>errorType</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type>
<name>errorTypeParent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type><name>errorType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>errorType</name><operator>-&gt;</operator><name>parentType</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>unsigned</name> <name>int</name></type> <name>errorTryDepth</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>errorTypeExtends</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type><name>child</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type><name>find</name> <init>= <expr><name>child</name></expr></init></decl>;</decl_stmt>

    <do>do
    <block>{<block_content>
        <expr_stmt><expr><name>find</name> <operator>=</operator> <call><name>errorTypeParent</name><argument_list>(<argument><expr><name>find</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Parent was found</comment>
        <if_stmt><if>if <condition>(<expr><name>find</name> <operator>==</operator> <name>parent</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block>
    while <condition>(<expr><name>find</name> <operator>!=</operator> <call><name>errorTypeParent</name><argument_list>(<argument><expr><name>find</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

    <comment type="line">// Parent was not found</comment>
    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type>
<name>errorType</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>errorType</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>errorType</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>errorCode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>errorTypeCode</name><argument_list>(<argument><expr><call><name>errorType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>errorFatal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>errorTypeFatal</name><argument_list>(<argument><expr><call><name>errorType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>errorFileName</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>fileName</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>fileName</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>errorFunctionName</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>functionName</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>functionName</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>errorFileLine</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>fileLine</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>fileLine</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>errorMessage</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>message</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>message</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>errorName</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>errorTypeName</name><argument_list>(<argument><expr><call><name>errorType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>errorStackTrace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>stackTrace</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>stackTrace</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>errorInstanceOf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type><name>errorTypeTest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>errorType</name><argument_list>()</argument_list></call> <operator>==</operator> <name>errorTypeTest</name> <operator>||</operator> <call><name>errorTypeExtends</name><argument_list>(<argument><expr><call><name>errorType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>errorTypeTest</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Return current error context state
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>ErrorState</name></type>
<name>errorInternalState</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>errorContext</name><operator>.</operator><name>tryList</name><index>[<expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name></expr>]</index></name><operator>.</operator><name>state</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>errorInternalTryBegin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>functionName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fileLine</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// If try total has been exceeded then throw an error</comment>
    <if_stmt><if>if <condition>(<expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name> <operator>&gt;=</operator> <name>ERROR_TRY_MAX</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>errorInternalThrowFmt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>AssertError</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>, <argument><expr><name>fileLine</name></expr></argument>, <argument><expr><literal type="string">"too many nested try blocks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Increment try total</comment>
    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name><operator>++</operator></expr>;</expr_stmt>

    <comment type="line">// Setup try</comment>
    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>tryList</name><index>[<expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name></expr>]</index></name><operator>.</operator><name>state</name> <operator>=</operator> <name>errorStateTry</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>tryList</name><index>[<expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name></expr>]</index></name><operator>.</operator><name>uncaught</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>jmp_buf</name> <modifier>*</modifier></type>
<name>errorInternalJump</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>&amp;</operator><name><name>errorContext</name><operator>.</operator><name>jumpList</name><index>[<expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>errorInternalCatch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier><specifier>const</specifier></type> <name>errorTypeCatch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>fatalCatch</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>fatalCatch</name> <operator>||</operator> <operator>!</operator><call><name>errorTypeFatal</name><argument_list>(<argument><expr><name>errorTypeCatch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If just entering error state clean up the stack</comment>
    <if_stmt><if>if <condition>(<expr><call><name>errorInternalState</name><argument_list>()</argument_list></call> <operator>==</operator> <name>errorStateTry</name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>handlerIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>handlerIdx</name> <operator>&lt;</operator> <name><name>errorContext</name><operator>.</operator><name>handlerTotal</name></name></expr>;</condition> <incr><expr><name>handlerIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>handlerList</name><index>[<expr><name>handlerIdx</name></expr>]</index></name><operator>(</operator><call><name>errorTryDepth</name><argument_list>()</argument_list></call><operator>,</operator> <name>fatalCatch</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>tryList</name><index>[<expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name></expr>]</index></name><operator>.</operator><name>state</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>errorInternalState</name><argument_list>()</argument_list></call> <operator>==</operator> <name>errorStateCatch</name> <operator>&amp;&amp;</operator> <call><name>errorInstanceOf</name><argument_list>(<argument><expr><name>errorTypeCatch</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>fatalCatch</name> <operator>||</operator> <operator>!</operator><call><name>errorFatal</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>tryList</name><index>[<expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name></expr>]</index></name><operator>.</operator><name>uncaught</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>tryList</name><index>[<expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name></expr>]</index></name><operator>.</operator><name>state</name><operator>++</operator></expr>;</expr_stmt>

        <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>errorInternalPropagate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>errorType</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Mark the error as uncaught</comment>
    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>tryList</name><index>[<expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name></expr>]</index></name><operator>.</operator><name>uncaught</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <comment type="line">// If there is a parent try then jump to it</comment>
    <if_stmt><if>if <condition>(<expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>longjmp</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>jumpList</name><index>[<expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// If there was no try to catch this error then output to stderr</comment>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nUncaught %s: %s\n    thrown at %s:%d\n\n"</literal></expr></argument>, <argument><expr><call><name>errorName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>errorFileName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>errorFileLine</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Exit with failure</comment>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name><name>UnhandledError</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>errorInternalTryEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Any catch blocks have been processed and none of them called RETHROW() so clear the error</comment>
    <if_stmt><if>if <condition>(<expr><call><name>errorInternalState</name><argument_list>()</argument_list></call> <operator>==</operator> <name>errorStateEnd</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>errorContext</name><operator>.</operator><name>tryList</name><index>[<expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name></expr>]</index></name><operator>.</operator><name>uncaught</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>error</name></name> <operator>=</operator> <operator>(</operator><name>Error</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Remove the try</comment>
    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name><operator>--</operator></expr>;</expr_stmt>

    <comment type="line">// If not caught in the last try then propagate</comment>
    <if_stmt><if>if <condition>(<expr><name><name>errorContext</name><operator>.</operator><name>tryList</name><index>[<expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>uncaught</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>errorInternalPropagate</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>errorInternalThrow</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier><specifier>const</specifier></type> <name>errorType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>functionName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>fileLine</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>stackTrace</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Setup error data</comment>
    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>errorType</name></name> <operator>=</operator> <name>errorType</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>fileName</name></name> <operator>=</operator> <name>fileName</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>functionName</name></name> <operator>=</operator> <name>functionName</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>fileLine</name></name> <operator>=</operator> <name>fileLine</name></expr>;</expr_stmt>

    <comment type="line">// Assign message to the error. If errorMessage() is passed as the message there is no need to make a copy.</comment>
    <if_stmt><if>if <condition>(<expr><name>message</name> <operator>!=</operator> <name>messageBuffer</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>messageBuffer</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>messageBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>messageBuffer</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>messageBuffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>message</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>messageBuffer</name></expr>;</expr_stmt>

    <comment type="line">// If a stack trace was provided</comment>
    <if_stmt><if>if <condition>(<expr><name>stackTrace</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>stackTraceBuffer</name></expr></argument>, <argument><expr><name>stackTrace</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stackTraceBuffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>messageBuffer</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>stackTraceBuffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// Else generate the stack trace for the error</comment>
    <if type="elseif">else if <condition>(
        <expr><call><name>stackTraceToZ</name><argument_list>(
            <argument><expr><name>stackTraceBuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stackTraceBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>fileLine</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>stackTraceBuffer</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Indicate that the stack trace was truncated</comment>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>stackTrace</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>stackTraceBuffer</name></expr>;</expr_stmt>

    <comment type="line">// Propagate the error</comment>
    <expr_stmt><expr><call><name>errorInternalPropagate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>errorInternalThrowFmt</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type><name>errorType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fileLine</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Format message</comment>
    <decl_stmt><decl><type><name>va_list</name></type> <name>argument</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argument</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>messageBufferTemp</name></expr></argument>, <argument><expr><name>ERROR_MESSAGE_BUFFER_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>errorInternalThrow</name><argument_list>(<argument><expr><name>errorType</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>, <argument><expr><name>fileLine</name></expr></argument>, <argument><expr><name>messageBufferTemp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>errorInternalThrowSys</name><parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>errNo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type><name>errorType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fileLine</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Format message with system message appended</comment>
    <if_stmt><if>if <condition>(<expr><name>errNo</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>messageBufferTemp</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>ERROR_MESSAGE_BUFFER_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>messageBufferTemp</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>messageBuffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>messageBufferTemp</name></expr></argument>, <argument><expr><name>ERROR_MESSAGE_BUFFER_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s: [%d] %s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>errNo</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errNo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>errorInternalThrow</name><argument_list>(<argument><expr><name>errorType</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>, <argument><expr><name>fileLine</name></expr></argument>, <argument><expr><name>messageBufferTemp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_COVERAGE</name></cpp:ifdef>
<function><type><name>void</name></type>
<name>errorInternalThrowOnSys</name><parameter_list>(
    <parameter><decl><type><name>bool</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errNo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type><name>errorType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fileLine</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>errorInternalThrowSys</name><argument_list>(<argument><expr><name>errNo</name></expr></argument>, <argument><expr><name>errorType</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>, <argument><expr><name>fileLine</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>errorInternalThrowSysFmt</name><parameter_list>(
    <parameter><decl><type><name>int</name></type> <name>errNo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type><name>errorType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fileLine</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Format message</comment>
    <decl_stmt><decl><type><name>va_list</name></type> <name>argument</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argument</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>messageSize</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>vsnprintf</name><argument_list>(<argument><expr><name>messageBufferTemp</name></expr></argument>, <argument><expr><name>ERROR_MESSAGE_BUFFER_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>argument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Append the system message</comment>
    <if_stmt><if>if <condition>(<expr><name>errNo</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>messageBufferTemp</name> <operator>+</operator> <name>messageSize</name></expr></argument>, <argument><expr><name>ERROR_MESSAGE_BUFFER_SIZE</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>messageSize</name></expr></argument>, <argument><expr><literal type="string">": [%d] %s"</literal></expr></argument>, <argument><expr><name>errNo</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errNo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>errorInternalThrow</name><argument_list>(<argument><expr><name>errorType</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>, <argument><expr><name>fileLine</name></expr></argument>, <argument><expr><name>messageBufferTemp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG_COVERAGE</name></cpp:ifdef>
<function><type><name>void</name></type>
<name>errorInternalThrowOnSysFmt</name><parameter_list>(
    <parameter><decl><type><name>bool</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errNo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type><name>errorType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fileLine</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Format message</comment>
        <decl_stmt><decl><type><name>va_list</name></type> <name>argument</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argument</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>messageSize</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>vsnprintf</name><argument_list>(<argument><expr><name>messageBufferTemp</name></expr></argument>, <argument><expr><name>ERROR_MESSAGE_BUFFER_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>argument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Append the system message</comment>
        <if_stmt><if>if <condition>(<expr><name>errNo</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(
                <argument><expr><name>messageBufferTemp</name> <operator>+</operator> <name>messageSize</name></expr></argument>, <argument><expr><name>ERROR_MESSAGE_BUFFER_SIZE</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>messageSize</name></expr></argument>, <argument><expr><literal type="string">": [%d] %s"</literal></expr></argument>, <argument><expr><name>errNo</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errNo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>errorInternalThrow</name><argument_list>(<argument><expr><name>errorType</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>, <argument><expr><name>fileLine</name></expr></argument>, <argument><expr><name>messageBufferTemp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
