<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/common/log.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Log Handler
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/time.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Module variables
***********************************************************************************************************************************/</comment>
<comment type="line">// Log levels</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>LogLevel</name></type> <name>logLevelStdOut</name> <init>= <expr><name>logLevelError</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>LogLevel</name></type> <name>logLevelStdErr</name> <init>= <expr><name>logLevelError</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>LogLevel</name></type> <name>logLevelFile</name> <init>= <expr><name>logLevelOff</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>LogLevel</name></type> <name>logLevelAny</name> <init>= <expr><name>logLevelError</name></expr></init></decl>;</decl_stmt>

<comment type="line">// Log file descriptors</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>logFdStdOut</name> <init>= <expr><name>STDOUT_FILENO</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>logFdStdErr</name> <init>= <expr><name>STDERR_FILENO</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>logFdFile</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// Has the log file banner been written yet?</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>logFileBanner</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="line">// Is the timestamp printed in the log?</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>logTimestamp</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="line">// Default process id if none is specified</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>logProcessId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// Size of the process id field</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>logProcessSize</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// Prefix DRY-RUN to log messages</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>logDryRun</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Dry run prefix
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRY_RUN_PREFIX</name></cpp:macro>                                              <cpp:value>"[DRY-RUN] "</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Asserts
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_LOG_LEVEL</name><parameter_list>(<parameter><type><name>logLevel</name></type></parameter>)</parameter_list></cpp:macro>                                                                                                 \
    <cpp:value>ASSERT(logLevel &gt;= LOG_LEVEL_MIN &amp;&amp; logLevel &lt;= LOG_LEVEL_MAX)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Log buffer -- used to format log header and message
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>logBuffer</name><index>[<expr><name>LOG_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG_LEVEL_TOTAL</name></cpp:macro>                                             <cpp:value>(LOG_LEVEL_MAX + 1)</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>LogLevel</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>StringId</name></type> <name>id</name></decl>;</decl_stmt>                                              <comment type="line">// Id</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl>;</decl_stmt>                                         <comment type="line">// Name</comment>
}</block> <decl><name><name>logLevelList</name><index>[<expr><name>LOG_LEVEL_TOTAL</name></expr>]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><operator>.</operator><name>id</name> <operator>=</operator> <call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"off"</literal></expr></argument>, <argument><expr><literal type="number">0x18cf0</literal></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"OFF"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <comment type="line">// No id here because this level is not user selectable</comment>
        <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ASSERT"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>id</name> <operator>=</operator> <call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><literal type="number">0x127ca450</literal></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ERROR"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>id</name> <operator>=</operator> <call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"warn"</literal></expr></argument>, <argument><expr><literal type="number">0x748370</literal></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"WARN"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>id</name> <operator>=</operator> <call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"info"</literal></expr></argument>, <argument><expr><literal type="number">0x799c90</literal></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"INFO"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>id</name> <operator>=</operator> <call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"detail"</literal></expr></argument>, <argument><expr><literal type="number">0x1890d0a40</literal></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"DETAIL"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>id</name> <operator>=</operator> <call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"debug"</literal></expr></argument>, <argument><expr><literal type="number">0x7a88a40</literal></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"DEBUG"</literal></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>id</name> <operator>=</operator> <call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"trace"</literal></expr></argument>, <argument><expr><literal type="number">0x5186540</literal></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"TRACE"</literal></expr>,
    }</block></expr>,
}</block></expr></init></decl>;</struct>

<function><type><name>LogLevel</name></type>
<name>logLevelEnum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringId</name></type> <name>logLevelId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>logLevelId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>logLevelId</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LogLevel</name></type> <name>result</name> <init>= <expr><name>logLevelOff</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Search for the log level</comment>
    <for>for <control>(<init>;</init> <condition><expr><name>result</name> <operator>&lt;</operator> <name>LOG_LEVEL_TOTAL</name></expr>;</condition> <incr><expr><name>result</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name>logLevelId</name> <operator>==</operator> <name><name>logLevelList</name><index>[<expr><name>result</name></expr>]</index></name><operator>.</operator><name>id</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

    <comment type="line">// Check that the log level was found</comment>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>result</name> <operator>!=</operator> <name>LOG_LEVEL_TOTAL</name></expr></argument>, <argument><expr><literal type="string">"invalid log level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>logLevelStr</name><parameter_list>(<parameter><decl><type><name>LogLevel</name></type> <name>logLevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>logLevel</name> <operator>&lt;=</operator> <name>LOG_LEVEL_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name><name>logLevelList</name><index>[<expr><name>logLevel</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>logAnySet</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>logLevelAny</name> <operator>=</operator> <name>logLevelStdOut</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>logLevelStdErr</name> <operator>&gt;</operator> <name>logLevelAny</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logLevelAny</name> <operator>=</operator> <name>logLevelStdErr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>logLevelFile</name> <operator>&gt;</operator> <name>logLevelAny</name> <operator>&amp;&amp;</operator> <name>logFdFile</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logLevelAny</name> <operator>=</operator> <name>logLevelFile</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>logAny</name><parameter_list>(<parameter><decl><type><name>LogLevel</name></type> <name>logLevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_LOG_LEVEL</name><argument_list>(<argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>logLevel</name> <operator>&lt;=</operator> <name>logLevelAny</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>logInit</name><parameter_list>(
    <parameter><decl><type><name>LogLevel</name></type> <name>logLevelStdOutParam</name></decl></parameter>, <parameter><decl><type><name>LogLevel</name></type> <name>logLevelStdErrParam</name></decl></parameter>, <parameter><decl><type><name>LogLevel</name></type> <name>logLevelFileParam</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>logTimestampParam</name></decl></parameter>,
    <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>processId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>logProcessMax</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dryRunParam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logLevelStdOutParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logLevelStdErrParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logLevelFileParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>logTimestampParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>logProcessMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>dryRunParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>logLevelStdOutParam</name> <operator>&lt;=</operator> <name>LOG_LEVEL_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>logLevelStdErrParam</name> <operator>&lt;=</operator> <name>LOG_LEVEL_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>logLevelFileParam</name> <operator>&lt;=</operator> <name>LOG_LEVEL_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>processId</name> <operator>&lt;=</operator> <literal type="number">999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>logProcessMax</name> <operator>&lt;=</operator> <literal type="number">999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>logLevelStdOut</name> <operator>=</operator> <name>logLevelStdOutParam</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>logLevelStdErr</name> <operator>=</operator> <name>logLevelStdErrParam</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>logLevelFile</name> <operator>=</operator> <name>logLevelFileParam</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>logTimestamp</name> <operator>=</operator> <name>logTimestampParam</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>logProcessId</name> <operator>=</operator> <name>processId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>logProcessSize</name> <operator>=</operator> <ternary><condition><expr><name>logProcessMax</name> <operator>&gt;</operator> <literal type="number">99</literal></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>logDryRun</name> <operator>=</operator> <name>dryRunParam</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>logAnySet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Close the log file
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>logFileClose</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Close the file descriptor if it is open</comment>
    <if_stmt><if>if <condition>(<expr><name>logFdFile</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>logFdFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>logFdFile</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>logAnySet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>logFileSet</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logFile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>logFile</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Close the log file if it is already open</comment>
    <expr_stmt><expr><call><name>logFileClose</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Only open the file if there is a chance to log something</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>logLevelFile</name> <operator>!=</operator> <name>logLevelOff</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Open the file and handle errors</comment>
        <expr_stmt><expr><name>logFdFile</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>, <argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_APPEND</name> <operator>|</operator> <name>O_WRONLY</name></expr></argument>, <argument><expr><literal type="number">0640</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>logFdFile</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>errNo</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>LOG_WARN_FMT</name><argument_list>(
                <argument><expr><literal type="string">"unable to open log file '%s': %s\nNOTE: process will continue without log file."</literal></expr></argument>, <argument><expr><name>logFile</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errNo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Output the banner on first log message</comment>
        <expr_stmt><expr><name>logFileBanner</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>logAnySet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>logAnySet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>logClose</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Disable all logging</comment>
    <expr_stmt><expr><call><name>logInit</name><argument_list>(<argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Close the log file if it is open</comment>
    <expr_stmt><expr><call><name>logFileClose</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Determine if the log level is in the specified range
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>logRange</name><parameter_list>(<parameter><decl><type><name>LogLevel</name></type> <name>logLevel</name></decl></parameter>, <parameter><decl><type><name>LogLevel</name></type> <name>logRangeMin</name></decl></parameter>, <parameter><decl><type><name>LogLevel</name></type> <name>logRangeMax</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logRangeMin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logRangeMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_LOG_LEVEL</name><argument_list>(<argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_LOG_LEVEL</name><argument_list>(<argument><expr><name>logRangeMin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_LOG_LEVEL</name><argument_list>(<argument><expr><name>logRangeMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>logRangeMin</name> <operator>&lt;=</operator> <name>logRangeMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>logLevel</name> <operator>&gt;=</operator> <name>logRangeMin</name> <operator>&amp;&amp;</operator> <name>logLevel</name> <operator>&lt;=</operator> <name>logRangeMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Internal write function that handles errors
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>logWrite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>messageSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errorDetail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>messageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>errorDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>message</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>messageSize</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>errorDetail</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>messageSize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>messageSize</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_SYS_ERROR_FMT</name><argument_list>(<argument><expr><name>FileWriteError</name></expr></argument>, <argument><expr><literal type="string">"unable to write %s"</literal></expr></argument>, <argument><expr><name>errorDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Write out log message and indent subsequent lines
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>logWriteIndent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>indentSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>errorDetail</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Indent buffer -- used to write out indent space without having to loop</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>indentBuffer</name><index>[]</index></name> <init>= <expr><literal type="string">"                                                                                          "</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>indentSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>errorDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>message</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>indentSize</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>indentSize</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>indentBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>errorDetail</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Indent all lines after the first</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>linefeedPtr</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>linefeedPtr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>logWrite</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>indentBuffer</name></expr></argument>, <argument><expr><name>indentSize</name></expr></argument>, <argument><expr><name>errorDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><call><name>logWrite</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>linefeedPtr</name> <operator>-</operator> <name>message</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>errorDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>message</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>linefeedPtr</name> <operator>-</operator> <name>message</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>linefeedPtr</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Generate the log header and anything else that needs to happen before the message is output
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>LogPreResult</name>
<block>{
    <decl_stmt><decl><type><name>size_t</name></type> <name>bufferPos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>logBufferStdErr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>indentSize</name></decl>;</decl_stmt>
}</block></struct></type> <name>LogPreResult</name>;</typedef>

<function><type><specifier>static</specifier> <name>LogPreResult</name></type>
<name>logPre</name><parameter_list>(<parameter><decl><type><name>LogLevel</name></type> <name>logLevel</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>processId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_LOG_LEVEL</name><argument_list>(<argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fileName</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>functionName</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(
        <argument><expr><operator>(</operator><name>code</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>logLevel</name> <operator>&gt;</operator> <name>logLevelError</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>logLevel</name> <operator>==</operator> <name>logLevelError</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <call><name>errorTypeCode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>AssertError</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name>logLevel</name> <operator>==</operator> <name>logLevelAssert</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>==</operator> <call><name>errorTypeCode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>AssertError</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Initialize buffer position</comment>
    <decl_stmt><decl><type><name>LogPreResult</name></type> <name>result</name> <init>= <expr><block>{<expr><operator>.</operator><name>bufferPos</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add time</comment>
    <if_stmt><if>if <condition>(<expr><name>logTimestamp</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>timePart</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TimeMSec</name></type> <name>logTimeMSec</name> <init>= <expr><call><name>timeMSec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>time_t</name></type> <name>logTimeSec</name> <init>= <expr><operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>logTimeMSec</name> <operator>/</operator> <name>MSEC_PER_SEC</name><operator>)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bufferPos</name></name> <operator>+=</operator> <call><name>strftime</name><argument_list>(
            <argument><expr><name>logBuffer</name> <operator>+</operator> <name><name>result</name><operator>.</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logBuffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>result</name><operator>.</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>,
            <argument><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>logTimeSec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timePart</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bufferPos</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(
            <argument><expr><name>logBuffer</name> <operator>+</operator> <name><name>result</name><operator>.</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logBuffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>result</name><operator>.</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><literal type="string">".%03d "</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>logTimeMSec</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Add process and aligned log level</comment>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bufferPos</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(
        <argument><expr><name>logBuffer</name> <operator>+</operator> <name><name>result</name><operator>.</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logBuffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>result</name><operator>.</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><literal type="string">"P%0*u %*s: "</literal></expr></argument>, <argument><expr><name>logProcessSize</name></expr></argument>,
        <argument><expr><ternary><condition><expr><name>processId</name> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>logProcessId</name></expr> </then><else>: <expr><name>processId</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><call><name>logLevelStr</name><argument_list>(<argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// When writing to stderr the timestamp, process, and log level alignment will be skipped</comment>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>logBufferStdErr</name></name> <operator>=</operator> <name>logBuffer</name> <operator>+</operator> <name><name>result</name><operator>.</operator><name>bufferPos</name></name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><call><name>logLevelStr</name><argument_list>(<argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <comment type="line">// Set the indent size -- this will need to be adjusted for stderr</comment>
    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>indentSize</name></name> <operator>=</operator> <name><name>result</name><operator>.</operator><name>bufferPos</name></name></expr>;</expr_stmt>

    <comment type="line">// Add error code</comment>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bufferPos</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>logBuffer</name> <operator>+</operator> <name><name>result</name><operator>.</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logBuffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>result</name><operator>.</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><literal type="string">"[%03d]: "</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Add dry-run prefix</comment>
    <if_stmt><if>if <condition>(<expr><name>logDryRun</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bufferPos</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><name>logBuffer</name> <operator>+</operator> <name><name>result</name><operator>.</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logBuffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>result</name><operator>.</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><name>DRY_RUN_PREFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Add debug info</comment>
    <if_stmt><if>if <condition>(<expr><name>logLevel</name> <operator>&gt;=</operator> <name>logLevelDebug</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Adding padding for debug and trace levels. Cast to handle compilers (e.g. MSVC) that coerce to signed after subtraction.</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>paddingIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>paddingIdx</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>logLevel</name> <operator>-</operator> <name>logLevelDebug</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</condition> <incr><expr><name>paddingIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>logBuffer</name><index>[<expr><name><name>result</name><operator>.</operator><name>bufferPos</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>indentSize</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bufferPos</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(
            <argument><expr><name>logBuffer</name> <operator>+</operator> <name><name>result</name><operator>.</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><name>LOG_BUFFER_SIZE</name> <operator>-</operator> <name><name>result</name><operator>.</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><literal type="string">"%.*s::%s: "</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>,
            <argument><expr><name>functionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>LogPreResult</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Finalize formatting and log after the message has been added to the buffer
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>logPost</name><parameter_list>(<parameter><decl><type><name>LogPreResult</name> <modifier>*</modifier></type><name>logData</name></decl></parameter>, <parameter><decl><type><name>LogLevel</name></type> <name>logLevel</name></decl></parameter>, <parameter><decl><type><name>LogLevel</name></type> <name>logRangeMin</name></decl></parameter>, <parameter><decl><type><name>LogLevel</name></type> <name>logRangeMax</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name><name>logData</name><operator>-&gt;</operator><name>bufferPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name><name>logData</name><operator>-&gt;</operator><name>logBufferStdErr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name><name>logData</name><operator>-&gt;</operator><name>indentSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logRangeMin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logRangeMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT_LOG_LEVEL</name><argument_list>(<argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_LOG_LEVEL</name><argument_list>(<argument><expr><name>logRangeMin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT_LOG_LEVEL</name><argument_list>(<argument><expr><name>logRangeMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>logRangeMin</name> <operator>&lt;=</operator> <name>logRangeMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add linefeed</comment>
    <expr_stmt><expr><name><name>logBuffer</name><index>[<expr><name><name>logData</name><operator>-&gt;</operator><name>bufferPos</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>logBuffer</name><index>[<expr><name><name>logData</name><operator>-&gt;</operator><name>bufferPos</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line">// Determine where to log the message based on log-level-stderr</comment>
    <if_stmt><if>if <condition>(<expr><name>logLevel</name> <operator>&lt;=</operator> <name>logLevelStdErr</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>logRange</name><argument_list>(<argument><expr><name>logLevelStdErr</name></expr></argument>, <argument><expr><name>logRangeMin</name></expr></argument>, <argument><expr><name>logRangeMax</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>logWriteIndent</name><argument_list>(
                <argument><expr><name>logFdStdErr</name></expr></argument>, <argument><expr><name><name>logData</name><operator>-&gt;</operator><name>logBufferStdErr</name></name></expr></argument>, <argument><expr><name><name>logData</name><operator>-&gt;</operator><name>indentSize</name></name> <operator>-</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>logData</name><operator>-&gt;</operator><name>logBufferStdErr</name></name> <operator>-</operator> <name>logBuffer</name><operator>)</operator></expr></argument>,
                <argument><expr><literal type="string">"log to stderr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>logLevel</name> <operator>&lt;=</operator> <name>logLevelStdOut</name> <operator>&amp;&amp;</operator> <call><name>logRange</name><argument_list>(<argument><expr><name>logLevelStdOut</name></expr></argument>, <argument><expr><name>logRangeMin</name></expr></argument>, <argument><expr><name>logRangeMax</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>logWriteIndent</name><argument_list>(<argument><expr><name>logFdStdOut</name></expr></argument>, <argument><expr><name>logBuffer</name></expr></argument>, <argument><expr><name><name>logData</name><operator>-&gt;</operator><name>indentSize</name></name></expr></argument>, <argument><expr><literal type="string">"log to stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Log to file</comment>
    <if_stmt><if>if <condition>(<expr><name>logLevel</name> <operator>&lt;=</operator> <name>logLevelFile</name> <operator>&amp;&amp;</operator> <name>logFdFile</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>logRange</name><argument_list>(<argument><expr><name>logLevelFile</name></expr></argument>, <argument><expr><name>logRangeMin</name></expr></argument>, <argument><expr><name>logRangeMax</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// If the banner has not been written</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>logFileBanner</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Add a blank line if the file already has content</comment>
            <if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>logFdFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>logWrite</name><argument_list>(<argument><expr><name>logFdFile</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"banner spacing to file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Write process start banner</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>banner</name> <init>= <expr><literal type="string">"-------------------PROCESS START-------------------\n"</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>logWrite</name><argument_list>(<argument><expr><name>logFdFile</name></expr></argument>, <argument><expr><name>banner</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>banner</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"banner to file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Mark banner as written</comment>
            <expr_stmt><expr><name>logFileBanner</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>logWriteIndent</name><argument_list>(<argument><expr><name>logFdFile</name></expr></argument>, <argument><expr><name>logBuffer</name></expr></argument>, <argument><expr><name><name>logData</name><operator>-&gt;</operator><name>indentSize</name></name></expr></argument>, <argument><expr><literal type="string">"log to file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>logInternal</name><parameter_list>(
    <parameter><decl><type><name>LogLevel</name></type> <name>logLevel</name></decl></parameter>, <parameter><decl><type><name>LogLevel</name></type> <name>logRangeMin</name></decl></parameter>, <parameter><decl><type><name>LogLevel</name></type> <name>logRangeMax</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>processId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logRangeMin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logRangeMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>message</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LogPreResult</name></type> <name>logData</name> <init>= <expr><call><name>logPre</name><argument_list>(<argument><expr><name>logLevel</name></expr></argument>, <argument><expr><name>processId</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Copy message into buffer and update buffer position</comment>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>logBuffer</name> <operator>+</operator> <name><name>logData</name><operator>.</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logBuffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>logData</name><operator>.</operator><name>bufferPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>logBuffer</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>logBuffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>logData</name><operator>.</operator><name>bufferPos</name></name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>logBuffer</name> <operator>+</operator> <name><name>logData</name><operator>.</operator><name>bufferPos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>logPost</name><argument_list>(<argument><expr><operator>&amp;</operator><name>logData</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>, <argument><expr><name>logRangeMin</name></expr></argument>, <argument><expr><name>logRangeMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>logInternalFmt</name><parameter_list>(
    <parameter><decl><type><name>LogLevel</name></type> <name>logLevel</name></decl></parameter>, <parameter><decl><type><name>LogLevel</name></type> <name>logRangeMin</name></decl></parameter>, <parameter><decl><type><name>LogLevel</name></type> <name>logRangeMax</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>processId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logRangeMin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>logRangeMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>format</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LogPreResult</name></type> <name>logData</name> <init>= <expr><call><name>logPre</name><argument_list>(<argument><expr><name>logLevel</name></expr></argument>, <argument><expr><name>processId</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>functionName</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Format message into buffer and update buffer position</comment>
    <decl_stmt><decl><type><name>va_list</name></type> <name>argumentList</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argumentList</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>logData</name><operator>.</operator><name>bufferPos</name></name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>vsnprintf</name><argument_list>(
        <argument><expr><name>logBuffer</name> <operator>+</operator> <name><name>logData</name><operator>.</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><name>LOG_BUFFER_SIZE</name> <operator>-</operator> <name><name>logData</name><operator>.</operator><name>bufferPos</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>argumentList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argumentList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>logPost</name><argument_list>(<argument><expr><operator>&amp;</operator><name>logData</name></expr></argument>, <argument><expr><name>logLevel</name></expr></argument>, <argument><expr><name>logRangeMin</name></expr></argument>, <argument><expr><name>logRangeMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
