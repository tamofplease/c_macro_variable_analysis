<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/command/test/define.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Parse Define Yaml
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;yaml.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/common/yaml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/test/define.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Parse module list
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testDefParseModuleList</name><parameter_list>(<parameter><decl><type><name>Yaml</name> <modifier>*</modifier><specifier>const</specifier></type> <name>yaml</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><specifier>const</specifier></type> <name>moduleList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>YAML</name></expr></argument>, <argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>LIST</name></expr></argument>, <argument><expr><name>moduleList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Global lists to be copied to next test</comment>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>globalDependList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>globalFeatureList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier><specifier>const</specifier></type> <name>globalHarnessList</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TestDefHarness</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier><specifier>const</specifier></type> <name>globalShimList</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TestDefShim</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>typeList</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"unit"</literal></expr>, <expr><literal type="string">"integration"</literal></expr>, <expr><literal type="string">"performance"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>TestDefType</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>type</name> <operator>&lt;</operator> <call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>typeList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>type</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>yamlScalarNextCheckZ</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name><name>typeList</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Module list</comment>
        <macro><name>YAML_SEQ_BEGIN</name><argument_list>(<argument>yaml</argument>)</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Module</comment>
            <macro><name>YAML_MAP_BEGIN</name><argument_list>(<argument>yaml</argument>)</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Module name</comment>
                <expr_stmt><expr><call><name>yamlScalarNextCheckZ</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>moduleName</name> <init>= <expr><call><name>yamlScalarNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr></init></decl>;</decl_stmt>

                <comment type="line">// Check if next is db for integration tests</comment>
                <decl_stmt><decl><type><name>bool</name></type> <name>pgRequired</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>testDefTypeIntegration</name> <operator>&amp;&amp;</operator> <call><name>yamlEventPeek</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>yamlEventTypeScalar</name> <operator>&amp;&amp;</operator>
                    <call><name>strEqZ</name><argument_list>(<argument><expr><call><name>yamlEventPeek</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>yamlScalarNextCheckZ</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>pgRequired</name> <operator>=</operator> <call><name>yamlBoolParse</name><argument_list>(<argument><expr><call><name>yamlScalarNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Submodule List</comment>
                <expr_stmt><expr><call><name>yamlScalarNextCheckZ</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <macro><name>YAML_SEQ_BEGIN</name><argument_list>(<argument>yaml</argument>)</argument_list></macro>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>TestDefModule</name></type> <name>testDefModule</name> <init>= <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>type</name></expr>, <expr><operator>.</operator><name>pgRequired</name> <operator>=</operator> <name>pgRequired</name></expr>}</block></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>includeList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier><specifier>const</specifier></type> <name>coverageList</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TestDefCoverage</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Submodule</comment>
                    <macro><name>YAML_MAP_BEGIN</name><argument_list>(<argument>yaml</argument>)</argument_list></macro>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>YamlEvent</name></type> <name>subModuleDef</name> <init>= <expr><call><name>yamlEventNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>subModuleDef</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"binReq"</literal></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name><name>testDefModule</name><operator>.</operator><name>binRequired</name></name> <operator>=</operator> <call><name>yamlBoolParse</name><argument_list>(<argument><expr><call><name>yamlScalarNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>subModuleDef</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"containerReq"</literal></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name><name>testDefModule</name><operator>.</operator><name>containerRequired</name></name> <operator>=</operator> <call><name>yamlBoolParse</name><argument_list>(<argument><expr><call><name>yamlScalarNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>subModuleDef</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"coverage"</literal></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <macro><name>YAML_SEQ_BEGIN</name><argument_list>(<argument>yaml</argument>)</argument_list></macro>
                            <block>{<block_content>
                                <decl_stmt><decl><type><name>TestDefCoverage</name></type> <name>testDefCoverage</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

                                <if_stmt><if>if <condition>(<expr><call><name>yamlEventPeek</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>yamlEventTypeScalar</name></expr>)</condition>
                                <block>{<block_content>
                                    <expr_stmt><expr><name><name>testDefCoverage</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>yamlScalarNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr>;</expr_stmt>
                                    <expr_stmt><expr><name><name>testDefCoverage</name><operator>.</operator><name>coverable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                                </block_content>}</block></if>
                                <else>else
                                <block>{<block_content>
                                    <macro><name>YAML_MAP_BEGIN</name><argument_list>(<argument>yaml</argument>)</argument_list></macro>
                                    <block>{<block_content>
                                        <expr_stmt><expr><name><name>testDefCoverage</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>yamlScalarNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr>;</expr_stmt>
                                        <expr_stmt><expr><call><name>yamlScalarNextCheckZ</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><literal type="string">"noCode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    </block_content>}</block>
                                    <expr_stmt><expr><call><name>YAML_MAP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>

                                <expr_stmt><expr><name><name>testDefCoverage</name><operator>.</operator><name>include</name></name> <operator>=</operator>
                                    <call><name>strEndsWithZ</name><argument_list>(<argument><expr><name><name>testDefCoverage</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">".vendor"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEndsWithZ</name><argument_list>(<argument><expr><name><name>testDefCoverage</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">".auto"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>coverageList</argument>)</argument_list></macro>
                                <block>{<block_content>
                                    <expr_stmt><expr><name><name>testDefCoverage</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name><name>testDefCoverage</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>coverageList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>testDefCoverage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block>
                                <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                                <comment type="line">// Also add to the global depend list</comment>
                                <if_stmt><if>if <condition>(<expr><name><name>testDefCoverage</name><operator>.</operator><name>coverable</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>testDefCoverage</name><operator>.</operator><name>include</name></name></expr>)</condition><block type="pseudo"><block_content>
                                    <expr_stmt><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name>globalDependList</name></expr></argument>, <argument><expr><name><name>testDefCoverage</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                            </block_content>}</block>
                            <expr_stmt><expr><call><name>YAML_SEQ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>subModuleDef</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"define"</literal></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name><name>testDefModule</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <call><name>yamlScalarNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>subModuleDef</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"depend"</literal></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <macro><name>YAML_SEQ_BEGIN</name><argument_list>(<argument>yaml</argument>)</argument_list></macro>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name>globalDependList</name></expr></argument>, <argument><expr><call><name>yamlEventNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block>
                            <expr_stmt><expr><call><name>YAML_SEQ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>subModuleDef</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"feature"</literal></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name><name>testDefModule</name><operator>.</operator><name>feature</name></name> <operator>=</operator> <call><name>yamlScalarNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>subModuleDef</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"harness"</literal></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <decl_stmt><decl><type><name>TestDefHarness</name></type> <name>testDefHarness</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>harnessIncludeList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                            <if_stmt><if>if <condition>(<expr><call><name>yamlEventPeek</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>yamlEventTypeScalar</name></expr>)</condition>
                            <block>{<block_content>
                                <expr_stmt><expr><name><name>testDefHarness</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>yamlScalarNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr>;</expr_stmt>
                            </block_content>}</block></if>
                            <else>else
                            <block>{<block_content>
                                <macro><name>YAML_MAP_BEGIN</name><argument_list>(<argument>yaml</argument>)</argument_list></macro>
                                <block>{<block_content>
                                    <expr_stmt><expr><call><name>yamlScalarNextCheckZ</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <expr_stmt><expr><name><name>testDefHarness</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>yamlScalarNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr>;</expr_stmt>

                                    <expr_stmt><expr><call><name>yamlScalarNextCheckZ</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><literal type="string">"shim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                    <macro><name>YAML_MAP_BEGIN</name><argument_list>(<argument>yaml</argument>)</argument_list></macro>
                                    <block>{<block_content>
                                        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>shim</name> <init>= <expr><call><name>yamlScalarNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr></init></decl>;</decl_stmt>
                                        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>harnessIncludeList</name></expr></argument>, <argument><expr><name>shim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                        <if_stmt><if>if <condition>(<expr><call><name>yamlEventPeek</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>yamlEventTypeScalar</name></expr>)</condition>
                                        <block>{<block_content>
                                            <expr_stmt><expr><call><name>yamlScalarNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        </block_content>}</block></if>
                                        <else>else
                                        <block>{<block_content>
                                            <decl_stmt><decl><type><name>TestDefShim</name></type> <name>testDefShim</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>shim</name></expr>, <expr><operator>.</operator><name>functionList</name> <operator>=</operator> <macro><name>strLstNew</name><argument_list>()</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

                                            <macro><name>YAML_MAP_BEGIN</name><argument_list>(<argument>yaml</argument>)</argument_list></macro>
                                            <block>{<block_content>
                                                <expr_stmt><expr><call><name>yamlScalarNextCheckZ</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><literal type="string">"function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>functionList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                                                <macro><name>YAML_SEQ_BEGIN</name><argument_list>(<argument>yaml</argument>)</argument_list></macro>
                                                <block>{<block_content>
                                                    <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>functionList</name></expr></argument>, <argument><expr><call><name>yamlScalarNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                                </block_content>}</block>
                                                <expr_stmt><expr><call><name>YAML_SEQ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                                                <expr_stmt><expr><name><name>testDefShim</name><operator>.</operator><name>functionList</name></name> <operator>=</operator> <name>functionList</name></expr>;</expr_stmt>
                                            </block_content>}</block>
                                            <expr_stmt><expr><call><name>YAML_MAP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                                            <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>globalShimList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>testDefShim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        </block_content>}</block></else></if_stmt>
                                    </block_content>}</block>
                                    <expr_stmt><expr><call><name>YAML_MAP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block>
                                <expr_stmt><expr><call><name>YAML_MAP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>

                            <expr_stmt><expr><name><name>testDefHarness</name><operator>.</operator><name>includeList</name></name> <operator>=</operator> <name>harnessIncludeList</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>globalHarnessList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>testDefHarness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>subModuleDef</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"include"</literal></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <macro><name>YAML_SEQ_BEGIN</name><argument_list>(<argument>yaml</argument>)</argument_list></macro>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>includeList</name></expr></argument>, <argument><expr><call><name>yamlEventNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block>
                            <expr_stmt><expr><call><name>YAML_SEQ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>subModuleDef</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name><name>testDefModule</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>moduleName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>yamlScalarNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>subModuleDef</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"total"</literal></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name><name>testDefModule</name><operator>.</operator><name>total</name></name> <operator>=</operator> <call><name>cvtZToUInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>yamlScalarNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                                <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"unexpected scalar '%s' at line %zu, column %zu"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>subModuleDef</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name><name>subModuleDef</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>subModuleDef</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><call><name>YAML_MAP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Depend list is the global list minus the coverage and include lists</comment>
                    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>dependList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>dependIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dependIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>globalDependList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>dependIdx</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>depend</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>globalDependList</name></expr></argument>, <argument><expr><name>dependIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>coverageList</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>lstExists</name><argument_list>(<argument><expr><name>coverageList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>depend</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
                            <operator>(</operator><name>includeList</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>strLstExists</name><argument_list>(<argument><expr><name>includeList</name></expr></argument>, <argument><expr><name>depend</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>dependList</name></expr></argument>, <argument><expr><name>depend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block></for>

                    <comment type="line">// Add test module</comment>
                    <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>moduleList</argument>)</argument_list></macro>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>testDefModule</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name><name>testDefModule</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>testDefModule</name><operator>.</operator><name>coverageList</name></name> <operator>=</operator> <call><name>lstMove</name><argument_list>(<argument><expr><name>coverageList</name></expr></argument>, <argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>testDefModule</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name><name>testDefModule</name><operator>.</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>testDefModule</name><operator>.</operator><name>includeList</name></name> <operator>=</operator> <call><name>strLstMove</name><argument_list>(<argument><expr><name>includeList</name></expr></argument>, <argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt><if>if <condition>(<expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>dependList</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name><name>testDefModule</name><operator>.</operator><name>dependList</name></name> <operator>=</operator> <call><name>strLstMove</name><argument_list>(<argument><expr><name>dependList</name></expr></argument>, <argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <if_stmt><if>if <condition>(<expr><name><name>testDefModule</name><operator>.</operator><name>feature</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name><name>testDefModule</name><operator>.</operator><name>feature</name></name> <operator>=</operator> <call><name>strUpper</name><argument_list>(<argument><expr><call><name>strDup</name><argument_list>(<argument><expr><name><name>testDefModule</name><operator>.</operator><name>feature</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <if_stmt><if>if <condition>(<expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>globalFeatureList</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name><name>testDefModule</name><operator>.</operator><name>featureList</name></name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>globalFeatureList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <comment type="line">// Copy harness list</comment>
                        <decl_stmt><decl><type><name>List</name> <modifier>*</modifier><specifier>const</specifier></type> <name>harnessList</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TestDefHarness</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>harnessList</argument>)</argument_list></macro>
                        <block>{<block_content>
                            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>harnessIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>harnessIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name>globalHarnessList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>harnessIdx</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content>
                                <decl_stmt><decl><type><specifier>const</specifier> <name>TestDefHarness</name> <modifier>*</modifier><specifier>const</specifier></type> <name>globalHarness</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name>globalHarnessList</name></expr></argument>, <argument><expr><name>harnessIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <macro><name>lstAdd</name><argument_list>(
                                    <argument>harnessList</argument>,
                                    <argument>&amp;(TestDefHarness)
                                    {
                                        .name = strDup(globalHarness-&gt;name)</argument>,
                                        <argument>.includeList = strLstDup(globalHarness-&gt;includeList)</argument>,
                                    <argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block>
                        <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><name><name>testDefModule</name><operator>.</operator><name>harnessList</name></name> <operator>=</operator> <name>harnessList</name></expr>;</expr_stmt>

                        <comment type="line">// Copy shim list</comment>
                        <decl_stmt><decl><type><name>List</name> <modifier>*</modifier><specifier>const</specifier></type> <name>shimList</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TestDefShim</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>shimList</argument>)</argument_list></macro>
                        <block>{<block_content>
                            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>shimIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>shimIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name>globalShimList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>shimIdx</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content>
                                <decl_stmt><decl><type><specifier>const</specifier> <name>TestDefShim</name> <modifier>*</modifier><specifier>const</specifier></type> <name>globalShim</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name>globalShimList</name></expr></argument>, <argument><expr><name>shimIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                                <macro><name>lstAdd</name><argument_list>(
                                    <argument>shimList</argument>,
                                    <argument>&amp;(TestDefShim)
                                    {
                                        .name = strDup(globalShim-&gt;name)</argument>,
                                        <argument>.functionList = strLstDup(globalShim-&gt;functionList)</argument>,
                                    <argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block>
                        <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><name><name>testDefModule</name><operator>.</operator><name>shimList</name></name> <operator>=</operator> <name>shimList</name></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>moduleList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>testDefModule</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Add feature to global list</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>testDefModule</name><operator>.</operator><name>feature</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>globalFeatureList</name></expr></argument>, <argument><expr><name><name>testDefModule</name><operator>.</operator><name>feature</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>YAML_SEQ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>YAML_MAP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>YAML_SEQ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>TestDef</name></type>
<name>testDefParse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageRepo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE</name></expr></argument>, <argument><expr><name>storageRepo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Module list</comment>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier><specifier>const</specifier></type> <name>moduleList</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TestDefModule</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Initialize yaml</comment>
        <decl_stmt><decl><type><name>Yaml</name> <modifier>*</modifier><specifier>const</specifier></type> <name>yaml</name> <init>= <expr><call><name>yamlNew</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test/define.yaml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeMapBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Parse unit tests</comment>
        <expr_stmt><expr><call><name>testDefParseModuleList</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>moduleList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <macro><name>FUNCTION_LOG_RETURN_STRUCT</name><argument_list>(<argument>(TestDef){.moduleList = moduleList}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
</block_content>}</block></function>
</unit>
