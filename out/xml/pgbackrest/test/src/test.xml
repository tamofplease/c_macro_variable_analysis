<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/test.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
C Test Wrapper

This wrapper runs the C unit tests.
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<comment type="line">// Enable FUNCTION_TEST*() macros for enhanced debugging</comment>
<block>{<block_content><expr><index>[<expr><name>C_TEST_DEBUG_TEST_TRACE</name></expr>]</index></expr></block_content>}</block>

<comment type="line">// Enable memory debugging</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HRN_FEATURE_MEMCONTEXT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG_MEM</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
C files to be tested

The files are included directly so the test can see and manipulate variables and functions in the module without the need to extern.
If a .c file does not exist for a module then the header file will be included instead.  They are included first so they won't see
the includes which are required for the test code.
***********************************************************************************************************************************/</comment>
<block>{<block_content><expr><index>[<expr><name>C_INCLUDE</name></expr>]</index></expr></block_content>}</block>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
The test code is included directly so it can freely interact with the included C files
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;signal.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_ERROR</name></cpp:ifdef>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/error.h"</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/macro.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_DEBUG</name></cpp:ifdef>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_STRING</name></cpp:ifdef>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/string.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Name of the project exe</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PROJECT_EXE</name></cpp:macro>                                            <cpp:value>"{[C_TEST_PROJECT_EXE]}"</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_STRING</name></cpp:ifdef>
    <expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>TEST_PROJECT_EXE_STR</name></expr></argument>, <argument><expr><name>TEST_PROJECT_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Path where the test is running</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PATH</name></cpp:macro>                                                   <cpp:value>"{[C_TEST_PATH]}"</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_STRING</name></cpp:ifdef>
    <expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Path to the source repository</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HRN_PATH_REPO</name></cpp:macro>                                               <cpp:value>"{[C_HRN_PATH_REPO]}"</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_STRING</name></cpp:ifdef>
    <expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HRN_PATH_REPO_STR</name></expr></argument>, <argument><expr><name>HRN_PATH_REPO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Path where the harness can store data without interfering with the test</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HRN_PATH</name></cpp:macro>                                                    <cpp:value>"{[C_HRN_PATH]}"</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_STRING</name></cpp:ifdef>
    <expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>HRN_PATH_STR</name></expr></argument>, <argument><expr><name>HRN_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// User running the test</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_USER</name></cpp:macro>                                                   <cpp:value>"{[C_TEST_USER]}"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_USER_ID</name></cpp:macro>                                                <cpp:value>{[C_TEST_USER_ID]}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_USER_ID_Z</name></cpp:macro>                                              <cpp:value>"{[C_TEST_USER_ID]}"</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_STRING</name></cpp:ifdef>
    <expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>TEST_USER_STR</name></expr></argument>, <argument><expr><name>TEST_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Group running the test</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_GROUP</name></cpp:macro>                                                  <cpp:value>"{[C_TEST_GROUP]}"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_GROUP_ID</name></cpp:macro>                                               <cpp:value>{[C_TEST_GROUP_ID]}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_GROUP_ID_Z</name></cpp:macro>                                             <cpp:value>"{[C_TEST_GROUP_ID]}"</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_STRING</name></cpp:ifdef>
    <expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>TEST_GROUP_STR</name></expr></argument>, <argument><expr><name>TEST_GROUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// Scaling factor for performance tests</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_SCALE</name></cpp:macro>                                                  <cpp:value>{[C_TEST_SCALE]}</cpp:value></cpp:define>

<comment type="line">// Is this test running in a container?</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_IN_CONTAINER</name></cpp:macro>                                           <cpp:value>{[C_TEST_CONTAINER]}</cpp:value></cpp:define>

<comment type="line">// Path to source -- used to construct __FILENAME__ tests</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PGB_PATH</name></cpp:macro>                                               <cpp:value>"{[C_TEST_PGB_PATH]}"</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessDebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessTest.intern.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_LOG</name></cpp:ifdef>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessLog.h"</cpp:file></cpp:include>
    <function_decl><type><name>void</name></type> <name>harnessLogLevelDefaultSet</name><parameter_list>(<parameter><decl><type><name>LogLevel</name></type> <name>logLevel</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_MEMCONTEXT</name></cpp:ifdef>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/memContext.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_LOG</name></cpp:ifdef>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessLog.h"</cpp:file></cpp:include>
    <function_decl><type><name>void</name></type> <name>harnessLogLevelDefaultSet</name><parameter_list>(<parameter><decl><type><name>LogLevel</name></type> <name>logLevel</name></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content><expr><index>[<expr><name>C_TEST_INCLUDE</name></expr>]</index></expr></block_content>}</block>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Includes that are not generally used by tests
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HRN_INTEST_SOCKET</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HRN_FEATURE_SOCKET</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/socket/common.h"</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessServer.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_STAT</name></cpp:ifdef>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/stat.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_IN_STACKTRACE</name></cpp:ifdef>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/stackTrace.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
main - run the tests
***********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argListSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argList</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Basic sanity test on input parameters</comment>
    <if_stmt><if>if <condition>(<expr><name>argListSize</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>argList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"at least one argument expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Initialize stack trace for the harness</comment>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_INIT</name><argument_list>(<argument><expr><name><name>argList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>argListSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>CHARPY</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_ERROR</name></cpp:ifdef>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ErrorHandlerFunction</name></type> <name><name>handlerList</name><index>[]</index></name> <init>=
    <expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HRN_INTEST_STACKTRACE</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HRN_FEATURE_STACKTRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr><name>stackTraceClean</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HRN_INTEST_MEMCONTEXT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HRN_FEATURE_MEMCONTEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr><name>memContextClean</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>errorHandlerSet</name><argument_list>(<argument><expr><name>handlerList</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>handlerList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Initialize statistics</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HRN_INTEST_STAT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HRN_FEATURE_STAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>statInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Set neutral umask for testing</comment>
    <expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><literal type="number">0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set timezone if specified</comment>
    <block>{<block_content><expr><index>[<expr><name>C_TEST_TZ</name></expr>]</index></expr></block_content>}</block>

    <comment type="line">// Ignore SIGPIPE and check for EPIPE errors on write() instead</comment>
    <expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set globals</comment>
    <macro><name>hrnInit</name><argument_list>(
        <argument>argList[<literal type="number">0</literal>]</argument>,                 <comment type="line">// Test exe</comment>
        <argument>TEST_PROJECT_EXE</argument>,           <comment type="line">// Project exe</comment>
        <argument>TEST_IN_CONTAINER</argument>,          <comment type="line">// Is this test running in a container?</comment>
        <argument>{[C_TEST_IDX]}</argument>,             <comment type="line">// The 0-based index of this test</comment>
        <argument>{[C_TEST_TIMING]}</argument>,          <comment type="line">// Is timing enabled (may be disabled for reproducible documentation)</comment>
        <argument>TEST_PATH</argument>,                  <comment type="line">// Path where tests write data</comment>
        <argument>HRN_PATH</argument>,                   <comment type="line">// Path where the harness stores temp files (expect, diff, etc.)</comment>
        <argument>HRN_PATH_REPO</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>             <comment type="line">// Path with a copy of the repository</comment>

    <comment type="line">// Set default test log level</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_LOG</name></cpp:ifdef>
    <macro><name>harnessLogLevelDefaultSet</name><argument_list>(<argument>{[C_LOG_LEVEL_TEST]}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Use aggressive keep-alive settings for testing</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HRN_INTEST_SOCKET</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HRN_FEATURE_SOCKET</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><call><name>sckInit</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnServerInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Initialize tests</comment>
    <comment type="line">//     run, selected</comment>
    <block>{<block_content><expr><index>[<expr><name>C_TEST_LIST</name></expr>]</index></expr></block_content>}</block>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_ERROR</name></cpp:ifdef>
    <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_MEMCONTEXT</name></cpp:ifdef>
            <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <comment type="line">// Run the tests</comment>
                <expr_stmt><expr><call><name>testRun</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_MEMCONTEXT</name></cpp:ifdef>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_ERROR</name></cpp:ifdef>
        </block_content>}</block>
        <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// If a test was running then throw a detailed result exception</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>errorInstanceOf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestError</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr_stmt><expr><call><name>hrnTestResultException</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Else rethrow the original error</comment>
            <expr_stmt><expr><call><name>RETHROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">// End test run and make sure all tests completed</comment>
        <expr_stmt><expr><call><name>hrnComplete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTESTS COMPLETED SUCCESSFULLY\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_ERROR</name></cpp:ifdef>
    </block_content>}</block>
    <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Make the error really obvious</comment>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(
            <argument><expr><name>stderr</name></expr></argument>,
            <argument><expr><literal type="string">"\nTEST FAILED WITH %s:\n\n"</literal>
                <literal type="string">"--------------------------------------------------------------------------------\n"</literal>
                <literal type="string">"%s\n"</literal>
                <literal type="string">"--------------------------------------------------------------------------------\n"</literal></expr></argument>,
            <argument><expr><call><name>errorName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// If not a TestError (which is detailed) then also print the stack trace</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>errorInstanceOf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestError</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nTHROWN AT:\n%s\n"</literal></expr></argument>, <argument><expr><call><name>errorStackTrace</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>errorCode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_MEMCONTEXT</name></cpp:ifdef>
    <macro><name>FINALLY</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memContextFree</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Switch to build path when profiling so profile data gets written to a predictable location</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><block>{<expr><index>[<expr><name>C_TEST_PROFILE</name></expr>]</index></expr>}</block></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr><literal type="string">"{[C_TEST_PATH_BUILD]}"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unable to chdir to '{[C_TEST_PATH_BUILD]}'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
