<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/config/load.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Configuration Load
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Load log settings
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cfgLoadLogSetting</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Initialize logging</comment>
    <decl_stmt><decl><type><name>LogLevel</name></type> <name>logLevelConsole</name> <init>= <expr><name>logLevelOff</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>logTimestamp</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptLogLevel</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logLevelConsole</name> <operator>=</operator> <call><name>logLevelEnum</name><argument_list>(<argument><expr><call><name>cfgOptionStrId</name><argument_list>(<argument><expr><name>cfgOptLogLevel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptLogTimestamp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logTimestamp</name> <operator>=</operator> <call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptLogTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>logInit</name><argument_list>(<argument><expr><name>logLevelConsole</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><name>logTimestamp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Update options that have complex rules
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cfgLoadUpdateOption</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Get current working dir</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>currentWorkDir</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>getcwd</name><argument_list>(<argument><expr><name>currentWorkDir</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>currentWorkDir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"unable to get cwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Invalidate config option so it does not show up in option list</comment>
    <expr_stmt><expr><call><name>cfgOptionInvalidate</name><argument_list>(<argument><expr><name>cfgOptConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If repo-path is relative then make it absolute</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>repoPath</name> <init>= <expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptRepoPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strBeginsWithZ</name><argument_list>(<argument><expr><name>repoPath</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptRepoPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>currentWorkDir</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// If test-path is relative then make it absolute</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>testPath</name> <init>= <expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptTestPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strBeginsWithZ</name><argument_list>(<argument><expr><name>testPath</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptTestPath</name></expr></argument>, <argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptTestPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>currentWorkDir</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>testPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cfgLoad</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>argListSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argList</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>argListSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>CHARPY</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Make a copy of the arguments so they can be manipulated</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>argListNew</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>argListIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>argListIdx</name> <operator>&lt;</operator> <name>argListSize</name></expr>;</condition> <incr><expr><name>argListIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argListNew</name></expr></argument>, <argument><expr><name><name>argList</name><index>[<expr><name>argListIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// Explicitly set --no-config so a stray config file will not be loaded</comment>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argListNew</name></expr></argument>, <argument><expr><literal type="string">"--no-"</literal> <name>CFGOPT_CONFIG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Parse config from command line</comment>
        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>configParse</name><argument_list>(<argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argListNew</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argListNew</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH</name><argument_list>(<argument>CommandRequiredError</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argListNew</name></expr></argument>, <argument><expr><name>CFGCMD_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>configParse</name><argument_list>(<argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argListNew</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argListNew</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Error on noop command. This command is required to hold options that must be declared but are unused by test.</comment>
        <if_stmt><if>if <condition>(<expr><call><name>cfgCommand</name><argument_list>()</argument_list></call> <operator>==</operator> <name>cfgCmdNoop</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>CommandInvalidError</name></expr></argument>, <argument><expr><literal type="string">"invalid command '"</literal> <name>CFGCMD_NOOP</name> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// If a command is set</comment>
        <if_stmt><if>if <condition>(<expr><call><name>cfgCommand</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>cfgCmdNone</name> <operator>&amp;&amp;</operator> <call><name>cfgCommand</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>cfgCmdHelp</name> <operator>&amp;&amp;</operator> <call><name>cfgCommand</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>cfgCmdVersion</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Load the log settings</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cfgCommandHelp</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>cfgLoadLogSetting</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Neutralize the umask to make the repository file/path modes more consistent</comment>
            <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptNeutralUmask</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptNeutralUmask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><literal type="number">0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Set IO buffer size</comment>
            <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptBufferSize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ioBufferSizeSet</name><argument_list>(<argument><expr><call><name>cfgOptionUInt</name><argument_list>(<argument><expr><name>cfgOptBufferSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Update options that have complex rules</comment>
            <expr_stmt><expr><call><name>cfgLoadUpdateOption</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Begin the command</comment>
            <expr_stmt><expr><call><name>cmdBegin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
