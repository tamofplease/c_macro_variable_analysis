<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/common/harnessPq.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Pq Test Harness
***********************************************************************************************************************************/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libpq-fe.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/variantList.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessTest.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Pq shim error prefix
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PQ_ERROR_PREFIX</name></cpp:macro>                                             <cpp:value>"PQ SHIM ERROR"</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Script that defines how shim functions operate
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><name>HarnessPq</name></type> <name><name>harnessPqScript</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>harnessPqScriptDone</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>harnessPqScriptIdx</name></decl>;</decl_stmt>

<comment type="line">// Is PQfinish scripting required?</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>harnessPqStrict</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="line">// If there is a script failure change the behavior of cleanup functions to return immediately so the real error will be reported</comment>
<comment type="line">// rather than a bogus scripting error during cleanup</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>harnessPqScriptFail</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>harnessPqScriptError</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Set pq script
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>harnessPqScriptSet</name><parameter_list>(<parameter><decl><type><name>HarnessPq</name> <modifier>*</modifier></type><name>harnessPqScriptParam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>harnessPqScriptDone</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"previous pq script has not yet completed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>harnessPqScriptParam</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>function</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"pq script must have entries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Copy records into local storage</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>copyIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name><name>harnessPqScriptParam</name><index>[<expr><name>copyIdx</name></expr>]</index></name><operator>.</operator><name>function</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>harnessPqScript</name><index>[<expr><name>copyIdx</name></expr>]</index></name> <operator>=</operator> <name><name>harnessPqScriptParam</name><index>[<expr><name>copyIdx</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>copyIdx</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>harnessPqScript</name><index>[<expr><name>copyIdx</name></expr>]</index></name><operator>.</operator><name>function</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>harnessPqScriptDone</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>harnessPqScriptIdx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>harnessPqScriptStrictSet</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>strict</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>harnessPqStrict</name> <operator>=</operator> <name>strict</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Run pq script
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>HarnessPq</name> <modifier>*</modifier></type>
<name>harnessPqScriptRun</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>function</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>VariantList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HarnessPq</name> <modifier>*</modifier><specifier>const</specifier></type> <name>parent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// If an error has already been thrown then throw the same error again</comment>
    <if_stmt><if>if <condition>(<expr><name>harnessPqScriptFail</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>harnessPqScriptError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Convert params to json for comparison and reporting</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>paramStr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>param</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Variant</name> <modifier>*</modifier><specifier>const</specifier></type> <name>varList</name> <init>= <expr><call><name>varNewVarLst</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>paramStr</name> <operator>=</operator> <call><name>jsonFromVar</name><argument_list>(<argument><expr><name>varList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>varFree</name><argument_list>(<argument><expr><name>varList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>paramStr</name> <operator>=</operator> <call><name>strNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="line">// Ensure script has not ended</comment>
    <if_stmt><if>if <condition>(<expr><name>harnessPqScriptDone</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>harnessPqScriptError</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>harnessPqScriptError</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"pq script ended before %s (%s)"</literal></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>paramStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_LOG_FMT</name><argument_list>(<argument><expr><name>PQ_ERROR_PREFIX</name> <literal type="string">": %s"</literal></expr></argument>, <argument><expr><name>harnessPqScriptError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>harnessPqScriptFail</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>harnessPqScriptError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Get current script item</comment>
    <decl_stmt><decl><type><name>HarnessPq</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><operator>&amp;</operator><name><name>harnessPqScript</name><index>[<expr><name>harnessPqScriptIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Check that expected function was called</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>function</name></name></expr></argument>, <argument><expr><name>function</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(
            <argument><expr><name>harnessPqScriptError</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>harnessPqScriptError</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"pq script [%u] expected function %s (%s) but got %s (%s)"</literal></expr></argument>,
            <argument><expr><name>harnessPqScriptIdx</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>function</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>result</name><operator>-&gt;</operator><name>param</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name><name>result</name><operator>-&gt;</operator><name>param</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>function</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>paramStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_LOG_FMT</name><argument_list>(<argument><expr><name>PQ_ERROR_PREFIX</name> <literal type="string">": %s"</literal></expr></argument>, <argument><expr><name>harnessPqScriptError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>harnessPqScriptFail</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <comment type="line">// Return without error if closing the connection and an error is currently being thrown. Errors outside of the pq shim can</comment>
        <comment type="line">// cause the connection to be cleaned up and we don't want to mask those errors. However, the failure is still logged and</comment>
        <comment type="line">// any subsequent call to the pq shim will result in an error.</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>function</name></expr></argument>, <argument><expr><name>HRNPQ_FINISH</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>errorType</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>harnessPqScriptError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Check that parameters match</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>param</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>-&gt;</operator><name>param</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>param</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>-&gt;</operator><name>param</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
        <operator>(</operator><name>param</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>-&gt;</operator><name>param</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strEqZ</name><argument_list>(<argument><expr><name>paramStr</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>param</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(
            <argument><expr><name>harnessPqScriptError</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>harnessPqScriptError</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"pq script [%u] function '%s', expects param '%s' but got '%s'"</literal></expr></argument>,
            <argument><expr><name>harnessPqScriptIdx</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>function</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>result</name><operator>-&gt;</operator><name>param</name></name></expr> ?</condition><then> <expr><name><name>result</name><operator>-&gt;</operator><name>param</name></name></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>param</name></expr> ?</condition><then> <expr><call><name>strZ</name><argument_list>(<argument><expr><name>paramStr</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_LOG_FMT</name><argument_list>(<argument><expr><name>PQ_ERROR_PREFIX</name> <literal type="string">": %s"</literal></expr></argument>, <argument><expr><name>harnessPqScriptError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>harnessPqScriptFail</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>harnessPqScriptError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Make sure the session matches with the parent as a sanity check</comment>
    <if_stmt><if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>-&gt;</operator><name>session</name></name> <operator>!=</operator> <name><name>parent</name><operator>-&gt;</operator><name>session</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(
            <argument><expr><name>harnessPqScriptError</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>harnessPqScriptError</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"pq script [%u] function '%s', expects session '%u' but got '%u'"</literal></expr></argument>,
            <argument><expr><name>harnessPqScriptIdx</name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>function</name></name></expr></argument>, <argument><expr><name><name>result</name><operator>-&gt;</operator><name>session</name></name></expr></argument>, <argument><expr><name><name>parent</name><operator>-&gt;</operator><name>session</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_LOG_FMT</name><argument_list>(<argument><expr><name>PQ_ERROR_PREFIX</name> <literal type="string">": %s"</literal></expr></argument>, <argument><expr><name>harnessPqScriptError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>harnessPqScriptFail</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>harnessPqScriptError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Sleep if requested</comment>
    <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>sleep</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sleepMSec</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>sleep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>harnessPqScriptIdx</name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>harnessPqScript</name><index>[<expr><name>harnessPqScriptIdx</name></expr>]</index></name><operator>.</operator><name>function</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>harnessPqScriptDone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>strFree</name><argument_list>(<argument><expr><name>paramStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQconnectdb()
***********************************************************************************************************************************/</comment>
<function><type><name>PGconn</name> <modifier>*</modifier></type><name>PQconnectdb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>conninfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>PGconn</name> <operator>*</operator><operator>)</operator><call><name>harnessPqScriptRun</name><argument_list>(<argument><expr><name>HRNPQ_CONNECTDB</name></expr></argument>, <argument><expr><call><name>varLstAdd</name><argument_list>(<argument><expr><call><name>varLstNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>varNewStrZ</name><argument_list>(<argument><expr><name>conninfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQstatus()
***********************************************************************************************************************************/</comment>
<function><type><name>ConnStatusType</name></type> <name>PQstatus</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>ConnStatusType</name><operator>)</operator><call><name>harnessPqScriptRun</name><argument_list>(<argument><expr><name>HRNPQ_STATUS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>conn</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>resultInt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQerrorMessage()
***********************************************************************************************************************************/</comment>
<function><type><name>char</name> <modifier>*</modifier></type><name>PQerrorMessage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>harnessPqScriptRun</name><argument_list>(<argument><expr><name>HRNPQ_ERRORMESSAGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>conn</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>resultZ</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQsetNoticeProcessor()
***********************************************************************************************************************************/</comment>
<function><type><name>PQnoticeProcessor</name></type>
<name>PQsetNoticeProcessor</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><name>PQnoticeProcessor</name></type> <name>proc</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>conn</name></expr>;</expr_stmt>

    <comment type="line">// Call the processor that was passed so we have coverage</comment>
    <expr_stmt><expr><call><name>proc</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"test notice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQsendQuery()
***********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>PQsendQuery</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>harnessPqScriptRun</name><argument_list>(<argument><expr><name>HRNPQ_SENDQUERY</name></expr></argument>, <argument><expr><call><name>varLstAdd</name><argument_list>(<argument><expr><call><name>varLstNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>varNewStrZ</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>conn</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>resultInt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQconsumeInput()
***********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>PQconsumeInput</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>harnessPqScriptRun</name><argument_list>(<argument><expr><name>HRNPQ_CONSUMEINPUT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>conn</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>resultInt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQisBusy()
***********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>PQisBusy</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>harnessPqScriptRun</name><argument_list>(<argument><expr><name>HRNPQ_ISBUSY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>conn</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>resultInt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQgetCancel()
***********************************************************************************************************************************/</comment>
<function><type><name>PGcancel</name> <modifier>*</modifier></type>
<name>PQgetCancel</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>HarnessPq</name> <modifier>*</modifier></type><name>harnessPq</name> <init>= <expr><call><name>harnessPqScriptRun</name><argument_list>(<argument><expr><name>HRNPQ_GETCANCEL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name><name>harnessPq</name><operator>-&gt;</operator><name>resultNull</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name>PGcancel</name> <operator>*</operator><operator>)</operator><name>harnessPq</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQcancel()
***********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>PQcancel</name><parameter_list>(<parameter><decl><type><name>PGcancel</name> <modifier>*</modifier></type><name>cancel</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>HarnessPq</name> <modifier>*</modifier></type><name>harnessPq</name> <init>= <expr><call><name>harnessPqScriptRun</name><argument_list>(<argument><expr><name>HRNPQ_CANCEL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>cancel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>harnessPq</name><operator>-&gt;</operator><name>resultInt</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><name><name>harnessPq</name><operator>-&gt;</operator><name>resultZ</name></name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>errbufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>errbuf</name><index>[<expr><name>errbufsize</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name><name>harnessPq</name><operator>-&gt;</operator><name>resultInt</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQfreeCancel()
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>PQfreeCancel</name><parameter_list>(<parameter><decl><type><name>PGcancel</name> <modifier>*</modifier></type><name>cancel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>harnessPqScriptRun</name><argument_list>(<argument><expr><name>HRNPQ_FREECANCEL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>cancel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQgetResult()
***********************************************************************************************************************************/</comment>
<function><type><name>PGresult</name> <modifier>*</modifier></type>
<name>PQgetResult</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>harnessPqScriptFail</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>HarnessPq</name> <modifier>*</modifier></type><name>harnessPq</name> <init>= <expr><call><name>harnessPqScriptRun</name><argument_list>(<argument><expr><name>HRNPQ_GETRESULT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>conn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><ternary><condition><expr><name><name>harnessPq</name><operator>-&gt;</operator><name>resultNull</name></name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><operator>(</operator><name>PGresult</name> <operator>*</operator><operator>)</operator><name>harnessPq</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQresultStatus()
***********************************************************************************************************************************/</comment>
<function><type><name>ExecStatusType</name></type>
<name>PQresultStatus</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>ExecStatusType</name><operator>)</operator><call><name>harnessPqScriptRun</name><argument_list>(<argument><expr><name>HRNPQ_RESULTSTATUS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>resultInt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQresultErrorMessage()
***********************************************************************************************************************************/</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>PQresultErrorMessage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>harnessPqScriptRun</name><argument_list>(<argument><expr><name>HRNPQ_RESULTERRORMESSAGE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>resultZ</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQntuples()
***********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>PQntuples</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>harnessPqScriptRun</name><argument_list>(<argument><expr><name>HRNPQ_NTUPLES</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>resultInt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQnfields()
***********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>PQnfields</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>harnessPqScriptRun</name><argument_list>(<argument><expr><name>HRNPQ_NFIELDS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>resultInt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQgetisnull()
***********************************************************************************************************************************/</comment>
<function><type><name>int</name></type>
<name>PQgetisnull</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tup_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>harnessPqScriptRun</name><argument_list>(
        <argument><expr><name>HRNPQ_GETISNULL</name></expr></argument>, <argument><expr><call><name>varLstAdd</name><argument_list>(<argument><expr><call><name>varLstAdd</name><argument_list>(<argument><expr><call><name>varLstNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><name>tup_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><name>field_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>resultInt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQftype()
***********************************************************************************************************************************/</comment>
<function><type><name>Oid</name></type>
<name>PQftype</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>Oid</name><operator>)</operator><call><name>harnessPqScriptRun</name><argument_list>(<argument><expr><name>HRNPQ_FTYPE</name></expr></argument>, <argument><expr><call><name>varLstAdd</name><argument_list>(<argument><expr><call><name>varLstNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><name>field_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>resultInt</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQgetvalue()
***********************************************************************************************************************************/</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>PQgetvalue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tup_num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field_num</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>harnessPqScriptRun</name><argument_list>(
        <argument><expr><name>HRNPQ_GETVALUE</name></expr></argument>, <argument><expr><call><name>varLstAdd</name><argument_list>(<argument><expr><call><name>varLstAdd</name><argument_list>(<argument><expr><call><name>varLstNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><name>tup_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><name>field_num</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>resultZ</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQclear()
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>PQclear</name><parameter_list>(<parameter><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>res</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>harnessPqScriptFail</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>harnessPqScriptRun</name><argument_list>(<argument><expr><name>HRNPQ_CLEAR</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim for PQfinish()
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type> <name>PQfinish</name><parameter_list>(<parameter><decl><type><name>PGconn</name> <modifier>*</modifier></type><name>conn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>harnessPqStrict</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>harnessPqScriptFail</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>harnessPqScriptRun</name><argument_list>(<argument><expr><name>HRNPQ_FINISH</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>HarnessPq</name> <operator>*</operator><operator>)</operator><name>conn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HARNESS_PQ_REAL</comment>
</unit>
