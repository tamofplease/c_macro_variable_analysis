<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/common/harnessConfig.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Harness for Loading Test Configurations
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/load.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessDebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessTest.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>hrnCfgLoad</name><parameter_list>(<parameter><decl><type><name>ConfigCommand</name></type> <name>commandId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier></type><name>argListParam</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HrnCfgLoadParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>commandId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRING_LIST</name></expr></argument>, <argument><expr><name>argListParam</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>role</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>exeBogus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>noStd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>jobRetry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make a copy of the arg list that we can modify</comment>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argListParam</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add standard options needed in most cases</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>param</name><operator>.</operator><name>noStd</name></name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Set job retry to 0 if it is valid</comment>
        <if_stmt><if>if <condition>(<expr><call><name>cfgParseOptionValid</name><argument_list>(<argument><expr><name>commandId</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>role</name></name></expr></argument>, <argument><expr><name>cfgOptJobRetry</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strLstInsert</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"--"</literal> <name>CFGOPT_JOB_RETRY</name> <literal type="string">"=%u"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>jobRetry</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Set log path if valid</comment>
        <if_stmt><if>if <condition>(<expr><call><name>cfgParseOptionValid</name><argument_list>(<argument><expr><name>commandId</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>role</name></name></expr></argument>, <argument><expr><name>cfgOptLogPath</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strLstInsert</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"--"</literal> <name>CFGOPT_LOG_PATH</name> <literal type="string">"=%s"</literal></expr></argument>, <argument><expr><call><name>hrnPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Set lock path if valid</comment>
        <if_stmt><if>if <condition>(<expr><call><name>cfgParseOptionValid</name><argument_list>(<argument><expr><name>commandId</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>role</name></name></expr></argument>, <argument><expr><name>cfgOptLockPath</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strLstInsert</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"--"</literal> <name>CFGOPT_LOCK_PATH</name> <literal type="string">"=%s/lock"</literal></expr></argument>, <argument><expr><call><name>hrnPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Insert the command so it does not interfere with parameters</comment>
    <if_stmt><if>if <condition>(<expr><name>commandId</name> <operator>!=</operator> <name>cfgCmdNone</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strLstInsert</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cfgParseCommandRoleName</name><argument_list>(<argument><expr><name>commandId</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>role</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Insert the project exe</comment>
    <expr_stmt><expr><call><name>strLstInsert</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>exeBogus</name></name></expr> ?</condition><then> <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pgbackrest-bogus"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>STRDEF</name><argument_list>(<argument><expr><call><name>testProjectExe</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Log parameters</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>log</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"config load:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>argIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>argIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>argIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>argIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>hrnTestResultComment</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Free objects in storage helper</comment>
    <expr_stmt><expr><call><name>storageHelperFree</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Parse config</comment>
    <expr_stmt><expr><call><name>configParse</name><argument_list>(<argument><expr><call><name>storageLocal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set dry-run mode for storage and logging</comment>
    <expr_stmt><expr><call><name>harnessLogDryRunSet</name><argument_list>(<argument><expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptDryRun</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptDryRun</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>storageHelperDryRunInit</name><argument_list>(<argument><expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptDryRun</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptDryRun</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Apply special option rules</comment>
    <expr_stmt><expr><call><name>cfgLoadUpdateOption</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set buffer size when it is specified explicitly -- otherwise the module default will be used. Note that this is *not* the</comment>
    <comment type="line">// configuration default, which is much larger.</comment>
    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionTest</name><argument_list>(<argument><expr><name>cfgOptBufferSize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ioBufferSizeSet</name><argument_list>(<argument><expr><call><name>cfgOptionUInt</name><argument_list>(<argument><expr><name>cfgOptBufferSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Use a static exec-id for testing if it is not set explicitly</comment>
    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptExecId</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>cfgOptionTest</name><argument_list>(<argument><expr><name>cfgOptExecId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptExecId</name></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"1-test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>hrnCfgArgRaw</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name></decl></parameter>, <parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgArgKeyRaw</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name></decl></parameter>, <parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>optionKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionKey</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgArgRawFmt</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name></decl></parameter>, <parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>va_list</name></type> <name>argument</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argument</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgArgKeyRawFmt</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name></decl></parameter>, <parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>optionKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>va_list</name></type> <name>argument</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>argument</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>argument</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionKey</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgArgRawZ</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name></decl></parameter>, <parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgArgKeyRawZ</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name></decl></parameter>, <parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>optionKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>strLstAddFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--%s=%s"</literal></expr></argument>, <argument><expr><call><name>cfgParseOptionKeyIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionKey</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgArgRawStrId</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name></decl></parameter>, <parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>StringId</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>hrnCfgArgKeyRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgArgKeyRawStrId</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name></decl></parameter>, <parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>optionKey</name></decl></parameter>, <parameter><decl><type><name>StringId</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRID_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strIdToZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionKey</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgArgRawBool</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name></decl></parameter>, <parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>hrnCfgArgKeyRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgArgKeyRawBool</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name></decl></parameter>, <parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>optionKey</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>strLstAddFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>value</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"no-"</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>cfgParseOptionKeyIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionKey</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgArgRawNegate</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name></decl></parameter>, <parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>hrnCfgArgKeyRawNegate</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgArgKeyRawNegate</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name></decl></parameter>, <parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>optionKey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>strLstAddFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--no-%s"</literal></expr></argument>, <argument><expr><call><name>cfgParseOptionKeyIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionKey</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgArgRawReset</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name></decl></parameter>, <parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>hrnCfgArgKeyRawReset</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgArgKeyRawReset</name><parameter_list>(<parameter><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name></decl></parameter>, <parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>optionKey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>strLstAddFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--reset-%s"</literal></expr></argument>, <argument><expr><call><name>cfgParseOptionKeyIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionKey</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>FN_INLINE_ALWAYS</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>hrnCfgEnvName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>optionKey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strZ</name><argument_list>(
        <argument><expr><call><name>strReplaceChr</name><argument_list>(<argument><expr><call><name>strUpper</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>HRN_PGBACKREST_ENV</name> <literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>cfgParseOptionKeyIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionKey</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgEnvRaw</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>hrnCfgEnvKeyRawZ</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgEnvKeyRaw</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>optionKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>hrnCfgEnvKeyRawZ</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionKey</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgEnvRawZ</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>hrnCfgEnvKeyRawZ</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgEnvKeyRawZ</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>optionKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><call><name>hrnCfgEnvName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionKey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgEnvRemoveRaw</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>hrnCfgEnvKeyRemoveRaw</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnCfgEnvKeyRemoveRaw</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>optionKey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>unsetenv</name><argument_list>(<argument><expr><call><name>hrnCfgEnvName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
