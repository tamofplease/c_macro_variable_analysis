<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/common/harnessProtocol.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Harness for Protocol Testing
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/fork.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessDebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessProtocol.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Include shimmed C modules
***********************************************************************************************************************************/</comment>
<block>{<block_content><expr><index>[<expr><name>SHIM_MODULE</name></expr>]</index></expr></block_content>}</block>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim install state
***********************************************************************************************************************************/</comment>
<struct><specifier>static</specifier> struct
<block>{
    <comment type="line">// Local process shim</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>localShim</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ProtocolServerHandler</name> <modifier>*</modifier></type><name>localHandlerList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>localHandlerListSize</name></decl>;</decl_stmt>

    <comment type="line">// Remote process shim</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>remoteShim</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>ProtocolServerHandler</name> <modifier>*</modifier></type><name>remoteHandlerList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>remoteHandlerListSize</name></decl>;</decl_stmt>
}</block> <decl><name>hrnProtocolStatic</name></decl>;</struct>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Cleanup all clients inherited from the parent process so they cannot be accidentally used to send messages to servers that do not
belong to this process. We need to do this carefully so that exit commands are not sent and processes are not terminated, so clear
the mem context callback on each object before freeing it.
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>hrnProtocolClientCleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>protocolHelper</name><operator>.</operator><name>memContext</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Cleanup remotes</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>clientIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientIdx</name> <operator>&lt;</operator> <name><name>protocolHelper</name><operator>.</operator><name>clientRemoteSize</name></name></expr>;</condition> <incr><expr><name>clientIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// Cleanup remote client</comment>
            <if_stmt><if>if <condition>(<expr><name><name>protocolHelper</name><operator>.</operator><name>clientRemote</name><index>[<expr><name>clientIdx</name></expr>]</index></name><operator>.</operator><name>client</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>memContextCallbackClear</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name><name>protocolHelper</name><operator>.</operator><name>clientRemote</name><index>[<expr><name>clientIdx</name></expr>]</index></name><operator>.</operator><name>client</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>protocolClientFree</name><argument_list>(<argument><expr><name><name>protocolHelper</name><operator>.</operator><name>clientRemote</name><index>[<expr><name>clientIdx</name></expr>]</index></name><operator>.</operator><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>protocolHelper</name><operator>.</operator><name>clientRemote</name><index>[<expr><name>clientIdx</name></expr>]</index></name><operator>.</operator><name>client</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Cleanup remote exec</comment>
            <if_stmt><if>if <condition>(<expr><name><name>protocolHelper</name><operator>.</operator><name>clientRemote</name><index>[<expr><name>clientIdx</name></expr>]</index></name><operator>.</operator><name>exec</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>memContextCallbackClear</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name><name>protocolHelper</name><operator>.</operator><name>clientRemote</name><index>[<expr><name>clientIdx</name></expr>]</index></name><operator>.</operator><name>exec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>execFree</name><argument_list>(<argument><expr><name><name>protocolHelper</name><operator>.</operator><name>clientRemote</name><index>[<expr><name>clientIdx</name></expr>]</index></name><operator>.</operator><name>exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>protocolHelper</name><operator>.</operator><name>clientRemote</name><index>[<expr><name>clientIdx</name></expr>]</index></name><operator>.</operator><name>exec</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="line">// Cleanup locals</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>clientIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientIdx</name> <operator>&lt;</operator> <name><name>protocolHelper</name><operator>.</operator><name>clientLocalSize</name></name></expr>;</condition> <incr><expr><name>clientIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// Cleanup local client</comment>
            <if_stmt><if>if <condition>(<expr><name><name>protocolHelper</name><operator>.</operator><name>clientLocal</name><index>[<expr><name>clientIdx</name></expr>]</index></name><operator>.</operator><name>client</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>memContextCallbackClear</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name><name>protocolHelper</name><operator>.</operator><name>clientLocal</name><index>[<expr><name>clientIdx</name></expr>]</index></name><operator>.</operator><name>client</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>protocolClientFree</name><argument_list>(<argument><expr><name><name>protocolHelper</name><operator>.</operator><name>clientLocal</name><index>[<expr><name>clientIdx</name></expr>]</index></name><operator>.</operator><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>protocolHelper</name><operator>.</operator><name>clientLocal</name><index>[<expr><name>clientIdx</name></expr>]</index></name><operator>.</operator><name>client</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Cleanup local exec</comment>
            <if_stmt><if>if <condition>(<expr><name><name>protocolHelper</name><operator>.</operator><name>clientLocal</name><index>[<expr><name>clientIdx</name></expr>]</index></name><operator>.</operator><name>exec</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>memContextCallbackClear</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name><name>protocolHelper</name><operator>.</operator><name>clientLocal</name><index>[<expr><name>clientIdx</name></expr>]</index></name><operator>.</operator><name>exec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>execFree</name><argument_list>(<argument><expr><name><name>protocolHelper</name><operator>.</operator><name>clientLocal</name><index>[<expr><name>clientIdx</name></expr>]</index></name><operator>.</operator><name>exec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>protocolHelper</name><operator>.</operator><name>clientLocal</name><index>[<expr><name>clientIdx</name></expr>]</index></name><operator>.</operator><name>exec</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim protocolLocalExec() to provide coverage as detailed in the hrnProtocolLocalShimInstall() documentation.
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>protocolLocalExec</name><parameter_list>(
    <parameter><decl><type><name>ProtocolHelperClient</name> <modifier>*</modifier></type><name>helper</name></decl></parameter>, <parameter><decl><type><name>ProtocolStorageType</name></type> <name>protocolStorageType</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hostIdx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>processId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Call the shim when installed</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hrnProtocolStatic</name><operator>.</operator><name>localShim</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>protocolStorageType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>hostIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pipes to communicate with the subprocess. The names of the pipes are from the perspective of the parent process</comment>
        <comment type="line">// since the child process will use them only briefly before exec'ing.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name><name>pipeRead</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>pipeWrite</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>pipe</name><argument_list>(<argument><expr><name>pipeRead</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>KernelError</name></expr></argument>, <argument><expr><literal type="string">"unable to create read pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>pipe</name><argument_list>(<argument><expr><name>pipeWrite</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>KernelError</name></expr></argument>, <argument><expr><literal type="string">"unable to create write pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Exec command in the child process</comment>
        <if_stmt><if>if <condition>(<expr><call><name>forkSafe</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Cleanup inherited clients</comment>
            <expr_stmt><expr><call><name>hrnProtocolClientCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Load configuration</comment>
            <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>paramList</name> <init>= <expr><call><name>protocolLocalParam</name><argument_list>(<argument><expr><name>protocolStorageType</name></expr></argument>, <argument><expr><name>hostIdx</name></expr></argument>, <argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>hrnCfgLoadP</name><argument_list>(<argument><expr><name>cfgCmdNone</name></expr></argument>, <argument><expr><name>paramList</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Change log process id to aid in debugging</comment>
            <expr_stmt><expr><call><name>hrnLogProcessIdSet</name><argument_list>(<argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Run server with provided handlers</comment>
            <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>PROTOCOL_SERVICE_LOCAL</name> <literal type="string">"-shim-%u"</literal></expr></argument>, <argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ProtocolServer</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><call><name>protocolServerNew</name><argument_list>(
                <argument><expr><name>name</name></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_LOCAL_STR</name></expr></argument>, <argument><expr><call><name>ioFdReadNewOpen</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pipeWrite</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pipeRead</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>protocolServerProcess</name><argument_list>(
                <argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>cfgCommandJobRetry</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>hrnProtocolStatic</name><operator>.</operator><name>localHandlerList</name></name></expr></argument>, <argument><expr><name><name>hrnProtocolStatic</name><operator>.</operator><name>localHandlerListSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Exit when done</comment>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Close the unused file descriptors</comment>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipeRead</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipeWrite</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create protocol object</comment>
        <expr_stmt><expr><name><name>helper</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <call><name>protocolClientNew</name><argument_list>(
            <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>PROTOCOL_SERVICE_LOCAL</name> <literal type="string">"-%u shim protocol"</literal></expr></argument>, <argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_LOCAL_STR</name></expr></argument>,
            <argument><expr><call><name>ioFdReadNewOpen</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>PROTOCOL_SERVICE_LOCAL</name> <literal type="string">"-%u shim protocol read"</literal></expr></argument>, <argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pipeRead</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>PROTOCOL_SERVICE_LOCAL</name> <literal type="string">"-%u shim protocol write"</literal></expr></argument>, <argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pipeWrite</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Send one noop to catch any errors that might happen after the greeting</comment>
        <expr_stmt><expr><call><name>protocolClientNoOp</name><argument_list>(<argument><expr><name><name>helper</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// Else call the base function</comment>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>protocolLocalExec_SHIMMED</name><argument_list>(<argument><expr><name>helper</name></expr></argument>, <argument><expr><name>protocolStorageType</name></expr></argument>, <argument><expr><name>hostIdx</name></expr></argument>, <argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>hrnProtocolLocalShimInstall</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProtocolServerHandler</name> <modifier>*</modifier><specifier>const</specifier></type> <name>handlerList</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>handlerListSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>handlerList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>handlerListSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hrnProtocolStatic</name><operator>.</operator><name>localShim</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrnProtocolStatic</name><operator>.</operator><name>localHandlerList</name></name> <operator>=</operator> <name>handlerList</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrnProtocolStatic</name><operator>.</operator><name>localHandlerListSize</name></name> <operator>=</operator> <name>handlerListSize</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>hrnProtocolLocalShimUninstall</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hrnProtocolStatic</name><operator>.</operator><name>localShim</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Shim protocolRemoteExec() to provide coverage as detailed in the hrnProtocolRemoteShimInstall() documentation.
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>protocolRemoteExec</name><parameter_list>(
    <parameter><decl><type><name>ProtocolHelperClient</name> <modifier>*</modifier></type><name>helper</name></decl></parameter>, <parameter><decl><type><name>ProtocolStorageType</name></type> <name>protocolStorageType</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>hostIdx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>processId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Call the shim when installed</comment>
    <if_stmt><if>if <condition>(<expr><name><name>hrnProtocolStatic</name><operator>.</operator><name>remoteShim</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>protocolStorageType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>hostIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pipes to communicate with the subprocess. The names of the pipes are from the perspective of the parent process</comment>
        <comment type="line">// since the child process will use them only briefly before exec'ing.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name><name>pipeRead</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>pipeWrite</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>pipe</name><argument_list>(<argument><expr><name>pipeRead</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>KernelError</name></expr></argument>, <argument><expr><literal type="string">"unable to create read pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>pipe</name><argument_list>(<argument><expr><name>pipeWrite</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>KernelError</name></expr></argument>, <argument><expr><literal type="string">"unable to create write pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Exec command in the child process</comment>
        <if_stmt><if>if <condition>(<expr><call><name>forkSafe</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Cleanup inherited clients</comment>
            <expr_stmt><expr><call><name>hrnProtocolClientCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Load configuration</comment>
            <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>paramList</name> <init>= <expr><call><name>protocolRemoteParam</name><argument_list>(<argument><expr><name>protocolStorageType</name></expr></argument>, <argument><expr><name>hostIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>hrnCfgLoadP</name><argument_list>(<argument><expr><name>cfgCmdNone</name></expr></argument>, <argument><expr><name>paramList</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Change log process id to aid in debugging</comment>
            <expr_stmt><expr><call><name>hrnLogProcessIdSet</name><argument_list>(<argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Run server with provided handlers</comment>
            <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>PROTOCOL_SERVICE_REMOTE</name> <literal type="string">"-shim-%u"</literal></expr></argument>, <argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ProtocolServer</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><call><name>protocolServerNew</name><argument_list>(
                <argument><expr><name>name</name></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>, <argument><expr><call><name>ioFdReadNewOpen</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pipeWrite</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>pipeRead</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>protocolServerProcess</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>hrnProtocolStatic</name><operator>.</operator><name>remoteHandlerList</name></name></expr></argument>, <argument><expr><name><name>hrnProtocolStatic</name><operator>.</operator><name>remoteHandlerListSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Put an end message here to sync with the client to ensure that coverage data is written before exiting</comment>
            <expr_stmt><expr><call><name>protocolServerDataEndPut</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Exit when done</comment>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Close the unused file descriptors</comment>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipeRead</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>pipeWrite</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create protocol object</comment>
        <expr_stmt><expr><name><name>helper</name><operator>-&gt;</operator><name>client</name></name> <operator>=</operator> <call><name>protocolClientNew</name><argument_list>(
            <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>PROTOCOL_SERVICE_REMOTE</name> <literal type="string">"-%u shim protocol"</literal></expr></argument>, <argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>,
            <argument><expr><call><name>ioFdReadNewOpen</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>PROTOCOL_SERVICE_REMOTE</name> <literal type="string">"-%u shim protocol read"</literal></expr></argument>, <argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pipeRead</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>PROTOCOL_SERVICE_REMOTE</name> <literal type="string">"-%u shim protocol write"</literal></expr></argument>, <argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pipeWrite</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Send one noop to catch any errors that might happen after the greeting</comment>
        <expr_stmt><expr><call><name>protocolClientNoOp</name><argument_list>(<argument><expr><name><name>helper</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// Else call the base function</comment>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>protocolRemoteExec_SHIMMED</name><argument_list>(<argument><expr><name>helper</name></expr></argument>, <argument><expr><name>protocolStorageType</name></expr></argument>, <argument><expr><name>hostIdx</name></expr></argument>, <argument><expr><name>processId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>hrnProtocolRemoteShimInstall</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ProtocolServerHandler</name> <modifier>*</modifier><specifier>const</specifier></type> <name>handlerList</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>handlerListSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>handlerList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>handlerListSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hrnProtocolStatic</name><operator>.</operator><name>remoteShim</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrnProtocolStatic</name><operator>.</operator><name>remoteHandlerList</name></name> <operator>=</operator> <name>handlerList</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hrnProtocolStatic</name><operator>.</operator><name>remoteHandlerListSize</name></name> <operator>=</operator> <name>handlerListSize</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>hrnProtocolRemoteShimUninstall</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>hrnProtocolStatic</name><operator>.</operator><name>remoteShim</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
