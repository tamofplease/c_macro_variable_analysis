<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/common/harnessPack.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Harness for Loading Test Configurations
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/assert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/convert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/pack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/stringZ.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessDebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPack.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type><name>hrnPackToStr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Pack</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pack</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>PACK</name></expr></argument>, <argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>hrnPackReadToStr</name><argument_list>(<argument><expr><call><name>pckReadNew</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type><name>hrnPackReadToStr</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>read</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name>pckReadNext</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>PackType</name></type> <name>type</name> <init>= <expr><call><name>pckReadType</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>id</name> <init>= <expr><call><name>pckReadId</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%u:%s:"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>pckTypeArray</name></expr>:</case>
                <expr_stmt><expr><call><name>pckReadArrayBeginP</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"[%s]"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnPackReadToStr</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pckReadArrayEndP</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>pckTypeBool</name></expr>:</case>
                <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><call><name>pckReadBoolP</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>pckTypeBin</name></expr>:</case>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>pckReadBinP</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>pckTypeI32</name></expr>:</case>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>pckReadI32P</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>pckTypeI64</name></expr>:</case>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>pckReadI64P</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>pckTypeMode</name></expr>:</case>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%04o"</literal></expr></argument>, <argument><expr><call><name>pckReadModeP</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>pckTypeObj</name></expr>:</case>
                <expr_stmt><expr><call><name>pckReadObjBeginP</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"{%s}"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnPackReadToStr</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pckReadObjEndP</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>pckTypePack</name></expr>:</case>
            <block>{<block_content>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"&lt;%s&gt;"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnPackReadToStr</name><argument_list>(<argument><expr><call><name>pckReadPackReadP</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>

            <case>case <expr><name>pckTypePtr</name></expr>:</case>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><call><name>pckReadPtrP</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>pckTypeStr</name></expr>:</case>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>pckTypeStrId</name></expr>:</case>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><call><name>pckReadStrIdP</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>pckTypeTime</name></expr>:</case>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><call><name>pckReadTimeP</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>pckTypeU32</name></expr>:</case>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>pckReadU32P</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>pckTypeU64</name></expr>:</case>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><call><name>pckReadU64P</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name>id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>

        <expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
