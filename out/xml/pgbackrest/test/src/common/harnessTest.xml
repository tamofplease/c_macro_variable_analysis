<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/common/harnessTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
C Test Harness
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessDebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessTest.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessLog.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_LIST_SIZE</name></cpp:macro>                                              <cpp:value>64</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>TestData</name>
<block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>selected</name></decl>;</decl_stmt>
}</block></struct></type> <name>TestData</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>TestData</name></type> <name><name>testList</name><index>[<expr><name>TEST_LIST_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>testRun</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>testRunSub</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>testTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>testFirst</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>timeMSecBegin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>testExeData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>testProjectExeData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>testContainerData</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>testIdxData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>testTiming</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>testPathData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>testDataPathData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>testRepoPathData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> struct <name>HarnessTestLocal</name>
<block>{
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>logLastBeginTime</name></decl>;</decl_stmt>                                      <comment type="line">// Store the begin time of the last log for deltas</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>logLastLineNo</name></decl>;</decl_stmt>                                              <comment type="line">// Store the line number to be used in debugging</comment>

    <struct>struct <name>HarnessTestResult</name>
    <block>{
        <decl_stmt><decl><type><name>bool</name></type> <name>running</name></decl>;</decl_stmt>                                               <comment type="line">// Is the test currently running?</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>statement</name></decl>;</decl_stmt>                                      <comment type="line">// statement that is being tested</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>lineNo</name></decl>;</decl_stmt>                                                 <comment type="line">// Line number the test is on</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>result</name></decl>;</decl_stmt>                                                <comment type="line">// Is there a result or is it void?</comment>
    }</block> <decl><name>result</name></decl>;</struct>
}</block> <decl><name>harnessTestLocal</name></decl>;</struct>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Extern functions
***********************************************************************************************************************************/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_LOG</name></cpp:ifdef>
    <function_decl><type><name>void</name></type> <name>harnessLogInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>harnessLogFinal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Initialize harness
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>hrnInit</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>testExe</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>testProjectExe</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>testContainer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>testIdx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>timing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>testPath</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>testDataPath</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>testRepoPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set test configuration</comment>
    <expr_stmt><expr><name>testExeData</name> <operator>=</operator> <name>testExe</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>testProjectExeData</name> <operator>=</operator> <name>testProjectExe</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>testContainerData</name> <operator>=</operator> <name>testContainer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>testIdxData</name> <operator>=</operator> <name>testIdx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>testTiming</name> <operator>=</operator> <name>timing</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>testPathData</name> <operator>=</operator> <name>testPath</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>testDataPathData</name> <operator>=</operator> <name>testDataPath</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>testRepoPathData</name> <operator>=</operator> <name>testRepoPath</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
testAdd - add a new test
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>hrnAdd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>run</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>selected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>selected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>run</name> <operator>!=</operator> <name>testTotal</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: test run %d is not in order\n"</literal></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>testList</name><index>[<expr><name>testTotal</name></expr>]</index></name><operator>.</operator><name>selected</name> <operator>=</operator> <name>selected</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>testTotal</name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
testBegin - should this test run?
***********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>testBegin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>FUNCTION_HARNESS_ASSERT</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>testRun</name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>testList</name><index>[<expr><name>testRun</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>selected</name></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_LOG</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>testFirst</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Make sure there is nothing untested left in the log</comment>
            <expr_stmt><expr><call><name>harnessLogFinal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// It is possible the test left the cwd in a weird place</comment>
            <if_stmt><if>if <condition>(<expr><call><name>chdir</name><argument_list>(<argument><expr><call><name>testPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unable to chdir to test path '%s'\n"</literal></expr></argument>, <argument><expr><call><name>testPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Clear out the test directory so the next test starts clean</comment>
            <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(
                <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%schmod -R 700 %s/"</literal> <literal type="string">"* &gt; /dev/null 2&gt;&amp;1;%srm -rf %s/"</literal> <literal type="string">"*"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>testContainer</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"sudo "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                <argument><expr><call><name>testPath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><call><name>testContainer</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"sudo "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>testPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>system</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unable to clear test path '%s'\n"</literal></expr></argument>, <argument><expr><call><name>testPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Clear out the data directory so the next test starts clean</comment>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(
                <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%schmod -R 700 %s/"</literal> <literal type="string">"* &gt; /dev/null 2&gt;&amp;1;%srm -rf %s/"</literal> <literal type="string">"*"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>testContainer</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"sudo "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
                <argument><expr><call><name>hrnPath</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><call><name>testContainer</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"sudo "</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>hrnPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>system</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unable to clear data path '%s'\n"</literal></expr></argument>, <argument><expr><call><name>hrnPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Clear any log replacements</comment>
            <expr_stmt><expr><call><name>hrnLogReplaceClear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <comment type="line">// No longer the first test</comment>
        <expr_stmt><expr><name>testFirst</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>testRun</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"run %d - %s\n"</literal></expr></argument>, <argument><expr><name>testRun</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>testRunSub</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>timeMSecBegin</name> <operator>=</operator> <call><name>testTimeMSec</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_LOG</name></cpp:ifdef>
        <comment type="line">// Initialize logging</comment>
        <expr_stmt><expr><call><name>harnessLogInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>harnessTestLocal</name><operator>.</operator><name>logLastBeginTime</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
testComplete - make sure all expected tests ran
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>hrnComplete</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_LOG</name></cpp:ifdef>
    <comment type="line">// Make sure there is nothing untested left in the log</comment>
    <expr_stmt><expr><call><name>harnessLogFinal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// Check that all tests ran</comment>
    <if_stmt><if>if <condition>(<expr><name>testRun</name> <operator>!=</operator> <name>testTotal</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: expected %d tests but %d were run\n"</literal></expr></argument>, <argument><expr><name>testTotal</name></expr></argument>, <argument><expr><name>testRun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>hrnFileRead</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufferSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0660</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unable to open '%s' for read\n"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>ssize_t</name></type> <name>bufferRead</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>bufferRead</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unable to read '%s'\n"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>bufferRead</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>hrnFileWrite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufferSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0660</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unable to open '%s' for write\n"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>write</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>bufferSize</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unable to write '%s'\n"</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><name>char</name></type> <name><name>harnessDiffBuffer</name><index>[<expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>hrnDiff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>actual</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>actual</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Write expected file</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>expectedFile</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>expectedFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expectedFile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/diff.expected"</literal></expr></argument>, <argument><expr><call><name>hrnPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnFileWrite</name><argument_list>(<argument><expr><name>expectedFile</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>expected</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Write actual file</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>actualFile</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>actualFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>actualFile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/diff.actual"</literal></expr></argument>, <argument><expr><call><name>hrnPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnFileWrite</name><argument_list>(<argument><expr><name>actualFile</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>actual</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Perform diff</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>command</name><index>[<expr><literal type="number">2560</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"diff -u %s %s &gt; %s/diff.result"</literal></expr></argument>, <argument><expr><name>expectedFile</name></expr></argument>, <argument><expr><name>actualFile</name></expr></argument>, <argument><expr><call><name>hrnPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>system</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ERROR: unable to execute '%s'\n"</literal></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Read result</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>resultFile</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>resultFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>resultFile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/diff.result"</literal></expr></argument>, <argument><expr><call><name>hrnPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnFileRead</name><argument_list>(<argument><expr><name>resultFile</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>harnessDiffBuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>harnessDiffBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Remove last linefeed from diff output</comment>
    <expr_stmt><expr><name><name>harnessDiffBuffer</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>harnessDiffBuffer</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>harnessDiffBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>hrnTestLogTitle</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineNo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Output run/test</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bufferSize</name> <init>= <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d/%d"</literal></expr></argument>, <argument><expr><name>testRun</name></expr></argument>, <argument><expr><name>testRunSub</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nrun %s "</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Output dashes</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>dashIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dashIdx</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>-</operator> <name>bufferSize</name></expr>;</condition> <incr><expr><name>dashIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <comment type="line">// Output line number</comment>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" L%04d"</literal></expr></argument>, <argument><expr><name>lineNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Increment testSub and reset log time</comment>
    <expr_stmt><expr><name>testRunSub</name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>hrnTestLogPrefix</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>lineNo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>lineNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Always indent at the beginning</comment>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"    "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add timing if requested</comment>
    <if_stmt><if>if <condition>(<expr><name>testTiming</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>currentTime</name> <init>= <expr><call><name>testTimeMSec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Print elapsed time size the beginning of the test run</comment>
        <expr_stmt><expr><call><name>printf</name><argument_list>(
            <argument><expr><literal type="string">"%03"</literal> <name>PRIu64</name> <literal type="string">".%03"</literal> <name>PRIu64</name><literal type="string">"s"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>currentTime</name> <operator>-</operator> <call><name>testTimeMSecBegin</name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>,
            <argument><expr><operator>(</operator><operator>(</operator><name>currentTime</name> <operator>-</operator> <call><name>testTimeMSecBegin</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Print delta time since the last log message</comment>
        <if_stmt><if>if <condition>(<expr><name><name>harnessTestLocal</name><operator>.</operator><name>logLastBeginTime</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(
                <argument><expr><literal type="string">" %03"</literal> <name>PRIu64</name> <literal type="string">".%03"</literal> <name>PRIu64</name><literal type="string">"s "</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>currentTime</name> <operator>-</operator> <name><name>harnessTestLocal</name><operator>.</operator><name>logLastBeginTime</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>,
                <argument><expr><operator>(</operator><operator>(</operator><name>currentTime</name> <operator>-</operator> <name><name>harnessTestLocal</name><operator>.</operator><name>logLastBeginTime</name></name><operator>)</operator> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"          "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><name><name>harnessTestLocal</name><operator>.</operator><name>logLastBeginTime</name></name> <operator>=</operator> <name>currentTime</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Store line number for</comment>
    <expr_stmt><expr><name><name>harnessTestLocal</name><operator>.</operator><name>logLastLineNo</name></name> <operator>=</operator> <name>lineNo</name></expr>;</expr_stmt>

    <comment type="line">// Add line number and padding</comment>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"L%04d     "</literal></expr></argument>, <argument><expr><name>lineNo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>hrnTestResultBegin</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>statement</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>harnessTestLocal</name><operator>.</operator><name>result</name><operator>.</operator><name>running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>harnessTestLocal</name><operator>.</operator><name>logLastLineNo</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set the line number for the current function in the stack trace</comment>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_STACK_TRACE_LINE_SET</name><argument_list>(<argument><expr><name><name>harnessTestLocal</name><operator>.</operator><name>logLastLineNo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set info to report if an error is thrown</comment>
    <expr_stmt><expr><name><name>harnessTestLocal</name><operator>.</operator><name>result</name></name> <operator>=</operator>
        <operator>(</operator>struct <name>HarnessTestResult</name><operator>)</operator><block>{
            <expr><operator>.</operator><name>running</name> <operator>=</operator> <name>true</name></expr>, <expr><operator>.</operator><name>statement</name> <operator>=</operator> <name>statement</name></expr>, <expr><operator>.</operator><name>lineNo</name> <operator>=</operator> <name><name>harnessTestLocal</name><operator>.</operator><name>logLastLineNo</name></name></expr>, <expr><operator>.</operator><name>result</name> <operator>=</operator> <name>result</name></expr>}</block></expr>;</expr_stmt>

    <comment type="line">// Reset line number so it is not used by another test</comment>
    <expr_stmt><expr><name><name>harnessTestLocal</name><operator>.</operator><name>logLastLineNo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>hrnTestResultComment</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>comment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>comment</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" (%s)\n"</literal></expr></argument>, <argument><expr><name>comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>hrnTestResultException</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>harnessTestLocal</name><operator>.</operator><name>result</name><operator>.</operator><name>running</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
            <argument><expr><name>TestError</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <argument><expr><name>AssertError</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <argument><expr><literal type="string">"EXPECTED %sRESULT FROM STATEMENT: %s\n\nBUT GOT %s: %s\n\nTHROWN AT:\n%s"</literal></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name>harnessTestLocal</name><operator>.</operator><name>result</name><operator>.</operator><name>result</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"VOID "</literal></expr></else></ternary></expr></argument>,
            <argument><expr><name><name>harnessTestLocal</name><operator>.</operator><name>result</name><operator>.</operator><name>statement</name></name></expr></argument>, <argument><expr><call><name>errorName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>errorStackTrace</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnTestResultEnd</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>harnessTestLocal</name><operator>.</operator><name>result</name><operator>.</operator><name>running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set the line number for the current function back to unknown</comment>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_STACK_TRACE_LINE_SET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>harnessTestLocal</name><operator>.</operator><name>result</name><operator>.</operator><name>running</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>hrnTestResultDiff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>actual</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>actual</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>expected</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strstr</name><argument_list>(<argument><expr><name>actual</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
            <argument><expr><name>TestError</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <argument><expr><name>AssertError</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <argument><expr><literal type="string">"STATEMENT: %s\n\nRESULT IS:\n%s\n\nBUT DIFF FROM EXPECTED IS (- remove from expected, + add to expected):\n%s\n\n"</literal></expr></argument>,
            <argument><expr><name><name>harnessTestLocal</name><operator>.</operator><name>result</name><operator>.</operator><name>statement</name></name></expr></argument>, <argument><expr><name>actual</name></expr></argument>, <argument><expr><call><name>hrnDiff</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
            <argument><expr><name>TestError</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <argument><expr><name>AssertError</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <argument><expr><literal type="string">"STATEMENT: %s\n\nRESULT IS:\n%s\n\nBUT EXPECTED:\n%s"</literal></expr></argument>,
            <argument><expr><name><name>harnessTestLocal</name><operator>.</operator><name>result</name><operator>.</operator><name>statement</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>actual</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"NULL"</literal></expr> </then><else>: <expr><name>actual</name></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>expected</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"NULL"</literal></expr> </then><else>: <expr><name>expected</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                                 \
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnTestResultBool</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>actual</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>harnessTestLocal</name><operator>.</operator><name>result</name><operator>.</operator><name>running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>actual</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>actual</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal> <operator>||</operator> <name><name>expected</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>expected</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal> <operator>||</operator> <name>actual</name> <operator>!=</operator> <name>expected</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>actualZ</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>expectedZ</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>actual</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>actual</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>actualZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>actualZ</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"INVALID(%d)"</literal></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><ternary><condition><expr><name>actual</name></expr> ?</condition><then> <expr><call><name>strcpy</name><argument_list>(<argument><expr><name>actualZ</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>strcpy</name><argument_list>(<argument><expr><name>actualZ</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>expected</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>expected</name></expr></argument> &gt;</argument_list></name> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>expectedZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expectedZ</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"INVALID(%d)"</literal></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><ternary><condition><expr><name>expected</name></expr> ?</condition><then> <expr><call><name>strcpy</name><argument_list>(<argument><expr><name>expectedZ</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>strcpy</name><argument_list>(<argument><expr><name>expectedZ</name></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><call><name>hrnTestResultDiff</name><argument_list>(<argument><expr><name>actualZ</name></expr></argument>, <argument><expr><name>expectedZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>hrnTestResultEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnTestResultDouble</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>actual</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>expected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>harnessTestLocal</name><operator>.</operator><name>result</name><operator>.</operator><name>running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>actual</name> <operator>!=</operator> <name>expected</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>actualZ</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>expectedZ</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>actualZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>actualZ</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>expectedZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expectedZ</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnTestResultDiff</name><argument_list>(<argument><expr><name>actualZ</name></expr></argument>, <argument><expr><name>expectedZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>hrnTestResultEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnTestResultInt64</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>actual</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>HarnessTestResultOperation</name></type> <name>operation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>harnessTestLocal</name><operator>.</operator><name>result</name><operator>.</operator><name>running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>operation</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>harnessTestResultOperationEq</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>actual</name> <operator>==</operator> <name>expected</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>harnessTestResultOperationNe</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>actual</name> <operator>!=</operator> <name>expected</name></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>actualZ</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>expectedZ</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>actualZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>actualZ</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>expectedZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expectedZ</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnTestResultDiff</name><argument_list>(<argument><expr><name>actualZ</name></expr></argument>, <argument><expr><name>expectedZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>hrnTestResultEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnTestResultPtr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>actual</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>, <parameter><decl><type><name>HarnessTestResultOperation</name></type> <name>operation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>harnessTestLocal</name><operator>.</operator><name>result</name><operator>.</operator><name>running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>operation</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>harnessTestResultOperationEq</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>actual</name> <operator>==</operator> <name>expected</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>harnessTestResultOperationNe</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>actual</name> <operator>!=</operator> <name>expected</name></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>actualZ</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>expectedZ</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>actualZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>actualZ</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>expectedZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expectedZ</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%p"</literal></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnTestResultDiff</name><argument_list>(<argument><expr><name>actualZ</name></expr></argument>, <argument><expr><name>expectedZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>hrnTestResultEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HRN_FEATURE_STRING</name></cpp:ifdef>

<function><type><name>void</name></type>
<name>hrnTestResultStringList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier></type><name>actual</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>, <parameter><decl><type><name>HarnessTestResultOperation</name></type> <name>operation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Return NULL if list is empty</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strLstEmpty</name><argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>hrnTestResultZ</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>hrnTestResultZ</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strCatZ</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><name>actual</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type>
<name>hrnTestResultUInt64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>actual</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>HarnessTestResultOperation</name></type> <name>operation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>harnessTestLocal</name><operator>.</operator><name>result</name><operator>.</operator><name>running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>operation</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>harnessTestResultOperationEq</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>actual</name> <operator>==</operator> <name>expected</name></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>harnessTestResultOperationNe</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <name>actual</name> <operator>!=</operator> <name>expected</name></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>actualZ</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>expectedZ</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>actualZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>actualZ</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>expectedZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expectedZ</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnTestResultDiff</name><argument_list>(<argument><expr><name>actualZ</name></expr></argument>, <argument><expr><name>expectedZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>hrnTestResultEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnTestResultUInt64Int64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>actual</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>HarnessTestResultOperation</name></type> <name>operation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>harnessTestLocal</name><operator>.</operator><name>result</name><operator>.</operator><name>running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>actual</name> <operator>&lt;=</operator> <name>INT64_MAX</name> <operator>&amp;&amp;</operator> <name>expected</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>hrnTestResultUInt64</name><argument_list>(<argument><expr><name>actual</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>expected</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>actualZ</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>expectedZ</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>actualZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>actualZ</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>expectedZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>expectedZ</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnTestResultDiff</name><argument_list>(<argument><expr><name>actualZ</name></expr></argument>, <argument><expr><name>expectedZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnTestResultZ</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>actual</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>, <parameter><decl><type><name>HarnessTestResultOperation</name></type> <name>operation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>harnessTestLocal</name><operator>.</operator><name>result</name><operator>.</operator><name>running</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>operation</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>harnessTestResultOperationEq</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>actual</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>expected</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>actual</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>expected</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>actual</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><name>harnessTestResultOperationNe</name></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator>
                <operator>(</operator><name>actual</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>expected</name> <operator>!=</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>actual</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>expected</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator>
                <operator>(</operator><name>actual</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>expected</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>actual</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>hrnTestResultDiff</name><argument_list>(<argument><expr><name>actual</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>hrnTestResultEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Getters/Setters
***********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>testExe</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>testExeData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>testProjectExe</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>testProjectExeData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>testContainer</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>testContainerData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>testIdx</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>testIdxData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>testPath</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>testPathData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>hrnPath</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>testDataPathData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>hrnPathRepo</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>testRepoPathData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>uint64_t</name></type>
<name>testTimeMSec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>currentTime</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>currentTime</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>currentTime</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>currentTime</name><operator>.</operator><name>tv_usec</name></name> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>uint64_t</name></type>
<name>testTimeMSecBegin</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name>timeMSecBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
