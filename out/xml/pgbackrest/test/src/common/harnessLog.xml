<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/common/harnessLog.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Log Test Harness
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;regex.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/memContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/regExp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/stringList.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessDebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessTest.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Include shimmed C modules
***********************************************************************************************************************************/</comment>
<block>{<block_content><expr><index>[<expr><name>SHIM_MODULE</name></expr>]</index></expr></block_content>}</block>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Log settings for testing
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><name>LogLevel</name></type> <name>logLevelTest</name> <init>= <expr><name>logLevelInfo</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LogLevel</name></type> <name>logLevelTestDefault</name> <init>= <expr><name>logLevelOff</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>logDryRunTest</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Name of file where logs are stored for testing
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>logFile</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Buffer where log results are loaded for comparison purposes
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><name>char</name></type> <name><name>harnessLogBuffer</name><index>[<expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Open a log file -- centralized here for error handling
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>harnessLogOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>FUNCTION_HARNESS_ASSERT</name><argument_list>(<argument><expr><name>logFile</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_SYS_ERROR_FMT</name><argument_list>(<argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to open log file '%s'"</literal></expr></argument>, <argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Initialize log for testing
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>harnessLogInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>logInit</name><argument_list>(<argument><expr><name>logLevelTestDefault</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><name>logLevelInfo</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>logProcessId</name></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>logFileBanner</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>logFile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/expect.log"</literal></expr></argument>, <argument><expr><call><name>hrnPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>logFdFile</name> <operator>=</operator> <call><name>harnessLogOpen</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0640</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>logAnySet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>harnessLogDryRunSet</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>dryRun</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>logDryRunTest</name> <operator>=</operator> <name>dryRun</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>logInit</name><argument_list>(<argument><expr><name>logLevelTestDefault</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><name>logLevelTest</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>logProcessId</name></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><name>logDryRunTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>hrnLogLevelFile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>logLevelFile</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>hrnLogLevelFileSet</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>logLevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>logLevelFile</name> <operator>=</operator> <name>logLevel</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>
<name>hrnLogLevelStdOut</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>logLevelStdOut</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>hrnLogLevelStdOutSet</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>logLevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>logLevelStdOut</name> <operator>=</operator> <name>logLevel</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>
<name>hrnLogLevelStdErr</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>logLevelStdErr</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>hrnLogLevelStdErrSet</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>logLevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>logLevelStdErr</name> <operator>=</operator> <name>logLevel</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>hrnLogTimestamp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>logTimestamp</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>hrnLogTimestampSet</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>log</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>logTimestamp</name> <operator>=</operator> <name>log</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Change test log level

This is info by default but it can sometimes be useful to set the log level to something else.
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>harnessLogLevelSet</name><parameter_list>(<parameter><decl><type><name>LogLevel</name></type> <name>logLevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>logLevelTest</name> <operator>=</operator> <name>logLevel</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>logInit</name><argument_list>(<argument><expr><name>logLevelTestDefault</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><name>logLevelTest</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>logProcessId</name></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><name>logDryRunTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Reset test log level

Set back to info
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>harnessLogLevelReset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>logLevelTest</name> <operator>=</operator> <name>logLevelInfo</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>logInit</name><argument_list>(<argument><expr><name>logLevelTestDefault</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><name>logLevelTest</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>logProcessId</name></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><name>logDryRunTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Change default test log level

Set the default log level for output to the console (for testing).
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>harnessLogLevelDefaultSet</name><parameter_list>(<parameter><decl><type><name>LogLevel</name></type> <name>logLevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>logLevelTestDefault</name> <operator>=</operator> <name>logLevel</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type> <name>hrnLogProcessIdSet</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>processId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>logProcessId</name> <operator>=</operator> <name>processId</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Load log result from file into the log buffer
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>harnessLogLoad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logFile</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>FUNCTION_HARNESS_ASSERT</name><argument_list>(<argument><expr><name>logFile</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>harnessLogBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>harnessLogOpen</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>totalBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>actualBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <do>do
    <block>{<block_content>
        <expr_stmt><expr><name>actualBytes</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>harnessLogBuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>harnessLogBuffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>totalBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>actualBytes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW_SYS_ERROR_FMT</name><argument_list>(<argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to read log file '%s'"</literal></expr></argument>, <argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>totalBytes</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>actualBytes</name></expr>;</expr_stmt>
    </block_content>}</block>
    while <condition>(<expr><name>actualBytes</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

    <if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_SYS_ERROR_FMT</name><argument_list>(<argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to close log file '%s'"</literal></expr></argument>, <argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Remove final linefeed</comment>
    <if_stmt><if>if <condition>(<expr><name>totalBytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>harnessLogBuffer</name><index>[<expr><name>totalBytes</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<struct><specifier>static</specifier> struct
<block>{
    <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name></decl>;</decl_stmt>                                         <comment type="line">// Mem context for log harness</comment>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>replaceList</name></decl>;</decl_stmt>                                              <comment type="line">// List of replacements</comment>
}</block> <decl><name>harnessLog</name></decl>;</struct>

<typedef>typedef <type><struct>struct <name>HarnessLogReplace</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>expression</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RegExp</name> <modifier>*</modifier></type><name>regExp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>expressionSub</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RegExp</name> <modifier>*</modifier></type><name>regExpSub</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>replacement</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>matchList</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>version</name></decl>;</decl_stmt>
}</block></struct></type> <name>HarnessLogReplace</name>;</typedef>

<function><type><name>void</name></type>
<name>hrnLogReplaceAdd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expression</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expressionSub</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>replacement</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>version</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>expressionSub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>replacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_ASSERT</name><argument_list>(<argument><expr><name>expression</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_ASSERT</name><argument_list>(<argument><expr><name>replacement</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>harnessLog</name><operator>.</operator><name>memContext</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>memContextTop()</argument>)</argument_list></macro>
        <block>{<block_content>
            <macro><name>MEM_CONTEXT_NEW_BEGIN</name><argument_list>(<argument>HarnessLog</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>harnessLog</name><operator>.</operator><name>memContext</name></name> <operator>=</operator> <call><name>MEM_CONTEXT_NEW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>harnessLog</name><operator>.</operator><name>replaceList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>harnessLog.memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name><name>harnessLog</name><operator>.</operator><name>replaceList</name></name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HarnessLogReplace</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext(harnessLog.replaceList)</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>HarnessLogReplace</name></type> <name>logReplace</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>expression</name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>regExp</name> <operator>=</operator> <call><name>regExpNew</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>expressionSub</name> <operator>=</operator> <name>expressionSub</name> <operator>==</operator> <name>NULL</name> <operator>?</operator> <name>NULL</name> <operator>:</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><name>expressionSub</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>regExpSub</name> <operator>=</operator> <name>expressionSub</name> <operator>==</operator> <name>NULL</name> <operator>?</operator> <name>NULL</name> <operator>:</operator> <call><name>regExpNew</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>expressionSub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>replacement</name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><name>replacement</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>matchList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>,
            <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>version</name></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>harnessLog</name><operator>.</operator><name>replaceList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>logReplace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>hrnLogReplaceClear</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>harnessLog</name><operator>.</operator><name>replaceList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>lstClear</name><argument_list>(<argument><expr><name><name>harnessLog</name><operator>.</operator><name>replaceList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Perform log replacements
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>hrnLogReplace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Proceed only if replacements have been defined</comment>
    <if_stmt><if>if <condition>(<expr><name><name>harnessLog</name><operator>.</operator><name>replaceList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Loop through all replacements</comment>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>replaceIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>replaceIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>harnessLog</name><operator>.</operator><name>replaceList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>replaceIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>HarnessLogReplace</name> <modifier>*</modifier></type><name>logReplace</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>harnessLog</name><operator>.</operator><name>replaceList</name></name></expr></argument>, <argument><expr><name>replaceIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Check for matches</comment>
                <while>while <condition>(<expr><call><name>regExpMatch</name><argument_list>(<argument><expr><name><name>logReplace</name><operator>-&gt;</operator><name>regExp</name></name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>harnessLogBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Get the match</comment>
                    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>match</name> <init>= <expr><call><name>regExpMatchStr</name><argument_list>(<argument><expr><name><name>logReplace</name><operator>-&gt;</operator><name>regExp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Find beginning of match</comment>
                    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>begin</name> <init>= <expr><name>harnessLogBuffer</name> <operator>+</operator> <operator>(</operator><call><name>regExpMatchPtr</name><argument_list>(<argument><expr><name><name>logReplace</name><operator>-&gt;</operator><name>regExp</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>harnessLogBuffer</name><operator>)</operator></expr></init></decl>;</decl_stmt>

                    <comment type="line">// If there is a sub expression then evaluate it</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>logReplace</name><operator>-&gt;</operator><name>regExpSub</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// The sub expression must match</comment>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>regExpMatch</name><argument_list>(<argument><expr><name><name>logReplace</name><operator>-&gt;</operator><name>regExpSub</name></name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                                <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to find sub expression '%s' in '%s' extracted with expresion '%s'"</literal></expr></argument>,
                                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>logReplace</name><operator>-&gt;</operator><name>expressionSub</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>logReplace</name><operator>-&gt;</operator><name>expression</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <comment type="line">// Find beginning of match</comment>
                        <expr_stmt><expr><name>begin</name> <operator>+=</operator> <call><name>regExpMatchPtr</name><argument_list>(<argument><expr><name><name>logReplace</name><operator>-&gt;</operator><name>regExpSub</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strZ</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Get the match</comment>
                        <expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>regExpMatchStr</name><argument_list>(<argument><expr><name><name>logReplace</name><operator>-&gt;</operator><name>regExpSub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <comment type="line">// Build replacement string.  If versioned then append the version number.</comment>
                    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>replace</name> <init>= <expr><call><name>strCatFmt</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"[%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>logReplace</name><operator>-&gt;</operator><name>replacement</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name><name>logReplace</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name> <init>= <expr><call><name>strLstFindIdxP</name><argument_list>(<argument><expr><name><name>logReplace</name><operator>-&gt;</operator><name>matchList</name></name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>LIST_NOT_FOUND</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>index</name> <operator>=</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name><name>logReplace</name><operator>-&gt;</operator><name>matchList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name><name>logReplace</name><operator>-&gt;</operator><name>matchList</name></name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>replace</name></expr></argument>, <argument><expr><literal type="string">"-%u"</literal></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>replace</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Find end of match and calculate size difference from replacement</comment>
                    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>begin</name> <operator>+</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strSize</name><argument_list>(<argument><expr><name>replace</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>strSize</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Make sure we won't overflow the buffer</comment>
                    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>harnessLogBuffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>diff</name><operator>)</operator> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>harnessLogBuffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Move data from end of string enough to make room for the replacement and copy replacement</comment>
                    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>end</name> <operator>+</operator> <name>diff</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></while>
            </block_content>}</block></for>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Compare log to a static string

After the comparison the log is cleared so the next result can be compared.
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>harnessLogResult</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>FUNCTION_HARNESS_ASSERT</name><argument_list>(<argument><expr><name>expected</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>harnessLogLoad</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnLogReplace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>harnessLogBuffer</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
            <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"\nACTUAL LOG:\n\n%s\n\nBUT DIFF FROM EXPECTED IS (- remove from expected, + add to expected):\n\n%s"</literal></expr></argument>,
            <argument><expr><name>harnessLogBuffer</name></expr></argument>, <argument><expr><call><name>hrnDiff</name><argument_list>(<argument><expr><name>expected</name></expr></argument>, <argument><expr><name>harnessLogBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>logFdFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>logFdFile</name> <operator>=</operator> <call><name>harnessLogOpen</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0640</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Make sure nothing is left in the log after all tests have completed
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>harnessLogFinal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>harnessLogLoad</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnLogReplace</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Close expect log file</comment>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>logFdFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>harnessLogBuffer</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"\n\nexpected log to be empty but actual log was:\n\n%s\n\n"</literal></expr></argument>, <argument><expr><name>harnessLogBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
