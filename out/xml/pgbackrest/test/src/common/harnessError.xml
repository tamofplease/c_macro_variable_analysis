<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/common/harnessError.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Harness for Loading Test Configurations
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessDebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessTest.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Include shimmed C modules
***********************************************************************************************************************************/</comment>
<block>{<block_content><expr><index>[<expr><name>SHIM_MODULE</name></expr>]</index></expr></block_content>}</block>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type> <name>hrnErrorThrow</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HrnErrorThrowParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>errorType</name></name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><operator>.</operator><name>errorType</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>param</name><operator>.</operator><name>errorType</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name>AssertError</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>fileName</name></name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><operator>.</operator><name>fileName</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>param</name><operator>.</operator><name>fileName</name></name></expr> </then><else>: <expr><literal type="string">"ERR_FILE"</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>functionName</name></name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><operator>.</operator><name>functionName</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>param</name><operator>.</operator><name>functionName</name></name></expr> </then><else>: <expr><literal type="string">"ERR_FUNCTION"</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>fileLine</name></name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><operator>.</operator><name>fileLine</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>param</name><operator>.</operator><name>fileLine</name></name></expr> </then><else>: <expr><literal type="number">999</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>message</name></name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><operator>.</operator><name>message</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>param</name><operator>.</operator><name>message</name></name></expr> </then><else>: <expr><literal type="string">"ERR_MESSAGE"</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>errorContext</name><operator>.</operator><name>error</name><operator>.</operator><name>stackTrace</name></name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><operator>.</operator><name>stackTrace</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>param</name><operator>.</operator><name>stackTrace</name></name></expr> </then><else>: <expr><literal type="string">"ERR_STACK_TRACE"</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>errorInternalPropagate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
