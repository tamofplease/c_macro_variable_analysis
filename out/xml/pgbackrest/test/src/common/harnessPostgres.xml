<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/common/harnessPostgres.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Harness for PostgreSQL Interface
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/assert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessDebug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPostgres.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Interface definition
***********************************************************************************************************************************/</comment>
<function_decl><type><name>uint32_t</name></type> <name>hrnPgInterfaceCatalogVersion090</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceControl090</name><parameter_list>(<parameter><decl><type><name>PgControl</name></type> <name>pgControl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceWal090</name><parameter_list>(<parameter><decl><type><name>PgWal</name></type> <name>pgWal</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>hrnPgInterfaceCatalogVersion091</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceControl091</name><parameter_list>(<parameter><decl><type><name>PgControl</name></type> <name>pgControl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceWal091</name><parameter_list>(<parameter><decl><type><name>PgWal</name></type> <name>pgWal</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>hrnPgInterfaceCatalogVersion092</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceControl092</name><parameter_list>(<parameter><decl><type><name>PgControl</name></type> <name>pgControl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceWal092</name><parameter_list>(<parameter><decl><type><name>PgWal</name></type> <name>pgWal</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>hrnPgInterfaceCatalogVersion093</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceControl093</name><parameter_list>(<parameter><decl><type><name>PgControl</name></type> <name>pgControl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceWal093</name><parameter_list>(<parameter><decl><type><name>PgWal</name></type> <name>pgWal</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>hrnPgInterfaceCatalogVersion094</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceControl094</name><parameter_list>(<parameter><decl><type><name>PgControl</name></type> <name>pgControl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceWal094</name><parameter_list>(<parameter><decl><type><name>PgWal</name></type> <name>pgWal</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>hrnPgInterfaceCatalogVersion095</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceControl095</name><parameter_list>(<parameter><decl><type><name>PgControl</name></type> <name>pgControl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceWal095</name><parameter_list>(<parameter><decl><type><name>PgWal</name></type> <name>pgWal</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>hrnPgInterfaceCatalogVersion096</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceControl096</name><parameter_list>(<parameter><decl><type><name>PgControl</name></type> <name>pgControl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceWal096</name><parameter_list>(<parameter><decl><type><name>PgWal</name></type> <name>pgWal</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>hrnPgInterfaceCatalogVersion100</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceControl100</name><parameter_list>(<parameter><decl><type><name>PgControl</name></type> <name>pgControl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceWal100</name><parameter_list>(<parameter><decl><type><name>PgWal</name></type> <name>pgWal</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>hrnPgInterfaceCatalogVersion110</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceControl110</name><parameter_list>(<parameter><decl><type><name>PgControl</name></type> <name>pgControl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceWal110</name><parameter_list>(<parameter><decl><type><name>PgWal</name></type> <name>pgWal</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>hrnPgInterfaceCatalogVersion120</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceControl120</name><parameter_list>(<parameter><decl><type><name>PgControl</name></type> <name>pgControl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceWal120</name><parameter_list>(<parameter><decl><type><name>PgWal</name></type> <name>pgWal</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>hrnPgInterfaceCatalogVersion130</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceControl130</name><parameter_list>(<parameter><decl><type><name>PgControl</name></type> <name>pgControl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceWal130</name><parameter_list>(<parameter><decl><type><name>PgWal</name></type> <name>pgWal</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>hrnPgInterfaceCatalogVersion140</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceControl140</name><parameter_list>(<parameter><decl><type><name>PgControl</name></type> <name>pgControl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceWal140</name><parameter_list>(<parameter><decl><type><name>PgWal</name></type> <name>pgWal</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>hrnPgInterfaceCatalogVersion150</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceControl150</name><parameter_list>(<parameter><decl><type><name>PgControl</name></type> <name>pgControl</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>hrnPgInterfaceWal150</name><parameter_list>(<parameter><decl><type><name>PgWal</name></type> <name>pgWal</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>HrnPgInterface</name>
<block>{
    <comment type="line">// Version of PostgreSQL supported by this interface</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>version</name></decl>;</decl_stmt>

    <comment type="line">// Catalog version</comment>
    <function_decl><type><name>unsigned</name> <name>int</name></type> (<modifier>*</modifier><name>catalogVersion</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Create pg_control</comment>
    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>control</name>)<parameter_list>(<parameter><decl><type><name>PgControl</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="line">// Create WAL header</comment>
    <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>wal</name>)<parameter_list>(<parameter><decl><type><name>PgWal</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
}</block></struct></type> <name>HrnPgInterface</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>HrnPgInterface</name></type> <name><name>hrnPgInterface</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{
        <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>PG_VERSION_15</name></expr>,

        <expr><operator>.</operator><name>catalogVersion</name> <operator>=</operator> <name>hrnPgInterfaceCatalogVersion150</name></expr>,
        <expr><operator>.</operator><name>control</name> <operator>=</operator> <name>hrnPgInterfaceControl150</name></expr>,
        <expr><operator>.</operator><name>wal</name> <operator>=</operator> <name>hrnPgInterfaceWal150</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>PG_VERSION_14</name></expr>,

        <expr><operator>.</operator><name>catalogVersion</name> <operator>=</operator> <name>hrnPgInterfaceCatalogVersion140</name></expr>,
        <expr><operator>.</operator><name>control</name> <operator>=</operator> <name>hrnPgInterfaceControl140</name></expr>,
        <expr><operator>.</operator><name>wal</name> <operator>=</operator> <name>hrnPgInterfaceWal140</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>PG_VERSION_13</name></expr>,

        <expr><operator>.</operator><name>catalogVersion</name> <operator>=</operator> <name>hrnPgInterfaceCatalogVersion130</name></expr>,
        <expr><operator>.</operator><name>control</name> <operator>=</operator> <name>hrnPgInterfaceControl130</name></expr>,
        <expr><operator>.</operator><name>wal</name> <operator>=</operator> <name>hrnPgInterfaceWal130</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>PG_VERSION_12</name></expr>,

        <expr><operator>.</operator><name>catalogVersion</name> <operator>=</operator> <name>hrnPgInterfaceCatalogVersion120</name></expr>,
        <expr><operator>.</operator><name>control</name> <operator>=</operator> <name>hrnPgInterfaceControl120</name></expr>,
        <expr><operator>.</operator><name>wal</name> <operator>=</operator> <name>hrnPgInterfaceWal120</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>PG_VERSION_11</name></expr>,

        <expr><operator>.</operator><name>catalogVersion</name> <operator>=</operator> <name>hrnPgInterfaceCatalogVersion110</name></expr>,
        <expr><operator>.</operator><name>control</name> <operator>=</operator> <name>hrnPgInterfaceControl110</name></expr>,
        <expr><operator>.</operator><name>wal</name> <operator>=</operator> <name>hrnPgInterfaceWal110</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>PG_VERSION_10</name></expr>,

        <expr><operator>.</operator><name>catalogVersion</name> <operator>=</operator> <name>hrnPgInterfaceCatalogVersion100</name></expr>,
        <expr><operator>.</operator><name>control</name> <operator>=</operator> <name>hrnPgInterfaceControl100</name></expr>,
        <expr><operator>.</operator><name>wal</name> <operator>=</operator> <name>hrnPgInterfaceWal100</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>PG_VERSION_96</name></expr>,

        <expr><operator>.</operator><name>catalogVersion</name> <operator>=</operator> <name>hrnPgInterfaceCatalogVersion096</name></expr>,
        <expr><operator>.</operator><name>control</name> <operator>=</operator> <name>hrnPgInterfaceControl096</name></expr>,
        <expr><operator>.</operator><name>wal</name> <operator>=</operator> <name>hrnPgInterfaceWal096</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>PG_VERSION_95</name></expr>,

        <expr><operator>.</operator><name>catalogVersion</name> <operator>=</operator> <name>hrnPgInterfaceCatalogVersion095</name></expr>,
        <expr><operator>.</operator><name>control</name> <operator>=</operator> <name>hrnPgInterfaceControl095</name></expr>,
        <expr><operator>.</operator><name>wal</name> <operator>=</operator> <name>hrnPgInterfaceWal095</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>PG_VERSION_94</name></expr>,

        <expr><operator>.</operator><name>catalogVersion</name> <operator>=</operator> <name>hrnPgInterfaceCatalogVersion094</name></expr>,
        <expr><operator>.</operator><name>control</name> <operator>=</operator> <name>hrnPgInterfaceControl094</name></expr>,
        <expr><operator>.</operator><name>wal</name> <operator>=</operator> <name>hrnPgInterfaceWal094</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>PG_VERSION_93</name></expr>,

        <expr><operator>.</operator><name>catalogVersion</name> <operator>=</operator> <name>hrnPgInterfaceCatalogVersion093</name></expr>,
        <expr><operator>.</operator><name>control</name> <operator>=</operator> <name>hrnPgInterfaceControl093</name></expr>,
        <expr><operator>.</operator><name>wal</name> <operator>=</operator> <name>hrnPgInterfaceWal093</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>PG_VERSION_92</name></expr>,

        <expr><operator>.</operator><name>catalogVersion</name> <operator>=</operator> <name>hrnPgInterfaceCatalogVersion092</name></expr>,
        <expr><operator>.</operator><name>control</name> <operator>=</operator> <name>hrnPgInterfaceControl092</name></expr>,
        <expr><operator>.</operator><name>wal</name> <operator>=</operator> <name>hrnPgInterfaceWal092</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>PG_VERSION_91</name></expr>,
        <expr><operator>.</operator><name>catalogVersion</name> <operator>=</operator> <name>hrnPgInterfaceCatalogVersion091</name></expr>,
        <expr><operator>.</operator><name>control</name> <operator>=</operator> <name>hrnPgInterfaceControl091</name></expr>,
        <expr><operator>.</operator><name>wal</name> <operator>=</operator> <name>hrnPgInterfaceWal091</name></expr>,
    }</block></expr>,
    <expr><block>{
        <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>PG_VERSION_90</name></expr>,

        <expr><operator>.</operator><name>catalogVersion</name> <operator>=</operator> <name>hrnPgInterfaceCatalogVersion090</name></expr>,
        <expr><operator>.</operator><name>control</name> <operator>=</operator> <name>hrnPgInterfaceControl090</name></expr>,
        <expr><operator>.</operator><name>wal</name> <operator>=</operator> <name>hrnPgInterfaceWal090</name></expr>,
    }</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Get the interface for a PostgreSQL version
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>HrnPgInterface</name> <modifier>*</modifier></type>
<name>hrnPgInterfaceVersion</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pgVersion</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>pgVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>HrnPgInterface</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>interfaceIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>interfaceIdx</name> <operator>&lt;</operator> <call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>hrnPgInterface</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>interfaceIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>hrnPgInterface</name><index>[<expr><name>interfaceIdx</name></expr>]</index></name><operator>.</operator><name>version</name> <operator>==</operator> <name>pgVersion</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>&amp;</operator><name><name>hrnPgInterface</name><index>[<expr><name>interfaceIdx</name></expr>]</index></name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// If the version was not found then error</comment>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"invalid "</literal> <name>PG_NAME</name> <literal type="string">" version %u"</literal></expr></argument>, <argument><expr><name>pgVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>STRUCT</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>hrnPgCatalogVersion</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pgVersion</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>pgVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><call><name>hrnPgInterfaceVersion</name><argument_list>(<argument><expr><name>pgVersion</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>catalogVersion</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>Buffer</name> <modifier>*</modifier></type>
<name>hrnPgControlToBuffer</name><parameter_list>(<parameter><decl><type><name>PgControl</name></type> <name>pgControl</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>PG_CONTROL</name></expr></argument>, <argument><expr><name>pgControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pgControl</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set defaults if values are not passed</comment>
    <expr_stmt><expr><name><name>pgControl</name><operator>.</operator><name>pageSize</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pgControl</name><operator>.</operator><name>pageSize</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>PG_PAGE_SIZE_DEFAULT</name></expr> </then><else>: <expr><name><name>pgControl</name><operator>.</operator><name>pageSize</name></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pgControl</name><operator>.</operator><name>walSegmentSize</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pgControl</name><operator>.</operator><name>walSegmentSize</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>PG_WAL_SEGMENT_SIZE_DEFAULT</name></expr> </then><else>: <expr><name><name>pgControl</name><operator>.</operator><name>walSegmentSize</name></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pgControl</name><operator>.</operator><name>catalogVersion</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pgControl</name><operator>.</operator><name>catalogVersion</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then>
        <expr><call><name>hrnPgInterfaceVersion</name><argument_list>(<argument><expr><name><name>pgControl</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>catalogVersion</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>pgControl</name><operator>.</operator><name>catalogVersion</name></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pgControl</name><operator>.</operator><name>systemId</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pgControl</name><operator>.</operator><name>systemId</name></name> <operator>&lt;</operator> <literal type="number">100</literal></expr> ?</condition><then> <expr><call><name>hrnPgSystemId</name><argument_list>(<argument><expr><name><name>pgControl</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pgControl</name><operator>.</operator><name>systemId</name></name></expr> </then><else>: <expr><name><name>pgControl</name><operator>.</operator><name>systemId</name></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pgControl</name><operator>.</operator><name>checkpoint</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pgControl</name><operator>.</operator><name>checkpoint</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>pgControl</name><operator>.</operator><name>checkpoint</name></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pgControl</name><operator>.</operator><name>timeline</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pgControl</name><operator>.</operator><name>timeline</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>pgControl</name><operator>.</operator><name>timeline</name></name></expr></else></ternary></expr>;</expr_stmt>

    <comment type="line">// Create the buffer and clear it</comment>
    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><name>HRN_PG_CONTROL_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Generate pg_control</comment>
    <expr_stmt><expr><call><name>hrnPgInterfaceVersion</name><argument_list>(<argument><expr><name><name>pgControl</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>control</name><argument_list>(<argument><expr><name>pgControl</name></expr></argument>, <argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>hrnPgWalToBuffer</name><parameter_list>(<parameter><decl><type><name>PgWal</name></type> <name>pgWal</name></decl></parameter>, <parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>walBuffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>PG_WAL</name></expr></argument>, <argument><expr><name>pgWal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>walBuffer</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set default WAL segment size if not specified</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pgWal</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>pgWal</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>PG_WAL_SEGMENT_SIZE_DEFAULT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Set default system id if not specified</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pgWal</name><operator>.</operator><name>systemId</name></name> <operator>&lt;</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>pgWal</name><operator>.</operator><name>systemId</name></name> <operator>=</operator> <call><name>hrnPgSystemId</name><argument_list>(<argument><expr><name><name>pgWal</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>pgWal</name><operator>.</operator><name>systemId</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Generate WAL</comment>
    <expr_stmt><expr><call><name>hrnPgInterfaceVersion</name><argument_list>(<argument><expr><name><name>pgWal</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><call><name>wal</name><argument_list>(<argument><expr><name>pgWal</name></expr></argument>, <argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
