<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/performance/storageTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Storage Performance

Test the performance of various storage functions, in particular when implemented remotely.

Generally speaking, the starting values should be high enough to "blow up" in terms of execution time if there are performance
problems without taking very long if everything is running smoothly. These starting values can then be scaled up for profiling and
stress testing as needed.
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessFork.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessStorage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/gz/compress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/lz4/compress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/filter/filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/filter/sink.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/remote/protocol.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Driver to test storageNewItrP()
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct
<block>{
    <expr_stmt><expr><name>STORAGE_COMMON_MEMBER</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>fileTotal</name></decl>;</decl_stmt>
}</block></struct></type> <name>StorageTestPerfList</name>;</typedef>

<function><type><specifier>static</specifier> <name>StorageList</name> <modifier>*</modifier></type>
<name>storageTestPerfList</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>StorageInfoLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>StorageInterfaceListParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageTestPerfList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>path</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>level</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>param</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StorageList</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>fileTotal</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>storageLstNew</name><argument_list>(<argument><expr><name>storageInfoLevelExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>fileIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fileIdx</name> <operator>&lt;</operator> <name><name>this</name><operator>-&gt;</operator><name>fileTotal</name></name></expr>;</condition> <incr><expr><name>fileIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <macro><name>storageLstAdd</name><argument_list>(<argument>result</argument>, <argument>&amp;(StorageInfo){.exists = true</argument>, <argument>.name = STRDEF(<literal type="string">"name"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></for>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test filter to simulate throughput via rate limiting
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>TestIoRate</name>
<block>{
    <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name></decl>;</decl_stmt>                                         <comment type="line">// Mem context of filter</comment>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>timeBegin</name></decl>;</decl_stmt>                                             <comment type="line">// Time when filter started processing data in ms</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>byteTotal</name></decl>;</decl_stmt>                                             <comment type="line">// Total bytes processed</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>bytesPerSec</name></decl>;</decl_stmt>                                           <comment type="line">// Rate in bytes per second to enforce</comment>
}</block></struct></type> <name>TestIoRate</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>testIoRateProcess</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>TestIoRate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Determine the elapsed time since the filter began processing data. The begin time is not set in the constructor because an</comment>
    <comment type="line">// unknown amount of time can elapse between the filter being created and acually used.</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>timeElapsed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>timeBegin</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>timeBegin</name></name> <operator>=</operator> <call><name>timeMSec</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>timeElapsed</name> <operator>=</operator> <call><name>timeMSec</name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>this</name><operator>-&gt;</operator><name>timeBegin</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="line">// Add buffer used to the byte total</comment>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>byteTotal</name></name> <operator>+=</operator> <call><name>bufUsed</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Determine how many ms these bytes should take to go through the filter and sleep if greater than elapsed time</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>timeRate</name> <init>= <expr><name><name>this</name><operator>-&gt;</operator><name>byteTotal</name></name> <operator>*</operator> <name>MSEC_PER_SEC</name> <operator>/</operator> <name><name>this</name><operator>-&gt;</operator><name>bytesPerSec</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>timeElapsed</name> <operator>&lt;</operator> <name>timeRate</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sleepMSec</name><argument_list>(<argument><expr><name>timeRate</name> <operator>-</operator> <name>timeElapsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>IoFilter</name> <modifier>*</modifier></type>
<name>testIoRateNew</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>bytesPerSec</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>IoFilter</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>TestIoRate</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>TestIoRate</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>*</operator><name>driver</name> <operator>=</operator> <operator>(</operator><name>TestIoRate</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>memContext</name> <operator>=</operator> <call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr>,
            <expr><operator>.</operator><name>bytesPerSec</name> <operator>=</operator> <name>bytesPerSec</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>ioFilterNewP</name><argument_list>(<argument><expr><call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"test-io-rate"</literal></expr></argument>, <argument><expr><literal type="number">0x2d032dbd3ba4cb40</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>driver</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>.</operator><name>in</name> <operator>=</operator> <name>testIoRateProcess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>this</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageNewItrP()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_TITLE_FMT</name><argument_list>(<argument><expr><literal type="string">"list %d million files"</literal></expr></argument>, <argument><expr><name>TEST_SCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// One million files represents a fairly large cluster</comment>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>TEST_SCALE</name> <operator>&lt;=</operator> <literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>fileTotal</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1000000</literal> <operator>*</operator> <name>TEST_SCALE</name></expr></init></decl>;</decl_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>(<argument>.timeout = <literal type="number">60000</literal></argument>)</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Create a basic configuration so the remote storage driver can determine the storage type</comment>
                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--"</literal> <name>CFGOPT_STANZA</name> <literal type="string">"=test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--"</literal> <name>CFGOPT_PROCESS</name> <literal type="string">"=0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRemoteType</name></expr></argument>, <argument><expr><name>protocolStorageTypeRepo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleRemote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Create a driver to test remote performance of storageNewItrP() and inject it into storageRepo()</comment>
                <decl_stmt><decl><type><name>StorageTestPerfList</name></type> <name>driver</name> <init>=
                <expr><block>{
                    <expr><operator>.</operator><name>interface</name> <operator>=</operator> <name>storageInterfaceTestDummy</name></expr>,
                    <expr><operator>.</operator><name>fileTotal</name> <operator>=</operator> <name>fileTotal</name></expr>,
                }</block></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name><name>driver</name><operator>.</operator><name>interface</name><operator>.</operator><name>list</name></name> <operator>=</operator> <name>storageTestPerfList</name></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storageNew</name><argument_list>(<argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>driver</name></expr></argument>, <argument><expr><name><name>driver</name><operator>.</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>storageHelper</name><operator>.</operator><name>storageRepoWrite</name></name> <operator>=</operator> <call><name>memNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Storage</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>storageHelper</name><operator>.</operator><name>storageRepoWrite</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>storageTest</name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"check test storage is used"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Setup handler for remote storage protocol</comment>
                <decl_stmt><decl><type><name>ProtocolServer</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><call><name>protocolServerNew</name><argument_list>(
                    <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"storage test server"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ProtocolServerHandler</name></type> <name><name>commandHandler</name><index>[]</index></name> <init>= <expr><block>{<expr><name>PROTOCOL_SERVER_HANDLER_STORAGE_REMOTE_LIST</name></expr>}</block></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>protocolServerProcess</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>commandHandler</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>commandHandler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Create client</comment>
                <decl_stmt><decl><type><name>ProtocolClient</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>protocolClientNew</name><argument_list>(
                    <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"storage test client"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_READ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Create remote storage</comment>
                <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageRemote</name> <init>= <expr><call><name>storageRemoteNew</name><argument_list>(
                    <argument><expr><name>STORAGE_MODE_FILE_DEFAULT</name></expr></argument>, <argument><expr><name>STORAGE_MODE_PATH_DEFAULT</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>TimeMSec</name></type> <name>timeBegin</name> <init>= <expr><call><name>timeMSec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Storage info list</comment>
                <decl_stmt><decl><type><name>uint64_t</name></type> <name>fileTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>StorageIterator</name> <modifier>*</modifier></type><name>storageItr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storageItr</name></expr></argument>, <argument><expr><call><name>storageNewItrP</name><argument_list>(<argument><expr><name>storageRemote</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"list remote files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <while>while <condition>(<expr><call><name>storageItrMore</name><argument_list>(<argument><expr><name>storageItr</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>storageItrNext</name><argument_list>(<argument><expr><name>storageItr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>fileTotal</name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></while>

                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name>fileTotal</name></expr></argument>, <argument><expr><name>fileTotal</name></expr></argument>, <argument><expr><literal type="string">"check callback total"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_LOG_FMT</name><argument_list>(<argument><expr><literal type="string">"list transferred in %ums"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><call><name>timeMSec</name><argument_list>()</argument_list></call> <operator>-</operator> <name>timeBegin</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Free client</comment>
                <expr_stmt><expr><call><name>protocolClientFree</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"benchmark filters"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// 4MB buffers are the current default</comment>
        <expr_stmt><expr><call><name>ioBufferSizeSet</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// 1MB is a fairly normal table size</comment>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>TEST_SCALE</name> <operator>&lt;=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>blockTotal</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal> <operator>*</operator> <name>TEST_SCALE</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set iteration</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>iteration</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set rate</comment>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>rateIn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// MB/s (0 disables)</comment>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>rateOut</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// MB/s (0 disables)</comment>

        <comment type="line">// Get the sample pages from disk</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>HRN_PATH_REPO_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test/data/filecopy.table.bin"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Build the input buffer</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>blockTotal</name> <operator>*</operator> <call><name>bufSize</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>blockIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>blockIdx</name> <operator>&lt;</operator> <name>blockTotal</name></expr>;</condition> <incr><expr><name>blockIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>blockIdx</name> <operator>*</operator> <call><name>bufSize</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE_FMT</name><argument_list>(
            <argument><expr><literal type="string">"%u iteration(s) of %zuMiB with %"</literal> <name>PRIu64</name> <literal type="string">"MB/s input, %"</literal> <name>PRIu64</name> <literal type="string">"MB/s output"</literal></expr></argument>, <argument><expr><name>iteration</name></expr></argument>,
            <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>bufUsed</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rateIn</name></expr></argument>, <argument><expr><name>rateOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BENCHMARK_BEGIN</name><parameter_list>()</parameter_list></cpp:macro>                                                                                                  \
            <cpp:value>IoWrite *write = ioBufferWriteNew(bufNew(0));                                                                          \

        #define BENCHMARK_FILTER_ADD(filter)                                                                                       \
            ioFilterGroupAdd(ioWriteFilterGroup(write), filter);</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BENCHMARK_END</name><parameter_list>(<parameter><type><name>addTo</name></type></parameter>)</parameter_list></cpp:macro>                                                                                               \
            <cpp:value>if (rateOut != 0)                                                                                                      \
                ioFilterGroupAdd(ioWriteFilterGroup(write), testIoRateNew(rateOut * 1000 * 1000));                                 \
            ioFilterGroupAdd(ioWriteFilterGroup(write), ioSinkNew());                                                              \
            ioWriteOpen(write);                                                                                                    \
                                                                                                                                   \
            IoRead *read = ioBufferReadNew(input);                                                                                 \
            if (rateIn != 0)                                                                                                       \
                ioFilterGroupAdd(ioReadFilterGroup(read), testIoRateNew(rateIn * 1000 * 1000));                                    \
            ioReadOpen(read);                                                                                                      \
                                                                                                                                   \
            uint64_t benchMarkBegin = timeMSec();                                                                                  \
                                                                                                                                   \
            ioCopyP(read, write);                                                                                                  \
                                                                                                                                   \
            ioReadClose(read);                                                                                                     \
            ioWriteClose(write);                                                                                                   \
                                                                                                                                   \
            addTo += timeMSec() - benchMarkBegin;</cpp:value></cpp:define>

        <comment type="line">// Start totals to 1ms just in case something takes 0ms to run</comment>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>copyTotal</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>md5Total</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>sha1Total</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>sha256Total</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>gzip6Total</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBLZ4</name></cpp:ifdef>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>lz41Total</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_LIBLZ4</comment>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name>iteration</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
            <expr_stmt><expr><call><name>TEST_LOG_FMT</name><argument_list>(<argument><expr><literal type="string">"copy iteration %u"</literal></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>BENCHMARK_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BENCHMARK_END</name><argument_list>(<argument><expr><name>copyTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
            <expr_stmt><expr><call><name>TEST_LOG_FMT</name><argument_list>(<argument><expr><literal type="string">"md5 iteration %u"</literal></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>BENCHMARK_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BENCHMARK_FILTER_ADD</name><argument_list>(<argument><expr><call><name>cryptoHashNew</name><argument_list>(<argument><expr><name>hashTypeMd5</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BENCHMARK_END</name><argument_list>(<argument><expr><name>md5Total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
            <expr_stmt><expr><call><name>TEST_LOG_FMT</name><argument_list>(<argument><expr><literal type="string">"sha1 iteration %u"</literal></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>BENCHMARK_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BENCHMARK_FILTER_ADD</name><argument_list>(<argument><expr><call><name>cryptoHashNew</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BENCHMARK_END</name><argument_list>(<argument><expr><name>sha1Total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
            <expr_stmt><expr><call><name>TEST_LOG_FMT</name><argument_list>(<argument><expr><literal type="string">"sha256 iteration %u"</literal></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>BENCHMARK_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BENCHMARK_FILTER_ADD</name><argument_list>(<argument><expr><call><name>cryptoHashNew</name><argument_list>(<argument><expr><name>hashTypeSha256</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BENCHMARK_END</name><argument_list>(<argument><expr><name>sha256Total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
            <expr_stmt><expr><call><name>TEST_LOG_FMT</name><argument_list>(<argument><expr><literal type="string">"gzip -6 iteration %u"</literal></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>BENCHMARK_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BENCHMARK_FILTER_ADD</name><argument_list>(<argument><expr><call><name>gzCompressNew</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BENCHMARK_END</name><argument_list>(<argument><expr><name>gzip6Total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBLZ4</name></cpp:ifdef>
            <expr_stmt><expr><call><name>TEST_LOG_FMT</name><argument_list>(<argument><expr><literal type="string">"lz4 -1 iteration %u"</literal></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>BENCHMARK_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BENCHMARK_FILTER_ADD</name><argument_list>(<argument><expr><call><name>lz4CompressNew</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>BENCHMARK_END</name><argument_list>(<argument><expr><name>lz41Total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_LIBLZ4</comment>
        </block_content>}</block></for>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_RESULT</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>total</name></type></parameter>)</parameter_list></cpp:macro>                                                                                           \
            <cpp:value>TEST_LOG_FMT(                                                                                                          \
                "%s time %" PRIu64"ms, avg time %" PRIu64"ms, avg throughput: %" PRIu64 "MB/s", name, total, total / iteration,    \
                iteration * blockTotal * 1024 * 1024 * 1000 / total / 1000000);</cpp:value></cpp:define>

        <expr_stmt><expr><call><name>TEST_RESULT</name><argument_list>(<argument><expr><literal type="string">"copy"</literal></expr></argument>, <argument><expr><name>copyTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT</name><argument_list>(<argument><expr><literal type="string">"md5"</literal></expr></argument>, <argument><expr><name>md5Total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT</name><argument_list>(<argument><expr><literal type="string">"sha1"</literal></expr></argument>, <argument><expr><name>sha1Total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT</name><argument_list>(<argument><expr><literal type="string">"sha256"</literal></expr></argument>, <argument><expr><name>sha256Total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT</name><argument_list>(<argument><expr><literal type="string">"gzip -6"</literal></expr></argument>, <argument><expr><name>gzip6Total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBLZ4</name></cpp:ifdef>
        <expr_stmt><expr><call><name>TEST_RESULT</name><argument_list>(<argument><expr><literal type="string">"lz4 -1"</literal></expr></argument>, <argument><expr><name>lz41Total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_LIBLZ4</comment>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
