<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/info/manifestTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Backup Manifest Handler
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoBackup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPostgres.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Special string constants
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHRUG_EMOJI</name></cpp:macro>                                                 <cpp:value>"Â¯\\_(ã)_/Â¯"</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"struct sizes"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Make sure the size of structs doesn't change without us knowing about it</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ManifestLoadFound</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"check size of ManifestLoadFound"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ManifestPath</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"check size of ManifestPath"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ManifestFile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">136</literal></expr> </then><else>: <expr><literal type="number">108</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"check size of ManifestFile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"manifestNewBuild()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_HEADER</name></cpp:macro>                                                                                               \
            <cpp:value>"[backup]\n"                                                                                                           \
            "backup-label=null\n"                                                                                                  \
            "backup-reference=\"\"\n"                                                                                              \
            "backup-timestamp-copy-start=0\n"                                                                                      \
            "backup-timestamp-start=0\n"                                                                                           \
            "backup-timestamp-stop=0\n"                                                                                            \
            "backup-type=\"full\"\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_HEADER_LABEL</name></cpp:macro>                                                                                         \
            <cpp:value>"[backup]\n"                                                                                                           \
            "backup-label=\"20190818-084502F\"\n"                                                                                  \
            "backup-reference=\"20190818-084502F\"\n"                                                                              \
            "backup-timestamp-copy-start=0\n"                                                                                      \
            "backup-timestamp-start=0\n"                                                                                           \
            "backup-timestamp-stop=0\n"                                                                                            \
            "backup-type=\"full\"\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_HEADER_BUNDLE</name></cpp:macro>                                                                                        \
            <cpp:value>"[backup]\n"                                                                                                           \
            "backup-bundle=true\n"                                                                                                 \
            "backup-label=null\n"                                                                                                  \
            "backup-reference=\"\"\n"                                                                                              \
            "backup-timestamp-copy-start=0\n"                                                                                      \
            "backup-timestamp-start=0\n"                                                                                           \
            "backup-timestamp-stop=0\n"                                                                                            \
            "backup-type=\"full\"\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_DB_90</name></cpp:macro>                                                                                                \
            <cpp:value>"\n"                                                                                                                   \
            "[backup:db]\n"                                                                                                        \
            "db-catalog-version=201008051\n"                                                                                       \
            "db-control-version=903\n"                                                                                             \
            "db-id=0\n"                                                                                                            \
            "db-system-id=0\n"                                                                                                     \
            "db-version=\"9.0\"\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_DB_91</name></cpp:macro>                                                                                                \
            <cpp:value>"\n"                                                                                                                   \
            "[backup:db]\n"                                                                                                        \
            "db-catalog-version=201105231\n"                                                                                       \
            "db-control-version=903\n"                                                                                             \
            "db-id=0\n"                                                                                                            \
            "db-system-id=0\n"                                                                                                     \
            "db-version=\"9.1\"\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_DB_92</name></cpp:macro>                                                                                                \
            <cpp:value>"\n"                                                                                                                   \
            "[backup:db]\n"                                                                                                        \
            "db-catalog-version=201204301\n"                                                                                       \
            "db-control-version=922\n"                                                                                             \
            "db-id=0\n"                                                                                                            \
            "db-system-id=0\n"                                                                                                     \
            "db-version=\"9.2\"\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_DB_94</name></cpp:macro>                                                                                                \
            <cpp:value>"\n"                                                                                                                   \
            "[backup:db]\n"                                                                                                        \
            "db-catalog-version=201409291\n"                                                                                       \
            "db-control-version=942\n"                                                                                             \
            "db-id=0\n"                                                                                                            \
            "db-system-id=0\n"                                                                                                     \
            "db-version=\"9.4\"\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_DB_12</name></cpp:macro>                                                                                                \
            <cpp:value>"\n"                                                                                                                   \
            "[backup:db]\n"                                                                                                        \
            "db-catalog-version=201909212\n"                                                                                       \
            "db-control-version=1201\n"                                                                                            \
            "db-id=0\n"                                                                                                            \
            "db-system-id=0\n"                                                                                                     \
            "db-version=\"12\"\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_DB_13</name></cpp:macro>                                                                                                \
            <cpp:value>"\n"                                                                                                                   \
            "[backup:db]\n"                                                                                                        \
            "db-catalog-version=202007201\n"                                                                                       \
            "db-control-version=1300\n"                                                                                            \
            "db-id=0\n"                                                                                                            \
            "db-system-id=0\n"                                                                                                     \
            "db-version=\"13\"\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_OPTION_ALL</name></cpp:macro>                                                                                           \
            <cpp:value>"\n"                                                                                                                   \
            "[backup:option]\n"                                                                                                    \
            "option-archive-check=false\n"                                                                                         \
            "option-archive-copy=false\n"                                                                                          \
            "option-checksum-page=false\n"                                                                                         \
            "option-compress=false\n"                                                                                              \
            "option-compress-type=\"none\"\n"                                                                                      \
            "option-hardlink=false\n"                                                                                              \
            "option-online=false\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_OPTION_ARCHIVE</name></cpp:macro>                                                                                       \
            <cpp:value>"\n"                                                                                                                   \
            "[backup:option]\n"                                                                                                    \
            "option-archive-check=false\n"                                                                                         \
            "option-archive-copy=false\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_OPTION_CHECKSUM_PAGE_FALSE</name></cpp:macro>                                                                           \
            <cpp:value>"option-checksum-page=false\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_OPTION_CHECKSUM_PAGE_TRUE</name></cpp:macro>                                                                            \
            <cpp:value>"option-checksum-page=true\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_OPTION_ONLINE_FALSE</name></cpp:macro>                                                                                  \
            <cpp:value>"option-compress=false\n"                                                                                              \
            "option-compress-type=\"none\"\n"                                                                                      \
            "option-hardlink=false\n"                                                                                              \
            "option-online=false\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_OPTION_ONLINE_TRUE</name></cpp:macro>                                                                                   \
            <cpp:value>"option-compress=false\n"                                                                                              \
            "option-compress-type=\"none\"\n"                                                                                      \
            "option-hardlink=false\n"                                                                                              \
            "option-online=true\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_FILE_DEFAULT_PRIMARY_FALSE</name></cpp:macro>                                                                           \
            <cpp:value>"\n"                                                                                                                   \
            "[target:file:default]\n"                                                                                              \
            "group=\"" TEST_GROUP "\"\n"                                                                                           \
            "mode=\"0600\"\n"                                                                                                      \
            "user=\"" TEST_USER "\"\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_FILE_DEFAULT_PRIMARY_TRUE</name></cpp:macro>                                                                            \
            <cpp:value>"\n"                                                                                                                   \
            "[target:file:default]\n"                                                                                              \
            "group=\"" TEST_GROUP "\"\n"                                                                                           \
            "mode=\"0600\"\n"                                                                                                      \
            "user=\"" TEST_USER "\"\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_LINK_DEFAULT</name></cpp:macro>                                                                                         \
            <cpp:value>"\n"                                                                                                                   \
            "[target:link:default]\n"                                                                                              \
            "group=\"" TEST_GROUP "\"\n"                                                                                           \
            "user=\"" TEST_USER "\"\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_PATH_DEFAULT</name></cpp:macro>                                                                                         \
            <cpp:value>"\n"                                                                                                                   \
            "[target:path:default]\n"                                                                                              \
            "group=\"" TEST_GROUP "\"\n"                                                                                           \
            "mode=\"0700\"\n"                                                                                                      \
            "user=\"" TEST_USER "\"\n"</cpp:value></cpp:define>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"pg"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storagePg</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storagePgWrite</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"manifest with all features - 9.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Version</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><literal type="string">"9.0\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// base/1 directory</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_BASE</name></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Temp relations to ignore</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/t1_1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282113</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/t1_1.1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282113</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/t8888888_8888888_vm"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282113</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/t8888888_8888888_vm.999999"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282113</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Unlogged relations (pgVersion &gt; 9.1)</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/555"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282114</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"skip file because there is an _init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/555_fsm"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282114</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"skip file because there is an _init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/555_vm.1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282114</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"skip file because there is an _init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/555_init"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282114</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"do not skip _init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/555_init.1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282114</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"do not skip _init with segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/555_vm.1_vm"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282114</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"do not skip files that do not have valid endings as we are not sure what they are"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Config directory and file links</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"config"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
            <argument><expr><call><name>symlink</name><argument_list>(<argument><expr><literal type="string">"../config/postgresql.conf"</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/postgresql.conf"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"config/postgresql.conf"</literal></expr></argument>, <argument><expr><literal type="string">"POSTGRESQLCONF"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282116</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
            <argument><expr><call><name>symlink</name><argument_list>(<argument><expr><literal type="string">"../config/pg_hba.conf"</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_hba.conf"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"config/pg_hba.conf"</literal></expr></argument>, <argument><expr><literal type="string">"PGHBACONF"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282117</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create special file</comment>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"mkfifo -m 666 %s"</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/testpipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Files that will always be ignored</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_FILE_BACKUPLABELOLD</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_FILE_POSTMTROPTS</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_FILE_POSTMTRPID</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_FILE_RECOVERYCONF</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_FILE_RECOVERYDONE</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Directories that will always be ignored</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PREFIX_PGSQLTMP</name></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PREFIX_PGSQLTMP</name> <literal type="string">"2"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Directories under which files will be ignored (some depending on the version)</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_PGDYNSHMEM</name></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_PGDYNSHMEM</name> <literal type="string">"/"</literal> <name>BOGUS_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_PGNOTIFY</name></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_PGNOTIFY</name> <literal type="string">"/"</literal> <name>BOGUS_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282102</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_PGREPLSLOT</name></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_PGREPLSLOT</name> <literal type="string">"/"</literal> <name>BOGUS_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282103</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_PGSERIAL</name></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_PGSERIAL</name> <literal type="string">"/"</literal> <name>BOGUS_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282104</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_PGSNAPSHOTS</name></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_PGSNAPSHOTS</name> <literal type="string">"/"</literal> <name>BOGUS_STR</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282105</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_PGSTATTMP</name> <literal type="string">"/"</literal> <name>BOGUS_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0640</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282106</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_PGSUBTRANS</name></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_PGSUBTRANS</name> <literal type="string">"/"</literal> <name>BOGUS_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282107</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// WAL directory not ignored when offline</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_xlog"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_xlog/"</literal> <name>BOGUS_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282108</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_xlog/archive_status"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_xlog/archive_status/"</literal> <name>BOGUS_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282108</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// global directory</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_GLOBAL</name></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_GLOBAL</name> <literal type="string">"/"</literal> <name>PG_FILE_PGINTERNALINIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_GLOBAL</name> <literal type="string">"/"</literal> <name>PG_FILE_PGINTERNALINIT</name> <literal type="string">".1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_GLOBAL</name> <literal type="string">"/"</literal> <name>PG_FILE_PGINTERNALINIT</name> <literal type="string">".allow"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_GLOBAL</name> <literal type="string">"/t1_1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282114</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>exclusionList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>exclusionList</name></expr></argument>, <argument><expr><name>PG_PATH_GLOBAL</name> <literal type="string">"/"</literal> <name>PG_FILE_PGINTERNALINIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>exclusionList</name></expr></argument>, <argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>exclusionList</name></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>exclusionList</name></expr></argument>, <argument><expr><literal type="string">"bogus/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make 'pg_xlog/archive_status' a link (if other links in the pg_xlog dir (should not be), they will be followed and added</comment>
        <comment type="line">// when online but archive_status (and pg_xlog), whether a link of not, will will only be followed if offline)</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_xlog/archive_status"</literal></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"archivestatus"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
            <argument><expr><call><name>symlink</name><argument_list>(<argument><expr><literal type="string">"../../archivestatus"</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_xlog/archive_status"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_xlog/archive_status/"</literal> <name>BOGUS_STR</name></expr></argument>, <argument><expr><literal type="string">"TESTDATA"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Tablespace 1</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"ts/1/PG_9.0_201008051/1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGTBLSPC</name></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>symlink</name><argument_list>(<argument><expr><literal type="string">"../../ts/1"</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>,<argument><expr><literal type="string">"pg_tblspc/1/PG_9.0_201008051/1/16384"</literal></expr></argument>, <argument><expr><literal type="string">"TESTDATA"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282115</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>,<argument><expr><literal type="string">"pg_tblspc/1/PG_9.0_201008051/1/t123_123_fsm"</literal></expr></argument>, <argument><expr><literal type="string">"IGNORE_TEMP_RELATION"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282115</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add tablespaceList with error (no name)</comment>
        <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>tablespaceList</name> <init>= <expr><call><name>pckWriteNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>pckWriteArrayBeginP</name><argument_list>(<argument><expr><name>tablespaceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><name>tablespaceList</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>tablespaceList</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"tblspc2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteArrayEndP</name><argument_list>(<argument><expr><name>tablespaceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>tablespaceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Test tablespace error</comment>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestNewBuild</name><argument_list>(
                <argument><expr><name>storagePg</name></expr></argument>, <argument><expr><name>PG_VERSION_90</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_90</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>exclusionList</name></expr></argument>,
                <argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name>tablespaceList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"tablespace with oid 1 not found in tablespace map\n"</literal>
            <literal type="string">"HINT: was a tablespace created or dropped during the backup?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add a tablespace to tablespaceList that does exist</comment>
        <expr_stmt><expr><name>tablespaceList</name> <operator>=</operator> <call><name>pckWriteNewP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>pckWriteArrayBeginP</name><argument_list>(<argument><expr><name>tablespaceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><name>tablespaceList</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>tablespaceList</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"tblspc2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteArrayEndP</name><argument_list>(<argument><expr><name>tablespaceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteArrayBeginP</name><argument_list>(<argument><expr><name>tablespaceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><name>tablespaceList</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>tablespaceList</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"tblspc1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteArrayEndP</name><argument_list>(<argument><expr><name>tablespaceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>tablespaceList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Test manifest - temp tables and pg_notify files ignored</comment>
        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>manifest</name></expr></argument>,
            <argument><expr><call><name>manifestNewBuild</name><argument_list>(
                <argument><expr><name>storagePg</name></expr></argument>, <argument><expr><name>PG_VERSION_90</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_90</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                <argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name>tablespaceList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"build manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestBackupLabelSet</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20190818-084502F"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup label set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>contentSave</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestSave</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"save manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><macro><name>harnessInfoChecksumZ</name><argument_list>(
                <argument>TEST_MANIFEST_HEADER_LABEL
                TEST_MANIFEST_DB_90
                TEST_MANIFEST_OPTION_ALL
                <literal type="string">"\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\""</literal> TEST_PATH <literal type="string">"/pg\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"file\":\"pg_hba.conf\",\"path\":\"../config\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"pg_data/pg_xlog/archive_status={\"path\":\"../../archivestatus\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"file\":\"postgresql.conf\",\"path\":\"../config\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"pg_tblspc/1={\"path\":\"../../ts/1\",\"tablespace-id\":\"1\",\"tablespace-name\":\"tblspc1\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/PG_VERSION={\"size\":4,\"timestamp\":1565282100}\n"</literal>
                <literal type="string">"pg_data/base/1/555={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/555_fsm={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/555_init={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/555_init.1={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/555_vm.1={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/555_vm.1_vm={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/global/pg_internal.init.allow={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/pg_dynshmem/BOGUS={\"size\":0,\"timestamp\":1565282101}\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"size\":9,\"timestamp\":1565282117}\n"</literal>
                <literal type="string">"pg_data/pg_replslot/BOGUS={\"size\":0,\"timestamp\":1565282103}\n"</literal>
                <literal type="string">"pg_data/pg_serial/BOGUS={\"size\":0,\"timestamp\":1565282104}\n"</literal>
                <literal type="string">"pg_data/pg_snapshots/BOGUS={\"size\":4,\"timestamp\":1565282105}\n"</literal>
                <literal type="string">"pg_data/pg_xlog/BOGUS={\"size\":0,\"timestamp\":1565282108}\n"</literal>
                <literal type="string">"pg_data/pg_xlog/archive_status/BOGUS={\"size\":8,\"timestamp\":1565282120}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"size\":14,\"timestamp\":1565282116}\n"</literal>
                <literal type="string">"pg_tblspc/1/PG_9.0_201008051/1/16384={\"size\":8,\"timestamp\":1565282115}\n"</literal>
                TEST_MANIFEST_FILE_DEFAULT_PRIMARY_TRUE
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:link]\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"destination\":\"../config/pg_hba.conf\"}\n"</literal>
                <literal type="string">"pg_data/pg_tblspc/1={\"destination\":\"../../ts/1\"}\n"</literal>
                <literal type="string">"pg_data/pg_xlog/archive_status={\"destination\":\"../../archivestatus\"}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"destination\":\"../config/postgresql.conf\"}\n"</literal>
                TEST_MANIFEST_LINK_DEFAULT
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <literal type="string">"pg_data/base={}\n"</literal>
                <literal type="string">"pg_data/base/1={}\n"</literal>
                <literal type="string">"pg_data/global={}\n"</literal>
                <literal type="string">"pg_data/pg_dynshmem={}\n"</literal>
                <literal type="string">"pg_data/pg_notify={}\n"</literal>
                <literal type="string">"pg_data/pg_replslot={}\n"</literal>
                <literal type="string">"pg_data/pg_serial={}\n"</literal>
                <literal type="string">"pg_data/pg_snapshots={}\n"</literal>
                <literal type="string">"pg_data/pg_stat_tmp={\"mode\":\"0750\"}\n"</literal>
                <literal type="string">"pg_data/pg_subtrans={}\n"</literal>
                <literal type="string">"pg_data/pg_tblspc={}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={}\n"</literal>
                <literal type="string">"pg_data/pg_xlog/archive_status={\"mode\":\"0777\"}\n"</literal>
                <literal type="string">"pg_tblspc={}\n"</literal>
                <literal type="string">"pg_tblspc/1={}\n"</literal>
                <literal type="string">"pg_tblspc/1/PG_9.0_201008051={}\n"</literal>
                <literal type="string">"pg_tblspc/1/PG_9.0_201008051/1={}\n"</literal>
                TEST_MANIFEST_PATH_DEFAULT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"check manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: exclude contents of '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base' from backup using 'base/' exclusion\n"</literal>
            <literal type="string">"P00   INFO: exclude '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/global/pg_internal.init' from backup using 'global/pg_internal.init' exclusion\n"</literal>
            <literal type="string">"P00   WARN: exclude special file '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/testpipe' from backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove special file</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/testpipe"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"error if special file removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove symlinks and directories</comment>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileRemoveError</name></expr></argument>, <argument><expr><literal type="string">"unable to remove symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>,<argument><expr><literal type="string">"ts/1/PG_9.0_201008051"</literal></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"manifest with all features - 9.1, online"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Version</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><literal type="string">"9.1\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create a path other than archive_status under pg_xlog for code coverage</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_xlog/somepath"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add data to pg_wal to ensure it is not ignored (online or offline) until &gt;= pgVersion 10 (file in pg_xlog log is ignored)</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_wal/000000010000000000000001"</literal></expr></argument>, <argument><expr><literal type="string">"WALDATA"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Test manifest - temp tables, unlogged tables, pg_serial and pg_xlog files ignored</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>manifest</name></expr></argument>,
            <argument><expr><call><name>manifestNewBuild</name><argument_list>(<argument><expr><name>storagePg</name></expr></argument>, <argument><expr><name>PG_VERSION_91</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_91</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"build manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>contentSave</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestSave</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"save manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><macro><name>harnessInfoChecksumZ</name><argument_list>(
                <argument>TEST_MANIFEST_HEADER
                TEST_MANIFEST_DB_91
                TEST_MANIFEST_OPTION_ARCHIVE
                TEST_MANIFEST_OPTION_CHECKSUM_PAGE_FALSE
                TEST_MANIFEST_OPTION_ONLINE_TRUE
                <literal type="string">"\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\""</literal> TEST_PATH <literal type="string">"/pg\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"file\":\"pg_hba.conf\",\"path\":\"../config\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"pg_data/pg_xlog/archive_status={\"path\":\"../../archivestatus\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"file\":\"postgresql.conf\",\"path\":\"../config\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/PG_VERSION={\"size\":4,\"timestamp\":1565282100}\n"</literal>
                <literal type="string">"pg_data/base/1/555_init={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/555_init.1={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/555_vm.1_vm={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/global/pg_internal.init.allow={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/pg_dynshmem/BOGUS={\"size\":0,\"timestamp\":1565282101}\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"size\":9,\"timestamp\":1565282117}\n"</literal>
                <literal type="string">"pg_data/pg_replslot/BOGUS={\"size\":0,\"timestamp\":1565282103}\n"</literal>
                <literal type="string">"pg_data/pg_snapshots/BOGUS={\"size\":4,\"timestamp\":1565282105}\n"</literal>
                <literal type="string">"pg_data/pg_wal/000000010000000000000001={\"size\":7,\"timestamp\":1565282120}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"size\":14,\"timestamp\":1565282116}\n"</literal>
                TEST_MANIFEST_FILE_DEFAULT_PRIMARY_TRUE
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:link]\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"destination\":\"../config/pg_hba.conf\"}\n"</literal>
                <literal type="string">"pg_data/pg_xlog/archive_status={\"destination\":\"../../archivestatus\"}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"destination\":\"../config/postgresql.conf\"}\n"</literal>
                TEST_MANIFEST_LINK_DEFAULT
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <literal type="string">"pg_data/base={}\n"</literal>
                <literal type="string">"pg_data/base/1={}\n"</literal>
                <literal type="string">"pg_data/global={}\n"</literal>
                <literal type="string">"pg_data/pg_dynshmem={}\n"</literal>
                <literal type="string">"pg_data/pg_notify={}\n"</literal>
                <literal type="string">"pg_data/pg_replslot={}\n"</literal>
                <literal type="string">"pg_data/pg_serial={}\n"</literal>
                <literal type="string">"pg_data/pg_snapshots={}\n"</literal>
                <literal type="string">"pg_data/pg_stat_tmp={\"mode\":\"0750\"}\n"</literal>
                <literal type="string">"pg_data/pg_subtrans={}\n"</literal>
                <literal type="string">"pg_data/pg_tblspc={}\n"</literal>
                <literal type="string">"pg_data/pg_wal={}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={}\n"</literal>
                <literal type="string">"pg_data/pg_xlog/archive_status={\"mode\":\"0777\"}\n"</literal>
                <literal type="string">"pg_data/pg_xlog/somepath={}\n"</literal>
                TEST_MANIFEST_PATH_DEFAULT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"check manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove pg_xlog and the directory that archive_status link pointed to</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_xlog"</literal></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"archivestatus"</literal></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"manifest with all features - 9.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Version</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><literal type="string">"9.2\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// create pg_xlog/wal as a link</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"wal"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>symlink</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/wal"</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_xlog"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Files to conditionally ignore before 9.4</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_FILE_POSTGRESQLAUTOCONFTMP</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Test manifest - pg_snapshots files ignored</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>manifest</name></expr></argument>,
            <argument><expr><call><name>manifestNewBuild</name><argument_list>(<argument><expr><name>storagePg</name></expr></argument>, <argument><expr><name>PG_VERSION_92</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_92</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"build manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>contentSave</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestSave</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"save manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><macro><name>harnessInfoChecksumZ</name><argument_list>(
                <argument>TEST_MANIFEST_HEADER
                TEST_MANIFEST_DB_92
                TEST_MANIFEST_OPTION_ALL
                <literal type="string">"\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\""</literal> TEST_PATH <literal type="string">"/pg\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"file\":\"pg_hba.conf\",\"path\":\"../config\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={\"path\":\""</literal> TEST_PATH <literal type="string">"/wal\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"file\":\"postgresql.conf\",\"path\":\"../config\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/PG_VERSION={\"size\":4,\"timestamp\":1565282100}\n"</literal>
                <literal type="string">"pg_data/base/1/555_init={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/555_init.1={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/555_vm.1_vm={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/global/pg_internal.init.allow={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/pg_dynshmem/BOGUS={\"size\":0,\"timestamp\":1565282101}\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"size\":9,\"timestamp\":1565282117}\n"</literal>
                <literal type="string">"pg_data/pg_replslot/BOGUS={\"size\":0,\"timestamp\":1565282103}\n"</literal>
                <literal type="string">"pg_data/pg_wal/000000010000000000000001={\"size\":7,\"timestamp\":1565282120}\n"</literal>
                <literal type="string">"pg_data/postgresql.auto.conf.tmp={\"size\":0,\"timestamp\":1565282101}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"size\":14,\"timestamp\":1565282116}\n"</literal>
                TEST_MANIFEST_FILE_DEFAULT_PRIMARY_TRUE
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:link]\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"destination\":\"../config/pg_hba.conf\"}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={\"destination\":\""</literal> TEST_PATH <literal type="string">"/wal\"}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"destination\":\"../config/postgresql.conf\"}\n"</literal>
                TEST_MANIFEST_LINK_DEFAULT
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <literal type="string">"pg_data/base={}\n"</literal>
                <literal type="string">"pg_data/base/1={}\n"</literal>
                <literal type="string">"pg_data/global={}\n"</literal>
                <literal type="string">"pg_data/pg_dynshmem={}\n"</literal>
                <literal type="string">"pg_data/pg_notify={}\n"</literal>
                <literal type="string">"pg_data/pg_replslot={}\n"</literal>
                <literal type="string">"pg_data/pg_serial={}\n"</literal>
                <literal type="string">"pg_data/pg_snapshots={}\n"</literal>
                <literal type="string">"pg_data/pg_stat_tmp={\"mode\":\"0750\"}\n"</literal>
                <literal type="string">"pg_data/pg_subtrans={}\n"</literal>
                <literal type="string">"pg_data/pg_tblspc={}\n"</literal>
                <literal type="string">"pg_data/pg_wal={}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={}\n"</literal>
                TEST_MANIFEST_PATH_DEFAULT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"check manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on circular link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>symlink</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/wal"</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/wal/wal"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestNewBuild</name><argument_list>(<argument><expr><name>storagePg</name></expr></argument>, <argument><expr><name>PG_VERSION_92</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_92</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>LinkDestinationError</name></expr></argument>,
            <argument><expr><literal type="string">"link 'pg_xlog/wal' ("</literal> <name>TEST_PATH</name> <literal type="string">"/wal) destination is the same directory as link 'pg_xlog' ("</literal> <name>TEST_PATH</name> <literal type="string">"/wal)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/wal/wal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"manifest with all features - 9.4, checksum-page"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Version</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><literal type="string">"9.4\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Put a pgcontrol (always primary:true)</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_GLOBAL</name> <literal type="string">"/"</literal> <name>PG_FILE_PGCONTROL</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// pg_clog pgVersion &lt; 10 primary:false (pg_xact pgVersion &lt; 10 primary:true), pg_multixact always primary:false</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_PGMULTIXACT</name></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_PGMULTIXACT</name> <literal type="string">"/"</literal> <name>BOGUS_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_clog"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_clog/"</literal> <name>BOGUS_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282121</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_xact"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_xact/"</literal> <name>BOGUS_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282122</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Files to capture in version &lt; 12 but ignore &gt;= 12 (code coverage)</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_FILE_RECOVERYSIGNAL</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_FILE_STANDBYSIGNAL</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Files to capture in version &lt; 9.6 but ignore &gt;= 9.6 (code coverage)</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_FILE_BACKUPLABEL</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282101</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Tablespace 1</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"ts/1/PG_9.4_201409291/1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>symlink</name><argument_list>(<argument><expr><literal type="string">"../../ts/1"</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_tblspc/1/PG_9.4_201409291/1/16384"</literal></expr></argument>, <argument><expr><literal type="string">"TESTDATA"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282115</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_tblspc/1/PG_9.4_201409291/1/t123_123_fsm"</literal></expr></argument>, <argument><expr><literal type="string">"IGNORE_TEMP_RELATION"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282115</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add checksum-page files to exclude from checksum-page validation in database relation directories</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/"</literal> <name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/"</literal> <name>PG_FILE_PGFILENODEMAP</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_tblspc/1/PG_9.4_201409291/1/"</literal> <name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Tablespace 2</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"ts/2/PG_9.4_201409291/1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>symlink</name><argument_list>(<argument><expr><literal type="string">"../../ts/2"</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><literal type="string">"pg_tblspc/2/PG_9.4_201409291/1/16385"</literal></expr></argument>, <argument><expr><literal type="string">"TESTDATA"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282115</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Test manifest - pg_dynshmem, pg_replslot and postgresql.auto.conf.tmp files ignored</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>manifest</name></expr></argument>,
            <argument><expr><call><name>manifestNewBuild</name><argument_list>(<argument><expr><name>storagePg</name></expr></argument>, <argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"build manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>contentSave</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestSave</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"save manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><macro><name>harnessInfoChecksumZ</name><argument_list>(
                <argument>TEST_MANIFEST_HEADER
                TEST_MANIFEST_DB_94
                TEST_MANIFEST_OPTION_ARCHIVE
                TEST_MANIFEST_OPTION_CHECKSUM_PAGE_TRUE
                TEST_MANIFEST_OPTION_ONLINE_FALSE
                <literal type="string">"\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\""</literal> TEST_PATH <literal type="string">"/pg\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"file\":\"pg_hba.conf\",\"path\":\"../config\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={\"path\":\""</literal> TEST_PATH <literal type="string">"/wal\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"file\":\"postgresql.conf\",\"path\":\"../config\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"pg_tblspc/1={\"path\":\"../../ts/1\",\"tablespace-id\":\"1\",\"tablespace-name\":\"ts1\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"pg_tblspc/2={\"path\":\"../../ts/2\",\"tablespace-id\":\"2\",\"tablespace-name\":\"ts2\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/PG_VERSION={\"size\":4,\"timestamp\":1565282100}\n"</literal>
                <literal type="string">"pg_data/backup_label={\"size\":0,\"timestamp\":1565282101}\n"</literal>
                <literal type="string">"pg_data/base/1/555_init={\"checksum-page\":true,\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/555_init.1={\"checksum-page\":true,\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/555_vm.1_vm={\"checksum-page\":true,\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/PG_VERSION={\"size\":0,\"timestamp\":1565282120}\n"</literal>
                <literal type="string">"pg_data/base/1/pg_filenode.map={\"size\":0,\"timestamp\":1565282120}\n"</literal>
                <literal type="string">"pg_data/global/pg_control={\"size\":0,\"timestamp\":1565282101}\n"</literal>
                <literal type="string">"pg_data/global/pg_internal.init.allow={\"checksum-page\":true,\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/pg_clog/BOGUS={\"size\":0,\"timestamp\":1565282121}\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"size\":9,\"timestamp\":1565282117}\n"</literal>
                <literal type="string">"pg_data/pg_multixact/BOGUS={\"size\":0,\"timestamp\":1565282101}\n"</literal>
                <literal type="string">"pg_data/pg_wal/000000010000000000000001={\"size\":7,\"timestamp\":1565282120}\n"</literal>
                <literal type="string">"pg_data/pg_xact/BOGUS={\"size\":0,\"timestamp\":1565282122}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"size\":14,\"timestamp\":1565282116}\n"</literal>
                <literal type="string">"pg_data/recovery.signal={\"size\":0,\"timestamp\":1565282101}\n"</literal>
                <literal type="string">"pg_data/standby.signal={\"size\":0,\"timestamp\":1565282101}\n"</literal>
                <literal type="string">"pg_tblspc/1/PG_9.4_201409291/1/16384={\"checksum-page\":true,\"size\":8,\"timestamp\":1565282115}\n"</literal>
                <literal type="string">"pg_tblspc/1/PG_9.4_201409291/1/PG_VERSION={\"size\":0,\"timestamp\":1565282120}\n"</literal>
                <literal type="string">"pg_tblspc/2/PG_9.4_201409291/1/16385={\"checksum-page\":true,\"size\":8,\"timestamp\":1565282115}\n"</literal>
                TEST_MANIFEST_FILE_DEFAULT_PRIMARY_FALSE
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:link]\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"destination\":\"../config/pg_hba.conf\"}\n"</literal>
                <literal type="string">"pg_data/pg_tblspc/1={\"destination\":\"../../ts/1\"}\n"</literal>
                <literal type="string">"pg_data/pg_tblspc/2={\"destination\":\"../../ts/2\"}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={\"destination\":\""</literal> TEST_PATH <literal type="string">"/wal\"}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"destination\":\"../config/postgresql.conf\"}\n"</literal>
                TEST_MANIFEST_LINK_DEFAULT
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <literal type="string">"pg_data/base={}\n"</literal>
                <literal type="string">"pg_data/base/1={}\n"</literal>
                <literal type="string">"pg_data/global={}\n"</literal>
                <literal type="string">"pg_data/pg_clog={}\n"</literal>
                <literal type="string">"pg_data/pg_dynshmem={}\n"</literal>
                <literal type="string">"pg_data/pg_multixact={}\n"</literal>
                <literal type="string">"pg_data/pg_notify={}\n"</literal>
                <literal type="string">"pg_data/pg_replslot={}\n"</literal>
                <literal type="string">"pg_data/pg_serial={}\n"</literal>
                <literal type="string">"pg_data/pg_snapshots={}\n"</literal>
                <literal type="string">"pg_data/pg_stat_tmp={\"mode\":\"0750\"}\n"</literal>
                <literal type="string">"pg_data/pg_subtrans={}\n"</literal>
                <literal type="string">"pg_data/pg_tblspc={}\n"</literal>
                <literal type="string">"pg_data/pg_wal={}\n"</literal>
                <literal type="string">"pg_data/pg_xact={}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={}\n"</literal>
                <literal type="string">"pg_tblspc={}\n"</literal>
                <literal type="string">"pg_tblspc/1={}\n"</literal>
                <literal type="string">"pg_tblspc/1/PG_9.4_201409291={}\n"</literal>
                <literal type="string">"pg_tblspc/1/PG_9.4_201409291/1={}\n"</literal>
                <literal type="string">"pg_tblspc/2={}\n"</literal>
                <literal type="string">"pg_tblspc/2/PG_9.4_201409291={}\n"</literal>
                <literal type="string">"pg_tblspc/2/PG_9.4_201409291/1={}\n"</literal>
                TEST_MANIFEST_PATH_DEFAULT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"check manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg/pg_tblspc/2"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"error if link removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"ts/2"</literal></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_PATH_GLOBAL</name> <literal type="string">"/"</literal> <name>PG_FILE_PGINTERNALINIT</name> <literal type="string">".allow"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"manifest with all features - 12, online"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Version</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><literal type="string">"12\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Tablespace link errors when correct verion not found</comment>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestNewBuild</name><argument_list>(<argument><expr><name>storagePg</name></expr></argument>, <argument><expr><name>PG_VERSION_12</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_12</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>FileOpenError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to get info for missing path/file '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1/PG_12_201909212': [2] No such file or"</literal>
                <literal type="string">" directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove the link inside pg/pg_tblspc</comment>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileRemoveError</name></expr></argument>, <argument><expr><literal type="string">"unable to remove symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write a file into the directory pointed to by pg_xlog - contents will not be ignored online or offline</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"wal/000000020000000000000002"</literal></expr></argument>, <argument><expr><literal type="string">"OLDWAL"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create backup_manifest and backup_manifest.tmp that will show up for PG12 but will be ignored in PG13</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_FILE_BACKUPMANIFEST</name></expr></argument>, <argument><expr><literal type="string">"MANIFEST"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282198</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>PG_FILE_BACKUPMANIFEST_TMP</name></expr></argument>, <argument><expr><literal type="string">"MANIFEST"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1565282199</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Test manifest - 'pg_data/pg_tblspc' will appear in manifest but 'pg_tblspc' will not (no links). Recovery signal files</comment>
        <comment type="line">// and backup_label ignored. Old recovery files and pg_xlog are now just another file/directory and will not be ignored.</comment>
        <comment type="line">// pg_wal contents will be ignored online. pg_clog pgVersion &gt; 10 primary:true, pg_xact pgVersion &gt; 10 primary:false</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>manifest</name></expr></argument>,
            <argument><expr><call><name>manifestNewBuild</name><argument_list>(<argument><expr><name>storagePg</name></expr></argument>, <argument><expr><name>PG_VERSION_12</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_12</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"build manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>contentSave</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestSave</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"save manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><macro><name>harnessInfoChecksumZ</name><argument_list>(
                <argument>TEST_MANIFEST_HEADER
                TEST_MANIFEST_DB_12
                TEST_MANIFEST_OPTION_ARCHIVE
                TEST_MANIFEST_OPTION_CHECKSUM_PAGE_FALSE
                TEST_MANIFEST_OPTION_ONLINE_TRUE
                <literal type="string">"\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\""</literal> TEST_PATH <literal type="string">"/pg\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"file\":\"pg_hba.conf\",\"path\":\"../config\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={\"path\":\""</literal> TEST_PATH <literal type="string">"/wal\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"file\":\"postgresql.conf\",\"path\":\"../config\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/PG_VERSION={\"size\":3,\"timestamp\":1565282100}\n"</literal>
                <literal type="string">"pg_data/backup_manifest={\"size\":8,\"timestamp\":1565282198}\n"</literal>
                <literal type="string">"pg_data/backup_manifest.tmp={\"size\":8,\"timestamp\":1565282199}\n"</literal>
                <literal type="string">"pg_data/base/1/555_init={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/555_init.1={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/555_vm.1_vm={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/PG_VERSION={\"size\":0,\"timestamp\":1565282120}\n"</literal>
                <literal type="string">"pg_data/base/1/pg_filenode.map={\"size\":0,\"timestamp\":1565282120}\n"</literal>
                <literal type="string">"pg_data/global/pg_control={\"size\":0,\"timestamp\":1565282101}\n"</literal>
                <literal type="string">"pg_data/pg_clog/BOGUS={\"size\":0,\"timestamp\":1565282121}\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"size\":9,\"timestamp\":1565282117}\n"</literal>
                <literal type="string">"pg_data/pg_multixact/BOGUS={\"size\":0,\"timestamp\":1565282101}\n"</literal>
                <literal type="string">"pg_data/pg_xact/BOGUS={\"size\":0,\"timestamp\":1565282122}\n"</literal>
                <literal type="string">"pg_data/pg_xlog/000000020000000000000002={\"size\":6,\"timestamp\":1565282100}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"size\":14,\"timestamp\":1565282116}\n"</literal>
                <literal type="string">"pg_data/recovery.conf={\"size\":0,\"timestamp\":1565282101}\n"</literal>
                <literal type="string">"pg_data/recovery.done={\"size\":0,\"timestamp\":1565282101}\n"</literal>
                TEST_MANIFEST_FILE_DEFAULT_PRIMARY_TRUE
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:link]\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"destination\":\"../config/pg_hba.conf\"}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={\"destination\":\""</literal> TEST_PATH <literal type="string">"/wal\"}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"destination\":\"../config/postgresql.conf\"}\n"</literal>
                TEST_MANIFEST_LINK_DEFAULT
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <literal type="string">"pg_data/base={}\n"</literal>
                <literal type="string">"pg_data/base/1={}\n"</literal>
                <literal type="string">"pg_data/global={}\n"</literal>
                <literal type="string">"pg_data/pg_clog={}\n"</literal>
                <literal type="string">"pg_data/pg_dynshmem={}\n"</literal>
                <literal type="string">"pg_data/pg_multixact={}\n"</literal>
                <literal type="string">"pg_data/pg_notify={}\n"</literal>
                <literal type="string">"pg_data/pg_replslot={}\n"</literal>
                <literal type="string">"pg_data/pg_serial={}\n"</literal>
                <literal type="string">"pg_data/pg_snapshots={}\n"</literal>
                <literal type="string">"pg_data/pg_stat_tmp={\"mode\":\"0750\"}\n"</literal>
                <literal type="string">"pg_data/pg_subtrans={}\n"</literal>
                <literal type="string">"pg_data/pg_tblspc={}\n"</literal>
                <literal type="string">"pg_data/pg_wal={}\n"</literal>
                <literal type="string">"pg_data/pg_xact={}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={}\n"</literal>
                TEST_MANIFEST_PATH_DEFAULT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"check manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"run 13, offline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// pg_wal not ignored</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>manifest</name></expr></argument>,
            <argument><expr><call><name>manifestNewBuild</name><argument_list>(<argument><expr><name>storagePg</name></expr></argument>, <argument><expr><name>PG_VERSION_13</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_13</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"build manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>contentSave</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestSave</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"save manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><macro><name>harnessInfoChecksumZ</name><argument_list>(
                <argument>TEST_MANIFEST_HEADER_BUNDLE
                TEST_MANIFEST_DB_13
                TEST_MANIFEST_OPTION_ALL
                <literal type="string">"\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\""</literal> TEST_PATH <literal type="string">"/pg\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"file\":\"pg_hba.conf\",\"path\":\"../config\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={\"path\":\""</literal> TEST_PATH <literal type="string">"/wal\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"file\":\"postgresql.conf\",\"path\":\"../config\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/PG_VERSION={\"size\":3,\"timestamp\":1565282100}\n"</literal>
                <literal type="string">"pg_data/base/1/555_init={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/555_init.1={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/555_vm.1_vm={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/base/1/PG_VERSION={\"size\":0,\"timestamp\":1565282120}\n"</literal>
                <literal type="string">"pg_data/base/1/pg_filenode.map={\"size\":0,\"timestamp\":1565282120}\n"</literal>
                <literal type="string">"pg_data/global/pg_control={\"size\":0,\"timestamp\":1565282101}\n"</literal>
                <literal type="string">"pg_data/pg_clog/BOGUS={\"size\":0,\"timestamp\":1565282121}\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"size\":9,\"timestamp\":1565282117}\n"</literal>
                <literal type="string">"pg_data/pg_multixact/BOGUS={\"size\":0,\"timestamp\":1565282101}\n"</literal>
                <literal type="string">"pg_data/pg_wal/000000010000000000000001={\"size\":7,\"timestamp\":1565282120}\n"</literal>
                <literal type="string">"pg_data/pg_xact/BOGUS={\"size\":0,\"timestamp\":1565282122}\n"</literal>
                <literal type="string">"pg_data/pg_xlog/000000020000000000000002={\"size\":6,\"timestamp\":1565282100}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"size\":14,\"timestamp\":1565282116}\n"</literal>
                <literal type="string">"pg_data/recovery.conf={\"size\":0,\"timestamp\":1565282101}\n"</literal>
                <literal type="string">"pg_data/recovery.done={\"size\":0,\"timestamp\":1565282101}\n"</literal>
                TEST_MANIFEST_FILE_DEFAULT_PRIMARY_TRUE
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:link]\n"</literal>
                <literal type="string">"pg_data/pg_hba.conf={\"destination\":\"../config/pg_hba.conf\"}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={\"destination\":\""</literal> TEST_PATH <literal type="string">"/wal\"}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"destination\":\"../config/postgresql.conf\"}\n"</literal>
                TEST_MANIFEST_LINK_DEFAULT
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <literal type="string">"pg_data/base={}\n"</literal>
                <literal type="string">"pg_data/base/1={}\n"</literal>
                <literal type="string">"pg_data/global={}\n"</literal>
                <literal type="string">"pg_data/pg_clog={}\n"</literal>
                <literal type="string">"pg_data/pg_dynshmem={}\n"</literal>
                <literal type="string">"pg_data/pg_multixact={}\n"</literal>
                <literal type="string">"pg_data/pg_notify={}\n"</literal>
                <literal type="string">"pg_data/pg_replslot={}\n"</literal>
                <literal type="string">"pg_data/pg_serial={}\n"</literal>
                <literal type="string">"pg_data/pg_snapshots={}\n"</literal>
                <literal type="string">"pg_data/pg_stat_tmp={\"mode\":\"0750\"}\n"</literal>
                <literal type="string">"pg_data/pg_subtrans={}\n"</literal>
                <literal type="string">"pg_data/pg_tblspc={}\n"</literal>
                <literal type="string">"pg_data/pg_wal={}\n"</literal>
                <literal type="string">"pg_data/pg_xact={}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={}\n"</literal>
                TEST_MANIFEST_PATH_DEFAULT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"check manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on link to pg_data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>symlink</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/base"</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/link"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestNewBuild</name><argument_list>(<argument><expr><name>storagePg</name></expr></argument>, <argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>LinkDestinationError</name></expr></argument>, <argument><expr><literal type="string">"link 'link' destination '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base' is in PGDATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/link"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileRemoveError</name></expr></argument>, <argument><expr><literal type="string">"unable to remove symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on path in pg_tblspc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGTBLSPC</name> <literal type="string">"/somedir"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestNewBuild</name><argument_list>(<argument><expr><name>storagePg</name></expr></argument>, <argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>LinkExpectedError</name></expr></argument>, <argument><expr><literal type="string">"'pg_data/pg_tblspc/somedir' is not a symlink - pg_tblspc should contain only symlinks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGTBLSPC</name> <literal type="string">"/somedir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on file in pg_tblspc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGTBLSPC</name> <literal type="string">"/somefile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestNewBuild</name><argument_list>(<argument><expr><name>storagePg</name></expr></argument>, <argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>LinkExpectedError</name></expr></argument>, <argument><expr><literal type="string">"'pg_data/pg_tblspc/somefile' is not a symlink - pg_tblspc should contain only symlinks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGTBLSPC</name> <literal type="string">"/somefile"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on link that points to nothing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>symlink</name><argument_list>(<argument><expr><literal type="string">"../bogus-link"</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/link-to-link"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestNewBuild</name><argument_list>(<argument><expr><name>storagePg</name></expr></argument>, <argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>FileOpenError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to get info for missing path/file '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/link-to-link': [2] No such file or directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>unlink</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/link-to-link"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileRemoveError</name></expr></argument>, <argument><expr><literal type="string">"unable to remove symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on link to a link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"linktestdir"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
            <argument><expr><call><name>symlink</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/linktestdir"</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/linktest"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
            <argument><expr><call><name>symlink</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/linktest"</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/linktolink"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestNewBuild</name><argument_list>(<argument><expr><name>storagePg</name></expr></argument>, <argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>LinkDestinationError</name></expr></argument>, <argument><expr><literal type="string">"link '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/linktolink' cannot reference another link '"</literal> <name>TEST_PATH</name> <literal type="string">"/linktest'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_HEADER</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_DB_90</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_DB_91</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_DB_92</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_DB_94</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_DB_12</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_OPTION_ALL</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_OPTION_ARCHIVE</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_OPTION_CHECKSUM_PAGE_FALSE</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_OPTION_CHECKSUM_PAGE_TRUE</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_OPTION_ONLINE_FALSE</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_OPTION_ONLINE_TRUE</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_FILE_DEFAULT_PRIMARY_FALSE</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_FILE_DEFAULT_PRIMARY_TRUE</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_LINK_DEFAULT</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_PATH_DEFAULT</name></cpp:undef>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"manifestBuildValidate()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"don't check for delta if already enabled and test online timestamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Manifest</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>manifest</name> <operator>=</operator> <call><name>manifestNewInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionOnline</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestBuildValidate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">1482182860</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"validate manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupTimestampCopyStart</name></name></expr></argument>, <argument><expr><literal type="number">1482182861</literal></expr></argument>, <argument><expr><literal type="string">"check copy start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>varBool</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check delta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionCompressType</name></name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="string">"check compress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"timestamp in past does not force delta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionOnline</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

        <macro><name>manifestFileAdd</name><argument_list>(
            <argument>manifest</argument>,
            <argument>&amp;(ManifestFile){.name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/"</literal> PG_FILE_PGVERSION)</argument>, <argument>.size = <literal type="number">4</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestBuildValidate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1482182860</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"validate manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupTimestampCopyStart</name></name></expr></argument>, <argument><expr><literal type="number">1482182860</literal></expr></argument>, <argument><expr><literal type="string">"check copy start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>varBool</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check delta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"timestamp in future forces delta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestBuildValidate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1482182859</literal></expr></argument>, <argument><expr><name>compressTypeGz</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"validate manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupTimestampCopyStart</name></name></expr></argument>, <argument><expr><literal type="number">1482182859</literal></expr></argument>, <argument><expr><literal type="string">"check copy start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>varBool</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check delta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionCompressType</name></name></expr></argument>, <argument><expr><name>compressTypeGz</name></expr></argument>, <argument><expr><literal type="string">"check compress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: file 'PG_VERSION' has timestamp (1482182860) in the future (relative to copy start 1482182859), enabling"</literal>
                <literal type="string">" delta checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"manifestBuildIncr()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_HEADER_PRE</name></cpp:macro>                                                                                           \
            <cpp:value>"[backup]\n"                                                                                                           \
            "backup-label=null\n"                                                                                                  \
            "backup-prior=\"20190101-010101F\"\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_HEADER_MID</name></cpp:macro>                                                                                           \
            <cpp:value>"backup-timestamp-copy-start=0\n"                                                                                      \
            "backup-timestamp-start=0\n"                                                                                           \
            "backup-timestamp-stop=0\n"                                                                                            \
            "backup-type=\"incr\"\n"                                                                                               \
            "\n"                                                                                                                   \
            "[backup:db]\n"                                                                                                        \
            "db-catalog-version=201608131\n"                                                                                       \
            "db-control-version=960\n"                                                                                             \
            "db-id=0\n"                                                                                                            \
            "db-system-id=0\n"                                                                                                     \
            "db-version=\"9.6\"\n"                                                                                                 \
            "\n"                                                                                                                   \
            "[backup:option]\n"                                                                                                    \
            "option-archive-check=false\n"                                                                                         \
            "option-archive-copy=false\n"                                                                                          \
            "option-compress=false\n"                                                                                              \
            "option-compress-type=\"none\"\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_HEADER_POST</name></cpp:macro>                                                                                          \
            <cpp:value>"option-hardlink=false\n"                                                                                              \
            "option-online=false\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_FILE_DEFAULT</name></cpp:macro>                                                                                         \
            <cpp:value>"\n"                                                                                                                   \
            "[target:file:default]\n"                                                                                              \
            "group=\"test\"\n"                                                                                                     \
            "mode=\"0600\"\n"                                                                                                      \
            "user=\"test\"\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_PATH_DEFAULT</name></cpp:macro>                                                                                         \
            <cpp:value>"\n"                                                                                                                   \
            "[target:path:default]\n"                                                                                              \
            "group=\"test\"\n"                                                                                                     \
            "mode=\"0700\"\n"                                                                                                      \
            "user=\"test\"\n"</cpp:value></cpp:define>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"delta disabled and not enabled during validation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Manifest</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>manifest</name> <operator>=</operator> <call><name>manifestNewInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>info</name></name> <operator>=</operator> <call><name>infoNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgVersion</name></name> <operator>=</operator> <name>PG_VERSION_96</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgCatalogVersion</name></name> <operator>=</operator> <call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_96</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name> <operator>=</operator> <name>BOOL_FALSE_VAR</name></expr>;</expr_stmt>

            <macro><name>manifestTargetAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestTarget){.name = MANIFEST_TARGET_PGDATA_STR</argument>, <argument>.path = STRDEF(<literal type="string">"/pg"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestPath){.name = MANIFEST_TARGET_PGDATA_STR</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = STRDEF(<literal type="string">"test"</literal>)</argument>, <argument>.user = STRDEF(<literal type="string">"test"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/BOGUS"</literal>)</argument>, <argument>.copy = true</argument>, <argument>.size = <literal type="number">6</literal></argument>, <argument>.sizeRepo = <literal type="number">6</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = STRDEF(<literal type="string">"test"</literal>)</argument>, <argument>.user = STRDEF(<literal type="string">"test"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/FILE3"</literal>)</argument>, <argument>.copy = true</argument>, <argument>.size = <literal type="number">0</literal></argument>, <argument>.sizeRepo = <literal type="number">0</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = STRDEF(<literal type="string">"test"</literal>)</argument>, <argument>.user = STRDEF(<literal type="string">"test"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/FILE4"</literal>)</argument>, <argument>.copy = true</argument>, <argument>.size = <literal type="number">55</literal></argument>, <argument>.sizeRepo = <literal type="number">55</literal></argument>, <argument>.timestamp = <literal type="number">1482182861</literal></argument>,
                <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = STRDEF(<literal type="string">"test"</literal>)</argument>, <argument>.user = STRDEF(<literal type="string">"test"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/"</literal> PG_FILE_PGVERSION)</argument>, <argument>.copy = true</argument>, <argument>.size = <literal type="number">4</literal></argument>, <argument>.sizeRepo = <literal type="number">4</literal></argument>,
                <argument>.timestamp = <literal type="number">1482182860</literal></argument>, <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = STRDEF(<literal type="string">"test"</literal>)</argument>, <argument>.user = STRDEF(<literal type="string">"test"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifestPrior</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Manifest</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>manifestPrior</name> <operator>=</operator> <call><name>manifestNewInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifestPrior</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabel</name></name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"20190101-010101F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name><name>manifestPrior</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>referenceList</name></name></expr></argument>, <argument><expr><name><name>manifestPrior</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifestPrior</argument>,
                <argument>&amp;(ManifestFile){
                .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/FILE3"</literal>)</argument>, <argument>.size = <literal type="number">0</literal></argument>, <argument>.sizeRepo = <literal type="number">0</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                <argument>.checksumSha1 = <literal type="string">"da39a3ee5e6b4b0d3255bfef95601890afd80709"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifestPrior</argument>,
                <argument>&amp;(ManifestFile){
                .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/FILE4"</literal>)</argument>, <argument>.size = <literal type="number">55</literal></argument>, <argument>.sizeRepo = <literal type="number">55</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                <argument>.checksumSha1 = <literal type="string">"ccccccccccaaaaaaaaaabbbbbbbbbbdddddddddd"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifestPrior</argument>,
                <argument>&amp;(ManifestFile){
                .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/"</literal> PG_FILE_PGVERSION)</argument>, <argument>.size = <literal type="number">4</literal></argument>, <argument>.sizeRepo = <literal type="number">4</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                <argument>.checksumSha1 = <literal type="string">"aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestBuildIncr</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>manifestPrior</name></expr></argument>, <argument><expr><name>backupTypeIncr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"incremental manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>contentSave</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestSave</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"save manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>harnessInfoChecksumZ</name><argument_list>(
                <argument><expr><name>TEST_MANIFEST_HEADER_PRE</name>
                <literal type="string">"backup-reference=\"20190101-010101F\"\n"</literal>
                <name>TEST_MANIFEST_HEADER_MID</name>
                <literal type="string">"option-delta=false\n"</literal>
                <name>TEST_MANIFEST_HEADER_POST</name>
                <literal type="string">"\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\"/pg\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/BOGUS={\"size\":6,\"timestamp\":1482182860}\n"</literal>
                <literal type="string">"pg_data/FILE3={\"reference\":\"20190101-010101F\",\"size\":0,\"timestamp\":1482182860}\n"</literal>
                <literal type="string">"pg_data/FILE4={\"size\":55,\"timestamp\":1482182861}\n"</literal>
                <literal type="string">"pg_data/PG_VERSION={\"checksum\":\"aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd\",\"reference\":\"20190101-010101F\","</literal>
                    <literal type="string">"\"size\":4,\"timestamp\":1482182860}\n"</literal>
                <name>TEST_MANIFEST_FILE_DEFAULT</name>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <name>TEST_MANIFEST_PATH_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"check manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"delta enabled before validation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name> <operator>=</operator> <name>BOOL_TRUE_VAR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name><name>manifestPrior</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>referenceList</name></name></expr></argument>, <argument><expr><literal type="string">"20190101-010101F_20190202-010101D"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lstClear</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fileList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>manifestFileAdd</name><argument_list>(
            <argument>manifest</argument>,
            <argument>&amp;(ManifestFile){
               .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/FILE1"</literal>)</argument>, <argument>.copy = true</argument>, <argument>.size = <literal type="number">4</literal></argument>, <argument>.sizeRepo = <literal type="number">4</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
               <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = STRDEF(<literal type="string">"test"</literal>)</argument>, <argument>.user = STRDEF(<literal type="string">"test"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <comment type="line">// Zero-length file without the copy flag which will appear to come from a bundled backup</comment>
        <macro><name>manifestFileAdd</name><argument_list>(
            <argument>manifest</argument>,
            <argument>&amp;(ManifestFile){
               .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/FILE0-bundle"</literal>)</argument>, <argument>.size = <literal type="number">0</literal></argument>, <argument>.sizeRepo = <literal type="number">0</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
               <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = STRDEF(<literal type="string">"test"</literal>)</argument>, <argument>.user = STRDEF(<literal type="string">"test"</literal>)</argument>, <argument>.checksumSha1 = HASH_TYPE_SHA1_ZERO}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <comment type="line">// Zero-length file with the copy flag which will appear to come from a non-bundled backup (so will get a reference)</comment>
        <macro><name>manifestFileAdd</name><argument_list>(
            <argument>manifest</argument>,
            <argument>&amp;(ManifestFile){
               .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/FILE0-normal"</literal>)</argument>, <argument>.copy = true</argument>, <argument>.size = <literal type="number">0</literal></argument>, <argument>.sizeRepo = <literal type="number">0</literal></argument>,
               <argument>.timestamp = <literal type="number">1482182860</literal></argument>, <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = STRDEF(<literal type="string">"test"</literal>)</argument>, <argument>.user = STRDEF(<literal type="string">"test"</literal>)</argument>,
               <argument>.checksumSha1 = HASH_TYPE_SHA1_ZERO}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>manifestFileAdd</name><argument_list>(
            <argument>manifest</argument>,
            <argument>&amp;(ManifestFile){
               .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/"</literal> PG_FILE_PGVERSION)</argument>, <argument>.copy = true</argument>, <argument>.size = <literal type="number">4</literal></argument>, <argument>.sizeRepo = <literal type="number">4</literal></argument>,
               <argument>.timestamp = <literal type="number">1482182860</literal></argument>, <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = STRDEF(<literal type="string">"test"</literal>)</argument>, <argument>.user = STRDEF(<literal type="string">"test"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <macro><name>manifestFileAdd</name><argument_list>(
            <argument>manifestPrior</argument>,
            <argument>&amp;(ManifestFile){
               .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/FILE1"</literal>)</argument>, <argument>.size = <literal type="number">4</literal></argument>, <argument>.sizeRepo = <literal type="number">4</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
               <argument>.reference = STRDEF(<literal type="string">"20190101-010101F_20190202-010101D"</literal>)</argument>,
               <argument>.checksumSha1 = <literal type="string">"aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>manifestFileAdd</name><argument_list>(
            <argument>manifestPrior</argument>,
            <argument>&amp;(ManifestFile){
               .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/FILE0-bundle"</literal>)</argument>, <argument>.size = <literal type="number">0</literal></argument>, <argument>.sizeRepo = <literal type="number">0</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
               <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = STRDEF(<literal type="string">"test"</literal>)</argument>, <argument>.user = STRDEF(<literal type="string">"test"</literal>)</argument>, <argument>.checksumSha1 = HASH_TYPE_SHA1_ZERO}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>manifestFileAdd</name><argument_list>(
            <argument>manifestPrior</argument>,
            <argument>&amp;(ManifestFile){
               .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/FILE0-normal"</literal>)</argument>, <argument>.size = <literal type="number">0</literal></argument>, <argument>.sizeRepo = <literal type="number">0</literal></argument>,
               <argument>.timestamp = <literal type="number">1482182860</literal></argument>, <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = STRDEF(<literal type="string">"test"</literal>)</argument>, <argument>.user = STRDEF(<literal type="string">"test"</literal>)</argument>,
               <argument>.checksumSha1 = HASH_TYPE_SHA1_ZERO}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestBuildIncr</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>manifestPrior</name></expr></argument>, <argument><expr><name>backupTypeIncr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"incremental manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>contentSave</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestSave</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"save manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>harnessInfoChecksumZ</name><argument_list>(
                <argument><expr><name>TEST_MANIFEST_HEADER_PRE</name>
                <literal type="string">"backup-reference=\"20190101-010101F,20190101-010101F_20190202-010101D\"\n"</literal>
                <name>TEST_MANIFEST_HEADER_MID</name>
                <literal type="string">"option-delta=true\n"</literal>
                <name>TEST_MANIFEST_HEADER_POST</name>
                <literal type="string">"\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\"/pg\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/FILE0-bundle={\"size\":0,\"timestamp\":1482182860}\n"</literal>
                <literal type="string">"pg_data/FILE0-normal={\"reference\":\"20190101-010101F\",\"size\":0,\"timestamp\":1482182860}\n"</literal>
                <literal type="string">"pg_data/FILE1={\"checksum\":\"aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd\","</literal>
                    <literal type="string">"\"reference\":\"20190101-010101F_20190202-010101D\",\"size\":4,\"timestamp\":1482182860}\n"</literal>
                <literal type="string">"pg_data/PG_VERSION={\"checksum\":\"aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd\",\"reference\":\"20190101-010101F\","</literal>
                    <literal type="string">"\"size\":4,\"timestamp\":1482182860}\n"</literal>
                <name>TEST_MANIFEST_FILE_DEFAULT</name>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <name>TEST_MANIFEST_PATH_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"check manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"delta enabled by timestamp validation and copy checksum error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Clear manifest and add a single file</comment>
        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name> <operator>=</operator> <name>BOOL_FALSE_VAR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lstClear</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fileList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>manifestFileAdd</name><argument_list>(
            <argument>manifest</argument>,
            <argument>&amp;(ManifestFile){
               .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/FILE1"</literal>)</argument>, <argument>.copy = true</argument>, <argument>.size = <literal type="number">4</literal></argument>, <argument>.sizeRepo = <literal type="number">4</literal></argument>, <argument>.timestamp = <literal type="number">1482182859</literal></argument>,
               <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = STRDEF(<literal type="string">"test"</literal>)</argument>, <argument>.user = STRDEF(<literal type="string">"test"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Clear prior manifest and add a single file with later timestamp and checksum error</comment>
        <expr_stmt><expr><call><name>lstClear</name><argument_list>(<argument><expr><name><name>manifestPrior</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fileList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>VariantList</name> <modifier>*</modifier></type><name>checksumPageErrorList</name> <init>= <expr><call><name>varLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>varLstAdd</name><argument_list>(<argument><expr><name>checksumPageErrorList</name></expr></argument>, <argument><expr><call><name>varNewUInt</name><argument_list>(<argument><expr><literal type="number">77</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>manifestFileAdd</name><argument_list>(
            <argument>manifestPrior</argument>,
            <argument>&amp;(ManifestFile){
               .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/FILE1"</literal>)</argument>, <argument>.copy = true</argument>, <argument>.size = <literal type="number">4</literal></argument>, <argument>.sizeRepo = <literal type="number">4</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
               <argument>.reference = STRDEF(<literal type="string">"20190101-010101F_20190202-010101D"</literal>)</argument>,
               <argument>.checksumSha1 = <literal type="string">"aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd"</literal></argument>, <argument>.checksumPage = true</argument>, <argument>.checksumPageError = true</argument>,
               <argument>.checksumPageErrorList = jsonFromVar(varNewVarLst(checksumPageErrorList))}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestBuildIncr</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>manifestPrior</name></expr></argument>, <argument><expr><name>backupTypeIncr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"incremental manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: file 'FILE1' has timestamp earlier than prior backup (prior 1482182860, current 1482182859), enabling"</literal>
                <literal type="string">" delta checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>contentSave</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestSave</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"save manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>harnessInfoChecksumZ</name><argument_list>(
                <argument><expr><name>TEST_MANIFEST_HEADER_PRE</name>
                <literal type="string">"backup-reference=\"20190101-010101F,20190101-010101F_20190202-010101D\"\n"</literal>
                <name>TEST_MANIFEST_HEADER_MID</name>
                <literal type="string">"option-delta=true\n"</literal>
                <name>TEST_MANIFEST_HEADER_POST</name>
                <literal type="string">"\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\"/pg\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/FILE1={\"checksum\":\"aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd\",\"checksum-page\":false,"</literal>
                    <literal type="string">"\"checksum-page-error\":[77],\"reference\":\"20190101-010101F_20190202-010101D\",\"size\":4,"</literal>
                    <literal type="string">"\"timestamp\":1482182859}\n"</literal>
                <name>TEST_MANIFEST_FILE_DEFAULT</name>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <name>TEST_MANIFEST_PATH_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"check manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"delta enabled by size validation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name> <operator>=</operator> <name>BOOL_FALSE_VAR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lstClear</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fileList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>manifestFileAdd</name><argument_list>(
            <argument>manifest</argument>,
            <argument>&amp;(ManifestFile){
               .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/FILE1"</literal>)</argument>, <argument>.copy = true</argument>, <argument>.size = <literal type="number">6</literal></argument>, <argument>.sizeRepo = <literal type="number">6</literal></argument>, <argument>.timestamp = <literal type="number">1482182861</literal></argument>,
               <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = STRDEF(<literal type="string">"test"</literal>)</argument>, <argument>.user = STRDEF(<literal type="string">"test"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>manifestFileAdd</name><argument_list>(
            <argument>manifest</argument>,
            <argument>&amp;(ManifestFile){
               .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/FILE2"</literal>)</argument>, <argument>.copy = true</argument>, <argument>.size = <literal type="number">6</literal></argument>, <argument>.sizeRepo = <literal type="number">6</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
               <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = STRDEF(<literal type="string">"test"</literal>)</argument>, <argument>.user = STRDEF(<literal type="string">"test"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <macro><name>manifestFileAdd</name><argument_list>(
            <argument>manifestPrior</argument>,
            <argument>&amp;(ManifestFile){
               .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/FILE2"</literal>)</argument>, <argument>.copy = true</argument>, <argument>.size = <literal type="number">4</literal></argument>, <argument>.sizeRepo = <literal type="number">4</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
               <argument>.reference = STRDEF(<literal type="string">"20190101-010101F_20190202-010101D"</literal>)</argument>,
               <argument>.checksumSha1 = <literal type="string">"ddddddddddbbbbbbbbbbccccccccccaaaaaaaaaa"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>manifestBuildIncr</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>manifestPrior</name></expr></argument>, <argument><expr><name>backupTypeIncr</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"000000040000000400000004"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"incremental manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: file 'FILE2' has same timestamp (1482182860) as prior but different size (prior 4, current 6), enabling"</literal>
                <literal type="string">" delta checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>contentSave</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestSave</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"save manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>harnessInfoChecksumZ</name><argument_list>(
                <argument><expr><name>TEST_MANIFEST_HEADER_PRE</name>
                <literal type="string">"backup-reference=\"20190101-010101F,20190101-010101F_20190202-010101D\"\n"</literal>
                <name>TEST_MANIFEST_HEADER_MID</name>
                <literal type="string">"option-delta=true\n"</literal>
                <name>TEST_MANIFEST_HEADER_POST</name>
                <literal type="string">"\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\"/pg\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/FILE1={\"size\":6,\"timestamp\":1482182861}\n"</literal>
                <literal type="string">"pg_data/FILE2={\"size\":6,\"timestamp\":1482182860}\n"</literal>
                <name>TEST_MANIFEST_FILE_DEFAULT</name>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <name>TEST_MANIFEST_PATH_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"check manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"delta enabled by timeline change"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>manifestPrior</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>archiveStop</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"000000030000000300000003"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name> <operator>=</operator> <name>BOOL_FALSE_VAR</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>manifestBuildIncr</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>manifestPrior</name></expr></argument>, <argument><expr><name>backupTypeIncr</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"000000040000000400000004"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"incremental manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: a timeline switch has occurred since the 20190101-010101F backup, enabling delta checksum\n"</literal>
            <literal type="string">"            HINT: this is normal after restoring from backup or promoting a standby."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>varBool</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check delta is enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionDelta</name></name> <operator>=</operator> <name>BOOL_FALSE_VAR</name></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"delta enabled by online option change"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionOnline</name></name> <operator>=</operator> <name>BOOL_FALSE_VAR</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lstClear</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fileList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>manifestFileAdd</name><argument_list>(
            <argument>manifest</argument>,
            <argument>&amp;(ManifestFile){
               .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/FILE1"</literal>)</argument>, <argument>.copy = true</argument>, <argument>.size = <literal type="number">6</literal></argument>, <argument>.sizeRepo = <literal type="number">6</literal></argument>, <argument>.timestamp = <literal type="number">1482182861</literal></argument>,
               <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = STRDEF(<literal type="string">"test"</literal>)</argument>, <argument>.user = STRDEF(<literal type="string">"test"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionOnline</name></name> <operator>=</operator> <name>BOOL_TRUE_VAR</name></expr>;</expr_stmt>
        <macro><name>manifestFileAdd</name><argument_list>(
            <argument>manifestPrior</argument>,
            <argument>&amp;(ManifestFile){
               .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/FILE2"</literal>)</argument>, <argument>.size = <literal type="number">4</literal></argument>, <argument>.sizeRepo = <literal type="number">4</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
               <argument>.checksumSha1 = <literal type="string">"ddddddddddbbbbbbbbbbccccccccccaaaaaaaaaa"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>manifestBuildIncr</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>manifestPrior</name></expr></argument>, <argument><expr><name>backupTypeIncr</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"000000030000000300000003"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"incremental manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   WARN: the online option has changed since the 20190101-010101F backup, enabling delta checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>contentSave</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestSave</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"save manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>harnessInfoChecksumZ</name><argument_list>(
                <argument><expr><name>TEST_MANIFEST_HEADER_PRE</name>
                <literal type="string">"backup-reference=\"20190101-010101F,20190101-010101F_20190202-010101D\"\n"</literal>
                <name>TEST_MANIFEST_HEADER_MID</name>
                <literal type="string">"option-delta=true\n"</literal>
                <literal type="string">"option-hardlink=false\n"</literal>
                <literal type="string">"option-online=true\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\"/pg\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/FILE1={\"size\":6,\"timestamp\":1482182861}\n"</literal>
                <name>TEST_MANIFEST_FILE_DEFAULT</name>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <name>TEST_MANIFEST_PATH_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"check manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_HEADER_PRE</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_HEADER_MID</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_HEADER_POST</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_FILE_DEFAULT</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_MANIFEST_PATH_DEFAULT</name></cpp:undef>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"manifestNewLoad(), manifestSave(), and manifestBuildComplete()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Manifest with minimal features</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>contentLoad</name> <init>= <expr><call><name>harnessInfoChecksumZ</name>
        <argument_list>(
            <argument><expr><literal type="string">"[backup]\n"</literal>
            <literal type="string">"backup-label=\"20190808-163540F\"\n"</literal>
            <literal type="string">"backup-reference=\"20190808-163540F\"\n"</literal>
            <literal type="string">"backup-timestamp-copy-start=1565282141\n"</literal>
            <literal type="string">"backup-timestamp-start=1565282140\n"</literal>
            <literal type="string">"backup-timestamp-stop=1565282142\n"</literal>
            <literal type="string">"backup-type=\"full\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[backup:db]\n"</literal>
            <literal type="string">"db-catalog-version=201409291\n"</literal>
            <literal type="string">"db-control-version=942\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id=1000000000000000094\n"</literal>
            <literal type="string">"db-version=\"9.4\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[backup:option]\n"</literal>
            <literal type="string">"option-archive-check=true\n"</literal>
            <literal type="string">"option-archive-copy=true\n"</literal>
            <literal type="string">"option-compress=false\n"</literal>
            <literal type="string">"option-compress-type=\"none\"\n"</literal>
            <literal type="string">"option-hardlink=false\n"</literal>
            <literal type="string">"option-online=false\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[backup:target]\n"</literal>
            <literal type="string">"pg_data={\"path\":\"/pg/base\",\"type\":\"path\"}\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[cipher]\n"</literal>
            <literal type="string">"cipher-pass=\"somepass\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[target:file]\n"</literal>
            <literal type="string">"pg_data/PG_VERSION={\"checksum\":\"184473f470864e067ee3a22e64b47b0a1c356f29\",\"reference\":\"20190808-163540F\""</literal>
                <literal type="string">",\"size\":4,\"timestamp\":1565282114}\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[target:file:default]\n"</literal>
            <literal type="string">"group=\"group1\"\n"</literal>
            <literal type="string">"mode=\"0600\"\n"</literal>
            <literal type="string">"user=\"user1\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[target:path]\n"</literal>
            <literal type="string">"pg_data={}\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[target:path:default]\n"</literal>
            <literal type="string">"group=\"group1\"\n"</literal>
            <literal type="string">"mode=\"0700\"\n"</literal>
            <literal type="string">"user=\"user1\"\n"</literal></expr></argument>
        )</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"manifest move"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>manifestNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><name>contentLoad</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"load manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestMove</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"manifest - minimal features"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to find 'bogus' in manifest target list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestData</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>backupLabel</name></expr></argument>, <argument><expr><literal type="string">"20190808-163540F"</literal></expr></argument>, <argument><expr><literal type="string">"check manifest data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestCipherSubPass</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"somepass"</literal></expr></argument>, <argument><expr><literal type="string">"check cipher subpass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>manifestTargetUpdate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGDATA_STR</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/pg/base"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"update target no change"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestTargetUpdate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGDATA_STR</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path2"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"update target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGDATA_STR</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"/path2"</literal></expr></argument>, <argument><expr><literal type="string">"check target path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestTargetUpdate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGDATA_STR</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/pg/base"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fix target path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>contentSave</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestSave</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"save manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentLoad</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check save"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"manifest - all features"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_HEADER</name></cpp:macro>                                                                                               \
            <cpp:value>"[backup]\n"                                                                                                           \
            "backup-archive-start=\"000000030000028500000089\"\n"                                                                  \
            "backup-archive-stop=\"000000030000028500000089\"\n"                                                                   \
            "backup-bundle=true\n"                                                                                                 \
            "backup-label=\"20190818-084502F_20190820-084502D\"\n"                                                                 \
            "backup-lsn-start=\"285/89000028\"\n"                                                                                  \
            "backup-lsn-stop=\"285/89001F88\"\n"                                                                                   \
            "backup-prior=\"20190818-084502F\"\n"                                                                                  \
            "backup-reference=\"20190818-084502F_20190819-084506D,20190818-084502F,20190818-084502F_20190820-084502D\"\n"          \
            "backup-timestamp-copy-start=1565282141\n"                                                                             \
            "backup-timestamp-start=1565282140\n"                                                                                  \
            "backup-timestamp-stop=1565282142\n"                                                                                   \
            "backup-type=\"full\"\n"                                                                                               \
            "\n"                                                                                                                   \
            "[backup:db]\n"                                                                                                        \
            "db-catalog-version=201409291\n"                                                                                       \
            "db-control-version=942\n"                                                                                             \
            "db-id=1\n"                                                                                                            \
            "db-system-id=1000000000000000094\n"                                                                                   \
            "db-version=\"9.4\"\n"                                                                                                 \
            "\n"                                                                                                                   \
            "[backup:option]\n"                                                                                                    \
            "option-archive-check=true\n"                                                                                          \
            "option-archive-copy=true\n"                                                                                           \
            "option-backup-standby=false\n"                                                                                        \
            "option-buffer-size=16384\n"                                                                                           \
            "option-checksum-page=false\n"                                                                                         \
            "option-compress=true\n"                                                                                               \
            "option-compress-level=3\n"                                                                                            \
            "option-compress-level-network=6\n"                                                                                    \
            "option-compress-type=\"gz\"\n"                                                                                        \
            "option-delta=false\n"                                                                                                 \
            "option-hardlink=true\n"                                                                                               \
            "option-online=false\n"                                                                                                \
            "option-process-max=32\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_TARGET</name></cpp:macro>                                                                                               \
            <cpp:value>"\n"                                                                                                                   \
            "[backup:target]\n"                                                                                                    \
            "pg_data={\"path\":\"/pg/base\",\"type\":\"path\"}\n"                                                                  \
            "pg_data/base/1={\"path\":\"../../base-1\",\"type\":\"link\"}\n"                                                       \
            "pg_data/pg_hba.conf={\"file\":\"pg_hba.conf\",\"path\":\"../pg_config\",\"type\":\"link\"}\n"                         \
            "pg_data/pg_stat={\"path\":\"../pg_stat\",\"type\":\"link\"}\n"                                                        \
            "pg_data/postgresql.conf={\"file\":\"postgresql.conf\",\"path\":\"../pg_config\",\"type\":\"link\"}\n"                 \
            "pg_tblspc/1={\"path\":\"/tblspc/ts1\",\"tablespace-id\":\"1\",\"tablespace-name\":\"ts1\",\"type\":\"link\"}\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_DB</name></cpp:macro>                                                                                                   \
            <cpp:value>"\n"                                                                                                                   \
            "[db]\n"                                                                                                               \
            " mail\t={\"db-id\":16456,\"db-last-system-id\":99999}\n"                                                              \
            "#={\"db-id\":16453,\"db-last-system-id\":99999}\n"                                                                    \
            "=={\"db-id\":16455,\"db-last-system-id\":99999}\n"                                                                    \
            "[={\"db-id\":16454,\"db-last-system-id\":99999}\n"                                                                    \
            "postgres={\"db-id\":12173,\"db-last-system-id\":99999}\n"                                                             \
            "template0={\"db-id\":12168,\"db-last-system-id\":99999}\n"                                                            \
            "template1={\"db-id\":1,\"db-last-system-id\":99999}\n"                                                                \
            SHRUG_EMOJI "={\"db-id\":18000,\"db-last-system-id\":99999}\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_METADATA</name></cpp:macro>                                                                                             \
            <cpp:value>"\n"                                                                                                                   \
            "[metadata]\n"                                                                                                         \
            "annotation={\"extra key\":\"this is an annotation\",\"source\":\"this is another annotation\"}\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_FILE</name></cpp:macro>                                                                                                 \
            <cpp:value>"\n"                                                                                                                   \
            "[target:file]\n"                                                                                                      \
            "pg_data/=equal=more=={\"mode\":\"0640\",\"size\":0,\"timestamp\":1565282120}\n"                                       \
            "pg_data/PG_VERSION={\"checksum\":\"184473f470864e067ee3a22e64b47b0a1c356f29\""                                        \
                ",\"reference\":\"20190818-084502F_20190819-084506D\",\"size\":4,\"timestamp\":1565282114}\n"                      \
            "pg_data/base/16384/17000={\"bni\":1,\"checksum\":\"e0101dd8ffb910c9c202ca35b5f828bcb9697bed\",\"checksum-page\":false"\
                ",\"checksum-page-error\":[1],\"repo-size\":4096,\"size\":8192,\"timestamp\":1565282114}\n"                        \
            "pg_data/base/16384/PG_VERSION={\"bni\":1,\"bno\":1,\"checksum\":\"184473f470864e067ee3a22e64b47b0a1c356f29\""         \
                ",\"group\":\"group2\",\"size\":4,\"timestamp\":1565282115,\"user\":false}\n"                                      \
            "pg_data/base/32768/33000={\"checksum\":\"7a16d165e4775f7c92e8cdf60c0af57313f0bf90\",\"checksum-page\":true"           \
                ",\"reference\":\"20190818-084502F\",\"size\":1073741824,\"timestamp\":1565282116}\n"                              \
            "pg_data/base/32768/33000.32767={\"checksum\":\"6e99b589e550e68e934fd235ccba59fe5b592a9e\",\"checksum-page\":true"     \
                ",\"reference\":\"20190818-084502F\",\"size\":32768,\"timestamp\":1565282114}\n"                                   \
            "pg_data/postgresql.conf={\"size\":4457,\"timestamp\":1565282114}\n"                                                   \
            "pg_data/special-@#!$^&amp;*()_+~`{}[]\\:;={\"mode\":\"0640\",\"size\":0,\"timestamp\":1565282120,\"user\":false}\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_FILE_DEFAULT</name></cpp:macro>                                                                                         \
            <cpp:value>"\n"                                                                                                                   \
            "[target:file:default]\n"                                                                                              \
            "group=false\n"                                                                                                        \
            "mode=\"0600\"\n"                                                                                                      \
            "user=\"user2\"\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_LINK</name></cpp:macro>                                                                                                 \
            <cpp:value>"\n"                                                                                                                   \
            "[target:link]\n"                                                                                                      \
            "pg_data/pg_stat={\"destination\":\"../pg_stat\"}\n"                                                                   \
            "pg_data/postgresql.conf={\"destination\":\"../pg_config/postgresql.conf\",\"group\":\"group2\",\"user\":false}\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_LINK_DEFAULT</name></cpp:macro>                                                                                         \
            <cpp:value>"\n"                                                                                                                   \
            "[target:link:default]\n"                                                                                              \
            "group=false\n"                                                                                                        \
            "user=\"user2\"\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_PATH</name></cpp:macro>                                                                                                 \
            <cpp:value>"\n"                                                                                                                   \
            "[target:path]\n"                                                                                                      \
            "pg_data={}\n"                                                                                                         \
            "pg_data/base={\"group\":\"group2\"}\n"                                                                                \
            "pg_data/base/16384={\"mode\":\"0750\"}\n"                                                                             \
            "pg_data/base/32768={}\n"                                                                                              \
            "pg_data/base/65536={\"user\":false}\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_PATH_DEFAULT</name></cpp:macro>                                                                                         \
            <cpp:value>"\n"                                                                                                                   \
            "[target:path:default]\n"                                                                                              \
            "group=false\n"                                                                                                        \
            "mode=\"0700\"\n"                                                                                                      \
            "user=\"user2\"\n"</cpp:value></cpp:define>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>manifest</name></expr></argument>,
            <argument><expr><call><name>manifestNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><macro><name>harnessInfoChecksumZ</name><argument_list>(
                <argument><literal type="string">"[backup]\n"</literal>
                <literal type="string">"backup-archive-start=\"000000040000028500000089\"\n"</literal>
                <literal type="string">"backup-archive-stop=\"000000040000028500000089\"\n"</literal>
                <literal type="string">"backup-bundle=true\n"</literal>
                <literal type="string">"backup-label=\"20190818-084502F_20190820-084502D\"\n"</literal>
                <literal type="string">"backup-lsn-start=\"300/89000028\"\n"</literal>
                <literal type="string">"backup-lsn-stop=\"300/89001F88\"\n"</literal>
                <literal type="string">"backup-prior=\"20190818-084502F\"\n"</literal>
                <literal type="string">"backup-timestamp-copy-start=1565282141\n"</literal>
                <literal type="string">"backup-timestamp-start=777\n"</literal>
                <literal type="string">"backup-timestamp-stop=777\n"</literal>
                <literal type="string">"backup-type=\"full\"\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[backup:db]\n"</literal>
                <literal type="string">"db-catalog-version=201409291\n"</literal>
                <literal type="string">"db-control-version=942\n"</literal>
                <literal type="string">"db-id=2\n"</literal>
                <literal type="string">"db-system-id=2000000000000000094\n"</literal>
                <literal type="string">"db-version=\"9.4\"\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[backup:option]\n"</literal>
                <literal type="string">"option-archive-check=false\n"</literal>
                <literal type="string">"option-archive-copy=false\n"</literal>
                <literal type="string">"option-backup-standby=true\n"</literal>
                <literal type="string">"option-buffer-size=16384\n"</literal>
                <literal type="string">"option-checksum-page=false\n"</literal>
                <literal type="string">"option-compress=true\n"</literal>
                <literal type="string">"option-compress-level=33\n"</literal>
                <literal type="string">"option-compress-level-network=66\n"</literal>
                <literal type="string">"option-delta=false\n"</literal>
                <literal type="string">"option-hardlink=false\n"</literal>
                <literal type="string">"option-online=false\n"</literal>
                <literal type="string">"option-process-max=99\n"</literal>
                TEST_MANIFEST_TARGET
                <literal type="string">"\n"</literal>
                <literal type="string">"[db]\n"</literal>
                <literal type="string">" mail\t={\"db-id\":16456,\"db-last-system-id\":99999}\n"</literal>
                <literal type="string">"#={\"db-id\":16453,\"db-last-system-id\":99999}\n"</literal>
                <literal type="string">"=={\"db-id\":16455,\"db-last-system-id\":99999}\n"</literal>
                <literal type="string">"[={\"db-id\":16454,\"db-last-system-id\":99999}\n"</literal>
                <literal type="string">"postgres={\"db-id\":12173,\"db-last-system-id\":99999}\n"</literal>
                TEST_MANIFEST_FILE
                TEST_MANIFEST_FILE_DEFAULT
                TEST_MANIFEST_LINK
                TEST_MANIFEST_LINK_DEFAULT
                TEST_MANIFEST_PATH
                TEST_MANIFEST_PATH_DEFAULT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"load manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"manifest validation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Munge files to produce errors</comment>
        <decl_stmt><decl><type><name>ManifestFile</name></type> <name>file</name> <init>= <expr><call><name>manifestFileFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/postgresql.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>file</name><operator>.</operator><name>checksumSha1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>.</operator><name>sizeRepo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>.</operator><name>resume</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manifestFileUpdate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>manifestFileFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/base/32768/33000.32767"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manifestFileUpdate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestValidate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"manifest validation failed:\n"</literal>
            <literal type="string">"missing checksum for file 'pg_data/postgresql.conf'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestValidate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"manifest validation failed:\n"</literal>
            <literal type="string">"invalid checksum '6e99b589e550e68e934fd235ccba59fe5b592a9e' for zero size file 'pg_data/base/32768/33000.32767'\n"</literal>
            <literal type="string">"missing checksum for file 'pg_data/postgresql.conf'\n"</literal>
            <literal type="string">"repo size must be &gt; 0 for file 'pg_data/postgresql.conf'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Undo changes made to files</comment>
        <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>manifestFileFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/postgresql.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>resume</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"resume is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>checksumSha1</name></name></expr></argument>, <argument><expr><literal type="string">"184473f470864e067ee3a22e64b47b0a1c356f29"</literal></expr></argument>, <argument><expr><name>HASH_TYPE_SHA1_SIZE_HEX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>.</operator><name>sizeRepo</name></name> <operator>=</operator> <literal type="number">4457</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manifestFileUpdate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>manifestFileFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/base/32768/33000.32767"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">32768</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manifestFileUpdate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestValidate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"successful validate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"manifest complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>manifestBuildComplete</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"manifest complete without db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create empty annotations</comment>
        <decl_stmt><decl><type><name>KeyValue</name> <modifier>*</modifier></type><name>annotationKV</name> <init>= <expr><call><name>kvNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>kvPut</name><argument_list>(<argument><expr><name>annotationKV</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"empty key"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>kvPut</name><argument_list>(<argument><expr><name>annotationKV</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"empty key2"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>manifestBuildComplete</name><argument_list>(
                <argument><expr><name>manifest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>annotationKV</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"manifest complete without db and empty annotations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create db list</comment>
        <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>dbList</name> <init>= <expr><call><name>pckWriteNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>pckWriteArrayBeginP</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>, <argument><expr><literal type="number">12168</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"template0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>, <argument><expr><literal type="number">99999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteArrayEndP</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>pckWriteArrayBeginP</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"template1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>, <argument><expr><literal type="number">99999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteArrayEndP</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>pckWriteArrayBeginP</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>, <argument><expr><literal type="number">18000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>SHRUG_EMOJI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>, <argument><expr><literal type="number">99999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteArrayEndP</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add annotations</comment>
        <expr_stmt><expr><call><name>kvPut</name><argument_list>(<argument><expr><name>annotationKV</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"extra key"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"this is an annotation"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>kvPut</name><argument_list>(<argument><expr><name>annotationKV</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"source"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"this is another annotation"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>manifestBuildComplete</name><argument_list>(
                <argument><expr><name>manifest</name></expr></argument>, <argument><expr><literal type="number">1565282140</literal></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"285/89000028"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"000000030000028500000089"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1565282142</literal></expr></argument>,
                <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"285/89001F88"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"000000030000028500000089"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000000000000000094</literal></expr></argument>, <argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name>dbList</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">16384</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>annotationKV</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"manifest complete with db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestPathPg</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check pg_data path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestPathPg</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/PG_VERSION"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"PG_VERSION"</literal></expr></argument>, <argument><expr><literal type="string">"check pg_data path/file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestPathPg</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_tblspc/1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_tblspc/1"</literal></expr></argument>, <argument><expr><literal type="string">"check pg_tblspc path/file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestCipherSubPass</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check cipher subpass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestCipherSubPassSet</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"supersecret"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"cipher subpass set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestCipherSubPass</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"supersecret"</literal></expr></argument>, <argument><expr><literal type="string">"check cipher subpass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Absolute target paths</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestTargetPath</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>manifestTargetBase</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/pg/base"</literal></expr></argument>, <argument><expr><literal type="string">"base target path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestTargetPath</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/pg/pg_config"</literal></expr></argument>,
            <argument><expr><literal type="string">"relative file link target path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestTargetPath</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_stat"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/pg/pg_stat"</literal></expr></argument>,
            <argument><expr><literal type="string">"relative path link target path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestTargetPath</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/base/1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/pg/base-1"</literal></expr></argument>,
            <argument><expr><literal type="string">"relative path link target path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Link check</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestLinkCheck</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"successful link check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on link to subpath of another link destination (prior ordering)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>manifestTargetAdd</name><argument_list>(
            <argument>manifest</argument>, <argument>&amp;(ManifestTarget){
               .name = STRDEF(<literal type="string">"pg_data/base/2"</literal>)</argument>, <argument>.type = manifestTargetTypeLink</argument>, <argument>.path = STRDEF(<literal type="string">"../../base-1/base-2/"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestLinkCheck</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LinkDestinationError</name></expr></argument>,
            <argument><expr><literal type="string">"link 'base/2' (/pg/base-1/base-2) destination is a subdirectory of link 'base/1' (/pg/base-1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manifestTargetRemove</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/base/2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on link to subpath of another link destination (subsequent ordering)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>manifestTargetAdd</name><argument_list>(
            <argument>manifest</argument>, <argument>&amp;(ManifestTarget){
               .name = STRDEF(<literal type="string">"pg_data/base/pg"</literal>)</argument>, <argument>.type = manifestTargetTypeLink</argument>, <argument>.path = STRDEF(<literal type="string">"../.."</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestLinkCheck</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LinkDestinationError</name></expr></argument>,
            <argument><expr><literal type="string">"link 'base/1' (/pg/base-1) destination is a subdirectory of link 'base/pg' (/pg)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manifestTargetRemove</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/base/pg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on link to same destination path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>manifestTargetAdd</name><argument_list>(
            <argument>manifest</argument>,
            <argument>&amp;(ManifestTarget){.name = STRDEF(<literal type="string">"pg_data/base/2"</literal>)</argument>, <argument>.type = manifestTargetTypeLink</argument>, <argument>.path = STRDEF(<literal type="string">"../../base-1/"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestLinkCheck</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LinkDestinationError</name></expr></argument>,
            <argument><expr><literal type="string">"link 'base/2' (/pg/base-1) destination is the same directory as link 'base/1' (/pg/base-1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manifestTargetRemove</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/base/2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on file link in linked path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>manifestTargetAdd</name><argument_list>(
            <argument>manifest</argument>,
            <argument>&amp;(ManifestTarget){
                .name = STRDEF(<literal type="string">"pg_data/base/1/file"</literal>)</argument>, <argument>.type = manifestTargetTypeLink</argument>, <argument>.path = STRDEF(<literal type="string">"../../../base-1"</literal>)</argument>,
                <argument>.file = STRDEF(<literal type="string">"file"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestLinkCheck</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LinkDestinationError</name></expr></argument>,
            <argument><expr><literal type="string">"link 'base/1/file' (/pg/base-1) destination is the same directory as link 'base/1' (/pg/base-1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manifestTargetRemove</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/base/1/file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"check that a file link in the parent path of a path link does not conflict"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>manifestTargetAdd</name><argument_list>(
            <argument>manifest</argument>, <argument>&amp;(ManifestTarget){
               .name = STRDEF(<literal type="string">"pg_data/test.sh"</literal>)</argument>, <argument>.type = manifestTargetTypeLink</argument>, <argument>.path = STRDEF(<literal type="string">".."</literal>)</argument>, <argument>.file = STRDEF(<literal type="string">"test.sh"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestLinkCheck</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"successful link check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on two file links with the same name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>manifestTargetAdd</name><argument_list>(
            <argument>manifest</argument>, <argument>&amp;(ManifestTarget){
               .name = STRDEF(<literal type="string">"pg_data/test2.sh"</literal>)</argument>, <argument>.type = manifestTargetTypeLink</argument>, <argument>.path = STRDEF(<literal type="string">".."</literal>)</argument>,
               <argument>.file = STRDEF(<literal type="string">"test.sh"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestLinkCheck</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LinkDestinationError</name></expr></argument>,
            <argument><expr><literal type="string">"link 'test2.sh' (/pg/test.sh) destination is the same file as link 'test.sh' (/pg/test.sh)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>manifestTargetRemove</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/test.sh"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manifestTargetRemove</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/test2.sh"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"manifest getters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ManifestFile getters</comment>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>manifestFileFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to find 'bogus' in manifest file list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>manifestFileFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/PG_VERSION"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"manifestFileFind()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"pg_data/PG_VERSION"</literal></expr></argument>, <argument><expr><literal type="string">"find file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestFileFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/special-@#!$^&amp;*()_+~`{}[]\\:;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>name</name></expr></argument>,
            <argument><expr><literal type="string">"pg_data/special-@#!$^&amp;*()_+~`{}[]\\:;"</literal></expr></argument>, <argument><expr><literal type="string">"find special file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>manifestFileExists</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"manifest file does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Munge the sha1 checksum to be blank</comment>
        <decl_stmt><decl><type><name>ManifestFilePack</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>fileMungePack</name> <init>= <expr><call><name>manifestFilePackFindInternal</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/postgresql.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ManifestFile</name></type> <name>fileMunge</name> <init>= <expr><call><name>manifestFileUnpack</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>*</operator><name>fileMungePack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>fileMunge</name><operator>.</operator><name>checksumSha1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manifestFilePackUpdate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>fileMungePack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileMunge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <call><name>manifestFileFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/postgresql.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>.</operator><name>checksumSha1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manifestFileUpdate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ManifestDb getters</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestDb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>manifestDbFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to find 'bogus' in manifest db list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>manifestDbFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"postgres"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"manifestDbFind()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"postgres"</literal></expr></argument>, <argument><expr><literal type="string">"check name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestDbFindDefault</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"postgres"</literal></expr></argument>, <argument><expr><literal type="string">"manifestDbFindDefault() - return default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>manifestDbFindDefault</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"template0"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>id</name></expr></argument>, <argument><expr><literal type="number">12168</literal></expr></argument>, <argument><expr><literal type="string">"manifestDbFindDefault() - return found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>manifestDbFindDefault</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"manifestDbFindDefault()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"return default NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ManifestLink getters</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestLink</name> <modifier>*</modifier></type><name>link</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to find 'bogus' in manifest link list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_stat"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"find link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestLinkUpdate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_stat"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"../pg_stat"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"no update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>destination</name></name></expr></argument>, <argument><expr><literal type="string">"../pg_stat"</literal></expr></argument>, <argument><expr><literal type="string">"check link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestLinkUpdate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_stat"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"../pg_stat2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>link</name><operator>-&gt;</operator><name>destination</name></name></expr></argument>, <argument><expr><literal type="string">"../pg_stat2"</literal></expr></argument>, <argument><expr><literal type="string">"check link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestLinkUpdate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_stat"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"../pg_stat"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fix link destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestLinkFindDefault</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"pg_data/pg_stat"</literal></expr></argument>,
            <argument><expr><literal type="string">"manifestLinkFindDefault() - return default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestLinkFindDefault</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/postgresql.conf"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>link</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>destination</name></expr></argument>, <argument><expr><literal type="string">"../pg_config/postgresql.conf"</literal></expr></argument>,
            <argument><expr><literal type="string">"manifestLinkFindDefault() - return found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><call><name>manifestLinkFindDefault</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"manifestLinkFindDefault()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name>link</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"return default NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ManifestPath getters</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestPath</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>manifestPathFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to find 'bogus' in manifest path list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>manifestPathFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"manifestPathFind()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>path</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"pg_data"</literal></expr></argument>, <argument><expr><literal type="string">"check path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestPathFindDefault</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"pg_data"</literal></expr></argument>,
            <argument><expr><literal type="string">"manifestPathFindDefault() - return default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestPathFindDefault</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/base"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>group</name></expr></argument>, <argument><expr><literal type="string">"group2"</literal></expr></argument>,
            <argument><expr><literal type="string">"manifestPathFindDefault() - return found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>manifestPathFindDefault</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"manifestPathFindDefault()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"return default NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>ManifestTarget</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"find target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestTargetUpdate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_hba2.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"update target file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>target</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="string">"pg_hba2.conf"</literal></expr></argument>, <argument><expr><literal type="string">"check target file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestTargetUpdate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>target</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"fix target file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"manifest remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>contentSave</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestSave</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"save manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>contentCompare</name> <init>= <macro><name>harnessInfoChecksumZ</name>
        <argument_list>(
            <argument>TEST_MANIFEST_HEADER
            TEST_MANIFEST_TARGET
            <literal type="string">"\n"</literal>
            <literal type="string">"[cipher]\n"</literal>
            <literal type="string">"cipher-pass=\"supersecret\"\n"</literal>
            TEST_MANIFEST_DB
            TEST_MANIFEST_METADATA
            TEST_MANIFEST_FILE
            TEST_MANIFEST_FILE_DEFAULT
            TEST_MANIFEST_LINK
            TEST_MANIFEST_LINK_DEFAULT
            TEST_MANIFEST_PATH
            TEST_MANIFEST_PATH_DEFAULT</argument>
        )</argument_list></macro></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentCompare</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check save"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestFileRemove</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/PG_VERSION"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestFileRemove</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/PG_VERSION"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to remove 'pg_data/PG_VERSION' from manifest file list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestLinkRemove</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_stat"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestLinkRemove</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_stat"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to remove 'pg_data/pg_stat' from manifest link list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestTargetRemove</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestTargetRemove</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to remove 'pg_data/pg_hba.conf' from manifest target list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"load validation errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"[target:file]\npg_data/bogus={\"size\":0}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"missing timestamp for file 'pg_data/bogus'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"[target:file]\npg_data/bogus={\"timestamp\":0}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"missing size for file 'pg_data/bogus'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"manifestLoadFile(), manifestFree()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>manifestLoadFile</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>BACKUP_MANIFEST_FILE_STR</name></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to load backup manifest file '"</literal> <name>TEST_PATH</name> <literal type="string">"/backup.manifest' or '"</literal> <name>TEST_PATH</name> <literal type="string">"/backup.manifest.copy':\n"</literal>
            <literal type="string">"FileMissingError: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/backup.manifest' for read\n"</literal>
            <literal type="string">"FileMissingError: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/backup.manifest.copy' for read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Also use this test to check that extra sections/keys are ignored using coverage.</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_CONTENT</name></cpp:macro>                                                                                              \
            <cpp:value>"[backup]\n"                                                                                                           \
            "backup-label=\"20190808-163540F\"\n"                                                                                  \
            "backup-timestamp-copy-start=1565282141\n"                                                                             \
            "backup-timestamp-start=1565282140\n"                                                                                  \
            "backup-timestamp-stop=1565282142\n"                                                                                   \
            "backup-type=\"full\"\n"                                                                                               \
            "ignore-key=\"ignore-value\"\n"                                                                                        \
            "\n"                                                                                                                   \
            "[backup:db]\n"                                                                                                        \
            "db-catalog-version=201409291\n"                                                                                       \
            "db-control-version=942\n"                                                                                             \
            "db-id=1\n"                                                                                                            \
            "db-system-id=1000000000000000094\n"                                                                                   \
            "db-version=\"9.4\"\n"                                                                                                 \
            "ignore-key=\"ignore-value\"\n"                                                                                        \
            "\n"                                                                                                                   \
            "[backup:option]\n"                                                                                                    \
            "ignore-key=\"ignore-value\"\n"                                                                                        \
            "option-archive-check=true\n"                                                                                          \
            "option-archive-copy=true\n"                                                                                           \
            "option-compress=false\n"                                                                                              \
            "option-hardlink=false\n"                                                                                              \
            "option-online=false\n"                                                                                                \
            "\n"                                                                                                                   \
            "[backup:target]\n"                                                                                                    \
            "pg_data={\"path\":\"/pg/base\",\"type\":\"path\"}\n"                                                                  \
            "\n"                                                                                                                   \
            "[ignore-section]\n"                                                                                                   \
            "ignore-key=\"ignore-value\"\n"                                                                                        \
            "\n"                                                                                                                   \
            "[metadata]\n"                                                                                                         \
            "annotation={\"key\":\"value\"}\n"                                                                                     \
            "ignore-key=\"ignore-value\"\n"                                                                                        \
            "\n"                                                                                                                   \
            "[target:file]\n"                                                                                                      \
            "pg_data/PG_VERSION={\"checksum\":\"184473f470864e067ee3a22e64b47b0a1c356f29\",\"size\":4,\"timestamp\":1565282114}\n" \
            "\n"                                                                                                                   \
            "[target:file:default]\n"                                                                                              \
            "group=\"group1\"\n"                                                                                                   \
            "ignore-key=\"ignore-value\"\n"                                                                                        \
            "mode=\"0600\"\n"                                                                                                      \
            "user=\"user1\"\n"                                                                                                     \
            "\n"                                                                                                                   \
            "[target:link:default]\n"                                                                                              \
            "ignore-key=\"ignore-value\"\n"                                                                                        \
            "\n"                                                                                                                   \
            "[target:path]\n"                                                                                                      \
            "pg_data={}\n"                                                                                                         \
            "\n"                                                                                                                   \
            "[target:path:default]\n"                                                                                              \
            "group=\"group1\"\n"                                                                                                   \
            "ignore-key=\"ignore-value\"\n"                                                                                        \
            "mode=\"0700\"\n"                                                                                                      \
            "user=\"user1\"\n"</cpp:value></cpp:define>

        <macro><name>HRN_INFO_PUT</name><argument_list>(<argument>storageTest</argument>, <argument>BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>, <argument>TEST_MANIFEST_CONTENT</argument>, <argument>.comment = <literal type="string">"write manifest copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>manifestLoadFile</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>BACKUP_MANIFEST_FILE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"load copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>manifestData</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pgSystemId</name></expr></argument>, <argument><expr><literal type="number">1000000000000000094</literal></expr></argument>, <argument><expr><literal type="string">"check file loaded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestData</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>backrestVersion</name></expr></argument>, <argument><expr><name>PROJECT_VERSION</name></expr></argument>, <argument><expr><literal type="string">"check backrest version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument>storageTest</argument>, <argument>BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>, <argument>.errorOnMissing = true</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>BACKUP_MANIFEST_FILE</name></expr></argument>, <argument><expr><name>TEST_MANIFEST_CONTENT</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"write main manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>manifestLoadFile</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>BACKUP_MANIFEST_FILE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"load main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>manifestData</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pgSystemId</name></expr></argument>, <argument><expr><literal type="number">1000000000000000094</literal></expr></argument>, <argument><expr><literal type="string">"check file loaded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestFree</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>manifestFree</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free null manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
