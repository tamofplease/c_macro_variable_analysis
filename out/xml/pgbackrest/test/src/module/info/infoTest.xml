<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/info/infoTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Info Handler
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/cipherBlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessInfo.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test load callback
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>TestInfoLoad</name>
<block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>test</name></decl>;</decl_stmt>
}</block></struct></type> <name>TestInfoLoad</name>;</typedef>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>testInfoLoadCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>try</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TestInfoLoad</name> <modifier>*</modifier></type><name>testInfoLoad</name> <init>= <expr><operator>(</operator><name>TestInfoLoad</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>testInfoLoad</name><operator>-&gt;</operator><name>test</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>try</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>ChecksumError</name></expr></argument>, <argument><expr><literal type="string">"checksum error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>testInfoLoad</name><operator>-&gt;</operator><name>test</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>try</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"format error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>testInfoLoad</name><operator>-&gt;</operator><name>test</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>try</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>FileMissingError</name></expr></argument>, <argument><expr><literal type="string">"file missing error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>try</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>ChecksumError</name></expr></argument>, <argument><expr><literal type="string">"checksum error\nHINT: have you checked the thing?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>try</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"format error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>try</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>FileMissingError</name></expr></argument>, <argument><expr><literal type="string">"file missing error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test save callbacks
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testInfoSaveCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>sectionNext</name></decl></parameter>, <parameter><decl><type><name>InfoSave</name> <modifier>*</modifier></type><name>infoSaveData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>infoSaveSection</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>, <argument><expr><operator>(</operator><name>String</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>infoSaveSection</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><literal type="string">"key"</literal></expr></argument>, <argument><expr><operator>(</operator><name>String</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"infoNew() and infoNewInternal()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Info</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>infoNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"123xyz"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"infoNew(cipher)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>infoCipherPass</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"123xyz"</literal></expr></argument>, <argument><expr><literal type="string">"    cipherPass is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>infoNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"infoNew(NULL)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>infoCipherPass</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"    cipherPass is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"infoNewLoad() and infoSave()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Format error</comment>
        <comment type="line">// --------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>contentLoad</name> <init>= <expr><call><name>BUFSTRDEF</name><argument_list>(
            <argument><expr><literal type="string">"[backrest]\n"</literal>
            <literal type="string">"backrest-format=4\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>callbackContent</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>infoNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><name>contentLoad</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>harnessInfoLoadNewCallback</name></expr></argument>, <argument><expr><name>callbackContent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"expected format 5 but found 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name>callbackContent</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"    check callback content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Checksum not found</comment>
        <comment type="line">// --------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>contentLoad</name> <operator>=</operator> <call><name>BUFSTRDEF</name><argument_list>(
            <argument><expr><literal type="string">"[backrest]\n"</literal>
            <literal type="string">"backrest-format=5\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>infoNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><name>contentLoad</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>harnessInfoLoadNewCallback</name></expr></argument>, <argument><expr><name>callbackContent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ChecksumError</name></expr></argument>,
            <argument><expr><literal type="string">"invalid checksum, actual 'a3765a8c2c1e5d35274a0b0ce118f4031faff0bd' but no checksum found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name>callbackContent</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"    check callback content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Checksum invalid</comment>
        <comment type="line">// --------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>contentLoad</name> <operator>=</operator> <call><name>BUFSTRDEF</name><argument_list>(
            <argument><expr><literal type="string">"[backrest]\n"</literal>
            <literal type="string">"backrest-checksum=\"BOGUS\"\n"</literal>
            <literal type="string">"backrest-format=5\n"</literal>
            <literal type="string">"backrest-version=\"2.17\"\n"</literal>
            <literal type="string">"bogus=\"BOGUS\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>infoNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><name>contentLoad</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>harnessInfoLoadNewCallback</name></expr></argument>, <argument><expr><name>callbackContent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ChecksumError</name></expr></argument>,
            <argument><expr><literal type="string">"invalid checksum, actual 'fe989a75dcf7a0261e57d210707c0db741462763' but expected 'BOGUS'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name>callbackContent</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"    check callback content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Crypto expected</comment>
        <comment type="line">// --------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>contentLoad</name> <operator>=</operator> <call><name>BUFSTRDEF</name><argument_list>(
            <argument><expr><literal type="string">"[backrest]\n"</literal>
            <literal type="string">"backrest-checksum=\"BOGUS\"\n"</literal>
            <literal type="string">"backrest-format=5\n"</literal>
            <literal type="string">"backrest-version=\"2.17\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>IoRead</name> <modifier>*</modifier></type><name>read</name> <init>= <expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><name>contentLoad</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cipherBlockNewP</name><argument_list>(<argument><expr><name>cipherModeDecrypt</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>infoNewLoad</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>harnessInfoLoadNewCallback</name></expr></argument>, <argument><expr><name>callbackContent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CryptoError</name></expr></argument>,
            <argument><expr><literal type="string">"cipher header invalid\n"</literal>
            <literal type="string">"HINT: is or was the repo encrypted?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name>callbackContent</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"    check callback content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Base file with other content in cipher (this is to test that future additions don't break the code)</comment>
        <comment type="line">// --------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>contentLoad</name> <operator>=</operator> <call><name>harnessInfoChecksumZ</name><argument_list>(
            <argument><expr><literal type="string">"[cipher]\n"</literal>
            <literal type="string">"cipher-other=1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Info</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>callbackContent</name> <operator>=</operator> <call><name>strNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>infoNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><name>contentLoad</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>harnessInfoLoadNewCallback</name></expr></argument>, <argument><expr><name>callbackContent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"info with other cipher"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name>callbackContent</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"    check callback content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>infoCipherPass</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"    check cipher pass not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Base file with content</comment>
        <comment type="line">// --------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>contentLoad</name> <operator>=</operator> <call><name>harnessInfoChecksumZ</name><argument_list>(
            <argument><expr><literal type="string">"[c]\n"</literal>
            <literal type="string">"key=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[d]\n"</literal>
            <literal type="string">"key=1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>callbackContent</name> <operator>=</operator> <call><name>strNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>infoNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><name>contentLoad</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>harnessInfoLoadNewCallback</name></expr></argument>, <argument><expr><name>callbackContent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"info with content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name>callbackContent</name></expr></argument>, <argument><expr><literal type="string">"[c] key=1\n[d] key=1\n"</literal></expr></argument>, <argument><expr><literal type="string">"    check callback content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>infoCipherPass</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"    check cipher pass not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>contentSave</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>infoSave</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>testInfoSaveCallback</name></expr></argument>, <argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"info save"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentLoad</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"   check save"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// File with content and cipher</comment>
        <comment type="line">// --------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>contentLoad</name> <operator>=</operator> <call><name>harnessInfoChecksumZ</name><argument_list>(
            <argument><expr><literal type="string">"[c]\n"</literal>
            <literal type="string">"key=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[cipher]\n"</literal>
            <literal type="string">"cipher-pass=\"somepass\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[d]\n"</literal>
            <literal type="string">"key=1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>callbackContent</name> <operator>=</operator> <call><name>strNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>info</name></expr></argument>,
            <argument><expr><call><name>infoNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><name>contentLoad</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>harnessInfoLoadNewCallback</name></expr></argument>, <argument><expr><name>callbackContent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"info with content and cipher"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name>callbackContent</name></expr></argument>, <argument><expr><literal type="string">"[c] key=1\n[d] key=1\n"</literal></expr></argument>, <argument><expr><literal type="string">"    check callback content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>infoCipherPass</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"somepass"</literal></expr></argument>, <argument><expr><literal type="string">"    check cipher pass set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>infoBackrestVersion</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PROJECT_VERSION</name></expr></argument>, <argument><expr><literal type="string">"    check backrest version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>contentSave</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>infoSave</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>testInfoSaveCallback</name></expr></argument>, <argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"info save"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentSave</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>contentLoad</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"   check save"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"infoLoad()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// One error</comment>
        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>TestInfoLoad</name></type> <name>testInfoLoad</name> <init>= <expr><block>{<expr><operator>.</operator><name>test</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>infoLoad</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"unable to load info file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>testInfoLoadCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>testInfoLoad</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ChecksumError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to load info file:\n"</literal>
                <literal type="string">"ChecksumError: checksum error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Two errors (same error)</comment>
        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>testInfoLoad</name> <operator>=</operator> <operator>(</operator><name>TestInfoLoad</name><operator>)</operator><block>{<expr><operator>.</operator><name>test</name> <operator>=</operator> <literal type="number">2</literal></expr>}</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>infoLoad</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"unable to load info file(s)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>testInfoLoadCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>testInfoLoad</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to load info file(s):\n"</literal>
                <literal type="string">"FormatError: format error\n"</literal>
                <literal type="string">"FormatError: format error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Four errors (mixed)</comment>
        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>testInfoLoad</name> <operator>=</operator> <operator>(</operator><name>TestInfoLoad</name><operator>)</operator><block>{<expr><operator>.</operator><name>test</name> <operator>=</operator> <literal type="number">3</literal></expr>}</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>infoLoad</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"unable to load info file(s)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>testInfoLoadCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>testInfoLoad</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to load info file(s):\n"</literal>
                <literal type="string">"FileMissingError: file missing error\n"</literal>
                <literal type="string">"ChecksumError: checksum error\n"</literal>
                <literal type="string">"HINT: have you checked the thing?\n"</literal>
                <literal type="string">"FormatError: format error\n"</literal>
                <literal type="string">"FileMissingError: file missing error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Success</comment>
        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>testInfoLoad</name> <operator>=</operator> <operator>(</operator><name>TestInfoLoad</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>infoLoad</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"SHOULD BE NO ERROR"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>testInfoLoadCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>testInfoLoad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
