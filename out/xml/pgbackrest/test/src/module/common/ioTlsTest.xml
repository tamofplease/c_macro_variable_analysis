<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/common/ioTlsTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Tls Client
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessFork.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessServer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessStorage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Server cert with only a common name to test absence of alt names

To regenerate, run the following in a temp path:

openssl req -nodes -new -newkey rsa:4096 -sha256 -key ~/pgbackrest/test/certificate/pgbackrest-test-server.key \
    -out server-cn-only.csr -subj "/CN=127.0.0.1"
openssl x509 -extensions usr_cert -req -days 99999 -CA ~/pgbackrest/test/certificate/pgbackrest-test-ca.crt \
    -CAkey ~/pgbackrest/test/certificate/pgbackrest-test-ca.key -CAcreateserial -in server-cn-only.csr -out server-cn-only.crt

Then copy server-cn-only.crt into the variable below. Use a variable instead of a define so we know when the variable is not used.
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>testServerCnOnlyCert</name> <init>=
    <expr><literal type="string">"-----BEGIN CERTIFICATE-----\n"</literal>
    <literal type="string">"MIIE+TCCAuECFFtID1qGQ+Q6oyFiD9z5YmANCADjMA0GCSqGSIb3DQEBCwUAMFwx\n"</literal>
    <literal type="string">"CzAJBgNVBAYTAlVTMQwwCgYDVQQIDANBbGwxDDAKBgNVBAcMA0FsbDETMBEGA1UE\n"</literal>
    <literal type="string">"CgwKcGdCYWNrUmVzdDEcMBoGA1UEAwwTdGVzdC5wZ2JhY2tyZXN0Lm9yZzAgFw0y\n"</literal>
    <literal type="string">"MTA4MjYxMjIxNTNaGA8yMjk1MDYxMDEyMjE1M1owFDESMBAGA1UEAwwJMTI3LjAu\n"</literal>
    <literal type="string">"MC4xMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAwzNZDX/VhTA6lALX\n"</literal>
    <literal type="string">"DZ4AOHv4OQH5wTZipa97XdTrI2TIfMGEffLmv5wzN85pku5HXBuHGJUaUENXt1Ss\n"</literal>
    <literal type="string">"GwdfBx/gZZEA8oONqkrxOoJTrABWIAs5k6TTUd+f3Y39rlsyQj076f1sw6Mw9qoC\n"</literal>
    <literal type="string">"h+JKXDDqw8kGwQHifXdtCrxL9OfV4eq+gYKrqdlyFM08WfKxe0Js8bB5cZ4Bt/GC\n"</literal>
    <literal type="string">"2JhQzQ9bMjYJlxSXIXivP/FFunVT5hZ8gsUVAH+/sm8xlQ4sedW7mIBKkjT3tgL0\n"</literal>
    <literal type="string">"FvchB3XyoZ6Sr0JKVaMOcQjIsTzOqdgawgArO541ZwUWHdJH+DODr/gBWXSnnzhH\n"</literal>
    <literal type="string">"ED5DAvRMPdO/t353qS/ihpacTqQ91B4UKxK1pVNC84ch3spCLnQncl7kn7RhcdCc\n"</literal>
    <literal type="string">"b5g4ZfahRmq79QSoMDvN4+7MtyERLXtSttSWiBzQVVj/jcFNDeGeDjKp6Z55xoso\n"</literal>
    <literal type="string">"tMZ3yVajl4IbuQS1pfTLjp7WdJ58y5hQ+8O/ebjUYIxOo5kZhRZV/jxqoR7Ga9MG\n"</literal>
    <literal type="string">"bAQ7BPcTuItpfGqiWcdYU+ZdyyFwvpXov6qNoCYt58nj7s+FAbed7EzRHa2Z3RVG\n"</literal>
    <literal type="string">"kcqv2iX5EddydHmqKip+QUUR4cPLUXn+kvOHtJEOgAWDURh0DVfhrMD5dX1d+9de\n"</literal>
    <literal type="string">"BUwZ89gYvxkkErPL1o8OPRxyiucCAwEAATANBgkqhkiG9w0BAQsFAAOCAgEAlwMZ\n"</literal>
    <literal type="string">"tlqvggfXsJh/AQdl1XxqQKzwC+1OyPozqTUMaEiHLgswJw8eXaZB1/8g9ZODPO3N\n"</literal>
    <literal type="string">"tLh6JfE4gJJ6gs89YmaZLR0oH3RkoFXSi4+t+WdyF0t3QrBuVx4uO3BeEdD1aLXm\n"</literal>
    <literal type="string">"lxS7004mJAEMn9FTBBMwek/DGS1Ic/tHwFCRvvE73mFcPL2Qs03ZzRuYUEI1Ckef\n"</literal>
    <literal type="string">"ONFu6/pydIS5MK0QCP/MfUlKP1D3u2aFEbdNHy4GjzGpfg+1DD/ebSswQG1YpjnN\n"</literal>
    <literal type="string">"5XLEQZ9IKE2ULq9GnnhqPNUTdX6HFHxVvyZUe/iXasOCX7C9PBipj3tulLcPMbLn\n"</literal>
    <literal type="string">"4tToEuLkvsLU2Z6I9mcS88Z30VyYu4BzM6tim7XvsOEObILjs2Qa0dJ2hSF6QJ9L\n"</literal>
    <literal type="string">"NUrbWS591v/PvUdk68kC8UL7o7UVS3lsZoRIZD+X+xdEi+zy4DNIMKUBnWtKamUU\n"</literal>
    <literal type="string">"1VOosL6vDSZYGg0InGfaBm3Bz3elTrWUHCapNQ5Zsxk+Sq+IQ4hauczrOsd6jugR\n"</literal>
    <literal type="string">"m1JzWMUZROfSrcVfighZSencJwJEmyCQwnMUyovPs2v7S+1QQEY210ZZd5Fphoye\n"</literal>
    <literal type="string">"1oA2FndLfr8BOG88+TzwdFilOiZ28lIpMFas38uybJBwlxVYN4/aLyIQGp6AyzGR\n"</literal>
    <literal type="string">"XqmU0pBFqRYS8xENKxk7lPnxFKyEpb3NK3wk3mo=\n"</literal>
    <literal type="string">"-----END CERTIFICATE-----"</literal></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Client key with a password

To regenerate, run the following in a temp path:

openssl genrsa -aes256 -passout pass:xxxx -out client-pwd.key 1024

Then copy server-pwd.key into the variable below. Use a variable instead of a define so we know when the variable is not used.
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>testClientPwdKey</name> <init>=
    <expr><literal type="string">"-----BEGIN RSA PRIVATE KEY-----\n"</literal>
    <literal type="string">"Proc-Type: 4,ENCRYPTED\n"</literal>
    <literal type="string">"DEK-Info: AES-256-CBC,86BD081993E54559E92BFF24921DCD00\n"</literal>
    <literal type="string">"\n"</literal>
    <literal type="string">"MglGBz4qfnUUs7IuueInkDrn5GRp6V7ZOs/S8rkrOp0i7MTfFJk1cYByu0FCcLqo\n"</literal>
    <literal type="string">"O3UX1dLPOzu74hJGOmOUHEJzrzA09wFIshTZo96z60+gQGcPEWkkkG9eRadJG5EN\n"</literal>
    <literal type="string">"TiAq1xopmAYK+srSBsPD7Xf9KeYpFM4Fa98pWbEhzMBiozgh2fH8+6OK8izDFJ57\n"</literal>
    <literal type="string">"aW8p/9lwZtkO2nd6G4meU+vyVDsL4GpdHcryi+MGGXfhkrr6mFAQ3PLpHTwr6xNI\n"</literal>
    <literal type="string">"wp6IjuLpNwlkNadq8Wgi8qy4YhpdqmSVt/oFJ25HMH+0UT+EAk0f/WMqOgkSmi3y\n"</literal>
    <literal type="string">"HgmG7YYAHel5tVeY59/ovxMvc290KQkthVgYBIT/Sy3O4pTRgu+xBkB5VfxjI9gj\n"</literal>
    <literal type="string">"yVVHsvJHwWdNyUf093Qvroul6Ulob7DOXmPvRWuu6YIBASYIGrmtI2cZ0SQBoySp\n"</literal>
    <literal type="string">"V65yTAwoi7bqsmwCo4sEjKE6FSeVINY/EvwYLbfyGUOmaunWkWkNPsg9fvwTZNOc\n"</literal>
    <literal type="string">"3G1IAypM4++02wVVeLdc0+n9FdE6QX3MWpUeZ5YaOzjBjCisk+jJ46L79bi6Z/Xc\n"</literal>
    <literal type="string">"H1XXBsMnmFhkhd3lraMQ8QYpWus890OmCnimB59SM1W2LgROwv/fXt/8rwgJY1v5\n"</literal>
    <literal type="string">"6VP5KAZkXpCq20gG6C7GW3jL5/prnPoe+uXku4m4iAReUmTewqht8WUyQaiAWy+e\n"</literal>
    <literal type="string">"nH5HoTaB3+9ZLu2RivU9l6y1YwYSAbSWBPbnN4HmjP4rmLG5t1ky9igYfJ3NL3LV\n"</literal>
    <literal type="string">"gJPetwzWuiONyshwMzcg0bE/NjzTXcCaFVKSJ/M++Kd+abDcixUQ3u6htVFHW/L/\n"</literal>
    <literal type="string">"-----END RSA PRIVATE KEY-----"</literal></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Client cert signed by another CA used to generate invalid client cert error

To regenerate, run the following in a temp path:

openssl genrsa -out bogus-ca.key 4096
openssl req -new -x509 -sha256 -days 99999 -key bogus-ca.key -out bogus-ca.crt -subj "/CN=bogus"
openssl req -nodes -new -newkey rsa:4096 -sha256 -key ~/pgbackrest/test/certificate/pgbackrest-test-client.key \
    -out client-bad-ca.csr -subj "/CN=bogus"
openssl x509 -extensions usr_cert -req -days 99999 -CA bogus-ca.crt -CAkey bogus-ca.key -CAcreateserial -in client-bad-ca.csr \
    -out client-bad-ca.crt

Then copy client-bad-ca.crt into the variable below. Use a variable instead of a define so we know when the variable is not used.
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>testClientBadCa</name> <init>=
    <expr><literal type="string">"-----BEGIN CERTIFICATE-----\n"</literal>
    <literal type="string">"MIIEqTCCApECFAzHjCL/QJZZRmBhloX298J4V4HbMA0GCSqGSIb3DQEBCwUAMBAx\n"</literal>
    <literal type="string">"DjAMBgNVBAMMBWJvZ3VzMCAXDTIxMDgyNjE0MzYyMloYDzIyOTUwNjEwMTQzNjIy\n"</literal>
    <literal type="string">"WjAQMQ4wDAYDVQQDDAVib2d1czCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoC\n"</literal>
    <literal type="string">"ggIBALK5ahiXzFqvha28yqe3SGdezs4IREHUDgbn6Tem9k1GazE/IsdIQ9wj9KHd\n"</literal>
    <literal type="string">"lXwb/2fsdQk1hkPXa4qRBR/AyeBPRL3d0aZzU+pTjV6n9dJ+KIaivuAxoyyY59XM\n"</literal>
    <literal type="string">"36CqTZxe3VqXweRWPn40tzDcUxSVIfipJpFuK2vxpwEHdl/cFQ38/sRoHTjx61nx\n"</literal>
    <literal type="string">"obt4RFiEMAFCxxCk/qDyYISHJmH67dIUEw7ujB4vn/gpk5f1WBY5msZMgT3pJbFv\n"</literal>
    <literal type="string">"xD8dRgUvMpIM5poVFfhHgRq+L2dxQ2jHD5AnlpY6n8XrWy4QQa3AFsWgnD0w0Wn6\n"</literal>
    <literal type="string">"cyU0g5AkIlP+0mMNC9LIPVc9LGKUTrqciBgx8Rysy3mskg8pElEe1ouQOi/Zx8UA\n"</literal>
    <literal type="string">"G3RXqvjxXLkMp3S7PKgrr48uZHAso59+k33EkF/ceLsr3r3VY1WWsiszDfK+vbj6\n"</literal>
    <literal type="string">"Bbxvtv/S2ZYXMA7nM2Ysu20BpHm9LLo4y8HqDeixqw5enOwuDKSeKD1pJgJ5CUYq\n"</literal>
    <literal type="string">"RbA/cUYxHJ36NuPDxec+bhqiJq8RMR4pGGcJ7BvirJxYPJX0LqIfTHL1t2dVm//A\n"</literal>
    <literal type="string">"meMDNiM2quAzpBosjvaWaRUcankYE1dL59eVugoDKCNCPg72LjXBB7bPWZT2Xhkc\n"</literal>
    <literal type="string">"co0etruIYYJmQ3LO0vGe9pOYBu2FHx5FY72b8gpshm+umdL5AgMBAAEwDQYJKoZI\n"</literal>
    <literal type="string">"hvcNAQELBQADggIBAEN3778acjJ46yKzYoM+wiyyiMtmOrf+zvJsF0oK4KcWgec2\n"</literal>
    <literal type="string">"O2grmhxxDdF5c/P6XasDQFl8feQfGeDY76DaLrcmIiOYrtnqg11IZcPOHx5nbpu2\n"</literal>
    <literal type="string">"ZVV5LiMS8nHhQIyxMF/WYYKGzBQ5AY2+t6dozyDo3R4O7CCmsFKc8NaB4maC7Q16\n"</literal>
    <literal type="string">"7MxKXxtAH9I1PigjRMDpi1xQJbXJxFKhZrKBODtreL6cmv6yB4JJezI5ngIdODpI\n"</literal>
    <literal type="string">"MaIS0reRGN4QUpzDaXwYBTaOHaIDShPDOfiA5ai4xK/dEWG2rDu+yk7g5SEKMAxU\n"</literal>
    <literal type="string">"mfUCO1MGY6NwQupLUyfO2VjvfYeB+ipJq6F8tYMGrQJU/PCQT6nxaZdSoZZQF72y\n"</literal>
    <literal type="string">"OuYVfKjnj7MWapGKC3ea1oTUvkwDePe8xg3DBuXImp5mO4MG5K/oVv5SnNVmcUGq\n"</literal>
    <literal type="string">"L9WBrvypJK+3x3vbdyH02DR10TcMRSbDODmW59nx2PQEDUM7ddNZ60dRn8Hdgoz2\n"</literal>
    <literal type="string">"s/Sk3I1gXvZLQ/shS4Aa7XKz/TqhPNrBnMvSnp5/PtjjeBwxIBimuuM1ALFfwz91\n"</literal>
    <literal type="string">"KpzwqfTswuGIO8TWKJZzNTsdwScqmbZTtiVs6GaEZ3FQX5qnrbybX53S2R9fNKm+\n"</literal>
    <literal type="string">"qGj7FtRiSdjkZ7pmNpma6ycPR0RBZyL3aHnig+DDfRRt8TgrZzY3aXBReONb\n"</literal>
    <literal type="string">"-----END CERTIFICATE-----"</literal></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test signal handler that does nothing
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testSignalHandler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>signalType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>signalType</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create default storage object for testing</comment>
    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(<argument><expr><call><name>chmod</name><argument_list>(<argument><expr><name>HRN_SERVER_KEY</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileModeError</name></expr></argument>, <argument><expr><literal type="string">"unable to set mode on "</literal> <name>HRN_SERVER_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(
        <argument><expr><call><name>chmod</name><argument_list>(<argument><expr><name>HRN_SERVER_CLIENT_KEY</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileModeError</name></expr></argument>, <argument><expr><literal type="string">"unable to set mode on "</literal> <name>HRN_SERVER_CLIENT_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"Socket Common"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Save socket settings</comment>
        <decl_stmt><decl><type><name><name>struct</name> <name>SocketLocal</name></name></type> <name>socketLocalSave</name> <init>= <expr><name>socketLocal</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hints</name> <init>= <expr><operator>(</operator>struct <name>addrinfo</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>ai_family</name> <operator>=</operator> <name>AF_UNSPEC</name></expr>,
            <expr><operator>.</operator><name>ai_socktype</name> <operator>=</operator> <name>SOCK_STREAM</name></expr>,
            <expr><operator>.</operator><name>ai_protocol</name> <operator>=</operator> <name>IPPROTO_TCP</name></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>port</name> <init>= <expr><literal type="string">"7777"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostLocal</name> <init>= <expr><literal type="string">"127.0.0.1"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hostLocalAddress</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>hostLocal</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hostLocalAddress</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(                                              <comment type="line">// {uncoverable - lookup on IP should never fail}</comment>
                <argument><expr><name>HostConnectError</name></expr></argument>, <argument><expr><literal type="string">"unable to get address for '%s': [%d] %s"</literal></expr></argument>, <argument><expr><name>hostLocal</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hostBad</name> <init>= <expr><literal type="string">"172.31.255.255"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>hostBadAddress</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>result</name> <operator>=</operator> <call><name>getaddrinfo</name><argument_list>(<argument><expr><name>hostBad</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hostBadAddress</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(                                              <comment type="line">// {uncoverable - lookup on IP should never fail}</comment>
                <argument><expr><name>HostConnectError</name></expr></argument>, <argument><expr><literal type="string">"unable to get address for '%s': [%d] %s"</literal></expr></argument>, <argument><expr><name>hostBad</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>socket</name><argument_list>(<argument><expr><name><name>hostBadAddress</name><operator>-&gt;</operator><name>ai_family</name></name></expr></argument>, <argument><expr><name><name>hostBadAddress</name><operator>-&gt;</operator><name>ai_socktype</name></name></expr></argument>, <argument><expr><name><name>hostBadAddress</name><operator>-&gt;</operator><name>ai_protocol</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><name>fd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>HostConnectError</name></expr></argument>, <argument><expr><literal type="string">"unable to create socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// ---------------------------------------------------------------------------------------------------------------------</comment>
            <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"enable options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>sckInit</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">3113</literal></expr></argument>, <argument><expr><literal type="number">818</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sckOptionSet</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>fcntl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>F_GETFD</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FD_CLOEXEC</name></expr></argument>, <argument><expr><literal type="string">"check FD_CLOEXEC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>socklen_t</name></type> <name>socketValueSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>noDelayValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
                <argument><expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_NODELAY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>noDelayValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socketValueSize</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                <argument><expr><literal type="string">"unable get TCP_NO_DELAY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>noDelayValue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check TCP_NODELAY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>keepAliveValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
                <argument><expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_KEEPALIVE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keepAliveValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socketValueSize</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                <argument><expr><literal type="string">"unable get SO_KEEPALIVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>keepAliveValue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check SO_KEEPALIVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>keepAliveCountValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
                <argument><expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPCNT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keepAliveCountValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socketValueSize</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                <argument><expr><literal type="string">"unable get TCP_KEEPCNT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>keepAliveCountValue</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"check TCP_KEEPCNT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>keepAliveIdleValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
                <argument><expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPIDLE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keepAliveIdleValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socketValueSize</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                <argument><expr><literal type="string">"unable get TCP_KEEPIDLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>keepAliveIdleValue</name></expr></argument>, <argument><expr><literal type="number">3113</literal></expr></argument>, <argument><expr><literal type="string">"check TCP_KEEPIDLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>keepAliveIntervalValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
                <argument><expr><call><name>getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>, <argument><expr><name>TCP_KEEPINTVL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keepAliveIntervalValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>socketValueSize</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                <argument><expr><literal type="string">"unable get TCP_KEEPIDLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>keepAliveIntervalValue</name></expr></argument>, <argument><expr><literal type="number">818</literal></expr></argument>, <argument><expr><literal type="string">"check TCP_KEEPINTVL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// ---------------------------------------------------------------------------------------------------------------------</comment>
            <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"disable keep-alive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>sckInit</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sckOptionSet</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>keepAliveValue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check SO_KEEPALIVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>keepAliveCountValue</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"check TCP_KEEPCNT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>keepAliveIdleValue</name></expr></argument>, <argument><expr><literal type="number">3113</literal></expr></argument>, <argument><expr><literal type="string">"check TCP_KEEPIDLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>keepAliveIntervalValue</name></expr></argument>, <argument><expr><literal type="number">818</literal></expr></argument>, <argument><expr><literal type="string">"check TCP_KEEPINTVL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// ---------------------------------------------------------------------------------------------------------------------</comment>
            <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"enable keep-alive but disable options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>sckInit</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sckOptionSet</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>keepAliveValue</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check SO_KEEPALIVE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>keepAliveCountValue</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"check TCP_KEEPCNT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>keepAliveIdleValue</name></expr></argument>, <argument><expr><literal type="number">3113</literal></expr></argument>, <argument><expr><literal type="string">"check TCP_KEEPIDLE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>keepAliveIntervalValue</name></expr></argument>, <argument><expr><literal type="number">818</literal></expr></argument>, <argument><expr><literal type="string">"check TCP_KEEPINTVL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// ---------------------------------------------------------------------------------------------------------------------</comment>
            <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"connect to non-blocking socket to test write ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Make sure the bad address does not work before using it for testing</comment>
            <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>connect</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name><name>hostBadAddress</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>hostBadAddress</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Create socket session and wait for timeout</comment>
            <decl_stmt><decl><type><name>IoSession</name> <modifier>*</modifier></type><name>session</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>sckSessionNew</name><argument_list>(<argument><expr><name>ioSessionRoleClient</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><name>hostBad</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">7777</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                <argument><expr><call><name>ioWriteReadyP</name><argument_list>(<argument><expr><call><name>ioSessionIoWrite</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>error</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileWriteError</name></expr></argument>,
                <argument><expr><literal type="string">"timeout after 100ms waiting for write to '172.31.255.255:7777'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioSessionClose</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close socket session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioSessionClose</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close socket session again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioSessionFree</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free socket session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// ---------------------------------------------------------------------------------------------------------------------</comment>
            <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"unable to connect to blocking socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>IoClient</name> <modifier>*</modifier></type><name>socketClient</name> <init>= <expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>hostLocal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">7777</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>ioClientName</name><argument_list>(<argument><expr><name>socketClient</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"127.0.0.1:7777"</literal></expr></argument>, <argument><expr><literal type="string">" check name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>socketLocal</name><operator>.</operator><name>block</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                <argument><expr><call><name>ioClientOpen</name><argument_list>(<argument><expr><name>socketClient</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HostConnectError</name></expr></argument>, <argument><expr><literal type="string">"unable to connect to '127.0.0.1:7777': [111] Connection refused"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>socketLocal</name><operator>.</operator><name>block</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

            <comment type="line">// ---------------------------------------------------------------------------------------------------------------------</comment>
            <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"uncovered conditions for sckConnect()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>sckConnectInProgress</name><argument_list>(<argument><expr><name>EINTR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"connection in progress (EINTR)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>FINALLY</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// These need to be freed or valgrind will complain</comment>
            <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>hostLocalAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>freeaddrinfo</name><argument_list>(<argument><expr><name>hostBadAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Restore socket settings</comment>
        <expr_stmt><expr><name>socketLocal</name> <operator>=</operator> <name>socketLocalSave</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"SocketClient/SocketServer"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>IoClient</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>ioClientOpen</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HostConnectError</name></expr></argument>, <argument><expr><literal type="string">"unable to connect to 'localhost:%u': [111] Connection refused"</literal></expr></argument>,
            <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// This address should not be in use in a test environment -- if it is the test will fail</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"172.31.255.255"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(<argument><expr><call><name>ioClientOpen</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HostConnectError</name></expr></argument>, <argument><expr><literal type="string">"timeout connecting to '172.31.255.255:%u'"</literal></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"sckServerAccept() returns NULL on interrupt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>(<argument>.timeout = <literal type="number">5000</literal></argument>)</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"sighup server"</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Ignore SIGHUP</comment>
                <macro><name>sigaction</name><argument_list>(<argument>SIGHUP</argument>, <argument>&amp;(struct sigaction){.sa_handler = testSignalHandler}</argument>, <argument>NULL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

                <comment type="line">// Wait for connection. Use port 1 to avoid port conflicts later.</comment>
                <decl_stmt><decl><type><name>IoServer</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><call><name>sckServerNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_PUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>ioServerAccept</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"connection interrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"sighup client"</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Wait for client to be ready but also sleep a bit more to allow accept to initialize</comment>
                <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_GET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Send SIGHUP and the client should exit</comment>
                <expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>HRN_FORK_PROCESS_ID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Additional coverage not provided by testing with actual certificates</comment>
    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"tlsAsn1ToStr(), tlsClientHostVerify(), and tlsClientHostVerifyName()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>tlsAsn1ToStr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"TLS certificate name entry is missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>tlsClientHostVerifyName</name><argument_list>(
                <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewZN</name><argument_list>(<argument><expr><literal type="string">"ab\0cd"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"TLS certificate name contains embedded null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>tlsClientHostVerify</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"No certificate presented by the TLS server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>tlsClientHostVerifyName</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"**"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"invalid pattern"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>tlsClientHostVerifyName</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"*."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"invalid pattern"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>tlsClientHostVerifyName</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"a.bogus.host.com"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"*.host.com"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"invalid host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"TlsClient verification"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>IoClient</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Connection errors</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>tlsClientNewP</name><argument_list>(<argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"99.99.99.99.99"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">7777</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>ioClientName</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"99.99.99.99.99:7777"</literal></expr></argument>, <argument><expr><literal type="string">" check name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>ioClientOpen</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HostConnectError</name></expr></argument>, <argument><expr><literal type="string">"unable to get address for '99.99.99.99.99': [-2] Name or service not known"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>tlsClientNewP</name><argument_list>(<argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"new client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>ioClientOpen</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HostConnectError</name></expr></argument>, <argument><expr><literal type="string">"unable to connect to 'localhost:%u': [111] Connection refused"</literal></expr></argument>,
            <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"missing ca cert/path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>ioClientOpen</name><argument_list>(
                <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                    <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>caFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus.crt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>caPath</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/bogus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"unable to set user-defined CA certificate location: "</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x30000000L</literal></expr></cpp:if>
            <literal type="string">"[2147483650] no details available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><literal type="string">"[33558530] No such file or directory"</literal></expr></expr_stmt>)</block_content></block><empty_stmt>;</empty_stmt></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"missing client cert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>ioClientOpen</name><argument_list>(
                <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                    <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>certFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/bogus"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>keyFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/bogus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"unable to load cert file '/bogus': "</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x30000000L</literal></expr></cpp:if>
            <literal type="string">"[2147483650] no details available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><literal type="string">"[33558530] No such file or directory"</literal></expr></expr_stmt>)</block_content></block>;</function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"missing client key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>ioClientOpen</name><argument_list>(
                <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                    <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>certFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CLIENT_CERT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>keyFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/bogus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"unable to load key file '/bogus': "</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x30000000L</literal></expr></cpp:if>
            <literal type="string">"[2147483650] no details available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><literal type="string">"[33558530] No such file or directory"</literal></expr></expr_stmt>)<empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"client cert and key do not match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>ioClientOpen</name><argument_list>(
                <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                    <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>certFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CLIENT_CERT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>keyFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"unable to load key file '"</literal> <name>HRN_PATH_REPO</name> <literal type="string">"/test/certificate/pgbackrest-test-server.key': "</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x30000000L</literal></expr></cpp:if>
            <literal type="string">"[92274804]"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <literal type="string">"[185073780]"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <literal type="string">" key values mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"client cert with passphrase"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"client-pwd.key"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRZ</name><argument_list>(<argument><expr><name>testClientPwdKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                    <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>certFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CLIENT_CERT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>keyFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/client-pwd.key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"unable to load key file '"</literal> <name>TEST_PATH</name> <literal type="string">"/client-pwd.key': "</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x30000000L</literal></expr></cpp:if>
                <literal type="string">"[478150756]"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <literal type="string">"[101077092]"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <literal type="string">" bad decrypt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH</name><argument_list>(<argument>TestError</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(                                                                             <comment type="line">// {uncovered - 32-bit error}</comment>
                <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                    <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>certFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CLIENT_CERT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>keyFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/client-pwd.key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"unable to load key file '"</literal> <name>TEST_PATH</name> <literal type="string">"/client-pwd.key': [151429224] bad password read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"client-pwd.key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"key with bad user permissions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"client-bad-perm.key"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0640</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>ioClientOpen</name><argument_list>(
                <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                    <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>certFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CLIENT_CERT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>keyFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/client-bad-perm.key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>FileReadError</name></expr></argument>,
            <argument><expr><literal type="string">"key file '"</literal> <name>TEST_PATH</name> <literal type="string">"/client-bad-perm.key' has group or other permissions\n"</literal>
            <literal type="string">"HINT: file must have permissions u=rw (0600) or less if owned by the '"</literal> <name>TEST_USER</name> <literal type="string">"' user\n"</literal>
            <literal type="string">"HINT: file must have permissions u=rw, g=r (0640) or less if owned by root\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"client-bad-perm.key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"key with bad user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"client-bad-perm.key"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0660</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"sudo chown postgres %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"client-bad-perm.key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>ioClientOpen</name><argument_list>(
                <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                    <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>certFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CLIENT_CERT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>keyFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/client-bad-perm.key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>FileReadError</name></expr></argument>, <argument><expr><literal type="string">"key file '"</literal> <name>TEST_PATH</name> <literal type="string">"/client-bad-perm.key' must be owned by the '"</literal> <name>TEST_USER</name> <literal type="string">"' user or root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"key with bad root permissions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"sudo chown root %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"client-bad-perm.key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>ioClientOpen</name><argument_list>(
                <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                    <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>certFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CLIENT_CERT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>keyFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/client-bad-perm.key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>FileReadError</name></expr></argument>,
            <argument><expr><literal type="string">"key file '"</literal> <name>TEST_PATH</name> <literal type="string">"/client-bad-perm.key' has group or other permissions\n"</literal>
            <literal type="string">"HINT: file must have permissions u=rw (0600) or less if owned by the '"</literal> <name>TEST_USER</name> <literal type="string">"' user\n"</literal>
            <literal type="string">"HINT: file must have permissions u=rw, g=r (0640) or less if owned by root\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"sudo rm %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"client-bad-perm.key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Certificate location and validation errors</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <comment type="line">// Add test hosts</comment>
        <expr_stmt><expr><call><name>HRN_SYSTEM</name><argument_list>(
            <argument><expr><literal type="string">"echo \"127.0.0.1 test.pgbackrest.org host.test2.pgbackrest.org test3.pgbackrest.org\" | sudo tee -a /etc/hosts &gt;"</literal>
                <literal type="string">" /dev/null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"test server"</literal></argument>, <argument>.timeout = <literal type="number">5000</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Start server to test various certificate errors</comment>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
                    <argument><expr><call><name>hrnServerRunP</name><argument_list>(
                        <argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hrnServerProtocolTls</name></expr></argument>,
                        <argument><expr><operator>.</operator><name>certificate</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CERT</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><operator>.</operator><name>key</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"tls alt name server run"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"test client"</literal></argument>, <argument>.timeout = <literal type="number">1000</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>tls</name> <init>= <expr><call><name>hrnServerScriptBegin</name><argument_list>(<argument><expr><call><name>HRN_FORK_PARENT_WRITE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"certificate error on invalid ca path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
                    <argument><expr><call><name>ioClientOpen</name><argument_list>(
                        <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                            <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                            <argument><expr><operator>.</operator><name>caPath</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/bogus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>CryptoError</name></expr></argument>,
                    <argument><expr><literal type="string">"unable to verify certificate presented by 'localhost:%u': [20] unable to get local issuer certificate"</literal></expr></argument>,
                    <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"valid ca file and match common name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
                    <argument><expr><call><name>ioClientOpen</name><argument_list>(
                        <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                            <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.pgbackrest.org"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.pgbackrest.org"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>caFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"open connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"valid ca file and match alt name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
                    <argument><expr><call><name>ioClientOpen</name><argument_list>(
                        <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                            <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"host.test2.pgbackrest.org"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"host.test2.pgbackrest.org"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>caFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"open connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"unable to find matching hostname in certificate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>ioClientOpen</name><argument_list>(
                        <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                            <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test3.pgbackrest.org"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test3.pgbackrest.org"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>caFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>CryptoError</name></expr></argument>,
                    <argument><expr><literal type="string">"unable to find hostname 'test3.pgbackrest.org' in certificate common name or subject alternative names"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"certificate error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
                    <argument><expr><call><name>ioClientOpen</name><argument_list>(
                        <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                            <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                            <argument><expr><operator>.</operator><name>caFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CERT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>CryptoError</name></expr></argument>,
                    <argument><expr><literal type="string">"unable to verify certificate presented by 'localhost:%u': [20] unable to get local issuer certificate"</literal></expr></argument>,
                    <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"no certificate verify"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
                    <argument><expr><call><name>ioClientOpen</name><argument_list>(
                        <argument><expr><call><name>tlsClientNewP</name><argument_list>(<argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"open connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>hrnServerScriptEnd</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <comment type="line">// Put root-owned server key</comment>
        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"server-root-perm.key"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0640</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"sudo chown root %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"server-root-perm.key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
            <argument><expr><call><name>symlink</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/server-root-perm.key"</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/server-root-perm-link"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Put CN only server cert</comment>
        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"server-cn-only.crt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRZ</name><argument_list>(<argument><expr><name>testServerCnOnlyCert</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Put bad CA client cert</comment>
        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"client-bad-ca.crt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRZ</name><argument_list>(<argument><expr><name>testClientBadCa</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"test server"</literal></argument>, <argument>.timeout = <literal type="number">5000</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// TLS server to accept connections</comment>
                <decl_stmt><decl><type><name>IoServer</name> <modifier>*</modifier></type><name>socketServer</name> <init>= <expr><call><name>sckServerNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>IoServer</name> <modifier>*</modifier></type><name>tlsServer</name> <init>= <expr><call><name>tlsServerNew</name><argument_list>(
                    <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CA</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/server-root-perm-link"</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/server-cn-only.crt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>IoSession</name> <modifier>*</modifier></type><name>socketSession</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>ioServerName</name><argument_list>(<argument><expr><name>socketServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"localhost:%u"</literal></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"socket server name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>ioServerName</name><argument_list>(<argument><expr><name>tlsServer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="string">"tls server name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Invalid client cert</comment>
                <expr_stmt><expr><name>socketSession</name> <operator>=</operator> <call><name>ioServerAccept</name><argument_list>(<argument><expr><name>socketServer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>ioServerAccept</name><argument_list>(<argument><expr><name>tlsServer</name></expr></argument>, <argument><expr><name>socketSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ServiceError</name></expr></argument>,
                    <argument><expr><literal type="string">"TLS error "</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x30000000L</literal></expr></cpp:if>
                    <literal type="string">"[1:167772294]"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <literal type="string">"[1:337100934]"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <literal type="string">" certificate verify failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Valid client cert</comment>
                <expr_stmt><expr><name>socketSession</name> <operator>=</operator> <call><name>ioServerAccept</name><argument_list>(<argument><expr><name>socketServer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>IoSession</name> <modifier>*</modifier></type><name>tlsSession</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>, <argument><expr><call><name>ioServerAccept</name><argument_list>(<argument><expr><name>tlsServer</name></expr></argument>, <argument><expr><name>socketSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open server session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioSessionAuthenticated</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"server session authenticated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>ioSessionPeerName</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pgbackrest-client"</literal></expr></argument>, <argument><expr><literal type="string">"check peer name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWrite</name><argument_list>(<argument><expr><call><name>ioSessionIoWrite</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"server write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>ioSessionIoWrite</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"server write flush"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioSessionFree</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free server session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// No client cert</comment>
                <expr_stmt><expr><name>socketSession</name> <operator>=</operator> <call><name>ioServerAccept</name><argument_list>(<argument><expr><name>socketServer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>, <argument><expr><call><name>ioServerAccept</name><argument_list>(<argument><expr><name>tlsServer</name></expr></argument>, <argument><expr><name>socketSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open server session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioSessionAuthenticated</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"server session not authenticated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWrite</name><argument_list>(<argument><expr><call><name>ioSessionIoWrite</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"message2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"server write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>ioSessionIoWrite</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"server write flush"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioSessionFree</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free server session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Free socket</comment>
                <expr_stmt><expr><call><name>ioServerFree</name><argument_list>(<argument><expr><name>socketServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"test client"</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>IoSession</name> <modifier>*</modifier></type><name>clientSession</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"client cert is invalid (signed by another CA)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>clientSession</name></expr></argument>,
                    <argument><expr><call><name>ioClientOpen</name><argument_list>(
                        <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                            <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>,
                            <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>certFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/client-bad-ca.crt"</literal></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><operator>.</operator><name>keyFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CLIENT_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"client open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>clientSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ServiceError</name></expr></argument>,
                    <argument><expr><literal type="string">"TLS error "</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x30000000L</literal></expr></cpp:if>
                    <literal type="string">"[1:167773208]"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <literal type="string">"[1:336151576]"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                    <literal type="string">" tlsv1 alert unknown ca"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioSessionFree</name><argument_list>(<argument><expr><name>clientSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free client session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"client cert is valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>clientSession</name></expr></argument>,
                    <argument><expr><call><name>ioClientOpen</name><argument_list>(
                        <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                            <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                            <argument><expr><operator>.</operator><name>certFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CLIENT_CERT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>keyFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CLIENT_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"client open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>clientSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"client read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><literal type="string">"check read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioSessionFree</name><argument_list>(<argument><expr><name>clientSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free client session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"no client cert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>clientSession</name></expr></argument>,
                    <argument><expr><call><name>ioClientOpen</name><argument_list>(
                        <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                            <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>,
                            <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"client open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>clientSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"client read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"message2"</literal></expr></argument>, <argument><expr><literal type="string">"check read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioSessionFree</name><argument_list>(<argument><expr><name>clientSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free client session"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"server-root-perm-link"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"sudo rm %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"server-root-perm.key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>
    }

    <comment type="line">// *****************************************************************************************************************************</comment>
    if <expr_stmt><expr><operator>(</operator><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"TlsClient general usage"</literal></expr></argument>)</argument_list></call><operator>)</operator>
    <block>{
        <expr><name>IoClient</name> <operator>*</operator><name>client</name> <operator>=</operator> <name>NULL</name></expr>;
        <expr><name>IoSession</name> <operator>*</operator><name>session</name> <operator>=</operator> <name>NULL</name></expr>;

        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <expr><block>{
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"test server"</literal></argument>, <argument>.timeout = <literal type="number">5000</literal></argument>)</argument_list></macro>
            <expr><block>{
                <expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnServerRunP</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hrnServerProtocolTls</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"tls server run"</literal></expr></argument>)</argument_list></call></expr>;
            }</block>
            <call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"test client"</literal></argument>, <argument>.timeout = <literal type="number">1000</literal></argument>)</argument_list></macro>
            <expr><block>{
                <expr><name>IoWrite</name> <operator>*</operator><name>tls</name> <operator>=</operator> <call><name>hrnServerScriptBegin</name><argument_list>(<argument><expr><call><name>HRN_FORK_PARENT_WRITE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>ioBufferSizeSet</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;

                <expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>client</name></expr></argument>,
                    <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                        <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TEST_IN_CONTAINER</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"new client"</literal></expr></argument>)</argument_list></call></expr>;

                <expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;

                <expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>ioClientOpen</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open client"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><name>TlsSession</name> <operator>*</operator><name>tlsSession</name> <operator>=</operator> <operator>(</operator><name>TlsSession</name> <operator>*</operator><operator>)</operator><name><name>session</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>driver</name></name></expr>;

                <expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>ioSessionFd</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"no fd for tls session"</literal></expr></argument>)</argument_list></call></expr>;

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"uncovered errors"</literal></expr></argument>)</argument_list></call></expr>;

                <expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>tlsSessionResultProcess</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>, <argument><expr><name>SSL_ERROR_WANT_WRITE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"write ready"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>tlsSessionResultProcess</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>, <argument><expr><name>SSL_ERROR_WANT_X509_LOOKUP</name></expr></argument>, <argument><expr><literal type="number">336031996</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ServiceError</name></expr></argument>,
                    <argument><expr><literal type="string">"TLS error [4:336031996] "</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x30000000L</literal></expr></cpp:if>
                    <literal type="string">"no details available"</literal></expr></argument>)</argument_list></call></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <expr><literal type="string">"unknown protocol"</literal></expr>)</block></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>tlsSessionResultProcess</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>, <argument><expr><name>SSL_ERROR_WANT_X509_LOOKUP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ServiceError</name></expr></argument>,
                    <argument><expr><literal type="string">"TLS error [4:0] no details available"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>tlsSessionResultProcess</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>, <argument><expr><name>SSL_ERROR_ZERO_RETURN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>, <argument><expr><literal type="string">"unexpected TLS eof"</literal></expr></argument>)</argument_list></call></expr>;

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"first protocol exchange"</literal></expr></argument>)</argument_list></call></expr>;

                <expr><call><name>hrnServerScriptExpectZ</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><literal type="string">"some protocol info"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>hrnServerScriptReplyZ</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><literal type="string">"something:0\n"</literal></expr></argument>)</argument_list></call></expr>;

                <expr><specifier>const</specifier> <name>Buffer</name> <operator>*</operator><name>input</name> <operator>=</operator> <call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"some protocol info"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWrite</name><argument_list>(<argument><expr><call><name>ioSessionIoWrite</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write input"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>ioSessionIoWrite</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

                <expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>ioReadLine</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"something:0"</literal></expr></argument>, <argument><expr><literal type="string">"read line"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioReadEof</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check eof = false"</literal></expr></argument>)</argument_list></call></expr>;

                <expr><call><name>hrnServerScriptSleep</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>hrnServerScriptReplyZ</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><literal type="string">"some "</literal></expr></argument>)</argument_list></call></expr>;

                <expr><call><name>hrnServerScriptSleep</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>hrnServerScriptReplyZ</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><literal type="string">"contentAND MORE"</literal></expr></argument>)</argument_list></call></expr>;

                <expr><name>Buffer</name> <operator>*</operator><name>output</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"read output"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"some content"</literal></expr></argument>, <argument><expr><literal type="string">"check output"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioReadEof</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check eof = false"</literal></expr></argument>)</argument_list></call></expr>;

                <expr><name>output</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"read output"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"AND MORE"</literal></expr></argument>, <argument><expr><literal type="string">"check output"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioReadEof</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check eof = false"</literal></expr></argument>)</argument_list></call></expr>;

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"read eof"</literal></expr></argument>)</argument_list></call></expr>;

                <expr><call><name>hrnServerScriptSleep</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;

                <expr><name>output</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;
                <expr><operator>(</operator><operator>(</operator><name>IoFdRead</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>SocketSession</name> <operator>*</operator><operator>)</operator><name><name>tlsSession</name><operator>-&gt;</operator><name>ioSession</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name><name>read</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name>timeout</name> <operator>=</operator> <literal type="number">100</literal></expr>;
                <expr><call><name>TEST_ERROR_FMT</name><argument_list>(
                    <argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileReadError</name></expr></argument>,
                    <argument><expr><literal type="string">"timeout after 100ms waiting for read from '%s:%u'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;
                <expr><operator>(</operator><operator>(</operator><name>IoFdRead</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>SocketSession</name> <operator>*</operator><operator>)</operator><name><name>tlsSession</name><operator>-&gt;</operator><name>ioSession</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name><name>read</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name>timeout</name> <operator>=</operator> <literal type="number">5000</literal></expr>;

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"second protocol exchange"</literal></expr></argument>)</argument_list></call></expr>;

                <expr><call><name>hrnServerScriptExpectZ</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><literal type="string">"more protocol info"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>hrnServerScriptReplyZ</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><literal type="string">"0123456789AB"</literal></expr></argument>)</argument_list></call></expr>;

                <expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;

                <expr><name>input</name> <operator>=</operator> <call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"more protocol info"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWrite</name><argument_list>(<argument><expr><call><name>ioSessionIoWrite</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write input"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>ioSessionIoWrite</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;

                <expr><name>output</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"read output"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0123456789AB"</literal></expr></argument>, <argument><expr><literal type="string">"check output"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioReadEof</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check eof = false"</literal></expr></argument>)</argument_list></call></expr>;

                <expr><name>output</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"read no output after eof"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioReadEof</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check eof = true"</literal></expr></argument>)</argument_list></call></expr>;

                <expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioSessionClose</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close again"</literal></expr></argument>)</argument_list></call></expr>;

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"aborted connection before read complete (blocking socket)"</literal></expr></argument>)</argument_list></call></expr>;

                <expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>hrnServerScriptReplyZ</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><literal type="string">"0123456789AB"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>hrnServerScriptAbort</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;

                <expr><name><name>socketLocal</name><operator>.</operator><name>block</name></name> <operator>=</operator> <name>true</name></expr>;
                <expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>ioClientOpen</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open client again (was closed by server)"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><name><name>socketLocal</name><operator>.</operator><name>block</name></name> <operator>=</operator> <name>false</name></expr>;

                <expr><name>output</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>session</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ServiceError</name></expr></argument>,
                    <argument><expr><literal type="string">"TLS error "</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x30000000L</literal></expr></cpp:if>
                    <literal type="string">"[1:167772454] unexpected eof while reading"</literal></expr></argument>)</argument_list></call></expr>;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                    <expr><literal type="string">"[5:0] no details available"</literal></expr>)</block></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"aborted connection ignored and read complete (non-blocking socket)"</literal></expr></argument>)</argument_list></call></expr>;

                <expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>hrnServerScriptReplyZ</name><argument_list>(<argument><expr><name>tls</name></expr></argument>, <argument><expr><literal type="string">"0123456789AC"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>hrnServerScriptAbort</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;

                <expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><call><name>ioClientOpen</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open client again (was closed by server)"</literal></expr></argument>)</argument_list></call></expr>;

                <expr><name>output</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>session</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreUnexpectedEof</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ignore syscall error"</literal></expr></argument>)</argument_list></call></expr>;
                <expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0123456789AC"</literal></expr></argument>, <argument><expr><literal type="string">"all bytes read"</literal></expr></argument>)</argument_list></call></expr>;

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"close connection"</literal></expr></argument>)</argument_list></call></expr>;

                <expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioClientFree</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free client"</literal></expr></argument>)</argument_list></call></expr>;

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr><call><name>hrnServerScriptEnd</name><argument_list>(<argument><expr><name>tls</name></expr></argument>)</argument_list></call></expr>;
            }</block>
            <call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }
        HRN_FORK_END<expr_stmt><expr><operator>(</operator><operator>)</operator></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"stastistics exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR_NE</name><argument_list>(<argument><expr><call><name>statToJson</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }

    FUNCTION_HARNESS_RETURN_VOID<expr_stmt><expr><operator>(</operator><operator>)</operator></expr>;</expr_stmt>
}
</unit>
