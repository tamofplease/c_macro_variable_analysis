<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/common/typeStringTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Strings
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/buffer.h"</cpp:file></cpp:include>

<comment type="line">// Declare a static const string for testing</comment>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>TEST_STRING</name></expr></argument>, <argument><expr><literal type="string">"a very interesting string!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test enum and function to ensure 64-bit enums work properly
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><enum>enum
<block>{
    <decl><name>testStringIdEnumAes256Cbc</name> <init>= <expr><call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"aes-256-cbc"</literal></expr></argument>, <argument><expr><literal type="number">0xc43dfbbcdcca10</literal></expr></argument>)</argument_list></call></expr></init></decl>,
    <decl><name>testStringIdEnumRemote</name> <init>= <expr><call><name>STRID6</name><argument_list>(<argument><expr><literal type="string">"remote"</literal></expr></argument>, <argument><expr><literal type="number">0x1543cd1521</literal></expr></argument>)</argument_list></call></expr></init></decl>,
    <decl><name>testStringIdEnumTest</name> <init>= <expr><call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><literal type="number">0xa4cb40</literal></expr></argument>)</argument_list></call></expr></init></decl>,
}</block></enum></type> <name>TestStringIdEnum</name>;</typedef>

<function><type><specifier>static</specifier> <name>TestStringIdEnum</name></type>
<name>testStringIdEnumFunc</name><parameter_list>(<parameter><decl><type><name>TestStringIdEnum</name></type> <name>testEnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name>testEnum</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strNew*(), strEmpty(), strZ(), strZNull(), strSize(), and strFree()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// We don't want this struct to grow since there are generally a lot of strings, so make sure it doesn't grow without us</comment>
        <comment type="line">// knowing about it</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StringPub</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"check StringConst struct size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Test the size macro</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>CHECK_SIZE</name><argument_list>(<argument><expr><literal type="number">555</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"valid size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>CHECK_SIZE</name><argument_list>(<argument><expr><name>STRING_SIZE_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"string size must be &lt;= 1073741824 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"static string"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>buffer</name></name> <operator>==</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>string</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"string has fixed buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"static string"</literal></expr></argument>, <argument><expr><literal type="string">"new with static string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strEmpty</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"is not empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="string">"check size with strlen()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>strZNull</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="string">"check character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strSize</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"new string from empty buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>strFree</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strNewZN</name><argument_list>(<argument><expr><literal type="string">"testmorestring"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><literal type="string">"new string with size limit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"12345678"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"12345678"</literal></expr></argument>, <argument><expr><literal type="string">"new string from buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"new from double"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strNewDbl</name><argument_list>(<argument><expr><literal type="number">999.1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"999.1"</literal></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>string</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"formatted %s %04d"</literal></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"formatted string 0001"</literal></expr></argument>, <argument><expr><literal type="string">"new with formatted string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>strZNull</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"null string pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>strFree</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>strFree</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free null string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"empty string is allocated extra space"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new empty string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>EMPTY_STR</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="string">"check buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>strFree</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"strNewEncode()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strNewEncode</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"zz"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"eno="</literal></expr></argument>, <argument><expr><literal type="string">"encode base64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"fixed string large enough to need separate allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>compare</name> <init>= <expr><call><name>memNew</name><argument_list>(<argument><expr><name>MEM_CONTEXT_ALLOC_EXTRA_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>compare</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><name>MEM_CONTEXT_ALLOC_EXTRA_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>compare</name><index>[<expr><name>MEM_CONTEXT_ALLOC_EXTRA_MAX</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strNewZN</name><argument_list>(<argument><expr><name>compare</name></expr></argument>, <argument><expr><name>MEM_CONTEXT_ALLOC_EXTRA_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compare</name></expr></argument>, <argument><expr><literal type="string">"compare"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"STRING_STATIC()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name>TEST_STRING</name></expr></argument>, <argument><expr><literal type="string">"a very interesting string!"</literal></expr></argument>, <argument><expr><literal type="string">"check static string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strSubN</name><argument_list>(<argument><expr><name>TEST_STRING</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"a very"</literal></expr></argument>, <argument><expr><literal type="string">"read-only strSub() works"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strBase(), strPath(), and strPathAbsolute()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strBase</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"empty string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strBase</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"/ only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strBase</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="string">"root file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strBase</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/dir1/dir2/file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="string">"subdirectory file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strPath</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"empty string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strPath</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"/ only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strPath</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"root path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strPath</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/dir1/dir2/file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/dir1/dir2"</literal></expr></argument>, <argument><expr><literal type="string">"subdirectory file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>strPathAbsolute</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/.."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"result path '/..' is not absolute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>strPathAbsolute</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"//"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"result path '//' is not absolute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>strPathAbsolute</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"path1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"base path 'path1' is not absolute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>strPathAbsolute</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"relative path '..' goes back too far in base path '/'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>strPathAbsolute</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"path1//"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"'path1//' is not a valid relative path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strPathAbsolute</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"path is already absolute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strPathAbsolute</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"simple relative path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strPathAbsolute</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"../"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"simple relative path with trailing /"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>strPathAbsolute</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"../path2/.././path3"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/base1/base2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/base1/path3"</literal></expr></argument>, <argument><expr><literal type="string">"complex relative path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strCat*()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>string</name> <init>= <expr><call><name>strCatZ</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"XXX"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>string2</name> <init>= <expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"ZZZZ"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strCatN</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"XX"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"XXXX"</literal></expr></argument>, <argument><expr><literal type="string">"cat N chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="string">"check extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"XXXX"</literal></expr></argument>, <argument><expr><literal type="string">"cat empty string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="string">"check extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strCatEncode</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"XXXX"</literal></expr></argument>, <argument><expr><literal type="string">"cat empty encode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>, <argument><expr><literal type="string">"check extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strCat</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"YYYY"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"XXXXYYYY"</literal></expr></argument>, <argument><expr><literal type="string">"cat string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>, <argument><expr><literal type="string">"check extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strCatZN</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"XXXXYYYY"</literal></expr></argument>, <argument><expr><literal type="string">"cat 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument>, <argument><expr><literal type="string">"check extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strCatBuf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"XXXXYYYY?"</literal></expr></argument>, <argument><expr><literal type="string">"cat buf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>, <argument><expr><literal type="string">"check extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"%05d"</literal></expr></argument>, <argument><expr><literal type="number">777</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"XXXXYYYY?00777"</literal></expr></argument>, <argument><expr><literal type="string">"cat formatted string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><literal type="string">"check extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="char">'!'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"XXXXYYYY?00777!"</literal></expr></argument>, <argument><expr><literal type="string">"cat chr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="number">49</literal></expr></argument>, <argument><expr><literal type="string">"check extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>strCatZN</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*"</literal></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"XXXXYYYY?00777!$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"</literal></expr></argument>, <argument><expr><literal type="string">"cat chr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><literal type="string">"check extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>strCatEncode</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"zzzzz"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"XXXXYYYY?00777!$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$enp6eno="</literal></expr></argument>, <argument><expr><literal type="string">"cat encode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>string</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>, <argument><expr><literal type="string">"check extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>strFree</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name>string2</name></expr></argument>, <argument><expr><literal type="string">"ZZZZ"</literal></expr></argument>, <argument><expr><literal type="string">"check unaltered string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strDup()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>string</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"duplicated string"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>stringDup</name> <init>= <expr><call><name>strDup</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name>stringDup</name></expr></argument>, <argument><expr><name>string</name></expr></argument>, <argument><expr><literal type="string">"duplicated strings match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>strDup</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"duplicate null string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strBeginsWith() and strBeginsWithZ()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strBeginsWith</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"aaa"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"empty string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strBeginsWith</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"astring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"empty begins with"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strBeginsWithZ</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"astring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"astr"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"partial begins with"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strBeginsWithZ</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"astring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"astring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"equal strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strEndsWith() and strEndsWithZ()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strEndsWith</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">".doc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"empty string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strEndsWith</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"astring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"empty ends with"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strEndsWithZ</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"astring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ing"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"partial ends with"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strEndsWithZ</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"astring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"astring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"equal strings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strEq(), strEqZ(), strCmp(), strCmpZ()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strEq</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"equalstring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"equalstring"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"strings equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strEq</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"astring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"anotherstring"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"strings not equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strEq</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"astring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bstring"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"equal length strings not equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strEq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bstring"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"null is not equal to bstring"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strEq</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"astring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"null is not equal to astring"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strEq</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"null is equal to null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>strCmp</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"equalstring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"equalstring"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"strings equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strCmp</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"a &lt; b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strCmp</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"b &gt; a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>strCmp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"null == null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strCmp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"null &lt; not null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strCmp</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"not null &gt; null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strEqZ</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"equalstring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"equalstring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"strings equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strEqZ</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"astring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"anotherstring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"strings not equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strEqZ</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"astring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"bstring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"equal length strings not equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>strCmpZ</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"equalstring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"equalstring"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"strings equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strCmpZ</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"a &lt; b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strCmpZ</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"b &gt; a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strCmpZ</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"b &gt; null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strFirstUpper(), strFirstLower(), strUpper(), strLower()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strFirstUpper</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"empty first upper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strFirstUpper</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"aaa"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Aaa"</literal></expr></argument>, <argument><expr><literal type="string">"first upper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strFirstUpper</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"Aaa"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Aaa"</literal></expr></argument>, <argument><expr><literal type="string">"first already upper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strFirstLower</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"empty first lower"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strFirstLower</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"AAA"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aAA"</literal></expr></argument>, <argument><expr><literal type="string">"first lower"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strFirstLower</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"aAA"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aAA"</literal></expr></argument>, <argument><expr><literal type="string">"first already lower"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLower</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"K123aBc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"k123abc"</literal></expr></argument>, <argument><expr><literal type="string">"all lower"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLower</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"k123abc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"k123abc"</literal></expr></argument>, <argument><expr><literal type="string">"already lower"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLower</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><literal type="string">"char lower"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLower</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"empty lower"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strUpper</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"K123aBc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"K123ABC"</literal></expr></argument>, <argument><expr><literal type="string">"all upper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strUpper</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"K123ABC"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"K123ABC"</literal></expr></argument>, <argument><expr><literal type="string">"already upper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strUpper</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"C"</literal></expr></argument>, <argument><expr><literal type="string">"char upper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strUpper</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"empty upper"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strQuote()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strQuote</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"abcd"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"'abcd'"</literal></expr></argument>, <argument><expr><literal type="string">"quote string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strReplace() and strReplaceChr()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strReplace</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"replace none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strReplace</name><argument_list>(<argument><expr><call><name>strCatZ</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ABC"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"ABC"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"DEF"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"DEF"</literal></expr></argument>, <argument><expr><literal type="string">"replace all"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strReplace</name><argument_list>(<argument><expr><call><name>strCatZ</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ABCXABC"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"ABC"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"DEF"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"DEFXDEF"</literal></expr></argument>, <argument><expr><literal type="string">"replace multiple"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strReplace</name><argument_list>(<argument><expr><call><name>strCatZ</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"XABCX"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"ABC"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"DEFGHI"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"XDEFGHIX"</literal></expr></argument>, <argument><expr><literal type="string">"replace larger"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>strReplace</name><argument_list>(<argument><expr><call><name>strCatZ</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"XABCXABCX"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"ABC"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"ABCD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"XABCDXABCDX"</literal></expr></argument>, <argument><expr><literal type="string">"replace common substring"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strReplaceChr</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"ABCD"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'B'</literal></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ARCD"</literal></expr></argument>, <argument><expr><literal type="string">"replace chr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strSub() and strSubN()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strSub</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"ABCD"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"CD"</literal></expr></argument>, <argument><expr><literal type="string">"sub string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strSub</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"AB"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"zero sub string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strSubN</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"ABCD"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"BC"</literal></expr></argument>, <argument><expr><literal type="string">"sub string with length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strSubN</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"D"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"zero sub string with length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strTrim()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"trim empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>, <argument><expr><literal type="string">"no trim (one char)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"no-trim"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"no-trim"</literal></expr></argument>, <argument><expr><literal type="string">"no trim (string)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">" \t\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"all whitespace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">" \tbegin-only"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"begin-only"</literal></expr></argument>, <argument><expr><literal type="string">"trim begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"end-only\t "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"end-only"</literal></expr></argument>, <argument><expr><literal type="string">"trim end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"\n\rboth\r\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"both"</literal></expr></argument>, <argument><expr><literal type="string">"trim both"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"begin \r\n\tend"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"begin \r\n\tend"</literal></expr></argument>, <argument><expr><literal type="string">"ignore whitespace in middle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strChr() and strTrunc*()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>strChr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"abcd"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"c found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>strChr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"abcd"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"capital C not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>strChr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"abcd"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"i not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>strChr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"empty string - x not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>strCatZ</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"abcdef"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>strTruncIdx</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>strSize</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"assertion 'idx &gt;= 0 &amp;&amp; (size_t)idx &lt;= strSize(this)' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>strTruncIdx</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"assertion 'idx &gt;= 0 &amp;&amp; (size_t)idx &lt;= strSize(this)' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strTruncIdx</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>strChr</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>, <argument><expr><literal type="string">"simple string truncated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"\r\n to end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strTruncIdx</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>strChr</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"abc\r\n to e"</literal></expr></argument>, <argument><expr><literal type="string">"complex string truncated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strTruncIdx</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><call><name>strChr</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"complete string truncated - empty string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"0 size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strTrunc</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"test coverage of empty string - no error thrown for index 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strToLog() and strObjToLog()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strToLog</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{\"test\"}"</literal></expr></argument>, <argument><expr><literal type="string">"format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strToLog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><literal type="string">"format null string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strObjToLog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>StrObjToLogFormat</name><operator>)</operator><name>strToLog</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"format null string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>, <argument><expr><literal type="string">"check null string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strObjToLog</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"teststr"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>StrObjToLogFormat</name><operator>)</operator><name>strToLog</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"format string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"{\"teststr\"}"</literal></expr></argument>, <argument><expr><literal type="string">"check string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strSizeFormat()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strSizeFormat</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0B"</literal></expr></argument>, <argument><expr><literal type="string">"zero bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strSizeFormat</name><argument_list>(<argument><expr><literal type="number">1023</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1023B"</literal></expr></argument>, <argument><expr><literal type="string">"1023 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strSizeFormat</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1KB"</literal></expr></argument>, <argument><expr><literal type="string">"1 KB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strSizeFormat</name><argument_list>(<argument><expr><literal type="number">2200</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"2.1KB"</literal></expr></argument>, <argument><expr><literal type="string">"2.1 KB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strSizeFormat</name><argument_list>(<argument><expr><literal type="number">1048576</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1MB"</literal></expr></argument>, <argument><expr><literal type="string">"1 MB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strSizeFormat</name><argument_list>(<argument><expr><literal type="number">20162900</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"19.2MB"</literal></expr></argument>, <argument><expr><literal type="string">"19.2 MB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strSizeFormat</name><argument_list>(<argument><expr><literal type="number">1073741824</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1GB"</literal></expr></argument>, <argument><expr><literal type="string">"1 GB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strSizeFormat</name><argument_list>(<argument><expr><literal type="number">1073741824</literal> <operator>+</operator> <literal type="number">107374183</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1.1GB"</literal></expr></argument>, <argument><expr><literal type="string">"1.1 GB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strSizeFormat</name><argument_list>(<argument><expr><name>UINT64_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"17179869183GB"</literal></expr></argument>, <argument><expr><literal type="string">"uint64 max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strLstNew(), strLstAdd*(), strLstGet(), strLstMove(), strLstSize(), and strLstFree()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Add strings to the list</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>listIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>listIdx</name> <operator>&lt;=</operator> <name>LIST_INITIAL_SIZE</name></expr>;</condition> <incr><expr><name>listIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>listIdx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"add null item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
                        <argument><expr><call><name>strLstAddFmt</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"STR%02d"</literal></expr></argument>, <argument><expr><name>listIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"STR%02d"</literal></expr></argument>, <argument><expr><name>listIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"add item %d"</literal></expr></argument>, <argument><expr><name>listIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name>strLstMove</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"list size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"strLstFindIdxP()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strLstFindIdxP</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"STR05"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"find STR05"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strLstFindIdxP</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"STR10"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LIST_NOT_FOUND</name></expr></argument>, <argument><expr><literal type="string">"find missing STR10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>strLstFindIdxP</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"STR10"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>required</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to find 'STR10' in string list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Read them back and check values</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>listIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>listIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>listIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>listIdx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>listIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check null item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>listIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"STR%02u"</literal></expr></argument>, <argument><expr><name>listIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"check item %u"</literal></expr></argument>, <argument><expr><name>listIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>strLstFree</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free string list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>strLstFree</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free null string list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add if missing and remove</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"item1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"add item 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strLstExists</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"item1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strLstExists</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check null exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"item1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"add item 1 again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strLstEmpty</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"    not empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strLstRemove</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"item1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"remove item 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strLstRemove</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"item1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"remove item 1 fails"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"    check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strLstEmpty</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"    empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strLstNewSplit()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><call><name>strLstNewSplit</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"empty list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><call><name>strLstNewSplit</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"item1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"item1"</literal></expr></argument>, <argument><expr><literal type="string">"one item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><call><name>strLstNewSplit</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"item1, item2"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"item1, item2"</literal></expr></argument>, <argument><expr><literal type="string">"two items"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strLstNewVarLst()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>VariantList</name> <modifier>*</modifier></type><name>varList</name> <init>= <expr><call><name>varLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>varLstAdd</name><argument_list>(<argument><expr><name>varList</name></expr></argument>, <argument><expr><call><name>varNewStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"string1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>varLstAdd</name><argument_list>(<argument><expr><name>varList</name></expr></argument>, <argument><expr><call><name>varNewStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"string2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><call><name>strLstNewVarLst</name><argument_list>(<argument><expr><name>varList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"string1, string2"</literal></expr></argument>, <argument><expr><literal type="string">"string list from variant list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>strLstNewVarLst</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"null list from null var list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>varLstFree</name><argument_list>(<argument><expr><name>varList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strLstPtr()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Add strings to the list</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>listIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>listIdx</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>listIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>listIdx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>strLstAddFmt</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"STR%02d"</literal></expr></argument>, <argument><expr><name>listIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>

        <comment type="line">// Check pointer</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>szList</name> <init>= <expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>listIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>listIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>listIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>listIdx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>szList</name><index>[<expr><name>listIdx</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check null item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>TEST_RESULT_Z_STR</name><argument_list>(<argument><expr><name><name>szList</name><index>[<expr><name>listIdx</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"STR%02u"</literal></expr></argument>, <argument><expr><name>listIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"check item %u"</literal></expr></argument>, <argument><expr><name>listIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>szList</name><index>[<expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check null terminator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strLstFree</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strLstExists()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>strLstAddSub</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"AX"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddSubN</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"XC"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strLstExists</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"string does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>strLstExists</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"C"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"string exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strLstJoin()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"empty list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strLstAddZSub</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"item1X"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZSubN</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"Xitem2X"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"item1, item2"</literal></expr></argument>, <argument><expr><literal type="string">"list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"item1, item2, [NULL]"</literal></expr></argument>, <argument><expr><literal type="string">"list with NULL at end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"item1, item2, [NULL]"</literal></expr></argument>, <argument><expr><literal type="string">"dup'd list with NULL at end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"dup NULL list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strLstFree</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strLstMergeAnti()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>anti</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><call><name>strLstMergeAnti</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>anti</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"list and anti empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>anti</name></expr></argument>, <argument><expr><literal type="string">"item2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>anti</name></expr></argument>, <argument><expr><literal type="string">"item3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><call><name>strLstMergeAnti</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>anti</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"list empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"item1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"item3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"item4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"item5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><call><name>strLstMergeAnti</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>anti</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"item1, item4, item5"</literal></expr></argument>, <argument><expr><literal type="string">"list results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><call><name>strLstMergeAnti</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"item1, item3, item4, item5"</literal></expr></argument>, <argument><expr><literal type="string">"anti empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"item2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"item4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"item6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>anti</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>anti</name></expr></argument>, <argument><expr><literal type="string">"item1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>anti</name></expr></argument>, <argument><expr><literal type="string">"item4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>anti</name></expr></argument>, <argument><expr><literal type="string">"item7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><call><name>strLstMergeAnti</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>anti</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"item2, item6"</literal></expr></argument>, <argument><expr><literal type="string">"list results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"item7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>anti</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>anti</name></expr></argument>, <argument><expr><literal type="string">"item1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>anti</name></expr></argument>, <argument><expr><literal type="string">"item4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>anti</name></expr></argument>, <argument><expr><literal type="string">"item6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><call><name>strLstMergeAnti</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>anti</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"item7"</literal></expr></argument>, <argument><expr><literal type="string">"list results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strLstSort()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><call><name>strLstSort</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"a, b, c"</literal></expr></argument>, <argument><expr><literal type="string">"sort ascending"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><call><name>strLstSort</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>sortOrderDesc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"c, b, a"</literal></expr></argument>, <argument><expr><literal type="string">"sort descending"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strLstComparatorSet</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><call><name>strLstSort</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"a, b, c"</literal></expr></argument>, <argument><expr><literal type="string">"sort ascending"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"STRID*(), strIdTo*(), and strIdFrom*()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"strIdFromZN()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR5ID1</name></cpp:macro>                                        <cpp:value>(stringIdBit5 | (uint16_t)('a' - 96) &lt;&lt; 4)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR5ID2</name></cpp:macro>                                        <cpp:value>(TEST_STR5ID1 | (uint16_t)('b' - 96) &lt;&lt; 9)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR5ID3</name></cpp:macro>                                        <cpp:value>((uint32_t)TEST_STR5ID2 | (uint32_t)('c' - 96) &lt;&lt; 14)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR5ID4</name></cpp:macro>                                        <cpp:value>(TEST_STR5ID3 | (uint32_t)('-' - 18) &lt;&lt; 19)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR5ID5</name></cpp:macro>                                        <cpp:value>(TEST_STR5ID4 | (uint32_t)('z' - 96) &lt;&lt; 24)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR5ID6</name></cpp:macro>                                        <cpp:value>((uint64_t)TEST_STR5ID5 | (uint64_t)('k' - 96) &lt;&lt; 29)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR5ID7</name></cpp:macro>                                        <cpp:value>(TEST_STR5ID6 | (uint64_t)('z' - 96) &lt;&lt; 34)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR5ID8</name></cpp:macro>                                        <cpp:value>(TEST_STR5ID7 | (uint64_t)('2' - 22) &lt;&lt; 39)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR5ID9</name></cpp:macro>                                        <cpp:value>(TEST_STR5ID8 | (uint64_t)('-' - 18) &lt;&lt; 44)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR5ID10</name></cpp:macro>                                       <cpp:value>(TEST_STR5ID9 | (uint64_t)('y' - 96) &lt;&lt; 49)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR5ID11</name></cpp:macro>                                       <cpp:value>(TEST_STR5ID10 | (uint64_t)('5' - 24) &lt;&lt; 54)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR5ID12</name></cpp:macro>                                       <cpp:value>(TEST_STR5ID11 | (uint64_t)('6' - 24) &lt;&lt; 59)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR5ID13</name></cpp:macro>                                       <cpp:value>(TEST_STR5ID12 | STRING_ID_PREFIX)</cpp:value></cpp:define>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdBitFromZN</name><argument_list>(<argument><expr><name>stringIdBit5</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_STR5ID1</name></expr></argument>, <argument><expr><literal type="string">"5 bits 1 char"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdBitFromZN</name><argument_list>(<argument><expr><name>stringIdBit5</name></expr></argument>, <argument><expr><literal type="string">"abc-zk"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_STR5ID6</name></expr></argument>, <argument><expr><literal type="string">"5 bits 6 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdBitFromZN</name><argument_list>(<argument><expr><name>stringIdBit5</name></expr></argument>, <argument><expr><literal type="string">"abc-zkz2-y56"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_STR5ID12</name></expr></argument>, <argument><expr><literal type="string">"5 bits 12 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdBitFromZN</name><argument_list>(<argument><expr><name>stringIdBit5</name></expr></argument>, <argument><expr><literal type="string">"abc-zkz2-y56?"</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_STR5ID13</name></expr></argument>, <argument><expr><literal type="string">"5 bits 13 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdBitFromZN</name><argument_list>(<argument><expr><name>stringIdBit5</name></expr></argument>, <argument><expr><literal type="string">"abc-zkz2-y56??"</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_STR5ID13</name></expr></argument>, <argument><expr><literal type="string">"5 bits 14 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdBitFromZN</name><argument_list>(<argument><expr><name>stringIdBit5</name></expr></argument>, <argument><expr><literal type="string">"AB"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"'A' is invalid for 5-bit encoding in 'AB'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR6ID1</name></cpp:macro>                                        <cpp:value>(stringIdBit6 | (uint16_t)('a' - 96) &lt;&lt; 4)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR6ID2</name></cpp:macro>                                        <cpp:value>(TEST_STR6ID1 | (uint16_t)('b' - 96) &lt;&lt; 10)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR6ID3</name></cpp:macro>                                        <cpp:value>((uint32_t)TEST_STR6ID2 | (uint32_t)('C' - 27) &lt;&lt; 16)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR6ID4</name></cpp:macro>                                        <cpp:value>(TEST_STR6ID3 | (uint32_t)('-' - 18) &lt;&lt; 22)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR6ID5</name></cpp:macro>                                        <cpp:value>((uint64_t)TEST_STR6ID4 | (uint64_t)('4' - 20) &lt;&lt; 28)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR6ID6</name></cpp:macro>                                        <cpp:value>(TEST_STR6ID5 | (uint64_t)('0' - 20) &lt;&lt; 34)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR6ID7</name></cpp:macro>                                        <cpp:value>(TEST_STR6ID6 | (uint64_t)('M' - 27) &lt;&lt; 40)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR6ID8</name></cpp:macro>                                        <cpp:value>(TEST_STR6ID7 | (uint64_t)('z' - 96) &lt;&lt; 46)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR6ID9</name></cpp:macro>                                        <cpp:value>(TEST_STR6ID8 | (uint64_t)('Z' - 27) &lt;&lt; 52)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR6ID10</name></cpp:macro>                                       <cpp:value>(TEST_STR6ID9 | (uint64_t)('9' - 20) &lt;&lt; 58)</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STR6ID11</name></cpp:macro>                                       <cpp:value>(TEST_STR6ID10 | STRING_ID_PREFIX)</cpp:value></cpp:define>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdBitFromZN</name><argument_list>(<argument><expr><name>stringIdBit6</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_STR6ID1</name></expr></argument>, <argument><expr><literal type="string">"6 bits 1 char"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdBitFromZN</name><argument_list>(<argument><expr><name>stringIdBit6</name></expr></argument>, <argument><expr><literal type="string">"abC-4"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_STR6ID5</name></expr></argument>, <argument><expr><literal type="string">"6 bits 5 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdBitFromZN</name><argument_list>(<argument><expr><name>stringIdBit6</name></expr></argument>, <argument><expr><literal type="string">"abC-40MzZ9"</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_STR6ID10</name></expr></argument>, <argument><expr><literal type="string">"6 bits 10 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdBitFromZN</name><argument_list>(<argument><expr><name>stringIdBit6</name></expr></argument>, <argument><expr><literal type="string">"abC-40MzZ9?"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_STR6ID11</name></expr></argument>, <argument><expr><literal type="string">"6 bits 11 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdBitFromZN</name><argument_list>(<argument><expr><name>stringIdBit6</name></expr></argument>, <argument><expr><literal type="string">"abC-40MzZ9??"</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_STR6ID11</name></expr></argument>, <argument><expr><literal type="string">"6 bits 12 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdFromZN</name><argument_list>(<argument><expr><literal type="string">"|B"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"'|' is invalid for 6-bit encoding in '|B'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"STRID*()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><name>TEST_STR5ID1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_STR5ID1</name></expr></argument>, <argument><expr><literal type="string">"STRID5()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>STRID6</name><argument_list>(<argument><expr><literal type="string">"abC-4"</literal></expr></argument>, <argument><expr><name>TEST_STR6ID5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_STR6ID5</name></expr></argument>, <argument><expr><literal type="string">"STRID6()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"strIdFromStr()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"abc-"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_STR5ID4</name></expr></argument>, <argument><expr><literal type="string">"5 bits 4 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"strIdFromZ()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"abC-"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_STR6ID4</name></expr></argument>, <argument><expr><literal type="string">"6 bits 4 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on invalid encoding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"abc?"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"'abc?' contains invalid characters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"strIdToZN()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer5</name><index>[]</index></name> <init>= <expr><literal type="string">"XXXXXXXXXXXXX"</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR5ID1</name></expr></argument>, <argument><expr><name>buffer5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"5 bits 1 char"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer5</name></expr></argument>, <argument><expr><literal type="string">"aXXXXXXXXXXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR5ID2</name></expr></argument>, <argument><expr><name>buffer5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"5 bits 2 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer5</name></expr></argument>, <argument><expr><literal type="string">"abXXXXXXXXXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR5ID3</name></expr></argument>, <argument><expr><name>buffer5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"5 bits 3 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer5</name></expr></argument>, <argument><expr><literal type="string">"abcXXXXXXXXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR5ID4</name></expr></argument>, <argument><expr><name>buffer5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"5 bits 4 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer5</name></expr></argument>, <argument><expr><literal type="string">"abc-XXXXXXXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR5ID5</name></expr></argument>, <argument><expr><name>buffer5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"5 bits 5 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer5</name></expr></argument>, <argument><expr><literal type="string">"abc-zXXXXXXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR5ID6</name></expr></argument>, <argument><expr><name>buffer5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"5 bits 6 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer5</name></expr></argument>, <argument><expr><literal type="string">"abc-zkXXXXXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR5ID7</name></expr></argument>, <argument><expr><name>buffer5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"5 bits 7 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer5</name></expr></argument>, <argument><expr><literal type="string">"abc-zkzXXXXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR5ID8</name></expr></argument>, <argument><expr><name>buffer5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"5 bits 8 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer5</name></expr></argument>, <argument><expr><literal type="string">"abc-zkz2XXXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR5ID9</name></expr></argument>, <argument><expr><name>buffer5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"5 bits 9 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer5</name></expr></argument>, <argument><expr><literal type="string">"abc-zkz2-XXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR5ID10</name></expr></argument>, <argument><expr><name>buffer5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"5 bits 10 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer5</name></expr></argument>, <argument><expr><literal type="string">"abc-zkz2-yXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR5ID11</name></expr></argument>, <argument><expr><name>buffer5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"5 bits 11 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer5</name></expr></argument>, <argument><expr><literal type="string">"abc-zkz2-y5XX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR5ID12</name></expr></argument>, <argument><expr><name>buffer5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"5 bits 12 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer5</name></expr></argument>, <argument><expr><literal type="string">"abc-zkz2-y56X"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR5ID13</name></expr></argument>, <argument><expr><name>buffer5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="string">"5 bits 13 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer5</name></expr></argument>, <argument><expr><literal type="string">"abc-zkz2-y56+"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer6</name><index>[]</index></name> <init>= <expr><literal type="string">"XXXXXXXXXXX"</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR6ID1</name></expr></argument>, <argument><expr><name>buffer6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"6 bits 1 char"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer6</name></expr></argument>, <argument><expr><literal type="string">"aXXXXXXXXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR6ID2</name></expr></argument>, <argument><expr><name>buffer6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"6 bits 2 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer6</name></expr></argument>, <argument><expr><literal type="string">"abXXXXXXXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR6ID3</name></expr></argument>, <argument><expr><name>buffer6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"6 bits 3 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer6</name></expr></argument>, <argument><expr><literal type="string">"abCXXXXXXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR6ID4</name></expr></argument>, <argument><expr><name>buffer6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"6 bits 4 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer6</name></expr></argument>, <argument><expr><literal type="string">"abC-XXXXXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR6ID5</name></expr></argument>, <argument><expr><name>buffer6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"6 bits 5 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer6</name></expr></argument>, <argument><expr><literal type="string">"abC-4XXXXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR6ID6</name></expr></argument>, <argument><expr><name>buffer6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"6 bits 6 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer6</name></expr></argument>, <argument><expr><literal type="string">"abC-40XXXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR6ID7</name></expr></argument>, <argument><expr><name>buffer6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"6 bits 7 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer6</name></expr></argument>, <argument><expr><literal type="string">"abC-40MXXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR6ID8</name></expr></argument>, <argument><expr><name>buffer6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"6 bits 8 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer6</name></expr></argument>, <argument><expr><literal type="string">"abC-40MzXXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR6ID9</name></expr></argument>, <argument><expr><name>buffer6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"6 bits 9 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer6</name></expr></argument>, <argument><expr><literal type="string">"abC-40MzZXX"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR6ID10</name></expr></argument>, <argument><expr><name>buffer6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"6 bits 10 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer6</name></expr></argument>, <argument><expr><literal type="string">"abC-40MzZ9X"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZN</name><argument_list>(<argument><expr><name>TEST_STR6ID11</name></expr></argument>, <argument><expr><name>buffer6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"6 bits 11 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer6</name></expr></argument>, <argument><expr><literal type="string">"abC-40MzZ9+"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"strIdToStr()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><name>TEST_STR5ID1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"5 bits 1 char"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><name>TEST_STR5ID8</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"abc-zkz2"</literal></expr></argument>, <argument><expr><literal type="string">"5 bits 8 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"strIdToStr()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>STRID_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZ</name><argument_list>(<argument><expr><name>TEST_STR5ID1</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"5 bits 1 char"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToZ</name><argument_list>(<argument><expr><name>TEST_STR5ID4</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"4 chars"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"abc-"</literal></expr></argument>, <argument><expr><literal type="string">"    check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"64-bit enum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><call><name>testStringIdEnumFunc</name><argument_list>(<argument><expr><name>testStringIdEnumAes256Cbc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"aes-256-cbc"</literal></expr></argument>, <argument><expr><literal type="string">"pass to enum param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TestStringIdEnum</name></type> <name>testEnum</name> <init>= <expr><name>testStringIdEnumRemote</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><name>testEnum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remote"</literal></expr></argument>, <argument><expr><literal type="string">"assign to enum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><name>testStringIdEnumTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><literal type="string">"pass to StringId param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"strIdToLog()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strIdToLog</name><argument_list>(<argument><expr><name>TEST_STR5ID2</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"string id with limited buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"    check length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"ab"</literal></expr></argument>, <argument><expr><literal type="string">"    check buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"z*()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"id=%d"</literal></expr></argument>, <argument><expr><literal type="number">777</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"id=777"</literal></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"strLstToLog()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstToLog</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{[]}"</literal></expr></argument>, <argument><expr><literal type="string">"format empty list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strLstInsert</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"item3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstToLog</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{[\"item3\"]}"</literal></expr></argument>, <argument><expr><literal type="string">"format 1 item list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strLstInsert</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"item1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstInsert</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"item2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strLstToLog</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{[\"item1\", \"item2\", \"item3\"]}"</literal></expr></argument>, <argument><expr><literal type="string">"format 3 item list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
