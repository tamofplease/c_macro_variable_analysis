<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/common/typePackTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Pack Type
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferWrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPack.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"PackWrite and PackRead"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"type size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PackType</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"PackType"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PackTypeMapData</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"PackTypeMapData"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>pack</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name> <init>= <expr><call><name>ioBufferWriteNewOpen</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>packWrite</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>ioBufferSizeSet</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>pckWriteMove</name><argument_list>(<argument><expr><call><name>pckWriteNewIo</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pckWriteToLog</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{depth: 0, idLast: 0}"</literal></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">0750</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pckWriteToLog</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{depth: 0, idLast: 1}"</literal></expr></argument>, <argument><expr><literal type="string">"log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">1911246845</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write timestamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFFFFFFFFFF</literal></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write max u64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">77</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write 77"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write 127"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteI64P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">13</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write -1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteI32P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write -1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteBoolP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteBoolP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><operator>.</operator><name>defaultWrite</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteObjBeginP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write obj begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteBoolP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteBoolP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>.</operator><name>defaultWrite</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteStrIdP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>pckTypeTime</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write strid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteStrIdP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>pckTypeTime</name></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <name>pckTypeTime</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write default strid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteModeP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">0707</literal></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteModeP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <literal type="number">0644</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write default mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteObjEndP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write obj end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteArrayBeginP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">37</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write array begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>.</operator><name>defaultWrite</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteArrayEndP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write array end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"sample"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">38</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"enoughtoincreasebuffer"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>EMPTY_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write zero-length string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"small"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">41</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write zero-length string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">43</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write NULL string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write NULL string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write zero-length string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write default 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteArrayBeginP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write array begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteObjBeginP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write obj begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteI32P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">555</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write 555"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteI32P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">777</literal></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write 777"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteI64P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteI64P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteObjEndP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write obj end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteNull</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"A"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteTimeP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteTimeP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write 33"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteTimeP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">66</literal></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write 66"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteI32P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write default 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteBoolP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write default false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteArrayEndP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write array end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>bin</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteBinP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>BUF</name><argument_list>(<argument><expr><name>bin</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteBinP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write bin NULL default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteBinP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write bin zero length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write pack</comment>
        <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>packSub</name> <init>= <expr><call><name>pckWriteNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>packSub</name></expr></argument>, <argument><expr><literal type="number">345</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>packSub</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"sub"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>packSub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWritePackP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name>packSub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWritePackP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write null pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write string list</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>strList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>strList</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>strList</name></expr></argument>, <argument><expr><literal type="string">"bcd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteStrLstP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>strList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write string list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteStrLstP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write null string list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// End pack</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteFree</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>hrnPackToStr</name><argument_list>(<argument><expr><call><name>pckFromBuf</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><literal type="string">"1:u64:488"</literal>
             <literal type="string">", 2:u64:1911246845"</literal>
             <literal type="string">", 7:u64:18446744073709551615"</literal>
            <literal type="string">", 10:u64:1"</literal>
            <literal type="string">", 11:u64:77"</literal>
            <literal type="string">", 12:u32:127"</literal>
            <literal type="string">", 13:i64:-1"</literal>
            <literal type="string">", 14:i32:-1"</literal>
            <literal type="string">", 15:bool:true"</literal>
            <literal type="string">", 20:bool:false"</literal>
            <literal type="string">", 28:obj:"</literal>
            <literal type="string">"{"</literal>
                  <literal type="string">"1:bool:true"</literal>
                <literal type="string">", 2:bool:false"</literal>
                <literal type="string">", 5:strid:time"</literal>
                <literal type="string">", 7:mode:0707"</literal>
            <literal type="string">"}"</literal>
            <literal type="string">", 37:array:"</literal>
            <literal type="string">"["</literal>
                  <literal type="string">"1:u64:0"</literal>
                <literal type="string">", 2:u64:1"</literal>
                <literal type="string">", 3:u64:2"</literal>
                <literal type="string">", 4:u64:3"</literal>
            <literal type="string">"]"</literal>
            <literal type="string">", 38:str:sample"</literal>
            <literal type="string">", 39:str:enoughtoincreasebuffer"</literal>
            <literal type="string">", 40:str:"</literal>
            <literal type="string">", 41:str:small"</literal>
            <literal type="string">", 42:str:"</literal>
            <literal type="string">", 45:str:"</literal>
            <literal type="string">", 47:u32:0"</literal>
            <literal type="string">", 48:array:"</literal>
            <literal type="string">"["</literal>
                  <literal type="string">"1:obj:"</literal>
                <literal type="string">"{"</literal>
                      <literal type="string">"1:i32:555"</literal>
                    <literal type="string">", 3:i32:777"</literal>
                    <literal type="string">", 5:i64:1"</literal>
                    <literal type="string">", 7:u64:1"</literal>
                <literal type="string">"}"</literal>
                <literal type="string">", 3:str:A"</literal>
                <literal type="string">", 5:time:33"</literal>
                <literal type="string">", 6:time:66"</literal>
            <literal type="string">"]"</literal>
            <literal type="string">", 49:bin:050403020100"</literal>
            <literal type="string">", 51:bin:"</literal>
            <literal type="string">", 52:pack:&lt;1:u64:345, 3:str:sub&gt;"</literal>
            <literal type="string">", 54:array:[1:str:a, 2:str:bcd]"</literal></expr></argument>,
            <argument><expr><literal type="string">"check pack string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"98e803"</literal>                                                <comment type="line">//  1,  u64, 750</comment>
            <literal type="string">"98fd9fad8f07"</literal>                                          <comment type="line">//  2,  u64, 1911246845</comment>
            <literal type="string">"9c01ffffffffffffffffff01"</literal>                              <comment type="line">//  7,  u64, 0xFFFFFFFFFFFFFFFF</comment>
            <literal type="string">"9601"</literal>                                                  <comment type="line">// 10,  u64, 1</comment>
            <literal type="string">"984d"</literal>                                                  <comment type="line">// 11,  u64, 77</comment>
            <literal type="string">"887f"</literal>                                                  <comment type="line">// 12,  u32, 127</comment>
            <literal type="string">"44"</literal>                                                    <comment type="line">// 13,  i64, -1</comment>
            <literal type="string">"34"</literal>                                                    <comment type="line">// 14,  i32, -1</comment>
            <literal type="string">"28"</literal>                                                    <comment type="line">// 15, bool, true</comment>
            <literal type="string">"2401"</literal>                                                  <comment type="line">// 20, bool, false</comment>
            <literal type="string">"57"</literal>                                                    <comment type="line">// 28, obj begin</comment>
                <literal type="string">"28"</literal>                                                <comment type="line">//      1, bool</comment>
                <literal type="string">"20"</literal>                                                <comment type="line">//      2, bool</comment>
                <literal type="string">"aac0a6ad01"</literal>                                        <comment type="line">//      5, strid time</comment>
                <literal type="string">"f903c703"</literal>                                          <comment type="line">//      7, mode 0707</comment>
                <literal type="string">"00"</literal>                                                <comment type="line">//     obj end</comment>
            <literal type="string">"1801"</literal>                                                  <comment type="line">// 37, array begin</comment>
                <literal type="string">"90"</literal>                                                <comment type="line">//      1,  u64, 0</comment>
                <literal type="string">"94"</literal>                                                <comment type="line">//      2,  u64, 1</comment>
                <literal type="string">"9802"</literal>                                              <comment type="line">//      3,  u64, 2</comment>
                <literal type="string">"9803"</literal>                                              <comment type="line">//      4,  u64, 3</comment>
                <literal type="string">"00"</literal>                                                <comment type="line">//     array end</comment>
            <literal type="string">"780673616d706c65"</literal>                                      <comment type="line">// 38,  str, sample</comment>
            <literal type="string">"7816656e6f756768746f696e637265617365627566666572"</literal>      <comment type="line">// 39,  str, enoughtoincreasebuffer</comment>
            <literal type="string">"70"</literal>                                                    <comment type="line">// 40,  str, zero length</comment>
            <literal type="string">"7805736d616c6c"</literal>                                        <comment type="line">// 41,  str, small</comment>
            <literal type="string">"70"</literal>                                                    <comment type="line">// 42,  str, zero length</comment>
            <literal type="string">"72"</literal>                                                    <comment type="line">// 45,  str, zero length</comment>
            <literal type="string">"81"</literal>                                                    <comment type="line">// 47,  u32, 0</comment>
            <literal type="string">"10"</literal>                                                    <comment type="line">// 48, array begin</comment>
                <literal type="string">"50"</literal>                                                <comment type="line">//      1, obj begin</comment>
                    <literal type="string">"38d608"</literal>                                        <comment type="line">//           1, i32, 555</comment>
                    <literal type="string">"39920c"</literal>                                        <comment type="line">//           3, i32, 777</comment>
                    <literal type="string">"4902"</literal>                                          <comment type="line">//           5, i64, 1</comment>
                    <literal type="string">"95"</literal>                                            <comment type="line">//           7, u64, 1</comment>
                    <literal type="string">"00"</literal>                                            <comment type="line">//         obj end</comment>
                <literal type="string">"790141"</literal>                                            <comment type="line">//      3,  str, A</comment>
                <literal type="string">"f90042"</literal>                                            <comment type="line">//      5, time, 33</comment>
                <literal type="string">"f8008401"</literal>                                          <comment type="line">//      6, time, 66</comment>
                <literal type="string">"00"</literal>                                                <comment type="line">//     array end</comment>
            <literal type="string">"f80106050403020100"</literal>                                    <comment type="line">// 49,  bin, 0x050403020100</comment>
            <literal type="string">"f101"</literal>                                                  <comment type="line">// 51,  bin, zero length</comment>
            <literal type="string">"f0020998d902790373756200"</literal>                              <comment type="line">// 52,  pack, 1:u64:345, 3:str:sub</comment>
            <literal type="string">"11780161780362636400"</literal>                                  <comment type="line">// 54,  strlst, 1:str:a, 2:str:bcd</comment>
            <literal type="string">"00"</literal></expr></argument>,                                                   <comment type="line">// end</comment>
            <argument><expr><literal type="string">"check pack hex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"read pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>IoRead</name> <modifier>*</modifier></type><name>read</name> <init>= <expr><call><name>ioBufferReadNewOpen</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>PackRead</name> <modifier>*</modifier></type><name>packRead</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><call><name>pckReadMove</name><argument_list>(<argument><expr><call><name>pckReadNewIo</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move new read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadU64P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0750</literal></expr></argument>, <argument><expr><literal type="string">"read mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadU64P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1911246845</literal></expr></argument>, <argument><expr><literal type="string">"read timestamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>pckReadU64P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"field 2 was already read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>pckReadU32P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"field 7 is type 'u64' but expected 'u32'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadU64P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFFFFFFFFFF</literal></expr></argument>, <argument><expr><literal type="string">"read max u64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pckReadNullP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"field 9 is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pckReadNullP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"field 10 is not null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadU64P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"read 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadU32P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="string">"read 127 (skip field 11)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>pckReadI64P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"read -1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>pckReadI32P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"read -1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pckReadBoolP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"read true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pckReadBoolP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"read false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>pckReadObjEndP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"not in obj"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckReadObjBeginP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">28</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"read object begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>pckReadArrayEndP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"not in array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pckReadBoolP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"read true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pckReadBoolP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"read false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pckReadBoolP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"field 4 default is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pckReadNullP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"field 4 is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadStrIdP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pckTypeTime</name></expr></argument>, <argument><expr><literal type="string">"read strid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadStrIdP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <name>pckTypeTime</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pckTypeTime</name></expr></argument>, <argument><expr><literal type="string">"read default strid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadModeP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0707</literal></expr></argument>, <argument><expr><literal type="string">"read mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadModeP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <literal type="number">0644</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>, <argument><expr><literal type="string">"read default mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pckReadBoolP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"read default false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckReadObjEndP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"read object end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>pckReadArrayEndP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"not in array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pckReadNext</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"read next tag which should be an array"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadId</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">37</literal></expr></argument>, <argument><expr><literal type="string">"check array id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckReadArrayBeginP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <call><name>pckReadId</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"read array begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>pckReadObjEndP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"not in obj"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name>pckReadNext</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadU64P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <call><name>pckReadId</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"read %u"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>value</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckReadArrayEndP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"read array end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">39</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"enoughtoincreasebuffer"</literal></expr></argument>, <argument><expr><literal type="string">"read string (skipped prior)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">41</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"small"</literal></expr></argument>, <argument><expr><literal type="string">"read string (skipped prior)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"zero length (skipped prior)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">43</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"read NULL string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"read NULL string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"read empty string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadU32P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"read default 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadU32P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">47</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"read 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckReadArrayBeginP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"read array begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckReadObjBeginP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"read object begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>pckReadI32P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">555</literal></expr></argument>, <argument><expr><literal type="string">"read 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>pckReadI32P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">777</literal></expr></argument>, <argument><expr><literal type="string">"read 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>pckReadI64P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <literal type="number">44</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><literal type="string">"read default 44"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>pckReadI64P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <literal type="number">44</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"read 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadU64P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <literal type="number">55</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>, <argument><expr><literal type="string">"read default 55"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadU64P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <literal type="number">55</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"read 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckReadObjEndP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"read object end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"A"</literal></expr></argument>, <argument><expr><literal type="string">"read A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>pckReadTimeP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="string">"read default 99"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>pckReadTimeP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <literal type="number">44</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>, <argument><expr><literal type="string">"read 33"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>pckReadI32P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><operator>.</operator><name>defaultValue</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"read default 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckReadArrayEndP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"read array end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>pckReadBinP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"050403020100"</literal></expr></argument>, <argument><expr><literal type="string">"read bin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>pckReadBinP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"read bin null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><call><name>pckReadBinP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"read bin zero length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>hrnPackReadToStr</name><argument_list>(<argument><expr><call><name>pckReadPackReadP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1:u64:345, 3:str:sub"</literal></expr></argument>, <argument><expr><literal type="string">"read pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>pckReadPackReadP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"read null pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(<argument><expr><call><name>pckReadStrLstP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"a\nbcd\n"</literal></expr></argument>, <argument><expr><literal type="string">"read string list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>pckReadStrLstP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"read null string list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pckReadNullP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">999</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"field 999 is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadU64P</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"field 1000 default is 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckReadEndP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckReadFree</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"EOF on short buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><call><name>pckReadNew</name><argument_list>(<argument><expr><call><name>pckFromBuf</name><argument_list>(<argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>pckReadBuffer</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"unexpected EOF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on invalid uint64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><call><name>pckReadNew</name><argument_list>(<argument><expr><call><name>pckFromBuf</name><argument_list>(<argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"\255\255\255\255\255\255\255\255\255\255"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>pckReadU64Internal</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"unterminated varint-128 integer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pack/unpack pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>pckWriteNewP</name><argument_list>(<argument><expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWritePtrP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write default pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWritePtrP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="string">"sample"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><call><name>pckReadNew</name><argument_list>(<argument><expr><call><name>pckDup</name><argument_list>(<argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>pckReadPtrP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"read default pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>pckReadPtrP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sample"</literal></expr></argument>, <argument><expr><literal type="string">"read pointer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"null pack result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"read const packs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>pckWriteNewP</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write pack to read as ptr/size</comment>
        <expr_stmt><expr><name>packSub</name> <operator>=</operator> <call><name>pckWriteNewP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>packSub</name></expr></argument>, <argument><expr><literal type="number">777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>packSub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWritePackP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name>packSub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write pack to read as const</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWritePackP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>packSub</name> <operator>=</operator> <call><name>pckWriteNewP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>packSub</name></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>packSub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWritePackP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name>packSub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write pack end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><call><name>pckReadNew</name><argument_list>(<argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pckReadNext</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"next pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadSize</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"pack size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>BUF</name><argument_list>(<argument><expr><call><name>pckReadBufPtr</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>pckReadSize</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"98890600"</literal></expr></argument>, <argument><expr><literal type="string">"pack hex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadU64P</name><argument_list>(<argument><expr><call><name>pckReadNewC</name><argument_list>(<argument><expr><call><name>pckReadBufPtr</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>pckReadSize</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">777</literal></expr></argument>, <argument><expr><literal type="string">"u64 value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckReadConsume</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"consume pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>pckReadPackReadConstP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"const null pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadU64P</name><argument_list>(<argument><expr><call><name>pckReadPackReadConstP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="string">"const pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pack/unpack write internal buffer empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>pack</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>write</name> <operator>=</operator> <call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make internal buffer small enough that it will never be used</comment>
        <expr_stmt><expr><call><name>ioBufferSizeSet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>pckWriteNewIo</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write string longer than internal buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"end with internal buffer empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>, <argument><expr><call><name>pckReadNew</name><argument_list>(<argument><expr><call><name>pckFromBuf</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>packRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><literal type="string">"read string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
