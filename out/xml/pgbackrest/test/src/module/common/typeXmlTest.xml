<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/common/typeXmlTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Xml Types
***********************************************************************************************************************************/</comment>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"xml*()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>xmlDocumentNewBuf</name><argument_list>(<argument><expr><call><name>bufNewC</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"invalid xml in 5 byte(s):\nBOGUS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>XmlDocument</name> <modifier>*</modifier></type><name>xmlDocument</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>xmlDocument</name></expr></argument>,
            <argument><expr><call><name>xmlDocumentNewBuf</name><argument_list>(
                <argument><expr><call><name>BUFSTRDEF</name><argument_list>(
                    <argument><expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</literal>
                    <literal type="string">"&lt;ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;\n"</literal>
                    <literal type="string">"    &lt;Name id=\"test\"&gt;bucket&lt;/Name&gt;\n"</literal>
                    <literal type="string">"    &lt;Prefix/&gt;\n"</literal>
                    <literal type="string">"    &lt;KeyCount&gt;2&lt;/KeyCount&gt;\n"</literal>
                    <literal type="string">"    &lt;MaxKeys&gt;1000&lt;/MaxKeys&gt;\n"</literal>
                    <literal type="string">"    &lt;IsTruncated&gt;false&lt;/IsTruncated&gt;\n"</literal>
                    <literal type="string">"    &lt;Contents&gt;\n"</literal>
                    <literal type="string">"        &lt;Key&gt;test1.txt&lt;/Key&gt;\n"</literal>
                    <literal type="string">"        &lt;LastModified&gt;2009-10-12T17:50:30.000Z&lt;/LastModified&gt;\n"</literal>
                    <literal type="string">"        &lt;ETag&gt;&amp;quot;fba9dede5f27731c9771645a39863328&amp;quot;&lt;/ETag&gt;\n"</literal>
                    <literal type="string">"        &lt;Size&gt;1234&lt;/Size&gt;\n"</literal>
                    <literal type="string">"        &lt;StorageClass&gt;STANDARD&lt;/StorageClass&gt;\n"</literal>
                    <literal type="string">"    &lt;/Contents&gt;\n"</literal>
                    <literal type="string">"    &lt;Contents&gt;\n"</literal>
                    <literal type="string">"        &lt;Key&gt;test2.txt&lt;/Key&gt;\n"</literal>
                    <literal type="string">"        &lt;LastModified&gt;2009-10-14T17:50:30.000Z&lt;/LastModified&gt;\n"</literal>
                    <literal type="string">"        &lt;ETag&gt;&amp;quot;fba9dede5f27731c9771645a39863327&amp;quot;&lt;/ETag&gt;\n"</literal>
                    <literal type="string">"        &lt;Size&gt;4321&lt;/Size&gt;\n"</literal>
                    <literal type="string">"        &lt;StorageClass&gt;STANDARD-IA&lt;/StorageClass&gt;\n"</literal>
                    <literal type="string">"    &lt;/Contents&gt;\n"</literal>
                    <literal type="string">"&lt;/ListBucketResult&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"valid xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>XmlNode</name> <modifier>*</modifier></type><name>rootNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>, <argument><expr><call><name>xmlDocumentRoot</name><argument_list>(<argument><expr><name>xmlDocument</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get root node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>XmlNode</name> <modifier>*</modifier></type><name>nodeMaxKeys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>nodeMaxKeys</name></expr></argument>, <argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"MaxKeys"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get max keys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>xmlNodeContent</name><argument_list>(<argument><expr><name>nodeMaxKeys</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1000"</literal></expr></argument>, <argument><expr><literal type="string">"    check MaxKeys content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>xmlNodeContent</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"    get null content for null node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>xmlNodeFree</name><argument_list>(<argument><expr><name>nodeMaxKeys</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>xmlNodeFree</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free null node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>xmlNodeChildTotal</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Contents"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"Contents child total"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>xmlNodeContent</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><call><name>xmlNodeChildN</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Contents"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Key"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"test1.txt"</literal></expr></argument>, <argument><expr><literal type="string">"Contents index 0 Key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>xmlNodeContent</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><call><name>xmlNodeChildN</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Contents"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Key"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"test2.txt"</literal></expr></argument>, <argument><expr><literal type="string">"Contents index 1 Key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>XmlNodeList</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>xmlNodeChildList</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Contents"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create node list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>xmlNodeLstSize</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"    check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>xmlNodeContent</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><call><name>xmlNodeLstGet</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Key"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"test1.txt"</literal></expr></argument>,
            <argument><expr><literal type="string">"    check Contents index 0 Key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>xmlNodeContent</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><call><name>xmlNodeLstGet</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Key"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"test2.txt"</literal></expr></argument>,
            <argument><expr><literal type="string">"    check Contents index 1 Key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>xmlNodeLstFree</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"    free list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>xmlNodeChildN</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Contents"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to find child 'Contents':2 in node 'ListBucketResult'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>xmlNodeChildN</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Contents"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"get missing child without error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>xmlNodeAttribute</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"attempt to get missing attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>xmlNodeAttribute</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>rootNode</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Name"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><literal type="string">"get attribute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>xmlDocumentFree</name><argument_list>(<argument><expr><name>xmlDocument</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free xmldoc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create an empty document, add data to it, and output xml</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>xmlDocument</name></expr></argument>, <argument><expr><call><name>xmlDocumentNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"CompleteMultipartUpload"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new xml with root node"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>XmlNode</name> <modifier>*</modifier></type><name>partNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>partNode</name></expr></argument>, <argument><expr><call><name>xmlNodeAdd</name><argument_list>(<argument><expr><call><name>xmlDocumentRoot</name><argument_list>(<argument><expr><name>xmlDocument</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Part"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create part node 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>xmlNodeContentSet</name><argument_list>(<argument><expr><call><name>xmlNodeAdd</name><argument_list>(<argument><expr><name>partNode</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"PartNumber"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set part number 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>xmlNodeContentSet</name><argument_list>(<argument><expr><call><name>xmlNodeAdd</name><argument_list>(<argument><expr><name>partNode</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"ETag"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"E1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set etag 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>partNode</name></expr></argument>, <argument><expr><call><name>xmlNodeAdd</name><argument_list>(<argument><expr><call><name>xmlDocumentRoot</name><argument_list>(<argument><expr><name>xmlDocument</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Part"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create part node 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>xmlNodeContentSet</name><argument_list>(<argument><expr><call><name>xmlNodeAdd</name><argument_list>(<argument><expr><name>partNode</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"PartNumber"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set part number 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>xmlNodeContentSet</name><argument_list>(<argument><expr><call><name>xmlNodeAdd</name><argument_list>(<argument><expr><name>partNode</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"ETag"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"E2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set etag 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>xmlDocumentBuf</name><argument_list>(<argument><expr><name>xmlDocument</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</literal>
            <literal type="string">"&lt;CompleteMultipartUpload&gt;"</literal>
                <literal type="string">"&lt;Part&gt;&lt;PartNumber&gt;1&lt;/PartNumber&gt;&lt;ETag&gt;E1&lt;/ETag&gt;&lt;/Part&gt;"</literal>
                <literal type="string">"&lt;Part&gt;&lt;PartNumber&gt;2&lt;/PartNumber&gt;&lt;ETag&gt;E2&lt;/ETag&gt;&lt;/Part&gt;"</literal>
                <literal type="string">"&lt;/CompleteMultipartUpload&gt;\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"get xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
