<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/common/typeBlobTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Blob
***********************************************************************************************************************************/</comment>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"Blob"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"Add enough data to allocate a new page"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_DATA_MAX</name></cpp:macro>                                       <cpp:value>5</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_DATA_SIZE</name></cpp:macro>                                      <cpp:value>(BLOB_BLOCK_SIZE / (TEST_DATA_MAX - 1))</cpp:value></cpp:define>

        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>dataList</name><index>[<expr><name>TEST_DATA_MAX</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>dataListPtr</name><index>[<expr><name>TEST_DATA_MAX</name></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Blob</name> <modifier>*</modifier></type><name>blob</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>blob</name></expr></argument>, <argument><expr><call><name>blbNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new blob"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>dataIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dataIdx</name> <operator>&lt;</operator> <name>TEST_DATA_MAX</name></expr>;</condition> <incr><expr><name>dataIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name><name>dataList</name><index>[<expr><name>dataIdx</name></expr>]</index></name> <operator>=</operator> <call><name>memNew</name><argument_list>(<argument><expr><name>TEST_DATA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>dataList</name><index>[<expr><name>dataIdx</name></expr>]</index></name></expr></argument>, <argument><expr><name>dataIdx</name></expr></argument>, <argument><expr><name>TEST_DATA_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name><name>dataListPtr</name><index>[<expr><name>dataIdx</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>blbAdd</name><argument_list>(<argument><expr><name>blob</name></expr></argument>, <argument><expr><name><name>dataList</name><index>[<expr><name>dataIdx</name></expr>]</index></name></expr></argument>, <argument><expr><name>TEST_DATA_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"data add"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>dataIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dataIdx</name> <operator>&lt;</operator> <name>TEST_DATA_MAX</name></expr>;</condition> <incr><expr><name>dataIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>dataList</name><index>[<expr><name>dataIdx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dataListPtr</name><index>[<expr><name>dataIdx</name></expr>]</index></name></expr></argument>, <argument><expr><name>TEST_DATA_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"data check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"Add data &gt;= than block size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>memNew</name><argument_list>(<argument><expr><name>BLOB_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>dataPtr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>BLOB_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>dataPtr</name></expr></argument>, <argument><expr><call><name>blbAdd</name><argument_list>(<argument><expr><name>blob</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>BLOB_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"data add"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>dataPtr</name></expr></argument>, <argument><expr><name>BLOB_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"data check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
