<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/common/memContextTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Memory Contexts
***********************************************************************************************************************************/</comment>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
testFree - test callback function
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>MemContext</name> <modifier>*</modifier></type><name>memContextCallbackArgument</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>testFreeThrow</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>testFree</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>thisVoid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>thisVoid</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"mem context inactive in callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>memContextFree</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"assertion 'this-&gt;active' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>memContextCallbackSet</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>testFree</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"assertion 'this-&gt;active' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"assertion 'this-&gt;active' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>memContextCallbackArgument</name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>testFreeThrow</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"error in callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"memAllocInternal(), memReAllocInternal(), and memFreeInternal()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Test too large allocation -- only test this on 64-bit systems since 32-bit systems tend to work with any value that</comment>
        <comment type="line">// valgrind will accept</comment>
        <if_stmt><if>if <condition>(<expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>memAllocInternal</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">5629499534213120</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MemoryError</name></expr></argument>, <argument><expr><literal type="string">"unable to allocate 5629499534213120 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>memFreeInternal</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"assertion 'buffer != NULL' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Check that bad realloc is caught</comment>
            <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>memAllocInternal</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                <argument><expr><call><name>memReAllocInternal</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">5629499534213120</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MemoryError</name></expr></argument>,
                <argument><expr><literal type="string">"unable to reallocate 5629499534213120 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memFreeInternal</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Memory allocation</comment>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>memAllocInternal</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Memory reallocation</comment>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0xC7</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer2</name> <init>= <expr><call><name>memReAllocInternal</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>expectedTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>charIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>charIdx</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>charIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>expectedTotal</name> <operator>+=</operator> <name><name>buffer2</name><index>[<expr><name>charIdx</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xC7</literal></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>expectedTotal</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"all old bytes are filled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memFreeInternal</name><argument_list>(<argument><expr><name>buffer2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"memContextNew() and memContextFree()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"struct size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MemContext</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">24</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"MemContext size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MemContextChildMany</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"MemContextChildMany size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MemContextAllocMany</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"MemContextAllocMany size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MemContextCallbackOne</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"MemContextCallbackOne size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <comment type="line">// Make sure top context was created</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"TOP"</literal></expr></argument>, <argument><expr><literal type="string">"top context should exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>childInitialized</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"top context should init with zero children"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Current context should equal top context</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"top context == current context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Context name length errors</comment>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>memContextNewP</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"assertion 'name[0] != '\\0'' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name> <init>= <expr><call><name>memContextNewP</name><argument_list>(
            <argument><expr><literal type="string">"test1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>childQty</name> <operator>=</operator> <name>MEM_CONTEXT_QTY_MAX</name></expr></argument>, <argument><expr><operator>.</operator><name>allocQty</name> <operator>=</operator> <name>MEM_CONTEXT_QTY_MAX</name></expr></argument>, <argument><expr><operator>.</operator><name>callbackQty</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name><name>memContext</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>, <argument><expr><literal type="string">"test1 context name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>memContext</name><operator>-&gt;</operator><name>contextParent</name></name></expr></argument>, <argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"test1 context parent is top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(
            <argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>listSize</name></expr></argument>, <argument><expr><name>MEM_CONTEXT_INITIAL_SIZE</name></expr></argument>, <argument><expr><literal type="string">"initial top context child list size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"new context expected but current context 'test1' found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>memContextDiscard</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"new context expected but current context 'test1' found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>, <argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"current context is now test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create enough mem contexts to use up the initially allocated block</comment>
        <expr_stmt><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>contextIdx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>contextIdx</name> <operator>&lt;</operator> <name>MEM_CONTEXT_INITIAL_SIZE</name></expr>;</condition> <incr><expr><name>contextIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memContextNewP</name><argument_list>(<argument><expr><literal type="string">"test-filler"</literal></expr></argument>, <argument><expr><operator>.</operator><name>childQty</name> <operator>=</operator> <name>MEM_CONTEXT_QTY_MAX</name></expr></argument>, <argument><expr><operator>.</operator><name>allocQty</name> <operator>=</operator> <name>MEM_CONTEXT_QTY_MAX</name></expr></argument>, <argument><expr><operator>.</operator><name>callbackQty</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_PTR_NE</name><argument_list>(<argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><name>contextIdx</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"new context exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><name>contextIdx</name></expr>]</index></name><operator>-&gt;</operator><name>active</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"new context is active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><name>contextIdx</name></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"test-filler"</literal></expr></argument>, <argument><expr><literal type="string">"new context name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// This forces the child context array to grow</comment>
        <expr_stmt><expr><name>memContext</name> <operator>=</operator> <call><name>memContextNewP</name><argument_list>(
            <argument><expr><literal type="string">"test5"</literal></expr></argument>, <argument><expr><operator>.</operator><name>allocExtra</name> <operator>=</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>.</operator><name>childQty</name> <operator>=</operator> <name>MEM_CONTEXT_QTY_MAX</name></expr></argument>, <argument><expr><operator>.</operator><name>allocQty</name> <operator>=</operator> <name>MEM_CONTEXT_QTY_MAX</name></expr></argument>, <argument><expr><operator>.</operator><name>callbackQty</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>memContextAllocExtra</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>memContext</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"mem context alloc extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>memContextFromAllocExtra</name><argument_list>(<argument><expr><name>memContext</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>memContext</name></expr></argument>, <argument><expr><literal type="string">"mem context from alloc extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>memContextConstFromAllocExtra</name><argument_list>(<argument><expr><name>memContext</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>memContext</name></expr></argument>, <argument><expr><literal type="string">"const mem context from alloc extra"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(
            <argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>listSize</name></expr></argument>, <argument><expr><name>MEM_CONTEXT_INITIAL_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"increased child context list size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>freeIdx</name></expr></argument>, <argument><expr><name>MEM_CONTEXT_INITIAL_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check context free idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Free a context</comment>
        <expr_stmt><expr><call><name>memContextFree</name><argument_list>(<argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"child context NULL after free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"current context is top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>freeIdx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check context free idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create a new context and it should end up in the same spot</comment>
        <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier><specifier>const</specifier></type> <name>memContextOneChild</name> <init>= <expr><call><name>memContextNewP</name><argument_list>(<argument><expr><literal type="string">"test-reuse"</literal></expr></argument>, <argument><expr><operator>.</operator><name>childQty</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>active</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"new context in same index as freed context is active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"test-reuse"</literal></expr></argument>, <argument><expr><literal type="string">"new context name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>freeIdx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"check context free idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"child context in context with only one child allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><name>memContextOneChild</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"switch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContextSingleChild</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>memContextSingleChild</name></expr></argument>, <argument><expr><call><name>memContextNewP</name><argument_list>(<argument><expr><literal type="string">"single-child"</literal></expr></argument>, <argument><expr><operator>.</operator><name>childQty</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>.</operator><name>allocQty</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"keep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"child context freed in context with only one child allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><name>memContextSingleChild</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"switch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextNewP</name><argument_list>(<argument><expr><literal type="string">"free-child"</literal></expr></argument>, <argument><expr><operator>.</operator><name>childQty</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextDiscard</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"discard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"switch to top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <comment type="line">// Next context will be at the end</comment>
        <expr_stmt><expr><call><name>memContextNewP</name><argument_list>(<argument><expr><literal type="string">"test-at-end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>freeIdx</name></expr></argument>, <argument><expr><name>MEM_CONTEXT_INITIAL_SIZE</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"check context free idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create a child context to test recursive free</comment>
        <expr_stmt><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><name>MEM_CONTEXT_INITIAL_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memContextNewP</name><argument_list>(<argument><expr><literal type="string">"test-reuse"</literal></expr></argument>, <argument><expr><operator>.</operator><name>childQty</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR_NE</name><argument_list>(
            <argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><name>MEM_CONTEXT_INITIAL_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>list</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><literal type="string">"context child list is allocated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(
            <argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><name>MEM_CONTEXT_INITIAL_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>listSize</name></expr></argument>,
            <argument><expr><name>MEM_CONTEXT_INITIAL_SIZE</name></expr></argument>, <argument><expr><literal type="string">"context child list initial size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// This test will change if the contexts above change</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>memContextSize</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">584</literal></expr> </then><else>: <expr><literal type="number">376</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>memContextFree</name><argument_list>(<argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><name>MEM_CONTEXT_INITIAL_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"cannot free current context 'test5'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"switch to top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextFree</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"alloc extra not aligned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>, <argument><expr><call><name>memContextNewP</name><argument_list>(<argument><expr><literal type="string">"test-alloc"</literal></expr></argument>, <argument><expr><operator>.</operator><name>allocExtra</name> <operator>=</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"no aligned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>memContext</name><operator>-&gt;</operator><name>allocExtra</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextDiscard</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"discard"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"memContextAlloc*(), memNew*(), memGrow(), and memFree()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"struct size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MemContextAlloc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"MemContextAlloc size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MemContextAlloc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"check MemContextAlloc size (same for 32/64 bit)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>MEM_CONTEXT_ALLOC_BUFFER</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>MemContextAlloc</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"check buffer macro"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>MEM_CONTEXT_ALLOC_HEADER</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr><name>MemContextAlloc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check header macro"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memNewPtrArray</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name> <init>= <expr><call><name>memContextNewP</name><argument_list>(<argument><expr><literal type="string">"test-alloc"</literal></expr></argument>, <argument><expr><operator>.</operator><name>allocQty</name> <operator>=</operator> <name>MEM_CONTEXT_QTY_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>memContextSwitchBack</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"current context expected but new context 'test-alloc' found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>allocIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>allocIdx</name> <operator>&lt;=</operator> <name>MEM_CONTEXT_ALLOC_INITIAL_SIZE</name></expr>;</condition> <incr><expr><name>allocIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>memNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(
                <argument><expr><call><name>memContextAllocMany</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>listSize</name></expr></argument>,
                <argument><expr><ternary><condition><expr><name>allocIdx</name> <operator>==</operator> <name>MEM_CONTEXT_ALLOC_INITIAL_SIZE</name></expr> ?</condition><then> <expr><name>MEM_CONTEXT_ALLOC_INITIAL_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name>MEM_CONTEXT_ALLOC_INITIAL_SIZE</name></expr></else></ternary></expr></argument>,
                <argument><expr><literal type="string">"allocation list size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>memNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Grow memory</comment>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0xFE</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>memResize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check that original portion of the buffer is preserved</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>expectedTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>charIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>charIdx</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>charIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>expectedTotal</name> <operator>+=</operator> <name><name>buffer</name><index>[<expr><name>charIdx</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xFE</literal></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>expectedTotal</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"all bytes are 0xFE in original portion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Free memory</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>memContextAllocMany</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>freeIdx</name></expr></argument>, <argument><expr><name>MEM_CONTEXT_ALLOC_INITIAL_SIZE</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"check alloc free idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memFree</name><argument_list>(<argument><expr><call><name>MEM_CONTEXT_ALLOC_BUFFER</name><argument_list>(<argument><expr><call><name>memContextAllocMany</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>memContextAllocMany</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>freeIdx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check alloc free idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memFree</name><argument_list>(<argument><expr><call><name>MEM_CONTEXT_ALLOC_BUFFER</name><argument_list>(<argument><expr><call><name>memContextAllocMany</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>memContextAllocMany</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>freeIdx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check alloc free idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memNew</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>memContextAllocMany</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>freeIdx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check alloc free idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memNew</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>memContextAllocMany</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>freeIdx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"check alloc free idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memNew</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>memContextAllocMany</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>freeIdx</name></expr></argument>, <argument><expr><name>MEM_CONTEXT_ALLOC_INITIAL_SIZE</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"check alloc free idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// This test will change if the allocations above change</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>memContextSize</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">209</literal></expr> </then><else>: <expr><literal type="number">145</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>memFree</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"assertion 'alloc != NULL &amp;&amp; "</literal>
                <literal type="string">"(uintptr_t)alloc != (uintptr_t)-sizeof(MemContextAlloc) &amp;&amp; "</literal>
                <literal type="string">"alloc-&gt;allocIdx &lt; memContextAllocMany(memContextStack[memContextCurrentStackIdx].memContext)-&gt;listSize &amp;&amp; "</literal>
                <literal type="string">"memContextAllocMany(memContextStack[memContextCurrentStackIdx].memContext)-&gt;list[alloc-&gt;allocIdx]' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memFree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memContextFree</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"mem context with one allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>, <argument><expr><call><name>memContextNewP</name><argument_list>(<argument><expr><literal type="string">"test-alloc"</literal></expr></argument>, <argument><expr><operator>.</operator><name>allocQty</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"keep new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"switch to new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>memNew</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>memResize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">150</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"resize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memFree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>memNew</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// This test will change if the allocations above change</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>memContextSize</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">240</literal></expr> </then><else>: <expr><literal type="number">228</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"switch to top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextFree</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"context free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"mem context with one allocation freed before context free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>, <argument><expr><call><name>memContextNewP</name><argument_list>(<argument><expr><literal type="string">"test-alloc"</literal></expr></argument>, <argument><expr><operator>.</operator><name>allocQty</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"keep new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"switch to new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>memNew</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memFree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// This test will change if the allocations above change</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>memContextSize</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><literal type="number">20</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"switch to top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextFree</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"context free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"memContextCallbackSet()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>memContextCallbackSet</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>testFree</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"assertion 'this-&gt;callbackQty != memQtyNone' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name> <init>= <expr><call><name>memContextNewP</name><argument_list>(
            <argument><expr><literal type="string">"test-callback"</literal></expr></argument>, <argument><expr><operator>.</operator><name>childQty</name> <operator>=</operator> <name>MEM_CONTEXT_QTY_MAX</name></expr></argument>, <argument><expr><operator>.</operator><name>allocQty</name> <operator>=</operator> <name>MEM_CONTEXT_QTY_MAX</name></expr></argument>, <argument><expr><operator>.</operator><name>callbackQty</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memContextCallbackSet</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>, <argument><expr><name>testFree</name></expr></argument>, <argument><expr><name>memContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>memContextCallbackSet</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>, <argument><expr><name>testFree</name></expr></argument>, <argument><expr><name>memContext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"callback is already set for context 'test-callback'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Clear and reset it</comment>
        <expr_stmt><expr><call><name>memContextCallbackClear</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memContextCallbackSet</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>, <argument><expr><name>testFree</name></expr></argument>, <argument><expr><name>memContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memContextFree</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name>memContextCallbackArgument</name></expr></argument>, <argument><expr><name>memContext</name></expr></argument>, <argument><expr><literal type="string">"callback argument is context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Now test with an error</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>memContext</name> <operator>=</operator> <call><name>memContextNewP</name><argument_list>(
            <argument><expr><literal type="string">"test-callback-error"</literal></expr></argument>, <argument><expr><operator>.</operator><name>childQty</name> <operator>=</operator> <name>MEM_CONTEXT_QTY_MAX</name></expr></argument>, <argument><expr><operator>.</operator><name>allocQty</name> <operator>=</operator> <name>MEM_CONTEXT_QTY_MAX</name></expr></argument>, <argument><expr><operator>.</operator><name>callbackQty</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"keep mem context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>testFreeThrow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextCallbackSet</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>, <argument><expr><name>testFree</name></expr></argument>, <argument><expr><name>memContext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"    set callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>memContextFree</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"error in callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"MEM_CONTEXT_BEGIN() and MEM_CONTEXT_END()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name> <init>= <expr><call><name>memContextNewP</name><argument_list>(
            <argument><expr><literal type="string">"test-block"</literal></expr></argument>, <argument><expr><operator>.</operator><name>childQty</name> <operator>=</operator> <name>MEM_CONTEXT_QTY_MAX</name></expr></argument>, <argument><expr><operator>.</operator><name>allocQty</name> <operator>=</operator> <name>MEM_CONTEXT_QTY_MAX</name></expr></argument>, <argument><expr><operator>.</operator><name>callbackQty</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check normal block</comment>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"test-block"</literal></expr></argument>, <argument><expr><literal type="string">"context is now test-block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"TOP"</literal></expr></argument>, <argument><expr><literal type="string">"context is now top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check block that errors</comment>
        <macro><name>TEST_ERROR</name><argument_list>(
            <argument>MEM_CONTEXT_BEGIN(memContext)
            {
                TEST_RESULT_Z(memContextCurrent()-&gt;name, <literal type="string">"test-block"</literal>, <literal type="string">"context is now test-block"</literal>);
                THROW(AssertError, <literal type="string">"error in test block"</literal>);
            }
            MEM_CONTEXT_END()</argument>,
            <argument>AssertError</argument>, <argument><literal type="string">"error in test block"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"TOP"</literal></expr></argument>, <argument><expr><literal type="string">"context is now top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Reset temp mem context after a single interaction</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <macro><name>MEM_CONTEXT_TEMP_RESET_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>MEM_CONTEXT_TEMP</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>allocInitialized</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"nothing allocated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memNew</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_PTR_NE</name><argument_list>(<argument><expr><call><name>memContextAllocMany</name><argument_list>(<argument><expr><call><name>MEM_CONTEXT_TEMP</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"1 allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_RESET</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>MEM_CONTEXT_TEMP</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>allocInitialized</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"nothing allocated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"MEM_CONTEXT_NEW_BEGIN() and MEM_CONTEXT_NEW_END()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// ------------------------------------------------------------------------------------------------------------------------</comment>
        <comment type="line">// Successful context new block</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>memContextTestName</name> <init>= <expr><literal type="string">"test-new-block"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"context is now 'TOP'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_NEW_BEGIN</name><argument_list>(<argument>test-new-block</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>memContext</name> <operator>=</operator> <call><name>MEM_CONTEXT_NEW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>, <argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new mem context is current"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name><name>memContext</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>memContextTestName</name></expr></argument>, <argument><expr><literal type="string">"check context name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>name</name></expr></argument>, <argument><expr><literal type="string">"TOP"</literal></expr></argument>, <argument><expr><literal type="string">"context name is now 'TOP'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"context is now 'TOP'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>memContext</name><operator>-&gt;</operator><name>active</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"new mem context is still active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memContextFree</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ------------------------------------------------------------------------------------------------------------------------</comment>
        <comment type="line">// Failed context new block</comment>
        <expr_stmt><expr><name>memContextTestName</name> <operator>=</operator> <literal type="string">"test-new-failed-block"</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>catch</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>MEM_CONTEXT_NEW_BEGIN</name><argument_list>(<argument>test-new-failed-block</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name>memContext</name> <operator>=</operator> <call><name>MEM_CONTEXT_NEW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name><name>memContext</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>memContextTestName</name></expr></argument>, <argument><expr><literal type="string">"check mem context name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"create failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH</name><argument_list>(<argument>FormatError</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>catch</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name>catch</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"new context error was caught"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"context is now 'TOP'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// ------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"new context not freed on fatal error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier><specifier>volatile</specifier></type> <name>memContextFatal</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>catch</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>MEM_CONTEXT_NEW_BEGIN</name><argument_list>(<argument>test-new-failed-fatal-block</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name>memContextFatal</name> <operator>=</operator> <call><name>MEM_CONTEXT_NEW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"create failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>catch</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextFree</name><argument_list>(<argument><expr><name>memContextFatal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free new context not freed by catch fatal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name>catch</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"new context error was caught"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"context is now 'TOP'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"memContextMove()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextMove</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move NULL context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>mem2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>MEM_CONTEXT_NEW_BEGIN</name><argument_list>(<argument><literal type="string">"outer"</literal></argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
        <block>{<block_content>
            <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>memContextNewP</name><argument_list>(<argument><expr><literal type="string">"not-to-be-moved"</literal></expr></argument>, <argument><expr><operator>.</operator><name>childQty</name> <operator>=</operator> <name>MEM_CONTEXT_QTY_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <macro><name>MEM_CONTEXT_NEW_BEGIN</name><argument_list>(<argument><literal type="string">"inner"</literal></argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><name>memContext</name> <operator>=</operator> <call><name>MEM_CONTEXT_NEW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name>memNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>MEM_CONTEXT_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>MEM_CONTEXT_ALLOC_BUFFER</name><argument_list>(<argument><expr><call><name>memContextAllocMany</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><literal type="string">"check memory allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>memContext</name></expr></argument>, <argument><expr><literal type="string">"check memory context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Null out the mem context in the parent so the move will fail</comment>
                <expr_stmt><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>memContextMove</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
                    <argument><expr><literal type="string">"assertion 'memContextChildMany(this-&gt;contextParent)-&gt;list[this-&gt;contextParentIdx] == this' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Set it back so the move will succeed</comment>
                <expr_stmt><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>memContext</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextMove</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextMove</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move context again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Move another context</comment>
                <macro><name>MEM_CONTEXT_NEW_BEGIN</name><argument_list>(<argument><literal type="string">"inner2"</literal></argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><name>memContext2</name> <operator>=</operator> <call><name>MEM_CONTEXT_NEW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>mem2</name> <operator>=</operator> <call><name>memNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>MEM_CONTEXT_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextMove</name><argument_list>(<argument><expr><name>memContext2</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>MEM_CONTEXT_ALLOC_BUFFER</name><argument_list>(<argument><expr><call><name>memContextAllocMany</name><argument_list>(<argument><expr><name>memContext</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr><literal type="string">"check memory allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>memContext</name></expr></argument>, <argument><expr><literal type="string">"check memory context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>MEM_CONTEXT_ALLOC_BUFFER</name><argument_list>(<argument><expr><call><name>memContextAllocMany</name><argument_list>(<argument><expr><name>memContext2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>mem2</name></expr></argument>, <argument><expr><literal type="string">"check memory allocation 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>memContextChildMany</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>list</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>memContext2</name></expr></argument>, <argument><expr><literal type="string">"check memory context 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"outer and inner contexts allow one child"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContextParent1</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>memContextParent1</name></expr></argument>, <argument><expr><call><name>memContextNewP</name><argument_list>(<argument><expr><literal type="string">"parent1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>childQty</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new parent1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"keep parent1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><name>memContextParent1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"switch to parent1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContextChild</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>memContextChild</name></expr></argument>, <argument><expr><call><name>memContextNewP</name><argument_list>(<argument><expr><literal type="string">"child"</literal></expr></argument>, <argument><expr><operator>.</operator><name>allocQty</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new child"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"keep child"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextSwitch</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"switch to top"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContextParent2</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>memContextParent2</name></expr></argument>, <argument><expr><call><name>memContextNewP</name><argument_list>(<argument><expr><literal type="string">"parent2"</literal></expr></argument>, <argument><expr><operator>.</operator><name>childQty</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new parent2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextKeep</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"keep parent2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextMove</name><argument_list>(<argument><expr><name>memContextChild</name></expr></argument>, <argument><expr><name>memContextParent2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>memContextChildOne</name><argument_list>(<argument><expr><name>memContextParent1</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check parent1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>memContextChildOne</name><argument_list>(<argument><expr><name>memContextParent2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>context</name></expr></argument>, <argument><expr><name>memContextChild</name></expr></argument>, <argument><expr><literal type="string">"check parent2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memContextFree</name><argument_list>(<argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
