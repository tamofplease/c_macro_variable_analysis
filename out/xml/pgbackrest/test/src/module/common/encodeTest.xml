<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/common/encodeTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Binary to String Encode/Decode
***********************************************************************************************************************************/</comment>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"base64"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>encode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"string_to_encode\r\n"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>destinationEncode</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>encodeToStr</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>, <argument><expr><literal type="string">"cw=="</literal></expr></argument>, <argument><expr><literal type="string">"1 character encode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>encodeToStrSize</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>encodeToStr</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>, <argument><expr><literal type="string">"c3Q="</literal></expr></argument>, <argument><expr><literal type="string">"2 character encode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>encodeToStrSize</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>encodeToStr</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>, <argument><expr><literal type="string">"c3Ry"</literal></expr></argument>, <argument><expr><literal type="string">"3 character encode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>encodeToStrSize</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>encodeToStr</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>, <argument><expr><literal type="string">"c3RyaW5nX3RvX2VuY29kZQ=="</literal></expr></argument>, <argument><expr><literal type="string">"encode full string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>encodeToStrSize</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>encodeToStr</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>, <argument><expr><literal type="string">"c3RyaW5nX3RvX2VuY29kZQ0K"</literal></expr></argument>, <argument><expr><literal type="string">"encode full string with \\r\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>encodeToStrSize</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>encodeToStr</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>, <argument><expr><literal type="string">"c3RyaW5nX3RvX2VuY29kZQ0KAA=="</literal></expr></argument>, <argument><expr><literal type="string">"encode full string with \\r\\n and null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>encodeToStrSize</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>destinationDecode</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>destinationDecode</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>destinationDecode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>decode</name> <init>= <expr><literal type="string">"c3RyaW5nX3RvX2VuY29kZQ0KAA=="</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>decodeToBin</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>decode</name></expr></argument>, <argument><expr><name>destinationDecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>destinationDecode</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>, <argument><expr><literal type="string">"full string with \\r\\n and null decode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>destinationDecode</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="string">"check for overrun"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>decodeToBinSize</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>decode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>destinationDecode</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>destinationDecode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>decode</name> <operator>=</operator> <literal type="string">"c3RyaW5nX3RvX2VuY29kZQ0K"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>decodeToBin</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>decode</name></expr></argument>, <argument><expr><name>destinationDecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>destinationDecode</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"full string with \\r\\n decode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>destinationDecode</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="string">"check for overrun"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>decodeToBinSize</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>decode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>destinationDecode</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>destinationDecode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>decode</name> <operator>=</operator> <literal type="string">"c3RyaW5nX3RvX2VuY29kZQ=="</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>decodeToBin</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>decode</name></expr></argument>, <argument><expr><name>destinationDecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>destinationDecode</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"full string decode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>destinationDecode</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="string">"check for overrun"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>decodeToBinSize</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>decode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>destinationDecode</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>destinationDecode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>decode</name> <operator>=</operator> <literal type="string">"c3Ry"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>decodeToBin</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>decode</name></expr></argument>, <argument><expr><name>destinationDecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>destinationDecode</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"3 character decode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>destinationDecode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="string">"check for overrun"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>decodeToBinSize</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>decode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>destinationDecode</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>destinationDecode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>decode</name> <operator>=</operator> <literal type="string">"c3Q="</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>decodeToBin</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>decode</name></expr></argument>, <argument><expr><name>destinationDecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>destinationDecode</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"2 character decode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>destinationDecode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="string">"check for overrun"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>decodeToBinSize</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>decode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>destinationDecode</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>destinationDecode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>decode</name> <operator>=</operator> <literal type="string">"cw=="</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>decodeToBin</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>decode</name></expr></argument>, <argument><expr><name>destinationDecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name>destinationDecode</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"1 character decode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>destinationDecode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="string">"check for overrun"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>decodeToBinSize</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>decode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>decodeToBin</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><literal type="string">"cc$="</literal></expr></argument>, <argument><expr><name>destinationDecode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"base64 invalid character found at position 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>decodeToBin</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><literal type="string">"c3"</literal></expr></argument>, <argument><expr><name>destinationDecode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"base64 size 2 is not evenly divisible by 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>decodeToBin</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><literal type="string">"c==="</literal></expr></argument>, <argument><expr><name>destinationDecode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"base64 '=' character may only appear in last two positions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>decodeToBin</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><literal type="string">"cc=c"</literal></expr></argument>, <argument><expr><name>destinationDecode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"base64 last character must be '=' if second to last is"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"base64url"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"encode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>encode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"string_to_encode\r\n"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>destinationEncode</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>encodeToStr</name><argument_list>(<argument><expr><name>encodeBase64Url</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>, <argument><expr><literal type="string">"cw"</literal></expr></argument>, <argument><expr><literal type="string">"1 character encode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>encodeToStrSize</name><argument_list>(<argument><expr><name>encodeBase64Url</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>encodeToStr</name><argument_list>(<argument><expr><name>encodeBase64Url</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>, <argument><expr><literal type="string">"c3Q"</literal></expr></argument>, <argument><expr><literal type="string">"2 character encode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>encodeToStrSize</name><argument_list>(<argument><expr><name>encodeBase64Url</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>encodeToStr</name><argument_list>(<argument><expr><name>encodeBase64Url</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>, <argument><expr><literal type="string">"c3Ry"</literal></expr></argument>, <argument><expr><literal type="string">"3 character encode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>encodeToStrSize</name><argument_list>(<argument><expr><name>encodeBase64Url</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>encodeToStr</name><argument_list>(<argument><expr><name>encodeBase64Url</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>, <argument><expr><literal type="string">"c3RyaW5nX3RvX2VuY29kZQ"</literal></expr></argument>, <argument><expr><literal type="string">"encode full string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>encodeToStrSize</name><argument_list>(<argument><expr><name>encodeBase64Url</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>encodeToStr</name><argument_list>(<argument><expr><name>encodeBase64Url</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>, <argument><expr><literal type="string">"c3RyaW5nX3RvX2VuY29kZQ0K"</literal></expr></argument>, <argument><expr><literal type="string">"encode full string with \\r\\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>encodeToStrSize</name><argument_list>(<argument><expr><name>encodeBase64Url</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>encodeToStr</name><argument_list>(<argument><expr><name>encodeBase64Url</name></expr></argument>, <argument><expr><name>encode</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>, <argument><expr><literal type="string">"c3RyaW5nX3RvX2VuY29kZQ0KAA"</literal></expr></argument>, <argument><expr><literal type="string">"encode full string with \\r\\n and null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>encodeToStrSize</name><argument_list>(<argument><expr><name>encodeBase64Url</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>encode</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>destinationEncode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"decode unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>destinationDecode</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>decodeToBinSize</name><argument_list>(<argument><expr><name>encodeBase64Url</name></expr></argument>, <argument><expr><literal type="string">"c3"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>decodeToBin</name><argument_list>(<argument><expr><name>encodeBase64Url</name></expr></argument>, <argument><expr><literal type="string">"c3"</literal></expr></argument>, <argument><expr><name>destinationDecode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
