<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/common/compressTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Compression
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/filter/group.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Compress data
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>Buffer</name> <modifier>*</modifier></type>
<name>testCompress</name><parameter_list>(<parameter><decl><type><name>IoFilter</name> <modifier>*</modifier></type><name>compress</name></decl></parameter>, <parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>decompressed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inputSize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outputSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>compressed</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>inputTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ioBufferSizeSet</name><argument_list>(<argument><expr><name>outputSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name> <init>= <expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><call><name>ioWriteFilterGroup</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Compress input data</comment>
    <while>while <condition>(<expr><name>inputTotal</name> <operator>&lt;</operator> <call><name>bufSize</name><argument_list>(<argument><expr><name>decompressed</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Generate the input buffer based on input size.  This breaks the data up into chunks as it would be in a real scenario.</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><call><name>bufNewC</name><argument_list>(
            <argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>decompressed</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>inputTotal</name></expr></argument>,
            <argument><expr><ternary><condition><expr><name>inputSize</name> <operator>&gt;</operator> <call><name>bufSize</name><argument_list>(<argument><expr><name>decompressed</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>inputTotal</name></expr> ?</condition><then> <expr><call><name>bufSize</name><argument_list>(<argument><expr><name>decompressed</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>inputTotal</name></expr> </then><else>: <expr><name>inputSize</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>inputTotal</name> <operator>+=</operator> <call><name>bufUsed</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufFree</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ioFilterFree</name><argument_list>(<argument><expr><name>compress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>compressed</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Decompress data
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>Buffer</name> <modifier>*</modifier></type>
<name>testDecompress</name><parameter_list>(<parameter><decl><type><name>IoFilter</name> <modifier>*</modifier></type><name>decompress</name></decl></parameter>, <parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>compressed</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>inputSize</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>outputSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>decompressed</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><name>outputSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ioBufferSizeSet</name><argument_list>(<argument><expr><name>inputSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>IoRead</name> <modifier>*</modifier></type><name>read</name> <init>= <expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>decompress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ioReadOpen</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>!</operator><call><name>ioReadEof</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ioRead</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufCat</name><argument_list>(<argument><expr><name>decompressed</name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>ioReadClose</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>bufFree</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ioFilterFree</name><argument_list>(<argument><expr><name>decompress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>decompressed</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Standard test suite to be applied to all compression types
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testSuite</name><parameter_list>(<parameter><decl><type><name>CompressType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>decompressCmd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>simpleData</name> <init>= <expr><literal type="string">"A simple string"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>compressed</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>decompressed</name> <init>= <expr><call><name>bufNewC</name><argument_list>(<argument><expr><name>simpleData</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>simpleData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>packWrite</name> <init>= <expr><call><name>pckWriteNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>pckWriteI32P</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create default storage object for testing</comment>
    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"simple data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
        <argument><expr><name>compressed</name></expr></argument>,
        <argument><expr><call><name>testCompress</name><argument_list>(
            <argument><expr><call><name>compressFilterPack</name><argument_list>(<argument><expr><name><name>compressHelperLocal</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>compressType</name></expr></argument>, <argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>decompressed</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>,
            <argument><expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"simple data - compress large in/large out buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"compressed output can be decompressed with command-line tool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.cmp"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"%s "</literal> <name>TEST_PATH</name> <literal type="string">"/test.cmp &gt; "</literal> <name>TEST_PATH</name> <literal type="string">"/test.out 2&gt; /dev/null"</literal></expr></argument>, <argument><expr><name>decompressCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name>decompressed</name></expr></argument>, <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.out"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
        <argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>, <argument><expr><call><name>testCompress</name><argument_list>(<argument><expr><call><name>compressFilter</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>decompressed</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>,
        <argument><expr><literal type="string">"simple data - compress large in/small out buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
        <argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>, <argument><expr><call><name>testCompress</name><argument_list>(<argument><expr><call><name>compressFilter</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>decompressed</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>,
        <argument><expr><literal type="string">"simple data - compress small in/large out buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
        <argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>, <argument><expr><call><name>testCompress</name><argument_list>(<argument><expr><call><name>compressFilter</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>decompressed</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>,
        <argument><expr><literal type="string">"simple data - compress small in/small out buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
        <argument><expr><call><name>bufEq</name><argument_list>(
            <argument><expr><name>decompressed</name></expr></argument>,
            <argument><expr><call><name>testDecompress</name><argument_list>(<argument><expr><call><name>compressFilterPack</name><argument_list>(<argument><expr><name><name>compressHelperLocal</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>decompressType</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compressed</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"simple data - decompress large in/large out buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
        <argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name>decompressed</name></expr></argument>, <argument><expr><call><name>testDecompress</name><argument_list>(<argument><expr><call><name>decompressFilter</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compressed</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>,
        <argument><expr><literal type="string">"simple data - decompress large in/small out buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
        <argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name>decompressed</name></expr></argument>, <argument><expr><call><name>testDecompress</name><argument_list>(<argument><expr><call><name>decompressFilter</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compressed</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>,
        <argument><expr><literal type="string">"simple data - decompress small in/large out buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
        <argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name>decompressed</name></expr></argument>, <argument><expr><call><name>testDecompress</name><argument_list>(<argument><expr><call><name>decompressFilter</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compressed</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>,
        <argument><expr><literal type="string">"simple data - decompress small in/small out buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on no compression data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>testDecompress</name><argument_list>(<argument><expr><call><name>decompressFilter</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"unexpected eof in compressed data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on truncated compression data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>truncated</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>bufCatSub</name><argument_list>(<argument><expr><name>truncated</name></expr></argument>, <argument><expr><name>compressed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>truncated</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check truncated buffer size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>testDecompress</name><argument_list>(<argument><expr><call><name>decompressFilter</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>truncated</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"unexpected eof in compressed data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"compress a large non-zero input buffer into small output buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>decompressed</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>chr</name> <init>= <expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>decompressed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Step through the buffer, setting the individual bytes in a simple pattern (visible ASCII characters, DEC 32 - 126), to make</comment>
    <comment type="line">// sure that we fill the compression library's small output buffer</comment>
    <for>for <control>(<init><decl><type><name>size_t</name></type> <name>chrIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>chrIdx</name> <operator>&lt;</operator> <call><name>bufSize</name><argument_list>(<argument><expr><name>decompressed</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>chrIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>chr</name><index>[<expr><name>chrIdx</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>(</operator><name>chrIdx</name> <operator>%</operator> <literal type="number">94</literal> <operator>+</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>decompressed</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>decompressed</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
        <argument><expr><name>compressed</name></expr></argument>, <argument><expr><call><name>testCompress</name><argument_list>(<argument><expr><call><name>compressFilter</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>decompressed</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>decompressed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"non-zero data - compress large in/small out buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
        <argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name>decompressed</name></expr></argument>, <argument><expr><call><name>testDecompress</name><argument_list>(<argument><expr><call><name>decompressFilter</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compressed</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>compressed</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>,
        <argument><expr><literal type="string">"non-zero data - decompress large in/small out buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"gz"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Run standard test suite</comment>
        <expr_stmt><expr><call><name>testSuite</name><argument_list>(<argument><expr><name>compressTypeGz</name></expr></argument>, <argument><expr><literal type="string">"gzip -dc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"gzError()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>gzError</name><argument_list>(<argument><expr><name>Z_OK</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Z_OK</name></expr></argument>, <argument><expr><literal type="string">"check ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>gzError</name><argument_list>(<argument><expr><name>Z_STREAM_END</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Z_STREAM_END</name></expr></argument>, <argument><expr><literal type="string">"check stream end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>gzError</name><argument_list>(<argument><expr><name>Z_NEED_DICT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"zlib threw error: [2] need dictionary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>gzError</name><argument_list>(<argument><expr><name>Z_ERRNO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"zlib threw error: [-1] file error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>gzError</name><argument_list>(<argument><expr><name>Z_STREAM_ERROR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"zlib threw error: [-2] stream error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>gzError</name><argument_list>(<argument><expr><name>Z_DATA_ERROR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"zlib threw error: [-3] data error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>gzError</name><argument_list>(<argument><expr><name>Z_MEM_ERROR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MemoryError</name></expr></argument>, <argument><expr><literal type="string">"zlib threw error: [-4] insufficient memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>gzError</name><argument_list>(<argument><expr><name>Z_BUF_ERROR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"zlib threw error: [-5] no space in buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>gzError</name><argument_list>(<argument><expr><name>Z_VERSION_ERROR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"zlib threw error: [-6] incompatible version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>gzError</name><argument_list>(<argument><expr><literal type="number">999</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"zlib threw error: [999] unknown error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"gzDecompressToLog() and gzCompressToLog()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>GzDecompress</name> <modifier>*</modifier></type><name>decompress</name> <init>= <expr><operator>(</operator><name>GzDecompress</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><call><name>gzDecompressNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>gzDecompressToLog</name><argument_list>(<argument><expr><name>decompress</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{inputSame: false, done: false, availIn: 0}"</literal></expr></argument>, <argument><expr><literal type="string">"format object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>decompress</name><operator>-&gt;</operator><name>inputSame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>decompress</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>gzDecompressToLog</name><argument_list>(<argument><expr><name>decompress</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{inputSame: true, done: true, availIn: 0}"</literal></expr></argument>, <argument><expr><literal type="string">"format object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"bz2"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Run standard test suite</comment>
        <expr_stmt><expr><call><name>testSuite</name><argument_list>(<argument><expr><name>compressTypeBz2</name></expr></argument>, <argument><expr><literal type="string">"bzip2 -dc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"bz2Error()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>bz2Error</name><argument_list>(<argument><expr><name>BZ_OK</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BZ_OK</name></expr></argument>, <argument><expr><literal type="string">"check ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>bz2Error</name><argument_list>(<argument><expr><name>BZ_RUN_OK</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BZ_RUN_OK</name></expr></argument>, <argument><expr><literal type="string">"check run ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>bz2Error</name><argument_list>(<argument><expr><name>BZ_FLUSH_OK</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BZ_FLUSH_OK</name></expr></argument>, <argument><expr><literal type="string">"check flush ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>bz2Error</name><argument_list>(<argument><expr><name>BZ_FINISH_OK</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BZ_FINISH_OK</name></expr></argument>, <argument><expr><literal type="string">"check finish ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>bz2Error</name><argument_list>(<argument><expr><name>BZ_STREAM_END</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>BZ_STREAM_END</name></expr></argument>, <argument><expr><literal type="string">"check stream end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>bz2Error</name><argument_list>(<argument><expr><name>BZ_SEQUENCE_ERROR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"bz2 error: [-1] sequence error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>bz2Error</name><argument_list>(<argument><expr><name>BZ_PARAM_ERROR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"bz2 error: [-2] parameter error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>bz2Error</name><argument_list>(<argument><expr><name>BZ_MEM_ERROR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>MemoryError</name></expr></argument>, <argument><expr><literal type="string">"bz2 error: [-3] memory error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>bz2Error</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"bz2 error: [-4] data error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>bz2Error</name><argument_list>(<argument><expr><name>BZ_DATA_ERROR_MAGIC</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"bz2 error: [-5] data error magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>bz2Error</name><argument_list>(<argument><expr><name>BZ_IO_ERROR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"bz2 error: [-6] io error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>bz2Error</name><argument_list>(<argument><expr><name>BZ_UNEXPECTED_EOF</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"bz2 error: [-7] unexpected eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>bz2Error</name><argument_list>(<argument><expr><name>BZ_OUTBUFF_FULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"bz2 error: [-8] outbuff full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>bz2Error</name><argument_list>(<argument><expr><name>BZ_CONFIG_ERROR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"bz2 error: [-9] config error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>bz2Error</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">999</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"bz2 error: [-999] unknown error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"bz2DecompressToLog() and bz2CompressToLog()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Bz2Compress</name> <modifier>*</modifier></type><name>compress</name> <init>= <expr><operator>(</operator><name>Bz2Compress</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><call><name>bz2CompressNew</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>compress</name><operator>-&gt;</operator><name>stream</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">999</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>bz2CompressToLog</name><argument_list>(<argument><expr><name>compress</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{inputSame: false, done: false, flushing: false, avail_in: 999}"</literal></expr></argument>, <argument><expr><literal type="string">"format object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Bz2Decompress</name> <modifier>*</modifier></type><name>decompress</name> <init>= <expr><operator>(</operator><name>Bz2Decompress</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><call><name>bz2DecompressNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>decompress</name><operator>-&gt;</operator><name>inputSame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>decompress</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>bz2DecompressToLog</name><argument_list>(<argument><expr><name>decompress</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{inputSame: true, done: true, avail_in: 0}"</literal></expr></argument>, <argument><expr><literal type="string">"format object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"lz4"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBLZ4</name></cpp:ifdef>
        <comment type="line">// Run standard test suite</comment>
        <expr_stmt><expr><call><name>testSuite</name><argument_list>(<argument><expr><name>compressTypeLz4</name></expr></argument>, <argument><expr><literal type="string">"lz4 -dc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"lz4Error()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>lz4Error</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>lz4Error</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"lz4 error: [-2] ERROR_maxBlockSize_invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"lz4DecompressToLog() and lz4CompressToLog()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Lz4Compress</name> <modifier>*</modifier></type><name>compress</name> <init>= <expr><operator>(</operator><name>Lz4Compress</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><call><name>lz4CompressNew</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>compress</name><operator>-&gt;</operator><name>inputSame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>compress</name><operator>-&gt;</operator><name>flushing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>lz4CompressToLog</name><argument_list>(<argument><expr><name>compress</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{level: 7, first: true, inputSame: true, flushing: true}"</literal></expr></argument>, <argument><expr><literal type="string">"format object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Lz4Decompress</name> <modifier>*</modifier></type><name>decompress</name> <init>= <expr><operator>(</operator><name>Lz4Decompress</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><call><name>lz4DecompressNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>decompress</name><operator>-&gt;</operator><name>inputSame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>decompress</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>decompress</name><operator>-&gt;</operator><name>inputOffset</name></name> <operator>=</operator> <literal type="number">999</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>lz4DecompressToLog</name><argument_list>(<argument><expr><name>decompress</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{inputSame: true, inputOffset: 999, frameDone false, done: true}"</literal></expr></argument>,
            <argument><expr><literal type="string">"format object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>compressTypePresent</name><argument_list>(<argument><expr><name>compressTypeLz4</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>, <argument><expr><literal type="string">"pgBackRest not compiled with lz4 support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_LIBLZ4</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"zst"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBZST</name></cpp:ifdef>
        <comment type="line">// Run standard test suite</comment>
        <expr_stmt><expr><call><name>testSuite</name><argument_list>(<argument><expr><name>compressTypeZst</name></expr></argument>, <argument><expr><literal type="string">"zstd -dc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"zstError()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>zstError</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>zstError</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"zst error: [-12] Version not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"zstDecompressToLog() and zstCompressToLog()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ZstCompress</name> <modifier>*</modifier></type><name>compress</name> <init>= <expr><operator>(</operator><name>ZstCompress</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><call><name>zstCompressNew</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>compress</name><operator>-&gt;</operator><name>inputSame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>compress</name><operator>-&gt;</operator><name>inputOffset</name></name> <operator>=</operator> <literal type="number">49</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>compress</name><operator>-&gt;</operator><name>flushing</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>zstCompressToLog</name><argument_list>(<argument><expr><name>compress</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{level: 14, inputSame: true, inputOffset: 49, flushing: true}"</literal></expr></argument>, <argument><expr><literal type="string">"format object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ZstDecompress</name> <modifier>*</modifier></type><name>decompress</name> <init>= <expr><operator>(</operator><name>ZstDecompress</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><call><name>zstDecompressNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>decompress</name><operator>-&gt;</operator><name>inputSame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>decompress</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>decompress</name><operator>-&gt;</operator><name>inputOffset</name></name> <operator>=</operator> <literal type="number">999</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>zstDecompressToLog</name><argument_list>(<argument><expr><name>decompress</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{inputSame: true, inputOffset: 999, frameDone false, done: true}"</literal></expr></argument>,
            <argument><expr><literal type="string">"format object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>compressTypePresent</name><argument_list>(<argument><expr><name>compressTypeZst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>, <argument><expr><literal type="string">"pgBackRest not compiled with zst support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HAVE_LIBZST</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Test everything in the helper that is not tested in the individual compression type tests</comment>
    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"helper"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"compressTypeEnum()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>compressTypeEnum</name><argument_list>(<argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="string">"none enum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>compressTypeEnum</name><argument_list>(<argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"gz"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compressTypeGz</name></expr></argument>, <argument><expr><literal type="string">"gz enum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>compressTypeEnum</name><argument_list>(<argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"invalid compression type 'BOGUS'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"compressTypeStr()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>compressTypeStr</name><argument_list>(<argument><expr><name>compressTypeGz</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"gz"</literal></expr></argument>, <argument><expr><literal type="string">"gz str"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"compressTypePresent()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>compressTypePresent</name><argument_list>(<argument><expr><name>compressTypeNone</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"type none always present"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>compressTypePresent</name><argument_list>(<argument><expr><name>compressTypeXz</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>, <argument><expr><literal type="string">"pgBackRest not compiled with xz support"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"compressTypeFromName()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>compressTypeFromName</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="string">"type from name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>compressTypeFromName</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.gz"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compressTypeGz</name></expr></argument>, <argument><expr><literal type="string">"type from name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"compressFilterPack()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>compressFilterPack</name><argument_list>(<argument><expr><call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>, <argument><expr><literal type="number">0x13a9de20</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"no filter match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"compressExtStr()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>compressExtStr</name><argument_list>(<argument><expr><name>compressTypeNone</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"one ext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>compressExtStr</name><argument_list>(<argument><expr><name>compressTypeGz</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">".gz"</literal></expr></argument>, <argument><expr><literal type="string">"gz ext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"compressExtCat()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>strCatZ</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>compressExtCat</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>compressTypeGz</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"cat gz ext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><literal type="string">"file.gz"</literal></expr></argument>, <argument><expr><literal type="string">"    check gz ext"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"compressExtStrip()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>compressExtStrip</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compressTypeGz</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"'file' must have '.gz' extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>compressExtStrip</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="string">"nothing to strip"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>compressExtStrip</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.gz"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>compressTypeGz</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="string">"strip gz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"compressLevelDefault()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>compressLevelDefault</name><argument_list>(<argument><expr><name>compressTypeNone</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"none level=0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>compressLevelDefault</name><argument_list>(<argument><expr><name>compressTypeGz</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"gz level=6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
