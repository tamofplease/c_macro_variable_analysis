<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/common/lockTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Lock Handler
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessFork.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessStorage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create default storage object for testing</comment>
    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"lockAcquireFile() and lockReleaseFile()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>archiveLock</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/main-archive"</literal> <name>LOCK_FILE_EXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lockFdTest</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>lockLocal</name><operator>.</operator><name>execId</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1-test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>lockFdTest</name></expr></argument>, <argument><expr><call><name>lockAcquireFile</name><argument_list>(<argument><expr><name>archiveLock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name>lockFdTest</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"lock succeeds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>archiveLock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"lock file was created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeArchive</name></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <name>lockFdTest</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeArchive</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>archiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lockWriteDataP</name><argument_list>(<argument><expr><name>lockTypeArchive</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write lock data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>lockLocal</name><operator>.</operator><name>execId</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2-test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>lockAcquireFile</name><argument_list>(<argument><expr><name>archiveLock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LockAcquireError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to acquire lock on file '%s': Resource temporarily unavailable\n"</literal>
            <literal type="string">"HINT: is another pgBackRest process running?"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>archiveLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>lockAcquireFile</name><argument_list>(<argument><expr><name>archiveLock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"lock is already held"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"acquire file lock on the same exec-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>lockLocal</name><operator>.</operator><name>execId</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1-test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>lockAcquireFile</name><argument_list>(<argument><expr><name>archiveLock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"allow lock with same exec id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"fail file lock on the same exec-id when lock file is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"echo '' &gt; %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>archiveLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>lockAcquireFile</name><argument_list>(<argument><expr><name>archiveLock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LockAcquireError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to acquire lock on file '%s': Resource temporarily unavailable\n"</literal>
            <literal type="string">"HINT: is another pgBackRest process running?"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>archiveLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lockReleaseFile</name><argument_list>(<argument><expr><name>lockFdTest</name></expr></argument>, <argument><expr><name>archiveLock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"release lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lockReleaseFile</name><argument_list>(<argument><expr><name>lockFdTest</name></expr></argument>, <argument><expr><name>archiveLock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"release lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>archiveLock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"lock file was removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lockReleaseFile</name><argument_list>(<argument><expr><name>lockFdTest</name></expr></argument>, <argument><expr><name>archiveLock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"release lock again without error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>subPathLock</name> <init>= <expr><call><name>strNewZ</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/sub1/sub2/db-backup"</literal> <name>LOCK_FILE_EXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>lockFdTest</name></expr></argument>, <argument><expr><call><name>lockAcquireFile</name><argument_list>(<argument><expr><name>subPathLock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get lock in subpath"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>subPathLock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"lock file was created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name>lockFdTest</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"lock succeeds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lockReleaseFile</name><argument_list>(<argument><expr><name>lockFdTest</name></expr></argument>, <argument><expr><name>subPathLock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"release lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>subPathLock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"lock file was removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>dirLock</name> <init>= <expr><call><name>strNewZ</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/dir"</literal> <name>LOCK_FILE_EXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"mkdir -p %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>dirLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>lockAcquireFile</name><argument_list>(<argument><expr><name>dirLock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LockAcquireError</name></expr></argument>, <argument><expr><literal type="string">"unable to acquire lock on file '%s': Is a directory"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>dirLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"permissions error throw regardless of failOnLock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>noPermLock</name> <init>= <expr><call><name>strNewZ</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/noperm/noperm"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"mkdir -p %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strPath</name><argument_list>(<argument><expr><name>noPermLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"chmod 000 %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strPath</name><argument_list>(<argument><expr><name>noPermLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>lockAcquireFile</name><argument_list>(<argument><expr><name>noPermLock</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LockAcquireError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to acquire lock on file '%s': Permission denied\n"</literal>
            <literal type="string">"HINT: does '"</literal> <name>TEST_USER</name> <literal type="string">":"</literal> <name>TEST_GROUP</name> <literal type="string">"' running pgBackRest have permissions on the '%s' file?"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>noPermLock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>noPermLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>lockAcquireFile</name><argument_list>(<argument><expr><name>noPermLock</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LockAcquireError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to acquire lock on file '%s': Permission denied\n"</literal>
            <literal type="string">"HINT: does '"</literal> <name>TEST_USER</name> <literal type="string">":"</literal> <name>TEST_GROUP</name> <literal type="string">"' running pgBackRest have permissions on the '%s' file?"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>noPermLock</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>noPermLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>backupLock</name> <init>= <expr><call><name>strNewZ</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/main-backup"</literal> <name>LOCK_FILE_EXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>TEST_RESULT_INT_NE</name><argument_list>(<argument><expr><call><name>lockAcquireFile</name><argument_list>(<argument><expr><name>backupLock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"lock on fork"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Notify parent that lock has been acquired</comment>
                <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_PUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Wait for parent to allow release lock</comment>
                <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_GET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Wait for child to acquire lock</comment>
                <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_GET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>lockLocal</name><operator>.</operator><name>execId</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2-test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
                    <argument><expr><call><name>lockAcquireFile</name><argument_list>(<argument><expr><name>backupLock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LockAcquireError</name></expr></argument>,
                    <argument><expr><literal type="string">"unable to acquire lock on file '%s': Resource temporarily unavailable\n"</literal>
                    <literal type="string">"HINT: is another pgBackRest process running?"</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lockAcquireFile</name><argument_list>(<argument><expr><name>backupLock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"success when failOnLock = false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Notify child to release lock</comment>
                <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_PUT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"lockAcquire(), lockRelease()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>stanza</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>archiveLockFile</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/%s-archive"</literal> <name>LOCK_FILE_EXT</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>backupLockFile</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/%s-backup"</literal> <name>LOCK_FILE_EXT</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>lockFdTest</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>lockRelease</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"no lock is held by this process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>lockRelease</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"release when there is no lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name><name>lockLocal</name><operator>.</operator><name>execId</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1-test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>lockFdTest</name></expr></argument>, <argument><expr><call><name>lockAcquireFile</name><argument_list>(<argument><expr><name>archiveLockFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"archive lock by file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>lockAcquire</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><name>stanza</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2-test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeArchive</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"archive already locked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>lockAcquire</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><name>stanza</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2-test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeArchive</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LockAcquireError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to acquire lock on file '%s': Resource temporarily unavailable\n"</literal>
            <literal type="string">"HINT: is another pgBackRest process running?"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>archiveLockFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>lockAcquire</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><name>stanza</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2-test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeAll</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LockAcquireError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to acquire lock on file '%s': Resource temporarily unavailable\n"</literal>
            <literal type="string">"HINT: is another pgBackRest process running?"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>archiveLockFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lockReleaseFile</name><argument_list>(<argument><expr><name>lockFdTest</name></expr></argument>, <argument><expr><name>archiveLockFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"release lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name><name>lockLocal</name><operator>.</operator><name>execId</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1-test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>lockAcquire</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><name>stanza</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1-test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeArchive</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"archive lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>archiveLockFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"archive lock file was created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>lockAcquire</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><name>stanza</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1-test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeArchive</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"lock is already held by this process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lockRelease</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"release archive lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// // -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name><name>lockLocal</name><operator>.</operator><name>execId</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2-test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>lockFdTest</name></expr></argument>, <argument><expr><call><name>lockAcquireFile</name><argument_list>(<argument><expr><name>backupLockFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup lock by file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>lockAcquire</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><name>stanza</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2-test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeBackup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LockAcquireError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to acquire lock on file '%s': Resource temporarily unavailable\n"</literal>
            <literal type="string">"HINT: is another pgBackRest process running?"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupLockFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>lockAcquire</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><name>stanza</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2-test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeAll</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LockAcquireError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to acquire lock on file '%s': Resource temporarily unavailable\n"</literal>
            <literal type="string">"HINT: is another pgBackRest process running?"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupLockFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lockReleaseFile</name><argument_list>(<argument><expr><name>lockFdTest</name></expr></argument>, <argument><expr><name>archiveLockFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"release archive lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lockReleaseFile</name><argument_list>(<argument><expr><name>lockFdTest</name></expr></argument>, <argument><expr><name>backupLockFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"release backup lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name><name>lockLocal</name><operator>.</operator><name>execId</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1-test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>lockAcquire</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><name>stanza</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1-test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeAll</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"all lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>archiveLockFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"archive lock file was created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>backupLockFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"backup lock file was created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Seek to start of file before read</comment>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_READ_SEEK</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
            <argument><expr><call><name>lockReadFileData</name><argument_list>(<argument><expr><name>backupLockFile</name></expr></argument>, <argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call><operator>.</operator><name>execId</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1-test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"verify execId"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lockWriteDataP</name><argument_list>(<argument><expr><name>lockTypeBackup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write lock data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_READ_SEEK</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(
            <argument><expr><call><name>lockReadFileData</name><argument_list>(<argument><expr><name>backupLockFile</name></expr></argument>, <argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call><operator>.</operator><name>percentComplete</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"verify percentComplete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lockWriteDataP</name><argument_list>(<argument><expr><name>lockTypeBackup</name></expr></argument>, <argument><expr><operator>.</operator><name>percentComplete</name> <operator>=</operator> <call><name>VARUINT</name><argument_list>(<argument><expr><literal type="number">5555</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write lock data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_READ_SEEK</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>varUInt</name><argument_list>(<argument><expr><call><name>lockReadFileData</name><argument_list>(<argument><expr><name>backupLockFile</name></expr></argument>, <argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call><operator>.</operator><name>percentComplete</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5555</literal></expr></argument>,
            <argument><expr><literal type="string">"verify percentComplete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lockWriteDataP</name><argument_list>(<argument><expr><name>lockTypeBackup</name></expr></argument>, <argument><expr><operator>.</operator><name>percentComplete</name> <operator>=</operator> <call><name>VARUINT</name><argument_list>(<argument><expr><literal type="number">8888</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write lock data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_READ_SEEK</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>varUInt</name><argument_list>(<argument><expr><call><name>lockReadFileData</name><argument_list>(<argument><expr><name>backupLockFile</name></expr></argument>, <argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>)</argument_list></call><operator>.</operator><name>percentComplete</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8888</literal></expr></argument>,
            <argument><expr><literal type="string">"verify percentComplete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>lockAcquire</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><name>stanza</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1-test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeAll</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"assertion 'failOnNoLock || lockType != lockTypeAll' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lockRelease</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"release all locks"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>archiveLockFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"archive lock file was removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>backupLockFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"backup lock file was removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"acquire lock on the same exec-id and release"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>lockAcquire</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><name>stanza</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1-test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeBackup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"backup lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make it look there is no lock</comment>
        <expr_stmt><expr><name>lockFdTest</name> <operator>=</operator> <name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>fd</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>lockFileTest</name> <init>= <expr><call><name>strDup</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>lockLocal</name><operator>.</operator><name>held</name></name> <operator>=</operator> <name>lockTypeNone</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>lockAcquire</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><name>stanza</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1-test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeBackup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"backup lock again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lockRelease</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"release backup lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Release lock manually</comment>
        <expr_stmt><expr><call><name>lockReleaseFile</name><argument_list>(<argument><expr><name>lockFdTest</name></expr></argument>, <argument><expr><name>lockFileTest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"lockRead*()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"missing lock file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>lockReadFileP</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/missing.lock"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>status</name></expr></argument>, <argument><expr><name>lockReadStatusMissing</name></expr></argument>, <argument><expr><literal type="string">"lock read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"unlocked file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"unlocked.lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>lockReadFileP</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/unlocked.lock"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>status</name></expr></argument>, <argument><expr><name>lockReadStatusUnlocked</name></expr></argument>, <argument><expr><literal type="string">"lock read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"unlocked.lock\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"execId &amp;&amp; pid valid file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>stanza</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1-test"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>lockLocal</name><operator>.</operator><name>execId</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1-test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>lockAcquire</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><name>stanza</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1-test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeBackup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"backup lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"backup lock file was created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Overwrite backup lock file with execId of 1-test and pid of 12345</comment>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_READ_SEEK</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ftruncate</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>write</name> <init>= <expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>ioCopyP</name><argument_list>(<argument><expr><call><name>ioBufferReadNewOpen</name><argument_list>(<argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"{\"execId\":\"1-test\",\"pid\":12345}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Seek to start of file before read</comment>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_READ_SEEK</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LockReadResult</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>lockReadFileP</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"lock read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>execId</name></name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1-test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"lock read execId 1-test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>processId</name></name></expr></argument>, <argument><expr><literal type="number">12345</literal></expr></argument>, <argument><expr><literal type="string">"lock read pid 12345"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lockRelease</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"release backup lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid locked file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
                    <argument><expr><call><name>lockAcquire</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeBackup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"acquire lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Overwrite lock file with bogus data</comment>
                <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(
                    <argument><expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_READ_SEEK</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>write</name> <init>= <expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name><name>lockLocal</name><operator>.</operator><name>file</name><index>[<expr><name>lockTypeBackup</name></expr>]</index></name><operator>.</operator><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>ioCopyP</name><argument_list>(<argument><expr><call><name>ioBufferReadNewOpen</name><argument_list>(<argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"BOGUS"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Notify parent that lock has been acquired</comment>
                <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_PUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Wait for parent to allow release lock</comment>
                <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_GET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Wait for child to acquire lock</comment>
                <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_GET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
                    <argument><expr><call><name>lockReadFileP</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/test-backup.lock"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>status</name></expr></argument>, <argument><expr><name>lockReadStatusInvalid</name></expr></argument>,
                    <argument><expr><literal type="string">"lock read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Notify child to release lock</comment>
                <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_PUT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"valid locked file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
                    <argument><expr><call><name>lockAcquire</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeBackup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"acquire lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Notify parent that lock has been acquired</comment>
                <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_PUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Wait for parent to allow release lock</comment>
                <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_GET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Wait for child to acquire lock</comment>
                <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_GET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>LockReadResult</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>lockRead</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeBackup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"lock read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>processId</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check processId"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>data</name><operator>.</operator><name>execId</name></name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>, <argument><expr><literal type="string">"check execId"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"test-backup.lock\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Notify child to release lock</comment>
                <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_PUT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
