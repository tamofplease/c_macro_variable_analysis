<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/common/stackTraceTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Stack Trace Handler
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"stackTraceFmt()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>stackTraceFmt</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"1234567"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"fill buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"1234567"</literal></expr></argument>, <argument><expr><literal type="string">"    check buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>stackTraceFmt</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"1234567"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"try to fill buffer - at end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"1234567"</literal></expr></argument>, <argument><expr><literal type="string">"    check buffer is unmodified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>stackTraceFmt</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"1234567"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"try to fill buffer - past end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"1234567"</literal></expr></argument>, <argument><expr><literal type="string">"    check buffer is unmodified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"stackTraceInit() and stackTraceError()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_BACKTRACE</name></cpp:ifdef>
        <expr_stmt><expr><call><name>stackTraceInit</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// This time does nothing</comment>
        <expr_stmt><expr><call><name>stackTraceInit</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// This will call the error routine since we passed a bogus exe</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>stackTracePush</name><argument_list>(<argument><expr><literal type="string">"file1.c"</literal></expr></argument>, <argument><expr><literal type="string">"function1"</literal></expr></argument>, <argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stackTracePop</name><argument_list>(<argument><expr><literal type="string">"file1.c"</literal></expr></argument>, <argument><expr><literal type="string">"function1"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>backTraceState</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"stackTraceTestStart(), stackTraceTestStop(), and stackTraceTest()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>stackTraceTest</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>stackTraceTestStop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>stackTraceTest</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>stackTraceTestStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>stackTraceTest</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stackTraceTestFileLineSet</name><argument_list>(<argument><expr><literal type="number">888</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fileLine</name> <operator>==</operator> <literal type="number">888</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name><operator>--</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"stackTracePush(), stackTracePop(), and stackTraceClean()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_BACKTRACE</name></cpp:ifdef>
        <expr_stmt><expr><call><name>stackTraceInit</name><argument_list>(<argument><expr><call><name>testExe</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"check size of StackTraceData"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StackTraceData</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">48</literal></expr> </then><else>: <expr><literal type="number">32</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>stackTracePop</name><argument_list>(<argument><expr><literal type="string">"file1"</literal></expr></argument>, <argument><expr><literal type="string">"function1"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"assertion 'stackTraceLocal.stackSize &gt; 0' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>stackTracePush</name><argument_list>(<argument><expr><literal type="string">"file1"</literal></expr></argument>, <argument><expr><literal type="string">"function1"</literal></expr></argument>, <argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>stackTracePop</name><argument_list>(<argument><expr><literal type="string">"file2"</literal></expr></argument>, <argument><expr><literal type="string">"function2"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"popping file2:function2 but expected file1:function1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>stackTracePush</name><argument_list>(<argument><expr><literal type="string">"file1"</literal></expr></argument>, <argument><expr><literal type="string">"function1"</literal></expr></argument>, <argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>stackTracePop</name><argument_list>(<argument><expr><literal type="string">"file1"</literal></expr></argument>, <argument><expr><literal type="string">"function2"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"popping file1:function2 but expected file1:function1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>stackTracePush</name><argument_list>(<argument><expr><literal type="string">"file1.c"</literal></expr></argument>, <argument><expr><literal type="string">"function1"</literal></expr></argument>, <argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>stackTraceParamLog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>stackTraceParam</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"void"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>stackTraceToZ</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"file1.c"</literal></expr></argument>, <argument><expr><literal type="string">"function2"</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(
                <argument><expr><name>buffer</name></expr></argument>,
                <argument><expr><literal type="string">"file1.c:function2:99:(test build required for parameters)\n"</literal>
                <literal type="string">"    ... function(s) omitted ...\n"</literal>
                <literal type="string">"file1.c:function1:(void)"</literal></expr></argument>,
                <argument><expr><literal type="string">"    check stack trace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>stackTracePush</name><argument_list>(<argument><expr><literal type="string">"file1.c"</literal></expr></argument>, <argument><expr><literal type="string">"function2"</literal></expr></argument>, <argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>fileLine</name> <operator>=</operator> <literal type="number">7777</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>stackTraceParam</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"trace log level required for parameters"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>functionLogLevel</name> <operator>=</operator> <name>logLevelDebug</name></expr>;</expr_stmt>

            <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Function with one param</comment>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>stackTracePush</name><argument_list>(<argument><expr><literal type="string">"file2.c"</literal></expr></argument>, <argument><expr><literal type="string">"function2"</literal></expr></argument>, <argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>fileLine</name> <operator>=</operator> <literal type="number">7777</literal></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>stackTraceParamAdd</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><call><name>stackTraceParamBuffer</name><argument_list>(<argument><expr><literal type="string">"param1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STACK_TRACE_PARAM_MAX</name></expr></argument>, <argument><expr><literal type="string">"value1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>stackTraceParamLog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>stackTraceParam</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"param1: value1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Function with multiple params</comment>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>stackTracePush</name><argument_list>(<argument><expr><literal type="string">"file3.c"</literal></expr></argument>, <argument><expr><literal type="string">"function3"</literal></expr></argument>, <argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>fileLine</name> <operator>=</operator> <literal type="number">7777</literal></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>stackTraceParamLog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>stackTraceParamAdd</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><call><name>stackTraceParamBuffer</name><argument_list>(<argument><expr><literal type="string">"param1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STACK_TRACE_PARAM_MAX</name></expr></argument>, <argument><expr><literal type="string">"value1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>stackTraceParamAdd</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><call><name>stackTraceParamBuffer</name><argument_list>(<argument><expr><literal type="string">"param2"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STACK_TRACE_PARAM_MAX</name></expr></argument>, <argument><expr><literal type="string">"value2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>stackTraceParam</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"param1: value1, param2: value2"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Calculate exactly where the buffer will overflow (4 is for the separators)</comment>
                <decl_stmt><decl><type><name>size_t</name></type> <name>bufferOverflow</name> <init>=
                    <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>functionParamBuffer</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><name>STACK_TRACE_PARAM_MAX</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"param1"</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal> <operator>-</operator>
                    <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>param</name> <operator>-</operator> <name><name>stackTraceLocal</name><operator>.</operator><name>functionParamBuffer</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

                <comment type="line">// Munge the previous previous param in the stack so that the next one will just barely fit</comment>
                <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>paramSize</name> <operator>=</operator> <name>bufferOverflow</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>stackTracePush</name><argument_list>(<argument><expr><literal type="string">"file4.c"</literal></expr></argument>, <argument><expr><literal type="string">"function4"</literal></expr></argument>, <argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>fileLine</name> <operator>=</operator> <literal type="number">7777</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>stackTraceParamLog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// This param will fit exactly</comment>
                <expr_stmt><expr><call><name>stackTraceParamAdd</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><call><name>stackTraceParamBuffer</name><argument_list>(<argument><expr><literal type="string">"param1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STACK_TRACE_PARAM_MAX</name></expr></argument>, <argument><expr><literal type="string">"value1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>stackTraceParam</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"param1: value1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// But when we increment the param pointer by one there will be overflow</comment>
                <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>param</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stack</name><index>[<expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>paramSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>stackTraceParamAdd</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>snprintf</name><argument_list>(<argument><expr><call><name>stackTraceParamBuffer</name><argument_list>(<argument><expr><literal type="string">"param1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STACK_TRACE_PARAM_MAX</name></expr></argument>, <argument><expr><literal type="string">"value1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>stackTraceParam</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"buffer full - parameters not available"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>stackTraceToZ</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"file4.c"</literal></expr></argument>, <argument><expr><literal type="string">"function4"</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(
                    <argument><expr><name>buffer</name></expr></argument>,
                    <argument><expr><literal type="string">"file4.c:function4:99:(buffer full - parameters not available)\n"</literal>
                    <literal type="string">"file3.c:function3:7777:(param1: value1, param2: value2)\n"</literal>
                    <literal type="string">"file2.c:function2:7777:(param1: value1)\n"</literal>
                    <literal type="string">"file1.c:function2:7777:(debug log level required for parameters)\n"</literal>
                    <literal type="string">"file1.c:function1:7777:(void)"</literal></expr></argument>,
                    <argument><expr><literal type="string">"stack trace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>stackTracePop</name><argument_list>(<argument><expr><literal type="string">"file4.c"</literal></expr></argument>, <argument><expr><literal type="string">"function4"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Check that stackTracePop() works with test tracing</comment>
                <expr_stmt><expr><call><name>stackTracePush</name><argument_list>(<argument><expr><literal type="string">"file_test.c"</literal></expr></argument>, <argument><expr><literal type="string">"function_test"</literal></expr></argument>, <argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>stackTracePop</name><argument_list>(<argument><expr><literal type="string">"file_test.c"</literal></expr></argument>, <argument><expr><literal type="string">"function_test"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Check that stackTracePop() does nothing when test tracing is disabled</comment>
                <expr_stmt><expr><call><name>stackTraceTestStop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>stackTracePop</name><argument_list>(<argument><expr><literal type="string">"bogus.c"</literal></expr></argument>, <argument><expr><literal type="string">"bogus"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>stackTraceTestStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>ConfigError</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <macro><name>CATCH</name><argument_list>(<argument>ConfigError</argument>)</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Ignore the error since we are just testing stack cleanup</comment>
            </block_content>}</block>
            <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>ConfigError</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH</name><argument_list>(<argument>ConfigError</argument>)</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Ignore the error since we are just testing stack cleanup</comment>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>stackTraceLocal</name><operator>.</operator><name>stackSize</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
