<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/common/logTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Log Handler
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;common/regExp.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Open a log file
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>testLogOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logFile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>FUNCTION_HARNESS_ASSERT</name><argument_list>(<argument><expr><name>logFile</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(<argument><expr><name>result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to open log file '%s'"</literal></expr></argument>, <argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Load log result from file into a buffer
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testLogLoad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logFile</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bufferSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM_P</name><argument_list>(<argument><expr><name>CHARDATA</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>bufferSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>FUNCTION_HARNESS_ASSERT</name><argument_list>(<argument><expr><name>logFile</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_ASSERT</name><argument_list>(<argument><expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>testLogOpen</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>totalBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>actualBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <do>do
    <block>{<block_content>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(
            <argument><expr><operator>(</operator><name>actualBytes</name> <operator>=</operator> <call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferSize</name> <operator>-</operator> <name>totalBytes</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to read log file '%s'"</literal></expr></argument>,
            <argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>totalBytes</name> <operator>+=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>actualBytes</name></expr>;</expr_stmt>
    </block_content>}</block>
    while <condition>(<expr><name>actualBytes</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>

    <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(<argument><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to close log file '%s'"</literal></expr></argument>, <argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Remove final linefeed</comment>
    <expr_stmt><expr><name><name>buffer</name><index>[<expr><name>totalBytes</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Compare log to a static string
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testLogResult</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>logFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>expected</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>logFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>FUNCTION_HARNESS_ASSERT</name><argument_list>(<argument><expr><name>logFile</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_ASSERT</name><argument_list>(<argument><expr><name>expected</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>actual</name><index>[<expr><literal type="number">32768</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>testLogLoad</name><argument_list>(<argument><expr><name>logFile</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>actual</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>actual</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>                                                          <comment type="line">// {uncoverable_branch}</comment>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(                                                                              <comment type="line">// {+uncovered}</comment>
            <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"\n\nexpected log:\n\n%s\n\nbut actual log was:\n\n%s\n\n"</literal></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"logLevelEnum() and logLevelStr()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>logLevelEnum</name><argument_list>(<argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"invalid log level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>logLevelEnum</name><argument_list>(<argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><literal type="string">"log level 'OFF' found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>logLevelEnum</name><argument_list>(<argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>logLevelInfo</name></expr></argument>, <argument><expr><literal type="string">"log level 'info' found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>logLevelEnum</name><argument_list>(<argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"trace"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>logLevelTrace</name></expr></argument>, <argument><expr><literal type="string">"log level 'TRACE' found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>logLevelStr</name><argument_list>(<argument><expr><literal type="number">999</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"assertion 'logLevel &lt;= LOG_LEVEL_MAX' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>logLevelStr</name><argument_list>(<argument><expr><name>logLevelOff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"OFF"</literal></expr></argument>, <argument><expr><literal type="string">"log level 'OFF' found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>logLevelStr</name><argument_list>(<argument><expr><name>logLevelInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"INFO"</literal></expr></argument>, <argument><expr><literal type="string">"log level 'INFO' found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>logLevelStr</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TRACE"</literal></expr></argument>, <argument><expr><literal type="string">"log level 'TRACE' found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"logInit()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>logLevelStdOut</name></expr></argument>, <argument><expr><name>logLevelError</name></expr></argument>, <argument><expr><literal type="string">"console logging is error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>logLevelStdErr</name></expr></argument>, <argument><expr><name>logLevelError</name></expr></argument>, <argument><expr><literal type="string">"stderr logging is error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>logLevelFile</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><literal type="string">"file logging is off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>logInit</name><argument_list>(<argument><expr><name>logLevelInfo</name></expr></argument>, <argument><expr><name>logLevelWarn</name></expr></argument>, <argument><expr><name>logLevelError</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"init logging"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>logLevelStdOut</name></expr></argument>, <argument><expr><name>logLevelInfo</name></expr></argument>, <argument><expr><literal type="string">"console logging is info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>logLevelStdErr</name></expr></argument>, <argument><expr><name>logLevelWarn</name></expr></argument>, <argument><expr><literal type="string">"stderr logging is warn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>logLevelFile</name></expr></argument>, <argument><expr><name>logLevelError</name></expr></argument>, <argument><expr><literal type="string">"file logging is error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>logProcessSize</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"process field size is 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name>logDryRun</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"dry run is true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>logInit</name><argument_list>(<argument><expr><name>logLevelInfo</name></expr></argument>, <argument><expr><name>logLevelWarn</name></expr></argument>, <argument><expr><name>logLevelError</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"init logging"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>logProcessSize</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"process field size is 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name>logDryRun</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"dry run is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"logAny*()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>logLevelStdOut</name> <operator>=</operator> <name>logLevelOff</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>logLevelStdErr</name> <operator>=</operator> <name>logLevelOff</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>logLevelFile</name> <operator>=</operator> <name>logLevelOff</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>logFdFile</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>logAnySet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set log any"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>logAny</name><argument_list>(<argument><expr><name>logLevelError</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"will not log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>logLevelStdErr</name> <operator>=</operator> <name>logLevelError</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>logAnySet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set log any"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>logAny</name><argument_list>(<argument><expr><name>logLevelError</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"will log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>logLevelFile</name> <operator>=</operator> <name>logLevelWarn</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>logAnySet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set log any"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>logAny</name><argument_list>(<argument><expr><name>logLevelWarn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"will not log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>logFdFile</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>logAnySet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set log any"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>logAny</name><argument_list>(<argument><expr><name>logLevelWarn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"will log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>logFdFile</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"logWrite()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Just test the error here -- success is well tested elsewhere</comment>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>logWrite</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">999</literal></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"invalid file descriptor"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileWriteError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to write invalid file descriptor: [9] Bad file descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"logInternal() and logInternalFmt()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>logInit</name><argument_list>(<argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"init logging to off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>logInternal</name><argument_list>(<argument><expr><name>logLevelWarn</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MIN</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="string">"function"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"format"</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"message not logged anywhere"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>logInit</name><argument_list>(<argument><expr><name>logLevelWarn</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"init logging to warn (timestamp on)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>logFileSet</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ignore bogus filename because file logging is off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>logInternal</name><argument_list>(<argument><expr><name>logLevelWarn</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MIN</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="string">"function"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"TEST"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"log timestamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>logTime</name> <init>= <expr><call><name>strNewZN</name><argument_list>(<argument><expr><name>logBuffer</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>regExpMatchOne</name><argument_list>(
                <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"^20[0-9]{2}\\-[0-1][0-9]\\-[0-3][0-9] [0-2][0-9]\\:[0-5][0-9]\\:[0-5][0-9]\\.[0-9]{3}$"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>logTime</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check timestamp format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Redirect output to files</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>stdoutFile</name> <init>= <expr><name>TEST_PATH</name> <literal type="string">"/stdout.log"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>logFdStdOut</name> <operator>=</operator> <call><name>testLogOpen</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0640</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>stderrFile</name> <init>= <expr><name>TEST_PATH</name> <literal type="string">"/stderr.log"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>logFdStdErr</name> <operator>=</operator> <call><name>testLogOpen</name><argument_list>(<argument><expr><name>stderrFile</name></expr></argument>, <argument><expr><name>O_WRONLY</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_TRUNC</name></expr></argument>, <argument><expr><literal type="number">0640</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>logInit</name><argument_list>(<argument><expr><name>logLevelWarn</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"init logging to warn (timestamp off)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>logBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>logInternalFmt</name><argument_list>(<argument><expr><name>logLevelWarn</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MIN</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MAX</name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="string">"function"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"format %d"</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"log warn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>logBuffer</name></expr></argument>, <argument><expr><literal type="string">"P44   WARN: format 99\n"</literal></expr></argument>, <argument><expr><literal type="string">"    check log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// This won't be logged due to the range</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>logInternal</name><argument_list>(<argument><expr><name>logLevelWarn</name></expr></argument>, <argument><expr><name>logLevelError</name></expr></argument>, <argument><expr><name>logLevelError</name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="string">"function"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"NOT OUTPUT"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>logBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>logInternal</name><argument_list>(<argument><expr><name>logLevelError</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MIN</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MAX</name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="string">"function"</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"log error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>logBuffer</name></expr></argument>, <argument><expr><literal type="string">"P44  ERROR: [026]: message\n"</literal></expr></argument>, <argument><expr><literal type="string">"    check log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>logBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>logInternal</name><argument_list>(<argument><expr><name>logLevelError</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MIN</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MAX</name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="string">"function"</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><literal type="string">"message1\nmessage2"</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"log error with multiple lines"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>logBuffer</name></expr></argument>, <argument><expr><literal type="string">"P44  ERROR: [026]: message1\nmessage2\n"</literal></expr></argument>, <argument><expr><literal type="string">"    check log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>logInit</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>, <argument><expr><name>logLevelDebug</name></expr></argument>, <argument><expr><name>logLevelDebug</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">999</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"init logging to debug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Log to file</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fileFile</name> <init>= <expr><name>TEST_PATH</name> <literal type="string">"/file.log"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>logFileSet</name><argument_list>(<argument><expr><name>fileFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>logBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>logInternal</name><argument_list>(
                <argument><expr><name>logLevelDebug</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MIN</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MAX</name></expr></argument>, <argument><expr><literal type="number">999</literal></expr></argument>, <argument><expr><literal type="string">"test.c"</literal></expr></argument>, <argument><expr><literal type="string">"test_func"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"message\nmessage2"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"log debug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>logBuffer</name></expr></argument>, <argument><expr><literal type="string">"P999  DEBUG:     test::test_func: message\nmessage2\n"</literal></expr></argument>, <argument><expr><literal type="string">"    check log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// This won't be logged due to the range</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>logInternal</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>, <argument><expr><name>logLevelTrace</name></expr></argument>, <argument><expr><name>logLevelTrace</name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>, <argument><expr><literal type="string">"test.c"</literal></expr></argument>, <argument><expr><literal type="string">"test_func"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"NOT OUTPUT"</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>logBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>logInternal</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MIN</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MAX</name></expr></argument>, <argument><expr><name>UINT_MAX</name></expr></argument>, <argument><expr><literal type="string">"test.c"</literal></expr></argument>, <argument><expr><literal type="string">"test_func"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"log debug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>logBuffer</name></expr></argument>, <argument><expr><literal type="string">"P000  TRACE:         test::test_func: message\n"</literal></expr></argument>, <argument><expr><literal type="string">"    check log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Reopen the log file</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>logInit</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>, <argument><expr><name>logLevelDebug</name></expr></argument>, <argument><expr><name>logLevelDebug</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"reduce process-id size and dry-run"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>logFileSet</name><argument_list>(<argument><expr><name>fileFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"open valid file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>logBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>logInternal</name><argument_list>(<argument><expr><name>logLevelInfo</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MIN</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"test.c"</literal></expr></argument>, <argument><expr><literal type="string">"test_func"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"info message"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"log info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>logBuffer</name></expr></argument>, <argument><expr><literal type="string">"P01   INFO: [DRY-RUN] info message\n"</literal></expr></argument>, <argument><expr><literal type="string">"    check log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>logInternal</name><argument_list>(<argument><expr><name>logLevelInfo</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MIN</name></expr></argument>, <argument><expr><name>LOG_LEVEL_MAX</name></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="string">"test.c"</literal></expr></argument>, <argument><expr><literal type="string">"test_func"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"info message 2"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"log info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>logBuffer</name></expr></argument>, <argument><expr><literal type="string">"P99   INFO: [DRY-RUN] info message 2\n"</literal></expr></argument>, <argument><expr><literal type="string">"    check log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Reopen invalid log file</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>logFileSet</name><argument_list>(<argument><expr><literal type="string">"/"</literal> <name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"attempt to open bogus file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>logFdFile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"log file is closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Get the error message from above to use for the expect log test</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>testFdFile</name> <init>= <expr><call><name>open</name><argument_list>(<argument><expr><literal type="string">"/"</literal> <name>BOGUS_STR</name></expr></argument>, <argument><expr><name>O_CREAT</name> <operator>|</operator> <name>O_APPEND</name></expr></argument>, <argument><expr><literal type="number">0640</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>testErrorFile</name> <init>= <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>testFdFile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"got error message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Close logging again</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>logInit</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>, <argument><expr><name>logLevelDebug</name></expr></argument>, <argument><expr><name>logLevelDebug</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"reduce log size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>logFileSet</name><argument_list>(<argument><expr><name>fileFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"open valid file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name>logFdFile</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"log file is open"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>logClose</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>logLevelStdOut</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><literal type="string">"console logging is off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>logLevelStdErr</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><literal type="string">"stderr logging is off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>logLevelFile</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><literal type="string">"file logging is off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name>logFdFile</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"log file is closed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check stdout</comment>
        <expr_stmt><expr><call><name>testLogResult</name><argument_list>(
            <argument><expr><name>stdoutFile</name></expr></argument>,
            <argument><expr><literal type="string">"P44   WARN: format 99\n"</literal>
            <literal type="string">"P44  ERROR: [026]: message\n"</literal>
            <literal type="string">"P44  ERROR: [026]: message1\n"</literal>
            <literal type="string">"            message2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check stderr</comment>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>sprintf</name><argument_list>(
            <argument><expr><name>buffer</name></expr></argument>,
            <argument><expr><literal type="string">"DEBUG:     test::test_func: message\n"</literal>
            <literal type="string">"           message2\n"</literal>
            <literal type="string">"INFO: [DRY-RUN] info message\n"</literal>
            <literal type="string">"INFO: [DRY-RUN] info message 2\n"</literal>
            <literal type="string">"WARN: [DRY-RUN] unable to open log file '/BOGUS': %s\n"</literal>
            <literal type="string">"      NOTE: process will continue without log file."</literal></expr></argument>,
            <argument><expr><name>testErrorFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testLogResult</name><argument_list>(<argument><expr><name>stderrFile</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check file</comment>
        <expr_stmt><expr><call><name>testLogResult</name><argument_list>(
            <argument><expr><name>fileFile</name></expr></argument>,
            <argument><expr><literal type="string">"-------------------PROCESS START-------------------\n"</literal>
            <literal type="string">"P999  DEBUG:     test::test_func: message\n"</literal>
            <literal type="string">"                 message2\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"-------------------PROCESS START-------------------\n"</literal>
            <literal type="string">"P01   INFO: [DRY-RUN] info message\n"</literal>
            <literal type="string">"P99   INFO: [DRY-RUN] info message 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
