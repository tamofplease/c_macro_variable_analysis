<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/common/execTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Execute Process
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessFork.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"Exec"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Exec</name> <modifier>*</modifier></type><name>exec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>exec</name></expr></argument>, <argument><expr><call><name>execNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"catt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"cat"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"invalid exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>execOpen</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open invalid exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteStrLine</name><argument_list>(<argument><expr><call><name>execIoWrite</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>EMPTY_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write invalid exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>execIoWrite</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ExecuteError</name></expr></argument>,
            <argument><expr><literal type="string">"cat terminated unexpectedly [102]: unable to execute 'catt': [2] No such file or directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>execFree</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>exec</name></expr></argument>, <argument><expr><call><name>execNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"cat"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"cat"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new cat exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>execMemContext</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get mem context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>execFdRead</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>exec</name><operator>-&gt;</operator><name>fdRead</name></name></expr></argument>, <argument><expr><literal type="string">"check read file descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>execOpen</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open cat exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"ACKBYACK"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteStrLine</name><argument_list>(<argument><expr><call><name>execIoWrite</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write cat exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>execIoWrite</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>ioReadLine</name><argument_list>(<argument><expr><call><name>execIoRead</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="string">"read cat exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>execFree</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>exec</name></expr></argument>, <argument><expr><call><name>execNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"cat"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"cat"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new cat exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>execOpen</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open cat exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>exec</name><operator>-&gt;</operator><name>fdWrite</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>ioReadLine</name><argument_list>(<argument><expr><call><name>execIoRead</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>UnknownError</name></expr></argument>, <argument><expr><literal type="string">"cat terminated unexpectedly [0]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>execFree</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>exec</name></expr></argument>, <argument><expr><call><name>execNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"cat"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"cat"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new cat exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>execOpen</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open cat exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><name><name>exec</name><operator>-&gt;</operator><name>processId</name></name></expr></argument>, <argument><expr><name>SIGKILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>ioReadLine</name><argument_list>(<argument><expr><call><name>execIoRead</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ExecuteError</name></expr></argument>, <argument><expr><literal type="string">"cat terminated unexpectedly on signal 9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>execFree</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>option</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"-b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>exec</name></expr></argument>, <argument><expr><call><name>execNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"cat"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"cat"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new cat exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>execOpen</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open cat exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteStrLine</name><argument_list>(<argument><expr><call><name>execIoWrite</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write cat exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>execIoWrite</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>ioReadLine</name><argument_list>(<argument><expr><call><name>execIoRead</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"     1\tACKBYACK"</literal></expr></argument>, <argument><expr><literal type="string">"read cat exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>execFree</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Run the same test as above but close all file descriptors first to ensure we don't accidentally close a required</comment>
        <comment type="line">// descriptor while running dup2()/close() between the fork() and the exec().</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// This is not really fd max but for the purposes of testing is fine -- we won't have more than 64 fds open</comment>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fd</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>fd</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>option</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"-b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>exec</name></expr></argument>, <argument><expr><call><name>execNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"cat"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>option</name></expr></argument> , <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"cat"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new cat exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>execOpen</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open cat exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteStrLine</name><argument_list>(<argument><expr><call><name>execIoWrite</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write cat exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>execIoWrite</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>ioReadLine</name><argument_list>(<argument><expr><call><name>execIoRead</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"     1\tACKBYACK"</literal></expr></argument>, <argument><expr><literal type="string">"read cat exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>execFree</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>option</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>option</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>exec</name></expr></argument>, <argument><expr><call><name>execNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"sleep"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"sleep"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new sleep exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>execOpen</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open cat exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>execFreeResource</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ExecuteError</name></expr></argument>, <argument><expr><literal type="string">"sleep did not exit when expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>ioReadLine</name><argument_list>(<argument><expr><call><name>execIoRead</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileReadError</name></expr></argument>, <argument><expr><literal type="string">"unable to read from sleep read: [9] Bad file descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWriteStrLine</name><argument_list>(<argument><expr><call><name>execIoWrite</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>execIoWrite</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileWriteError</name></expr></argument>, <argument><expr><literal type="string">"unable to write to sleep write: [9] Bad file descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>sleepMSec</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>execFree</name><argument_list>(<argument><expr><name>exec</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sleep exited as expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
