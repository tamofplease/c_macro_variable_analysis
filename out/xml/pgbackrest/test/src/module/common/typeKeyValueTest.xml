<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/common/typeKeyValueTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Key Value Data Type
***********************************************************************************************************************************/</comment>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"kvNew() and kvFree()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>KeyValue</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>kvNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new store"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR_NE</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"list set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><name><name>store</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"list empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>kvFree</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free kv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"kvPut(), kvAdd(), kvKeyExists(), kvKeyList(), kvGet(), kvGetDefault(), kvGetList(), kvDup(), and kvRemove()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>KeyValue</name> <modifier>*</modifier></type><name>store</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>kvNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new store"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>kvMove</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"move null to old context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>kvMove</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="string">"move kv to old context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set various data types</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>kvPut</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"str-key"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"str-value"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="string">"put string/string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>kvPut</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">57</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="string">"put int/int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>kvPut</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"str-key-int"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="string">"put string/int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>kvPut</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">78</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="string">"put int/null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Get the types and make sure they have the correct value</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"str-key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"str-value"</literal></expr></argument>, <argument><expr><literal type="string">"get string/string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>varInt</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">57</literal></expr></argument>, <argument><expr><literal type="string">"get int/int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>varInt</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><call><name>kvGetList</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">42</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">57</literal></expr></argument>, <argument><expr><literal type="string">"get int/int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>varInt</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"str-key-int"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="string">"get string/int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">78</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"get int/null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>kvGetDefault</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">78</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">999</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"get int/null (default ignored)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">777</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"get missing key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>varInt</name><argument_list>(<argument><expr><call><name>kvGetDefault</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">777</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">888</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">888</literal></expr></argument>, <argument><expr><literal type="string">"get missing key with default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check key exists</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>kvKeyExists</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"str-key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"key exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>kvKeyExists</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"key does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check that a null value can be changed to non-null</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>kvPut</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">78</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">66</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="string">"update int/null to int/int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>varInt</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">78</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">66</literal></expr></argument>, <argument><expr><literal type="string">"get int/int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check that a value can be changed</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>kvPut</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">78</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varNewBool</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="string">"update int/int to int/bool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>varBool</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">78</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"get int/bool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Use add to create variant list</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>kvAdd</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="string">"add int/null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>kvAdd</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="string">"add int/int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>kvAdd</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="string">"add int/int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>kvAdd</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="string">"add int/int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>varInt</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><call><name>varVarLst</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"get int/int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>varInt</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><call><name>varVarLst</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"get int/int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>varInt</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><call><name>varVarLst</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"get int/int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>varInt</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><call><name>kvGetList</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"get int/int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><call><name>kvGetList</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">777</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"get NULL list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check item in key list</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>varInt</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><call><name>kvKeyList</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">42</literal></expr></argument>, <argument><expr><literal type="string">"key list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create a new kv and add it to this kv</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>KeyValue</name> <modifier>*</modifier></type><name>storeSub</name> <init>= <expr><call><name>kvPutKv</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"kv-key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>kvPut</name><argument_list>(<argument><expr><name>storeSub</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"str-sub-key"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"str-sub-value"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><call><name>varKv</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"kv-key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"str-sub-key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"str-sub-value"</literal></expr></argument>, <argument><expr><literal type="string">"get string/kv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Duplicate the kv</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>KeyValue</name> <modifier>*</modifier></type><name>storeDup</name> <init>= <expr><call><name>kvDup</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>varBool</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">78</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"get int/bool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>varInt</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><call><name>varVarLst</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><call><name>varNewInt</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"get int/int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><call><name>varKv</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>storeDup</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"kv-key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"str-sub-key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"str-sub-value"</literal></expr></argument>, <argument><expr><literal type="string">"get string/kv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove a kv</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"str-key-to-remove"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>kvPut</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"str-value"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"str-value"</literal></expr></argument>, <argument><expr><literal type="string">"get string/kv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>kvRemove</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="string">"remove string/kv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>kvKeyExists</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"key does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>kvRemove</name><argument_list>(<argument><expr><name>store</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>store</name></expr></argument>, <argument><expr><literal type="string">"don't fail to remove key that doesn't exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>kvFree</name><argument_list>(<argument><expr><name>storeDup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free dup store"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>kvFree</name><argument_list>(<argument><expr><name>store</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free store"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
