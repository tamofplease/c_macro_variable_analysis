<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/common/typeObjectTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Object Helper Macros
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/macro.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
TestObject Types
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>TestObject</name>
<block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>data</name></decl>;</decl_stmt>                                                      <comment type="line">// Test data</comment>
}</block></struct></type> <name>TestObject</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TestObjectContext</name>
<block>{
    <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name></decl>;</decl_stmt>                                         <comment type="line">// Mem context</comment>
}</block></struct></type> <name>TestObjectContext</name>;</typedef>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Standard object methods
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>TestObject</name> <modifier>*</modifier></type>
<name>testObjectMove</name><parameter_list>(<parameter><decl><type><name>TestObject</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>parentNew</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>objMove</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>parentNew</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>testObjectFree</name><parameter_list>(<parameter><decl><type><name>TestObject</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>objFree</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>TestObjectContext</name> <modifier>*</modifier></type>
<name>testObjectContextMove</name><parameter_list>(<parameter><decl><type><name>TestObjectContext</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>parentNew</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>objMoveContext</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>parentNew</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>testObjectContextFree</name><parameter_list>(<parameter><decl><type><name>TestObjectContext</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>objFreeContext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>TestObject</name> <modifier>*</modifier></type>
<name>testObjectNew</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TestObject</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>TestObject</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>(</operator><name>TestObject</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>data</name> <operator>=</operator> <name>true</name></expr>,
        }</block></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>this</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>TestObjectContext</name> <modifier>*</modifier></type>
<name>testObjectContextNew</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>TestObjectContext</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>TestObjectContext</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>(</operator><name>TestObjectContext</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>memContext</name> <operator>=</operator> <call><name>MEM_CONTEXT_NEW</name><argument_list>()</argument_list></call></expr>,
        }</block></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>this</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"OBJECT_DEFINE*()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"Object with mem context and allocation together"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TestObject</name> <modifier>*</modifier></type><name>testObject</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>testObject</name></expr></argument>, <argument><expr><call><name>testObjectNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new test object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testObjectMove</name><argument_list>(<argument><expr><name>testObject</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move object to parent context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testObjectMove</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move null object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>testObject</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>memContextFromAllocExtra</name><argument_list>(<argument><expr><name>testObject</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"mem context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testObjectFree</name><argument_list>(<argument><expr><name>testObject</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testObjectFree</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free null object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"Object with mem context as first member of struct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TestObjectContext</name> <modifier>*</modifier></type><name>testObjectContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>testObjectContext</name></expr></argument>, <argument><expr><call><name>testObjectContextNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new test object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testObjectContextMove</name><argument_list>(<argument><expr><name>testObjectContext</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move object to parent context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testObjectContextMove</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move null object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testObjectContextFree</name><argument_list>(<argument><expr><name>testObjectContext</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testObjectContextFree</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free null object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
