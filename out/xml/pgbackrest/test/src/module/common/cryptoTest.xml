<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/common/cryptoTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Block Cipher
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/filter/filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/json.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Data for testing
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_CIPHER</name></cpp:macro>                                                 <cpp:value>"aes-256-cbc"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PASS</name></cpp:macro>                                                   <cpp:value>"areallybadpassphrase"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PLAINTEXT</name></cpp:macro>                                              <cpp:value>"plaintext"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BUFFER_SIZE</name></cpp:macro>                                            <cpp:value>256</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>testPass</name> <init>= <expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><name>TEST_PASS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>testPlainText</name> <init>= <expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><name>TEST_PLAINTEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"Common"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cryptoIsInit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"crypto is not initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cryptoInit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"initialize crypto"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cryptoIsInit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"crypto is initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cryptoInit</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"initialize crypto again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>cryptoInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cryptoError</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"no error here"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"no error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><call><name>EVP_MD_CTX_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cryptoError</name><argument_list>(<argument><expr><call><name>EVP_DigestInit_ex</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"unable to initialize hash context"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CryptoError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to initialize hash context: "</literal>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&gt;=</operator> <literal type="number">0x30000000L</literal></expr></cpp:if>
            <literal type="string">"[50331787]"</literal>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <literal type="string">"[101187723]"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <literal type="string">" no digest set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>EVP_MD_CTX_destroy</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cryptoError</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"no error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"no error: [0] no details available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Test if the buffer was overrun</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>cryptoRandomBytes</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><name><name>buffer</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check that buffer did not overrun (though random byte could be 0)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Count bytes that are not zero (there shouldn't be all zeroes)</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>nonZeroTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>charIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>charIdx</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>charIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name><name>buffer</name><index>[<expr><name>charIdx</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>                               <comment type="line">// {uncoverable_branch - ok if there are no zeros}</comment>
                <expr_stmt><expr><name>nonZeroTotal</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>TEST_RESULT_INT_NE</name><argument_list>(<argument><expr><name>nonZeroTotal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check that there are non-zero values in the buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"CipherBlock"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Cipher and digest errors</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cipherBlockNewP</name><argument_list>(<argument><expr><name>cipherModeEncrypt</name></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><call><name>BUFSTRZ</name><argument_list>(<argument><expr><name>TEST_PASS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to load cipher 'none'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cipherBlockNewP</name><argument_list>(
                <argument><expr><name>cipherModeEncrypt</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><name>testPass</name></expr></argument>, <argument><expr><operator>.</operator><name>digest</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
                <argument><expr><literal type="string">"unable to load digest 'BOGUS'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Initialization of object</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>CipherBlock</name> <modifier>*</modifier></type><name>cipherBlock</name> <init>= <expr><operator>(</operator><name>CipherBlock</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(
            <argument><expr><call><name>cipherBlockNewP</name><argument_list>(<argument><expr><name>cipherModeEncrypt</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><call><name>BUFSTRZ</name><argument_list>(<argument><expr><name>TEST_PASS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>cipherBlock</name><operator>-&gt;</operator><name>mode</name></name></expr></argument>, <argument><expr><name>cipherModeEncrypt</name></expr></argument>, <argument><expr><literal type="string">"mode is valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>cipherBlock</name><operator>-&gt;</operator><name>passSize</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>TEST_PASS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"passphrase size is valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>cipherBlock</name><operator>-&gt;</operator><name>pass</name></name></expr></argument>, <argument><expr><name>TEST_PASS</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>TEST_PASS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"passphrase is valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>cipherBlock</name><operator>-&gt;</operator><name>saltDone</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"salt done is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>cipherBlock</name><operator>-&gt;</operator><name>processDone</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"process done is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>cipherBlock</name><operator>-&gt;</operator><name>headerSize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"header size is 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR_NE</name><argument_list>(<argument><expr><name><name>cipherBlock</name><operator>-&gt;</operator><name>cipher</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"cipher is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR_NE</name><argument_list>(<argument><expr><name><name>cipherBlock</name><operator>-&gt;</operator><name>digest</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"digest is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>cipherBlock</name><operator>-&gt;</operator><name>cipherContext</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"cipher context is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Encrypt</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>encryptBuffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><name>TEST_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>IoFilter</name> <modifier>*</modifier></type><name>blockEncryptFilter</name> <init>= <expr><call><name>cipherBlockNewP</name><argument_list>(<argument><expr><name>cipherModeEncrypt</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><name>testPass</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>blockEncryptFilter</name> <operator>=</operator> <call><name>cipherBlockNewPack</name><argument_list>(<argument><expr><call><name>ioFilterParamList</name><argument_list>(<argument><expr><name>blockEncryptFilter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CipherBlock</name> <modifier>*</modifier></type><name>blockEncrypt</name> <init>= <expr><operator>(</operator><name>CipherBlock</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><name>blockEncryptFilter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>cipherBlockProcessSize</name><argument_list>(<argument><expr><name>blockEncrypt</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>TEST_PLAINTEXT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>TEST_PLAINTEXT</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>EVP_MAX_BLOCK_LENGTH</name> <operator>+</operator> <name>CIPHER_BLOCK_MAGIC_SIZE</name> <operator>+</operator> <name>PKCS5_SALT_LEN</name></expr></argument>, <argument><expr><literal type="string">"check process size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>bufLimitSet</name><argument_list>(<argument><expr><name>encryptBuffer</name></expr></argument>, <argument><expr><name>CIPHER_BLOCK_MAGIC_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockEncryptFilter</name></expr></argument>, <argument><expr><name>testPlainText</name></expr></argument>, <argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CIPHER_BLOCK_MAGIC_SIZE</name></expr></argument>, <argument><expr><literal type="string">"cipher size is magic size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioFilterInputSame</name><argument_list>(<argument><expr><name>blockEncryptFilter</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"filter needs same input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>bufLimitSet</name><argument_list>(<argument><expr><name>encryptBuffer</name></expr></argument>, <argument><expr><name>CIPHER_BLOCK_MAGIC_SIZE</name> <operator>+</operator> <name>PKCS5_SALT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockEncryptFilter</name></expr></argument>, <argument><expr><name>testPlainText</name></expr></argument>, <argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioFilterInputSame</name><argument_list>(<argument><expr><name>blockEncryptFilter</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"filter does not need same input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>blockEncrypt</name><operator>-&gt;</operator><name>saltDone</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"salt done is true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>blockEncrypt</name><operator>-&gt;</operator><name>processDone</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"process done is true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>blockEncrypt</name><operator>-&gt;</operator><name>headerSize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"header size is 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CIPHER_BLOCK_HEADER_SIZE</name></expr></argument>, <argument><expr><literal type="string">"cipher size is header len"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>cipherBlockProcessSize</name><argument_list>(<argument><expr><name>blockEncrypt</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>TEST_PLAINTEXT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>TEST_PLAINTEXT</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>EVP_MAX_BLOCK_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"check process size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>bufLimitSet</name><argument_list>(
            <argument><expr><name>encryptBuffer</name></expr></argument>, <argument><expr><name>CIPHER_BLOCK_MAGIC_SIZE</name> <operator>+</operator> <name>PKCS5_SALT_LEN</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>EVP_CIPHER_block_size</name><argument_list>(<argument><expr><name><name>blockEncrypt</name><operator>-&gt;</operator><name>cipher</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockEncryptFilter</name></expr></argument>, <argument><expr><name>testPlainText</name></expr></argument>, <argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufLimitSet</name><argument_list>(
            <argument><expr><name>encryptBuffer</name></expr></argument>, <argument><expr><name>CIPHER_BLOCK_MAGIC_SIZE</name> <operator>+</operator> <name>PKCS5_SALT_LEN</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>EVP_CIPHER_block_size</name><argument_list>(<argument><expr><name><name>blockEncrypt</name><operator>-&gt;</operator><name>cipher</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockEncryptFilter</name></expr></argument>, <argument><expr><name>testPlainText</name></expr></argument>, <argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufLimitClear</name><argument_list>(<argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CIPHER_BLOCK_HEADER_SIZE</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>EVP_CIPHER_block_size</name><argument_list>(<argument><expr><name><name>blockEncrypt</name><operator>-&gt;</operator><name>cipher</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"cipher size increases by one block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioFilterDone</name><argument_list>(<argument><expr><name>blockEncryptFilter</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"filter is not done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockEncryptFilter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CIPHER_BLOCK_HEADER_SIZE</name> <operator>+</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><call><name>EVP_CIPHER_block_size</name><argument_list>(<argument><expr><name><name>blockEncrypt</name><operator>-&gt;</operator><name>cipher</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>,
            <argument><expr><literal type="string">"cipher size increases by one block on flush"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioFilterDone</name><argument_list>(<argument><expr><name>blockEncryptFilter</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"filter is done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterFree</name><argument_list>(<argument><expr><name>blockEncryptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Decrypt in one pass</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>decryptBuffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><name>TEST_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>IoFilter</name> <modifier>*</modifier></type><name>blockDecryptFilter</name> <init>= <expr><call><name>cipherBlockNewP</name><argument_list>(<argument><expr><name>cipherModeDecrypt</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><name>testPass</name></expr></argument>, <argument><expr><operator>.</operator><name>digest</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"sha1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>blockDecryptFilter</name> <operator>=</operator> <call><name>cipherBlockNewPack</name><argument_list>(<argument><expr><call><name>ioFilterParamList</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>CipherBlock</name> <modifier>*</modifier></type><name>blockDecrypt</name> <init>= <expr><operator>(</operator><name>CipherBlock</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>cipherBlockProcessSize</name><argument_list>(<argument><expr><name>blockDecrypt</name></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>EVP_MAX_BLOCK_LENGTH</name></expr></argument>,
            <argument><expr><literal type="string">"check process size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>, <argument><expr><name>encryptBuffer</name></expr></argument>, <argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT_INT</name><argument_list>(<argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EVP_CIPHER_block_size</name><argument_list>(<argument><expr><name><name>blockDecrypt</name><operator>-&gt;</operator><name>cipher</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"decrypt size is one block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>TEST_PLAINTEXT</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"check final decrypt size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>TEST_RESULT_STR_Z</name><argument_list>(<argument>strNewBuf(decryptBuffer)</argument>, <argument>TEST_PLAINTEXT TEST_PLAINTEXT</argument>, <argument><literal type="string">"check final decrypt buffer"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>ioFilterFree</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Decrypt in small chunks to test buffering</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>blockDecryptFilter</name> <operator>=</operator> <call><name>cipherBlockNewP</name><argument_list>(<argument><expr><name>cipherModeDecrypt</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><name>testPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>blockDecrypt</name> <operator>=</operator> <operator>(</operator><name>CipherBlock</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>, <argument><expr><call><name>bufNewC</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CIPHER_BLOCK_MAGIC_SIZE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"no decrypt since header read is not complete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>blockDecrypt</name><operator>-&gt;</operator><name>saltDone</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"salt done is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>blockDecrypt</name><operator>-&gt;</operator><name>processDone</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"process done is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>blockDecrypt</name><operator>-&gt;</operator><name>headerSize</name></name></expr></argument>, <argument><expr><name>CIPHER_BLOCK_MAGIC_SIZE</name></expr></argument>, <argument><expr><literal type="string">"check header size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>blockDecrypt</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>CIPHER_BLOCK_MAGIC</name></expr></argument>, <argument><expr><name>CIPHER_BLOCK_MAGIC_SIZE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check header magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(
            <argument><expr><name>blockDecryptFilter</name></expr></argument>, <argument><expr><call><name>bufNewC</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CIPHER_BLOCK_MAGIC_SIZE</name></expr></argument>, <argument><expr><name>PKCS5_SALT_LEN</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"no decrypt since no data processed yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>blockDecrypt</name><operator>-&gt;</operator><name>saltDone</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"salt done is true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>blockDecrypt</name><operator>-&gt;</operator><name>processDone</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"process done is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>blockDecrypt</name><operator>-&gt;</operator><name>headerSize</name></name></expr></argument>, <argument><expr><name>CIPHER_BLOCK_MAGIC_SIZE</name></expr></argument>, <argument><expr><literal type="string">"check header size (not increased)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>memcmp</name><argument_list>(
                <argument><expr><name><name>blockDecrypt</name><operator>-&gt;</operator><name>header</name></name> <operator>+</operator> <name>CIPHER_BLOCK_MAGIC_SIZE</name></expr></argument>, <argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CIPHER_BLOCK_MAGIC_SIZE</name></expr></argument>,
                <argument><expr><name>PKCS5_SALT_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>,
            <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check header salt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(
            <argument><expr><name>blockDecryptFilter</name></expr></argument>,
            <argument><expr><call><name>bufNewC</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>CIPHER_BLOCK_HEADER_SIZE</name></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>CIPHER_BLOCK_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT_INT</name><argument_list>(<argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>EVP_CIPHER_block_size</name><argument_list>(<argument><expr><name><name>blockDecrypt</name><operator>-&gt;</operator><name>cipher</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"decrypt size is one block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>TEST_PLAINTEXT</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"check final decrypt size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>TEST_RESULT_STR_Z</name><argument_list>(<argument>strNewBuf(decryptBuffer)</argument>, <argument>TEST_PLAINTEXT TEST_PLAINTEXT</argument>, <argument><literal type="string">"check final decrypt buffer"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>ioFilterFree</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"encrypt zero byte file with no magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>blockEncryptFilter</name> <operator>=</operator> <call><name>cipherBlockNewP</name><argument_list>(<argument><expr><name>cipherModeEncrypt</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><name>testPass</name></expr></argument>, <argument><expr><operator>.</operator><name>raw</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>blockEncrypt</name> <operator>=</operator> <operator>(</operator><name>CipherBlock</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><name>blockEncryptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockEncryptFilter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>encryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="string">"check remaining size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterFree</name><argument_list>(<argument><expr><name>blockEncryptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on decrypt expecting magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>blockDecryptFilter</name> <operator>=</operator> <call><name>cipherBlockNewP</name><argument_list>(<argument><expr><name>cipherModeDecrypt</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><name>testPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>, <argument><expr><name>encryptBuffer</name></expr></argument>, <argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"cipher header invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"decrypt zero byte file with no magic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>blockDecryptFilter</name> <operator>=</operator> <call><name>cipherBlockNewP</name><argument_list>(<argument><expr><name>cipherModeDecrypt</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><name>testPass</name></expr></argument>, <argument><expr><operator>.</operator><name>raw</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>blockDecrypt</name> <operator>=</operator> <operator>(</operator><name>CipherBlock</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>, <argument><expr><name>encryptBuffer</name></expr></argument>, <argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"0 bytes processed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"0 bytes on flush"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterFree</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Invalid cipher header</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>blockDecryptFilter</name> <operator>=</operator> <call><name>cipherBlockNewP</name><argument_list>(<argument><expr><name>cipherModeDecrypt</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><name>testPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>blockDecrypt</name> <operator>=</operator> <operator>(</operator><name>CipherBlock</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"1234567890123456"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CryptoError</name></expr></argument>,
            <argument><expr><literal type="string">"cipher header invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterFree</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Invalid encrypted data cannot be flushed</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>blockDecryptFilter</name> <operator>=</operator> <call><name>cipherBlockNewP</name><argument_list>(<argument><expr><name>cipherModeDecrypt</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><name>testPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>blockDecrypt</name> <operator>=</operator> <operator>(</operator><name>CipherBlock</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><name>CIPHER_BLOCK_MAGIC</name> <literal type="string">"12345678"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"1234567890123456"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"unable to flush"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterFree</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// File with no header should not flush</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>blockDecryptFilter</name> <operator>=</operator> <call><name>cipherBlockNewP</name><argument_list>(<argument><expr><name>cipherModeDecrypt</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><name>testPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>blockDecrypt</name> <operator>=</operator> <operator>(</operator><name>CipherBlock</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"cipher header missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterFree</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// File with header only should error</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>blockDecryptFilter</name> <operator>=</operator> <call><name>cipherBlockNewP</name><argument_list>(<argument><expr><name>cipherModeDecrypt</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><name>testPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>blockDecrypt</name> <operator>=</operator> <operator>(</operator><name>CipherBlock</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><name>CIPHER_BLOCK_MAGIC</name> <literal type="string">"12345678"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>ioFilterProcessInOut</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>decryptBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"unable to flush"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioFilterFree</name><argument_list>(<argument><expr><name>blockDecryptFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Helper function</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>IoFilterGroup</name> <modifier>*</modifier></type><name>filterGroup</name> <init>= <expr><call><name>ioFilterGroupNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(
            <argument><expr><call><name>cipherBlockFilterGroupAdd</name><argument_list>(<argument><expr><name>filterGroup</name></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>cipherModeEncrypt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>filterGroup</name></expr></argument>, <argument><expr><literal type="string">"   no filter add"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>ioFilterGroupSize</name><argument_list>(<argument><expr><name>filterGroup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"    check no filter add"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>cipherBlockFilterGroupAdd</name><argument_list>(<argument><expr><name>filterGroup</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><name>cipherModeEncrypt</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"   filter add"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>ioFilterGroupSize</name><argument_list>(<argument><expr><name>filterGroup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"    check filter add"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"CryptoHash"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>IoFilter</name> <modifier>*</modifier></type><name>hash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cryptoHashNew</name><argument_list>(<argument><expr><call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>, <argument><expr><literal type="number">0x13a9de20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to load hash 'bogus'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>cryptoHashNew</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create sha1 hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioFilterFree</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"    free hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>packWrite</name> <init>= <expr><call><name>pckWriteNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>pckWriteStrIdP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>, <argument><expr><name>hashTypeSha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>cryptoHashNewPack</name><argument_list>(<argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name>packWrite</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create sha1 hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHash</name><argument_list>(<argument><expr><operator>(</operator><name>CryptoHash</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HASH_TYPE_SHA1_ZERO</name></expr></argument>, <argument><expr><literal type="string">"    check empty hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHash</name><argument_list>(<argument><expr><operator>(</operator><name>CryptoHash</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HASH_TYPE_SHA1_ZERO</name></expr></argument>, <argument><expr><literal type="string">"    check empty hash again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioFilterFree</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"    free hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>cryptoHashNew</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create sha1 hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioFilterProcessIn</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>BUFSTRZ</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"    add 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioFilterProcessIn</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"    add 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioFilterProcessIn</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"    add 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioFilterProcessIn</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"    add 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioFilterProcessIn</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"    add 5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>pckReadBinP</name><argument_list>(<argument><expr><call><name>pckReadNew</name><argument_list>(<argument><expr><call><name>ioFilterResult</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"8cb2237d0679ca88db6464eac60da96345513964"</literal></expr></argument>,
            <argument><expr><literal type="string">"    check small hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioFilterFree</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"    free hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"md5 hash - zero bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>cryptoHashNew</name><argument_list>(<argument><expr><name>hashTypeMd5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create md5 hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>pckReadBinP</name><argument_list>(<argument><expr><call><name>pckReadNew</name><argument_list>(<argument><expr><call><name>ioFilterResult</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HASH_TYPE_MD5_ZERO</name></expr></argument>, <argument><expr><literal type="string">"check empty hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Exercise most of the conditions in the local MD5 code</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"md5 hash - mixed bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>cryptoHashNew</name><argument_list>(<argument><expr><name>hashTypeMd5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create md5 hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioFilterProcessIn</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>BUFSTRZ</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"add 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioFilterProcessIn</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>BUFSTRZ</name><argument_list>(<argument><expr><literal type="string">"123456789012345678901234567890123"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"add 32 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>ioFilterProcessIn</name><argument_list>(
                <argument><expr><name>hash</name></expr></argument>,
                <argument><expr><call><name>BUFSTRZ</name><argument_list>(
                    <argument><expr><literal type="string">"12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"</literal>
                    <literal type="string">"12345678901234567890123456789012345678901234567890"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"add 160 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>ioFilterProcessIn</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>BUFSTRZ</name><argument_list>(<argument><expr><literal type="string">"12345678901234567890123456789001234567890012345678901234"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"add 58 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>pckReadBinP</name><argument_list>(<argument><expr><call><name>pckReadNew</name><argument_list>(<argument><expr><call><name>ioFilterResult</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"3318600bc9c1d379e91e4bae90721243"</literal></expr></argument>, <argument><expr><literal type="string">"check hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Full coverage of local MD5 requires processing &gt; 511MB of data but that makes the test run too long. Instead we'll cheat</comment>
        <comment type="line">// a bit and initialize the context at 511MB to start. This does not produce a valid MD5 hash but does provide coverage of</comment>
        <comment type="line">// that one condition cheaply.</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"md5 hash - &gt; 0x1fffffff bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>cryptoHashNew</name><argument_list>(<argument><expr><name>hashTypeMd5</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create md5 hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>CryptoHash</name> <operator>*</operator><operator>)</operator><call><name>ioFilterDriver</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>md5Context</name><operator>-&gt;</operator><name>lo</name></name> <operator>=</operator> <literal type="number">0x1fffffff</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioFilterProcessIn</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>BUFSTRZ</name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"add 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>pckReadBinP</name><argument_list>(<argument><expr><call><name>pckReadNew</name><argument_list>(<argument><expr><call><name>ioFilterResult</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"5c99876f9cafa7f485eac9c7a8a2764c"</literal></expr></argument>, <argument><expr><literal type="string">"check hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>hash</name></expr></argument>, <argument><expr><call><name>cryptoHashNew</name><argument_list>(<argument><expr><name>hashTypeSha256</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create sha256 hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>pckReadBinP</name><argument_list>(<argument><expr><call><name>pckReadNew</name><argument_list>(<argument><expr><call><name>ioFilterResult</name><argument_list>(<argument><expr><name>hash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HASH_TYPE_SHA256_ZERO</name></expr></argument>, <argument><expr><literal type="string">"    check empty hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"12345"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"8cb2237d0679ca88db6464eac60da96345513964"</literal></expr></argument>,
            <argument><expr><literal type="string">"    check small hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HASH_TYPE_SHA1_ZERO</name></expr></argument>, <argument><expr><literal type="string">"    check empty hash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>bufHex</name><argument_list>(
                <argument><expr><call><name>cryptoHmacOne</name><argument_list>(
                    <argument><expr><name>hashTypeSha256</name></expr></argument>,
                    <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"AWS4wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"20170412"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"8b05c497afe9e1f42c8ada4cb88392e118649db1e5c98f0f0fb0a158bdd2dd76"</literal></expr></argument>,
            <argument><expr><literal type="string">"    check hmac"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
