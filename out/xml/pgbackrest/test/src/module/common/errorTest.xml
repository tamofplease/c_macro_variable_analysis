<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/common/errorTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Error Handling
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessFork.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Declare some error locally because real errors won't work for some tests -- they could also break as errors change
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>ERROR_DECLARE</name><argument_list>(<argument><expr><name>TestParent1Error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERROR_DECLARE</name><argument_list>(<argument><expr><name>TestParent2Error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERROR_DECLARE</name><argument_list>(<argument><expr><name>TestChildError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERROR_DEFINE</name><argument_list>(<argument><expr><literal type="number">101</literal></expr></argument>, <argument><expr><name>TestParent1Error</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>TestParent1Error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERROR_DEFINE</name><argument_list>(<argument><expr><literal type="number">102</literal></expr></argument>, <argument><expr><name>TestParent2Error</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>TestParent1Error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>ERROR_DEFINE</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><name>TestChildError</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>TestParent2Error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
testTryRecurse - test to blow up try stack
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>int</name></type> <name>testTryRecurseTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>testTryRecurseCatch</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>testTryRecurseFinally</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>testTryRecurse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>testTryRecurseTotal</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name> <operator>==</operator> <name>testTryRecurseTotal</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testTryRecurse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <macro><name>CATCH</name><argument_list>(<argument>UnhandledError</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>testTryRecurseCatch</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>                                 <comment type="line">// {uncoverable - catch should never be executed}</comment>
    </block_content>}</block>
    <macro><name>FINALLY</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>testTryRecurseFinally</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>                                                                   <comment type="line">// {uncoverable - function throws error, never returns}</comment>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test error handler
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>testErrorHandlerTryDepth</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>testErrorHandlerFatal</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>testErrorHandler</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>tryDepth</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fatal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name>testErrorHandlerFatal</name> <operator>=</operator> <name>fatal</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>testErrorHandlerTryDepth</name> <operator>=</operator> <name>tryDepth</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"check that try stack is initialized correctly"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"errorTypeExtends"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorTypeExtends</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestParent1Error</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TestParent1Error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorTypeExtends</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestChildError</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TestParent1Error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorTypeExtends</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestChildError</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TestParent2Error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>errorTypeExtends</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TestChildError</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TestChildError</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"TRY with no errors"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>tryDone</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>catchDone</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>finallyDone</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>tryDone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>catchDone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>                                       <comment type="line">// {uncoverable - catch should never be executed}</comment>
        </block_content>}</block>
        <macro><name>FINALLY</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>tryList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>errorStateTry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>finallyDone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tryDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>catchDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>finallyDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"errorInternalThrow()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"specify all parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>errorInternalThrow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"file77"</literal></expr></argument>, <argument><expr><literal type="string">"function88"</literal></expr></argument>, <argument><expr><literal type="number">99</literal></expr></argument>, <argument><expr><literal type="string">"message100"</literal></expr></argument>, <argument><expr><literal type="string">"stacktrace200"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorType</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>&amp;</operator><name>FormatError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"TRY with multiple catches"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>tryDone</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>catchDone</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>finallyDone</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"set error handler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ErrorHandlerFunction</name></type> <name><name>testErrorHandlerList</name><index>[]</index></name> <init>= <expr><block>{<expr><name>testErrorHandler</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>errorHandlerSet</name><argument_list>(<argument><expr><name>testErrorHandlerList</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>testErrorHandlerList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>handlerList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>testErrorHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>handlerTotal</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorTryDepth</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorTryDepth</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorTryDepth</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorTryDepth</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorTryDepth</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorTryDepth</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>tryDone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                        </block_content>}</block>
                        <macro><name>FINALLY</name><argument_list>()</argument_list></macro>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>tryList</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>errorStateTry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <decl_stmt><decl><type><name>char</name></type> <name><name>bigMessage</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>messageBuffer</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
                            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bigMessage</name></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bigMessage</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>bigMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block>
                        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
                    <block>{<block_content>
                        <comment type="line">// Catch should not be executed since this error is fatal</comment>
                        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>testErrorHandlerTryDepth</name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>testErrorHandlerFatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Change to FormatError so error can be caught by normal catches</comment>
                    <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <comment type="line">// Should run even though an error has been thrown in the catch</comment>
                <macro><name>FINALLY</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><name>finallyDone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>testErrorHandlerTryDepth</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>testErrorHandlerFatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>RETHROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH</name><argument_list>(<argument>UnhandledError</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                              <comment type="line">// {uncoverable - catch should never be executed}</comment>
        </block_content>}</block>
        <macro><name>CATCH</name><argument_list>(<argument>RuntimeError</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>testErrorHandlerTryDepth</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>testErrorHandlerFatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorTryDepth</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>tryList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>state</name> <operator>==</operator> <name>errorStateEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>messageBuffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>catchDone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorTryDepth</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>assert</name><argument_list>(<argument>memcmp(&amp;errorContext.error, &amp;(Error){<literal type="number">0</literal>}, sizeof(Error)) == <literal type="number">0</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tryDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>catchDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>finallyDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"too deep recursive TRY_ERROR()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>tryDone</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>catchDone</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>finallyDone</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>tryDone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>testTryRecurse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorCode</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AssertError</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>errorFileName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TEST_PGB_PATH</name> <literal type="string">"/test/src/module/common/errorTest.c"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>errorFunctionName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"testTryRecurse"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorFileLine</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(
                <argument><expr><call><name>strcmp</name><argument_list>(
                    <argument><expr><call><name>errorStackTrace</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name>TEST_PGB_PATH</name> <literal type="string">"/test/src/module/common/errorTest.c:testTryRecurse:29:(test build required for parameters)"</literal></expr></argument>)</argument_list></call>
                <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"too many nested try blocks"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>errorName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>AssertError</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorType</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>&amp;</operator><name>AssertError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorTypeCode</name><argument_list>(<argument><expr><call><name>errorType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>AssertError</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>errorTypeName</name><argument_list>(<argument><expr><call><name>errorType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>AssertError</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>catchDone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>FINALLY</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>finallyDone</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <macro><name>assert</name><argument_list>(<argument>memcmp(&amp;errorContext.error, &amp;(Error){<literal type="number">0</literal>}, sizeof(Error)) == <literal type="number">0</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tryDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>catchDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>finallyDone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>errorContext</name><operator>.</operator><name>tryTotal</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// This is only ERROR_TRY_MAX - 1 because one try was used up by the wrapper above the recursive function</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>testTryRecurseTotal</name> <operator>==</operator> <name>ERROR_TRY_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>testTryRecurseCatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>testTryRecurseFinally</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"THROW_CODE() and THROW_CODE_FMT()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>THROW_CODE</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorCode</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>THROW_CODE_FMT</name><argument_list>(<argument><expr><literal type="number">122</literal></expr></argument>, <argument><expr><literal type="string">"message %d"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorCode</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">122</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"message 1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>THROW_CODE</name><argument_list>(<argument><expr><literal type="number">777</literal></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorCode</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>UnknownError</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"THROW_SYS_ERROR() and THROW_SYS_ERROR_FMT()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"no error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"no error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>E2BIG</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorCode</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AssertError</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"message: [7] Argument list too long"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"message %d"</literal></expr></argument>, <argument><expr><literal type="number">77</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorCode</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AssertError</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"message 77"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>E2BIG</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR_FMT</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"message %d"</literal></expr></argument>, <argument><expr><literal type="number">77</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorCode</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AssertError</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"message 77: [7] Argument list too long"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>THROW_SYS_ERROR</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorCode</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AssertError</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EIO</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>THROW_SYS_ERROR_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"message %d"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorCode</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AssertError</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"message 1: [5] Input/output error"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>THROW_SYS_ERROR_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"message %d"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>errorCode</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AssertError</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"message 1"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"Uncaught error"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Test in a fork so the process does not actually exit</comment>
        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.expectedExitStatus = UnhandledError.code</argument>)</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Redirect stderr to stdout (we do not care about the output here since coverage will tell us we hit the code)</comment>
                <expr_stmt><expr><name>stderr</name> <operator>=</operator> <name>stdout</name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>TestChildError</name></expr></argument>, <argument><expr><literal type="string">"does not get caught!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
