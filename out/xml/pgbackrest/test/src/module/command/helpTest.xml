<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/command/helpTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Help Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/load.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessStorage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Configuration load with just enough functionality to test help
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testCfgLoad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>argList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRING_LIST</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Parse config</comment>
    <expr_stmt><expr><call><name>configParse</name><argument_list>(<argument><expr><call><name>storageLocal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Apply special option rules</comment>
    <expr_stmt><expr><call><name>cfgLoadUpdateOption</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create help data</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfg</name></type> <name>bldCfg</name> <init>= <expr><call><name>bldCfgParse</name><argument_list>(<argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>HRN_PATH_REPO_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>helpData</name> <init>= <expr><call><name>bldHlpRenderHelpAutoCCmp</name><argument_list>(<argument><expr><name>bldCfg</name></expr></argument>, <argument><expr><call><name>bldHlpParse</name><argument_list>(<argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>HRN_PATH_REPO_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bldCfg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Program name a version are used multiple times</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>helpVersion</name> <init>= <expr><name>PROJECT_NAME</name> <literal type="string">" "</literal> <name>PROJECT_VERSION</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// General help text is used in more than one test</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>generalHelp</name> <init>= <expr><call><name>zNewFmt</name><argument_list>(
        <argument><expr><literal type="string">"%s - General help\n"</literal>
        <literal type="string">"\n"</literal>
        <literal type="string">"Usage:\n"</literal>
        <literal type="string">"    pgbackrest [options] [command]\n"</literal>
        <literal type="string">"\n"</literal>
        <literal type="string">"Commands:\n"</literal>
        <literal type="string">"    annotate        Add or modify backup annotation.\n"</literal>
        <literal type="string">"    archive-get     Get a WAL segment from the archive.\n"</literal>
        <literal type="string">"    archive-push    Push a WAL segment to the archive.\n"</literal>
        <literal type="string">"    backup          Backup a database cluster.\n"</literal>
        <literal type="string">"    check           Check the configuration.\n"</literal>
        <literal type="string">"    expire          Expire backups that exceed retention.\n"</literal>
        <literal type="string">"    help            Get help.\n"</literal>
        <literal type="string">"    info            Retrieve information about backups.\n"</literal>
        <literal type="string">"    repo-get        Get a file from a repository.\n"</literal>
        <literal type="string">"    repo-ls         List files in a repository.\n"</literal>
        <literal type="string">"    restore         Restore a database cluster.\n"</literal>
        <literal type="string">"    server          pgBackRest server.\n"</literal>
        <literal type="string">"    server-ping     Ping pgBackRest server.\n"</literal>
        <literal type="string">"    stanza-create   Create the required stanza data.\n"</literal>
        <literal type="string">"    stanza-delete   Delete a stanza.\n"</literal>
        <literal type="string">"    stanza-upgrade  Upgrade a stanza.\n"</literal>
        <literal type="string">"    start           Allow pgBackRest processes to run.\n"</literal>
        <literal type="string">"    stop            Stop pgBackRest processes from running.\n"</literal>
        <literal type="string">"    verify          Verify contents of the repository.\n"</literal>
        <literal type="string">"    version         Get version.\n"</literal>
        <literal type="string">"\n"</literal>
        <literal type="string">"Use 'pgbackrest help [command]' for more information.\n"</literal></expr></argument>,
        <argument><expr><name>helpVersion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"helpRenderSplitSize()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(<argument><expr><call><name>helpRenderSplitSize</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"abc def"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"abc\ndef\n"</literal></expr></argument>, <argument><expr><literal type="string">"two items"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(<argument><expr><call><name>helpRenderSplitSize</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"abc def"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"abc\ndef\n"</literal></expr></argument>, <argument><expr><literal type="string">"two items, size &gt; each item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(<argument><expr><call><name>helpRenderSplitSize</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"abc def ghi"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"abc\ndef\nghi\n"</literal></expr></argument>, <argument><expr><literal type="string">"three items"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(<argument><expr><call><name>helpRenderSplitSize</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"abc def ghi"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"abc def\nghi\n"</literal></expr></argument>, <argument><expr><literal type="string">"three items, size &gt; first two"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(<argument><expr><call><name>helpRenderSplitSize</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"abc def "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"abc\ndef \n"</literal></expr></argument>, <argument><expr><literal type="string">"two items, size includes space"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(<argument><expr><call><name>helpRenderSplitSize</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>, <argument><expr><literal type="string">"empty list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>helpRenderSplitSize</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"this is a short sentence"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"this is a\n"</literal>
            <literal type="string">"short\n"</literal>
            <literal type="string">"sentence\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"variable word sizes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"helpRenderText()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>helpRenderText</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"this is a short sentence"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"this is a short sentence"</literal></expr></argument>, <argument><expr><literal type="string">"one line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>helpRenderText</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"this is a short sentence"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"this is a\n"</literal>
            <literal type="string">"    short\n"</literal>
            <literal type="string">"    sentence"</literal></expr></argument>,
            <argument><expr><literal type="string">"three lines, no indent first"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>helpRenderText</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"This is a short paragraph.\n\nHere is another one."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"  This is a\n"</literal>
            <literal type="string">"  short\n"</literal>
            <literal type="string">"  paragraph.\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"  Here is\n"</literal>
            <literal type="string">"  another one.\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"  FOR INTERNAL\n"</literal>
            <literal type="string">"  USE ONLY. DO\n"</literal>
            <literal type="string">"  NOT USE IN\n"</literal>
            <literal type="string">"  PRODUCTION."</literal></expr></argument>,
            <argument><expr><literal type="string">"two paragraphs, indent first, internal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"helpRender()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"general invocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pgbackrest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testCfgLoad</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"help from empty command line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>helpRender</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>generalHelp</name></expr></argument>, <argument><expr><literal type="string">"check text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pgbackrest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testCfgLoad</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"help from help command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>helpRender</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>generalHelp</name></expr></argument>, <argument><expr><literal type="string">"check text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"version command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>commandHelp</name> <init>= <expr><call><name>zNewFmt</name><argument_list>(
            <argument><expr><literal type="string">"%s%s"</literal></expr></argument>,
            <argument><expr><name>helpVersion</name></expr></argument>,
            <argument><expr><literal type="string">" - 'version' command help\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Get version.\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Displays installed pgBackRest version.\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pgbackrest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testCfgLoad</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"help for version command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>helpRender</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>commandHelp</name></expr></argument>, <argument><expr><literal type="string">"check text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// This test is broken up into multiple strings because C99 does not require compilers to support const strings &gt; 4095 bytes</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"restore command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>commandHelp</name> <operator>=</operator> <call><name>zNewFmt</name><argument_list>(
            <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>,
            <argument><expr><name>helpVersion</name></expr></argument>,
            <argument><expr><literal type="string">" - 'restore' command help\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Restore a database cluster.\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"The restore command automatically defaults to selecting the latest backup from\n"</literal>
            <literal type="string">"the first repository where backups exist (see Quick Start - Restore a Backup).\n"</literal>
            <literal type="string">"The order in which the repositories are checked is dictated by the\n"</literal>
            <literal type="string">"pgbackrest.conf (e.g. repo1 will be checked before repo2). To select from a\n"</literal>
            <literal type="string">"specific repository, the --repo option can be passed (e.g. --repo=1). The --set\n"</literal>
            <literal type="string">"option can be passed if a backup other than the latest is desired.\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"When PITR of --type=time or --type=lsn is specified, then the target time or\n"</literal>
            <literal type="string">"target lsn must be specified with the --target option. If a backup is not\n"</literal>
            <literal type="string">"specified via the --set option, then the configured repositories will be\n"</literal>
            <literal type="string">"checked, in order, for a backup that contains the requested time or lsn. If no\n"</literal>
            <literal type="string">"matching backup is found, the latest backup from the first repository\n"</literal>
            <literal type="string">"containing backups will be used for --type=time while no backup will be\n"</literal>
            <literal type="string">"selected for --type=lsn. For other types of PITR, e.g. xid, the --set option\n"</literal>
            <literal type="string">"must be provided if the target is prior to the latest backup. See Point-in-Time\n"</literal>
            <literal type="string">"Recovery for more details and examples.\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Replication slots are not included per recommendation of PostgreSQL. See\n"</literal>
            <literal type="string">"Backing Up The Data Directory in the PostgreSQL documentation for more\n"</literal>
            <literal type="string">"information.\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Command Options:\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"  --archive-mode                    preserve or disable archiving on restored\n"</literal>
            <literal type="string">"                                    cluster [default=preserve]\n"</literal>
            <literal type="string">"  --db-exclude                      restore excluding the specified databases\n"</literal>
            <literal type="string">"  --db-include                      restore only specified databases\n"</literal>
            <literal type="string">"                                    [current=db1, db2]\n"</literal>
            <literal type="string">"  --force                           force a restore [default=n]\n"</literal>
            <literal type="string">"  --link-all                        restore all symlinks [default=n]\n"</literal>
            <literal type="string">"  --link-map                        modify the destination of a symlink\n"</literal>
            <literal type="string">"                                    [current=/link1=/dest1, /link2=/dest2]\n"</literal>
            <literal type="string">"  --recovery-option                 set an option in recovery.conf\n"</literal>
            <literal type="string">"  --set                             backup set to restore [default=latest]\n"</literal>
            <literal type="string">"  --tablespace-map                  restore a tablespace into the specified\n"</literal>
            <literal type="string">"                                    directory\n"</literal>
            <literal type="string">"  --tablespace-map-all              restore all tablespaces into the specified\n"</literal>
            <literal type="string">"                                    directory\n"</literal>
            <literal type="string">"  --target                          recovery target\n"</literal>
            <literal type="string">"  --target-action                   action to take when recovery target is\n"</literal>
            <literal type="string">"                                    reached [default=pause]\n"</literal>
            <literal type="string">"  --target-exclusive                stop just before the recovery target is\n"</literal>
            <literal type="string">"                                    reached [default=n]\n"</literal>
            <literal type="string">"  --target-timeline                 recover along a timeline\n"</literal>
            <literal type="string">"  --type                            recovery type [default=default]\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"General Options:\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"  --buffer-size                     buffer size for I/O operations\n"</literal>
            <literal type="string">"                                    [current=32768, default=1MiB]\n"</literal>
            <literal type="string">"  --cmd                             pgBackRest command\n"</literal>
            <literal type="string">"                                    [default=/path/to/pgbackrest]\n"</literal>
            <literal type="string">"  --cmd-ssh                         SSH client command [default=ssh]\n"</literal>
            <literal type="string">"  --compress-level-network          network compression level [default=3]\n"</literal>
            <literal type="string">"  --config                          pgBackRest configuration file\n"</literal>
            <literal type="string">"                                    [default=/etc/pgbackrest/pgbackrest.conf]\n"</literal>
            <literal type="string">"  --config-include-path             path to additional pgBackRest configuration\n"</literal>
            <literal type="string">"                                    files [default=/etc/pgbackrest/conf.d]\n"</literal>
            <literal type="string">"  --config-path                     base path of pgBackRest configuration files\n"</literal>
            <literal type="string">"                                    [default=/etc/pgbackrest]\n"</literal>
            <literal type="string">"  --delta                           restore or backup using checksums\n"</literal>
            <literal type="string">"                                    [default=n]\n"</literal>
            <literal type="string">"  --io-timeout                      I/O timeout [default=60]\n"</literal>
            <literal type="string">"  --lock-path                       path where lock files are stored\n"</literal>
            <literal type="string">"                                    [default=/tmp/pgbackrest]\n"</literal>
            <literal type="string">"  --neutral-umask                   use a neutral umask [default=y]\n"</literal>
            <literal type="string">"  --process-max                     max processes to use for compress/transfer\n"</literal>
            <literal type="string">"                                    [default=1]\n"</literal>
            <literal type="string">"  --protocol-timeout                protocol timeout [default=1830]\n"</literal>
            <literal type="string">"  --sck-keep-alive                  keep-alive enable [default=y]\n"</literal>
            <literal type="string">"  --stanza                          defines the stanza\n"</literal>
            <literal type="string">"  --tcp-keep-alive-count            keep-alive count\n"</literal>
            <literal type="string">"  --tcp-keep-alive-idle             keep-alive idle time\n"</literal>
            <literal type="string">"  --tcp-keep-alive-interval         keep-alive interval time\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Log Options:\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"  --log-level-console               level for console logging [default=warn]\n"</literal>
            <literal type="string">"  --log-level-file                  level for file logging [default=info]\n"</literal>
            <literal type="string">"  --log-level-stderr                level for stderr logging [default=warn]\n"</literal>
            <literal type="string">"  --log-path                        path where log files are stored\n"</literal>
            <literal type="string">"                                    [default=/var/log/pgbackrest]\n"</literal>
            <literal type="string">"  --log-subprocess                  enable logging in subprocesses [default=n]\n"</literal>
            <literal type="string">"  --log-timestamp                   enable timestamp in logging [default=y]\n"</literal>
            <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"Repository Options:\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"  --repo                            set repository\n"</literal>
            <literal type="string">"  --repo-azure-account              azure repository account\n"</literal>
            <literal type="string">"  --repo-azure-container            azure repository container\n"</literal>
            <literal type="string">"  --repo-azure-endpoint             azure repository endpoint\n"</literal>
            <literal type="string">"                                    [default=blob.core.windows.net]\n"</literal>
            <literal type="string">"  --repo-azure-key                  azure repository key\n"</literal>
            <literal type="string">"  --repo-azure-key-type             azure repository key type [default=shared]\n"</literal>
            <literal type="string">"  --repo-azure-uri-style            azure URI Style [default=host]\n"</literal>
            <literal type="string">"  --repo-cipher-pass                repository cipher passphrase\n"</literal>
            <literal type="string">"                                    [current=&lt;redacted&gt;]\n"</literal>
            <literal type="string">"  --repo-cipher-type                cipher used to encrypt the repository\n"</literal>
            <literal type="string">"                                    [current=aes-256-cbc, default=none]\n"</literal>
            <literal type="string">"  --repo-gcs-bucket                 GCS repository bucket\n"</literal>
            <literal type="string">"  --repo-gcs-endpoint               GCS repository endpoint\n"</literal>
            <literal type="string">"                                    [default=storage.googleapis.com]\n"</literal>
            <literal type="string">"  --repo-gcs-key                    GCS repository key\n"</literal>
            <literal type="string">"  --repo-gcs-key-type               GCS repository key type [default=service]\n"</literal>
            <literal type="string">"  --repo-host                       repository host when operating remotely via\n"</literal>
            <literal type="string">"                                    SSH [current=backup.example.net]\n"</literal>
            <literal type="string">"  --repo-host-ca-file               repository host certificate authority file\n"</literal>
            <literal type="string">"  --repo-host-ca-path               repository host certificate authority path\n"</literal>
            <literal type="string">"  --repo-host-cert-file             repository host certificate file\n"</literal>
            <literal type="string">"  --repo-host-cmd                   repository host pgBackRest command\n"</literal>
            <literal type="string">"                                    [default=/path/to/pgbackrest]\n"</literal>
            <literal type="string">"  --repo-host-config                pgBackRest repository host configuration\n"</literal>
            <literal type="string">"                                    file\n"</literal>
            <literal type="string">"                                    [default=/etc/pgbackrest/pgbackrest.conf]\n"</literal>
            <literal type="string">"  --repo-host-config-include-path   pgBackRest repository host configuration\n"</literal>
            <literal type="string">"                                    include path\n"</literal>
            <literal type="string">"                                    [default=/etc/pgbackrest/conf.d]\n"</literal>
            <literal type="string">"  --repo-host-config-path           pgBackRest repository host configuration\n"</literal>
            <literal type="string">"                                    path [default=/etc/pgbackrest]\n"</literal>
            <literal type="string">"  --repo-host-key-file              repository host key file\n"</literal>
            <literal type="string">"  --repo-host-port                  repository host port when repo-host is set\n"</literal>
            <literal type="string">"  --repo-host-type                  repository host protocol type [default=ssh]\n"</literal>
            <literal type="string">"  --repo-host-user                  repository host user when repo-host is set\n"</literal>
            <literal type="string">"                                    [default=pgbackrest]\n"</literal>
            <literal type="string">"  --repo-path                       path where backups and archive are stored\n"</literal>
            <literal type="string">"                                    [default=/var/lib/pgbackrest]\n"</literal>
            <literal type="string">"  --repo-s3-bucket                  S3 repository bucket\n"</literal>
            <literal type="string">"  --repo-s3-endpoint                S3 repository endpoint\n"</literal>
            <literal type="string">"  --repo-s3-key                     S3 repository access key\n"</literal>
            <literal type="string">"  --repo-s3-key-secret              S3 repository secret access key\n"</literal>
            <literal type="string">"  --repo-s3-key-type                S3 repository key type [default=shared]\n"</literal>
            <literal type="string">"  --repo-s3-kms-key-id              S3 repository KMS key\n"</literal>
            <literal type="string">"  --repo-s3-region                  S3 repository region\n"</literal>
            <literal type="string">"  --repo-s3-role                    S3 repository role\n"</literal>
            <literal type="string">"  --repo-s3-token                   S3 repository security token\n"</literal>
            <literal type="string">"  --repo-s3-uri-style               S3 URI Style [default=host]\n"</literal>
            <literal type="string">"  --repo-storage-ca-file            repository storage CA file\n"</literal>
            <literal type="string">"  --repo-storage-ca-path            repository storage CA path\n"</literal>
            <literal type="string">"  --repo-storage-host               repository storage host\n"</literal>
            <literal type="string">"  --repo-storage-port               repository storage port [default=443]\n"</literal>
            <literal type="string">"  --repo-storage-upload-chunk-size  repository storage upload chunk size\n"</literal>
            <literal type="string">"  --repo-storage-verify-tls         repository storage certificate verify\n"</literal>
            <literal type="string">"                                    [default=y]\n"</literal>
            <literal type="string">"  --repo-type                       type of storage used for the repository\n"</literal>
            <literal type="string">"                                    [default=posix]\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Stanza Options:\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"  --pg-path                         postgreSQL data directory\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Use 'pgbackrest help restore [option]' for more information.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pgbackrest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptBufferSize</name></expr></argument>, <argument><expr><literal type="string">"32768"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><literal type="string">"aes-256-cbc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><name>TEST_CIPHER_PASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><literal type="string">"backup.example.net"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkMap</name></expr></argument>, <argument><expr><literal type="string">"/link1=/dest1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkMap</name></expr></argument>, <argument><expr><literal type="string">"/link2=/dest2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbInclude</name></expr></argument>, <argument><expr><literal type="string">"db1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbInclude</name></expr></argument>, <argument><expr><literal type="string">"db2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testCfgLoad</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"help for restore command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>helpRender</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>commandHelp</name></expr></argument>, <argument><expr><literal type="string">"check text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"errors with specified options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pgbackrest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"archive-push"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"buffer-size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"buffer-size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testCfgLoad</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"parse too many options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>helpRender</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ParamInvalidError</name></expr></argument>, <argument><expr><literal type="string">"only one option allowed for option help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pgbackrest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"archive-push"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testCfgLoad</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"parse bogus option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>helpRender</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>, <argument><expr><literal type="string">"option 'BOGUS' is not valid for command 'archive-push'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pgbackrest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>CFGCMD_HELP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>CFGCMD_ARCHIVE_PUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>CFGOPT_PROCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testCfgLoad</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"parse option invalid for command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>helpRender</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>, <argument><expr><literal type="string">"option 'process' is not valid for command 'archive-push'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"default and current option value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optionHelp</name> <init>= <expr><call><name>zNewFmt</name><argument_list>(
            <argument><expr><literal type="string">"%s - 'archive-push' command - 'buffer-size' option help\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Buffer size for I/O operations.\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Buffer size used for copy, compress, encrypt, and other operations. The number\n"</literal>
            <literal type="string">"of buffers used depends on options and each operation may use additional\n"</literal>
            <literal type="string">"memory, e.g. gz compression may use an additional 256KiB of memory.\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Allowed values are 16KiB, 32KiB, 64KiB, 128KiB, 256KiB, 512KiB, 1MiB, 2MiB,\n"</literal>
            <literal type="string">"4MiB, 8MiB, and 16MiB.\n"</literal></expr></argument>,
            <argument><expr><name>helpVersion</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pgbackrest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"archive-push"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"buffer-size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testCfgLoad</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"help for archive-push command, buffer-size option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>helpRender</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s\ndefault: 1MiB\n"</literal></expr></argument>, <argument><expr><name>optionHelp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set a current value</comment>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptBufferSize</name></expr></argument>, <argument><expr><literal type="string">"32k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testCfgLoad</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"help for archive-push command, buffer-size option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
            <argument><expr><call><name>helpRender</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s\ncurrent: 32k\ndefault: 1MiB\n"</literal></expr></argument>, <argument><expr><name>optionHelp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check text, current value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"deprecated host option names"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HELP_OPTION</name></cpp:macro>                                                                                                        \
            <cpp:value>"%s - 'archive-push' command - 'repo-storage-host' option help\n"                                                      \
            "\n"                                                                                                                   \
            "Repository storage host.\n"                                                                                           \
            "\n"                                                                                                                   \
            "Connect to a host other than the storage (e.g. S3, Azure) endpoint. This is\n"                                        \
            "typically used for testing.\n"                                                                                        \
            "\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HELP_OPTION_DEPRECATED_NAMES</name></cpp:macro>                                                                                       \
            <cpp:value>"deprecated names: repo-azure-host, repo-s3-host\n"</cpp:value></cpp:define>

        <expr_stmt><expr><name>optionHelp</name> <operator>=</operator> <macro><name>zNewFmt</name><argument_list>(
            <argument>HELP_OPTION
            HELP_OPTION_DEPRECATED_NAMES</argument>,
            <argument>helpVersion</argument>)</argument_list></macro></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pgbackrest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"archive-push"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"repo1-s3-host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testCfgLoad</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"help for archive-push command, repo1-s3-host option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>helpRender</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>optionHelp</name></expr></argument>, <argument><expr><literal type="string">"check text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>optionHelp</name> <operator>=</operator> <call><name>zNewFmt</name><argument_list>(
            <argument><expr><name>HELP_OPTION</name>
            <literal type="string">"current: s3-host\n"</literal>
            <literal type="string">"\n"</literal>
            <name>HELP_OPTION_DEPRECATED_NAMES</name></expr></argument>,
            <argument><expr><name>helpVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set a current value for deprecated option name</comment>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><literal type="string">"s3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--repo1-s3-host=s3-host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testCfgLoad</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"help for archive-push command, repo1-s3-host option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>helpRender</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>optionHelp</name></expr></argument>, <argument><expr><literal type="string">"check text, current value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"cipher pass redacted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>optionHelp</name> <operator>=</operator> <call><name>zNewFmt</name><argument_list>(
            <argument><expr><literal type="string">"%s - 'archive-push' command - 'repo-cipher-pass' option help\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Repository cipher passphrase.\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Passphrase used to encrypt/decrypt files of the repository.\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"current: &lt;redacted&gt;\n"</literal></expr></argument>,
            <argument><expr><name>helpVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pgbackrest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><literal type="string">"aes-256-cbc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><name>TEST_CIPHER_PASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"archive-push"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"repo-cipher-pass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testCfgLoad</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"help for archive-push command, repo1-s3-host option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>helpRender</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>optionHelp</name></expr></argument>, <argument><expr><literal type="string">"check text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"deprecated and new option name produce same results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>optionHelp</name> <operator>=</operator> <call><name>zNewFmt</name><argument_list>(
            <argument><expr><literal type="string">"%s - 'backup' command - 'repo-hardlink' option help\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Hardlink files between backups in the repository.\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Enable hard-linking of files in differential and incremental backups to their\n"</literal>
            <literal type="string">"full backups. This gives the appearance that each backup is a full backup at\n"</literal>
            <literal type="string">"the file-system level. Be careful, though, because modifying files that are\n"</literal>
            <literal type="string">"hard-linked can affect all the backups in the set.\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"default: n\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"deprecated name: hardlink\n"</literal></expr></argument>,
            <argument><expr><name>helpVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pgbackrest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"repo-hardlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testCfgLoad</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"help for backup command, repo-hardlink option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>helpRender</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>optionHelp</name></expr></argument>, <argument><expr><literal type="string">"check text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pgbackrest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"hardlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testCfgLoad</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"help for backup command, deprecated hardlink option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>helpRender</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>optionHelp</name></expr></argument>, <argument><expr><literal type="string">"check text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"check admonition"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>optionHelp</name> <operator>=</operator> <call><name>zNewFmt</name><argument_list>(
            <argument><expr><literal type="string">"%s - 'backup' command - 'repo-retention-archive' option help\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Number of backups worth of continuous WAL to retain.\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"NOTE: WAL segments required to make a backup consistent are always retained\n"</literal>
            <literal type="string">"until the backup is expired regardless of how this option is configured.\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"If this value is not set and repo-retention-full-type is count (default), then\n"</literal>
            <literal type="string">"the archive to expire will default to the repo-retention-full (or\n"</literal>
            <literal type="string">"repo-retention-diff) value corresponding to the repo-retention-archive-type if\n"</literal>
            <literal type="string">"set to full (or diff). This will ensure that WAL is only expired for backups\n"</literal>
            <literal type="string">"that are already expired. If repo-retention-full-type is time, then this value\n"</literal>
            <literal type="string">"will default to removing archives that are earlier than the oldest full backup\n"</literal>
            <literal type="string">"retained after satisfying the repo-retention-full setting.\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"This option must be set if repo-retention-archive-type is set to incr. If disk\n"</literal>
            <literal type="string">"space is at a premium, then this setting, in conjunction with\n"</literal>
            <literal type="string">"repo-retention-archive-type, can be used to aggressively expire WAL segments.\n"</literal>
            <literal type="string">"However, doing so negates the ability to perform PITR from the backups with\n"</literal>
            <literal type="string">"expired WAL and is therefore not recommended.\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"deprecated name: retention-archive\n"</literal></expr></argument>,
            <argument><expr><name>helpVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pgbackrest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"repo-retention-archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testCfgLoad</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"help for backup command, repo-retention-archive option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>helpRender</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>optionHelp</name></expr></argument>, <argument><expr><literal type="string">"check admonition text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cmdHelp() to file"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pgbackrest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>testCfgLoad</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"parse help from empty command line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Redirect stdout to a file</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>stdoutSave</name> <init>= <expr><call><name>dup</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>freopen</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/stdout.help"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>FileWriteError</name></expr></argument>, <argument><expr><literal type="string">"unable to reopen stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Not in a test wrapper to avoid writing to stdout</comment>
        <expr_stmt><expr><call><name>cmdHelp</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Restore normal stdout</comment>
        <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>stdoutSave</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storage</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/stdout.help"</literal></expr></argument>, <argument><expr><name>generalHelp</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check text sent to file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
