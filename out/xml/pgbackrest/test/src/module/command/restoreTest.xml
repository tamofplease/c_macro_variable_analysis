<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/command/restoreTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Restore Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/cipherBlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPostgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessProtocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessStorage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Special string constants
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UTF8_DB_NAME</name></cpp:macro>                                                <cpp:value>"è¿ä¸ªç¨æ±è¯­æä¹è¯´"</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test data for backup.info
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_RESTORE_BACKUP_INFO_DB</name></cpp:macro>                                                                                                \
    <cpp:value>"[db]\n"                                                                                                                       \
    "db-catalog-version=201409291\n"                                                                                               \
    "db-control-version=942\n"                                                                                                     \
    "db-id=1\n"                                                                                                                    \
    "db-system-id=6569239123849665679\n"                                                                                           \
    "db-version=\"9.4\"\n"                                                                                                         \
    "\n"                                                                                                                           \
    "[db:history]\n"                                                                                                               \
    "1={\"db-catalog-version\":201409291,\"db-control-version\":942,\"db-system-id\":6569239123849665679,"                         \
        "\"db-version\":\"9.4\"}\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_RESTORE_BACKUP_INFO</name></cpp:macro>                                                                                                   \
    <cpp:value>"[backup:current]\n"                                                                                                           \
    "20161219-212741F={\"backrest-format\":5,\"backrest-version\":\"2.04\","                                                       \
    "\"backup-archive-start\":\"00000007000000000000001C\",\"backup-archive-stop\":\"00000007000000000000001C\","                  \
    "\"backup-info-repo-size\":3159776,\"backup-info-repo-size-delta\":3159776,\"backup-info-size\":26897030,"                     \
    "\"backup-info-size-delta\":26897030,\"backup-lsn-stop\":\"0/1C000101\",\"backup-timestamp-start\":1482182846,"                \
    "\"backup-timestamp-stop\":1482182861,\"backup-type\":\"full\",\"db-id\":1,\"option-archive-check\":true,"                     \
    "\"option-archive-copy\":false,\"option-backup-standby\":false,\"option-checksum-page\":false,\"option-compress\":true,"       \
    "\"option-hardlink\":false,\"option-online\":true}\n"                                                                          \
    "20161219-212741F_20161219-212803D={\"backrest-format\":5,\"backrest-version\":\"2.04\","                                      \
    "\"backup-archive-start\":\"00000008000000000000001E\",\"backup-archive-stop\":\"00000008000000000000001E\","                  \
    "\"backup-info-repo-size\":3159811,\"backup-info-repo-size-delta\":15765,\"backup-info-size\":26897030,"                       \
    "\"backup-info-size-delta\":163866,\"backup-lsn-stop\":\"0/1E000101\",\"backup-prior\":\"20161219-212741F\","                  \
    "\"backup-reference\":[\"20161219-212741F\"],\"backup-timestamp-start\":1482182877,\"backup-timestamp-stop\":1482182883,"      \
    "\"backup-type\":\"diff\",\"db-id\":1,\"option-archive-check\":true,\"option-archive-copy\":false,"                            \
    "\"option-backup-standby\":false,\"option-checksum-page\":false,\"option-compress\":true,\"option-hardlink\":false,"           \
    "\"option-online\":true}\n"                                                                                                    \
    "20161219-212741F_20161219-212918I={\"backrest-format\":5,\"backrest-version\":\"2.04\","                                      \
    "\"backup-archive-start\":null,\"backup-archive-stop\":null,"                                                                  \
    "\"backup-info-repo-size\":3159811,\"backup-info-repo-size-delta\":15765,\"backup-info-size\":26897030,"                       \
    "\"backup-info-size-delta\":163866,\"backup-lsn-stop\":\"0/1E000105\",\"backup-prior\":\"20161219-212741F\","                  \
    "\"backup-reference\":[\"20161219-212741F\",\"20161219-212741F_20161219-212803D\"],\"backup-timestamp-start\":1482182884,"     \
    "\"backup-timestamp-stop\":1482182985,\"backup-type\":\"incr\",\"db-id\":1,\"option-archive-check\":true,"                     \
    "\"option-archive-copy\":false,\"option-backup-standby\":false,\"option-checksum-page\":false,\"option-compress\":true,"       \
    "\"option-hardlink\":false,\"option-online\":true}\n"</cpp:value></cpp:define>

<comment type="line">// To verify handling of missing backup-lsn-stop for --type=lsn --target=&lt;lsn&gt; backup</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_RESTORE_BACKUP_INFO1</name></cpp:macro>                                                                                                  \
    <cpp:value>"[backup:current]\n"                                                                                                           \
    "20161219-212741F={\"backrest-format\":5,\"backrest-version\":\"2.04\","                                                       \
    "\"backup-archive-start\":\"00000007000000000000001C\",\"backup-archive-stop\":\"00000007000000000000001C\","                  \
    "\"backup-info-repo-size\":3159776,\"backup-info-repo-size-delta\":3159776,\"backup-info-size\":26897030,"                     \
    "\"backup-info-size-delta\":26897030,\"backup-timestamp-start\":1482182846,\"backup-timestamp-stop\":1482182861,"              \
    "\"backup-type\":\"full\",\"db-id\":1,\"option-archive-check\":true,\"option-archive-copy\":false,"                            \
    "\"option-backup-standby\":false,\"option-checksum-page\":false,\"option-compress\":true,\"option-hardlink\":false,"           \
    "\"option-online\":true}\n"                                                                                                    \
    "20161219-212741F_20161219-212803D={\"backrest-format\":5,\"backrest-version\":\"2.04\","                                      \
    "\"backup-archive-start\":\"00000008000000000000001E\",\"backup-archive-stop\":\"00000008000000000000001E\","                  \
    "\"backup-info-repo-size\":3159811,\"backup-info-repo-size-delta\":15765,\"backup-info-size\":26897030,"                       \
    "\"backup-info-size-delta\":163866,\"backup-lsn-stop\":\"0/1E000101\",\"backup-prior\":\"20161219-212741F\","                  \
    "\"backup-reference\":[\"20161219-212741F\"],\"backup-timestamp-start\":1482182877,\"backup-timestamp-stop\":1482182883,"      \
    "\"backup-type\":\"diff\",\"db-id\":1,\"option-archive-check\":true,\"option-archive-copy\":false,"                            \
    "\"option-backup-standby\":false,\"option-checksum-page\":false,\"option-compress\":true,\"option-hardlink\":false,"           \
    "\"option-online\":true}\n"                                                                                                    \
    "20161219-212741F_20161219-212918I={\"backrest-format\":5,\"backrest-version\":\"2.04\","                                      \
    "\"backup-archive-start\":null,\"backup-archive-stop\":null,"                                                                  \
    "\"backup-info-repo-size\":3159811,\"backup-info-repo-size-delta\":15765,\"backup-info-size\":26897030,"                       \
    "\"backup-info-size-delta\":163866,\"backup-lsn-stop\":\"0/1E000105\",\"backup-prior\":\"20161219-212741F\","                  \
    "\"backup-reference\":[\"20161219-212741F\",\"20161219-212741F_20161219-212803D\"],\"backup-timestamp-start\":1482182884,"     \
    "\"backup-timestamp-stop\":1482182985,\"backup-type\":\"incr\",\"db-id\":1,\"option-archive-check\":true,"                     \
    "\"option-archive-copy\":false,\"option-backup-standby\":false,\"option-checksum-page\":false,\"option-compress\":true,"       \
    "\"option-hardlink\":false,\"option-online\":true}\n"</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Build a simple manifest for testing
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>Manifest</name> <modifier>*</modifier></type>
<name>testManifestMinimal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>label</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pgVersion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pgPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>pgVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>label</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pgVersion</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pgPath</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Manifest</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>manifestNewInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>info</name></name> <operator>=</operator> <call><name>infoNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabel</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgVersion</name></name> <operator>=</operator> <name>pgVersion</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strEndsWithZ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="string">"I"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupType</name></name> <operator>=</operator> <name>backupTypeIncr</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><call><name>strEndsWithZ</name><argument_list>(<argument><expr><name>label</name></expr></argument>, <argument><expr><literal type="string">"D"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupType</name></name> <operator>=</operator> <name>backupTypeDiff</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupType</name></name> <operator>=</operator> <name>backupTypeFull</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <decl_stmt><decl><type><name>ManifestTarget</name></type> <name>targetBase</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>MANIFEST_TARGET_PGDATA_STR</name></expr>, <expr><operator>.</operator><name>path</name> <operator>=</operator> <name>pgPath</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>manifestTargetAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>targetBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ManifestPath</name></type> <name>pathBase</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <name>MANIFEST_TARGET_PGDATA_STR</name></expr>, <expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr>, <expr><operator>.</operator><name>group</name> <operator>=</operator> <call><name>groupName</name><argument_list>()</argument_list></call></expr>, <expr><operator>.</operator><name>user</name> <operator>=</operator> <macro><name>userName</name><argument_list>()</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>manifestPathAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pathBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ManifestFile</name></type> <name>fileVersion</name> <init>= <expr><block>{
            <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/"</literal> <name>PG_FILE_PGVERSION</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0600</literal></expr>, <expr><operator>.</operator><name>group</name> <operator>=</operator> <call><name>groupName</name><argument_list>()</argument_list></call></expr>, <expr><operator>.</operator><name>user</name> <operator>=</operator> <macro><name>userName</name><argument_list>()</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>manifestFileAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fileVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>MANIFEST</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Install local command handler shim</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ProtocolServerHandler</name></type> <name><name>testLocalHandlerList</name><index>[]</index></name> <init>= <expr><block>{<expr><name>PROTOCOL_SERVER_HANDLER_RESTORE_LIST</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>hrnProtocolLocalShimInstall</name><argument_list>(<argument><expr><name>testLocalHandlerList</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>testLocalHandlerList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create default storage object for testing</comment>
    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"restoreFile()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>repoFileReferenceFull</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20190509F"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>repoFile1</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/testfile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>repoIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Load Parameters</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create the pg path</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"compressed encrypted repo file - fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>repoFileReferenceFull</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>repoFile1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"acefile"</literal></expr></argument>, <argument><expr><operator>.</operator><name>compressType</name> <operator>=</operator> <name>compressTypeGz</name></expr></argument>, <argument><expr><operator>.</operator><name>cipherType</name> <operator>=</operator> <name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><operator>.</operator><name>cipherPass</name> <operator>=</operator> <literal type="string">"badpass"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create a compressed encrypted repo file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>fileList</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RestoreFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>RestoreFile</name></type> <name>file</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"normal"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>checksum</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"ffffffffffffffffffffffffffffffffffffffff"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">7</literal></expr>,
            <expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1557432154</literal></expr>,
            <expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0600</literal></expr>,
            <expr><operator>.</operator><name>zero</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>user</name> <operator>=</operator> <name>NULL</name></expr>,
            <expr><operator>.</operator><name>group</name> <operator>=</operator> <name>NULL</name></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreFile</name><argument_list>(
                <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/%s.gz"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>repoFileReferenceFull</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>repoFile1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>, <argument><expr><name>compressTypeGz</name></expr></argument>,
                <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"badpass"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>ChecksumError</name></expr></argument>,
            <argument><expr><literal type="string">"error restoring 'normal': actual checksum 'd1cd8a7d11daa26814b93eb604e1d49ab4b43770' does not match expected checksum"</literal>
                <literal type="string">" 'ffffffffffffffffffffffffffffffffffffffff'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"restorePathValidate()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pgPath</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>repoPath</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when pg appears to be running"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_POSTMTRPID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restorePathValidate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PgRunningError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to restore while PostgreSQL is running\n"</literal>
            <literal type="string">"HINT: presence of '"</literal> <name>PG_FILE_POSTMTRPID</name> <literal type="string">"' in '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' indicates PostgreSQL is running.\n"</literal>
            <literal type="string">"HINT: remove '"</literal> <name>PG_FILE_POSTMTRPID</name> <literal type="string">"' only if PostgreSQL is not running."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_POSTMTRPID</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on data directory does not look valid - delta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDelta</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restorePathValidate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"restore --delta with invalid PGDATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptDelta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"--delta set to false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: --delta or --force specified but unable to find 'PG_VERSION' or 'backup.manifest' in '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' to"</literal>
                <literal type="string">" confirm that this is a valid $PGDATA directory.  --delta and --force have been disabled and if any files"</literal>
                <literal type="string">" exist in the destination directories the restore will be aborted."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup.manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restorePathValidate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"restore --delta with valid PGDATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup.manifest"</literal></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on data directory does not look valid - force"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptForce</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restorePathValidate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"restore --force with invalid PGDATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptForce</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"--force set to false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: --delta or --force specified but unable to find 'PG_VERSION' or 'backup.manifest' in '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' to"</literal>
                <literal type="string">" confirm that this is a valid $PGDATA directory.  --delta and --force have been disabled and if any files"</literal>
                <literal type="string">" exist in the destination directories the restore will be aborted."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restorePathValidate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"restore --force with valid PGDATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"getEpoch()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"system time UTC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"TZ"</literal></expr></argument>, <argument><expr><literal type="string">"UTC"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>getEpoch</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2020-01-08 09:18:15-0700"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1578500295</literal></expr></argument>, <argument><expr><literal type="string">"epoch with timezone"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>getEpoch</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2020-01-08 16:18:15.0000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1578500295</literal></expr></argument>, <argument><expr><literal type="string">"same epoch no timezone"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>getEpoch</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2020-01-08 16:18:15.0000+00"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1578500295</literal></expr></argument>, <argument><expr><literal type="string">"same epoch timezone 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>getEpoch</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2020-13-08 16:18:15"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"invalid date 2020-13-08"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>getEpoch</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2020-01-08 16:68:15"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"invalid time 16:68:15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"system time America/New_York"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"TZ"</literal></expr></argument>, <argument><expr><literal type="string">"America/New_York"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>time_t</name></type> <name>testTime</name> <init>= <expr><literal type="number">1573754569</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>timeBuffer</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>timeBuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timeBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><call><name>localtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>testTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>timeBuffer</name></expr></argument>, <argument><expr><literal type="string">"2019-11-14 13:02:49"</literal></expr></argument>, <argument><expr><literal type="string">"check timezone set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>getEpoch</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2019-11-14 13:02:49-0500"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1573754569</literal></expr></argument>, <argument><expr><literal type="string">"offset same as local"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>getEpoch</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2019-11-14 13:02:49"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1573754569</literal></expr></argument>, <argument><expr><literal type="string">"GMT-0500 (EST)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>getEpoch</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2019-09-14 20:02:49"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1568505769</literal></expr></argument>, <argument><expr><literal type="string">"GMT-0400 (EDT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>getEpoch</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2018-04-27 04:29:00+04:30"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1524787140</literal></expr></argument>, <argument><expr><literal type="string">"GMT+0430"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid target time format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>getEpoch</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Tue, 15 Nov 1994 12:45:26"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"automatic backup set selection cannot be performed with provided time 'Tue, 15 Nov 1994 12:45:26'\n"</literal>
            <literal type="string">"HINT: time format must be YYYY-MM-DD HH:MM:SS with optional msec and optional timezone (+/- HH or HHMM or HH:MM) - if"</literal>
                <literal type="string">" timezone is omitted, local time is assumed (for UTC use +00)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"TZ"</literal></expr></argument>, <argument><expr><literal type="string">"UTC"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"restoreBackupSet()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pgPath</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>repoPath</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when no backups are present"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_RESTORE_BACKUP_INFO_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>restoreBackupSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>BackupSetInvalidError</name></expr></argument>, <argument><expr><literal type="string">"no backup set found to restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   WARN: repo1: [BackupSetInvalidError] no backup sets to restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on invalid backup set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>,
            <argument><expr><name>TEST_RESTORE_BACKUP_INFO</name>
            <literal type="string">"\n"</literal>
            <name>TEST_RESTORE_BACKUP_INFO_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptSet</name></expr></argument>, <argument><expr><literal type="string">"BOGUS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>restoreBackupSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>BackupSetInvalidError</name></expr></argument>, <argument><expr><literal type="string">"backup set BOGUS is not valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"target time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"TZ"</literal></expr></argument>, <argument><expr><literal type="string">"UTC"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>repoPath2</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/repo2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>repoPath2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTarget</name></expr></argument>, <argument><expr><literal type="string">"2016-12-19 16:28:04-0500"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write out backup.info with no current backups to repo1</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_RESTORE_BACKUP_INFO_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>RestoreBackupData</name></type> <name>backupData</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>backupData</name></expr></argument>, <argument><expr><call><name>restoreBackupSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get backup set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupData</name><operator>.</operator><name>backupSet</name></name></expr></argument>, <argument><expr><literal type="string">"20161219-212741F_20161219-212803D"</literal></expr></argument>, <argument><expr><literal type="string">"backup set found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>backupData</name><operator>.</operator><name>repoIdx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"backup set found, repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   WARN: repo1: [BackupSetInvalidError] no backup sets to restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Switch repo paths and confirm same result but on repo1</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>repoPath2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTarget</name></expr></argument>, <argument><expr><literal type="string">"2016-12-19 16:28:04-0500"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>backupData</name></expr></argument>, <argument><expr><call><name>restoreBackupSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get backup set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupData</name><operator>.</operator><name>backupSet</name></name></expr></argument>, <argument><expr><literal type="string">"20161219-212741F_20161219-212803D"</literal></expr></argument>, <argument><expr><literal type="string">"backup set found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>backupData</name><operator>.</operator><name>repoIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"backup set found, repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"target time, multi repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument> ,<argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>repoPath2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTarget</name></expr></argument>, <argument><expr><literal type="string">"2016-12-19 16:27:30-0500"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_RESTORE_BACKUP_INFO_NEWEST</name></cpp:macro>                                                                                    \
            <cpp:value>"[backup:current]\n"                                                                                                   \
            "20201212-201243F={\"backrest-format\":5,\"backrest-version\":\"2.04\","                                               \
            "\"backup-archive-start\":\"00000007000000000000001C\",\"backup-archive-stop\":\"00000007000000000000001C\","          \
            "\"backup-info-repo-size\":3159776,\"backup-info-repo-size-delta\":3159776,\"backup-info-size\":26897030,"             \
            "\"backup-info-size-delta\":26897030,\"backup-timestamp-start\":1607803000,\"backup-timestamp-stop\":1607803963,"      \
            "\"backup-type\":\"full\",\"db-id\":1,\"option-archive-check\":true,\"option-archive-copy\":false,"                    \
            "\"option-backup-standby\":false,\"option-checksum-page\":false,\"option-compress\":true,\"option-hardlink\":false,"   \
            "\"option-online\":true}\n"</cpp:value></cpp:define>

        <comment type="line">// Write out backup.info with current backup newest to repo2 but still does not satisfy time requirement, so repo1 chosen</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>,
            <argument><expr><name>TEST_RESTORE_BACKUP_INFO_NEWEST</name>
            <literal type="string">"\n"</literal>
            <name>TEST_RESTORE_BACKUP_INFO_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreBackupSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>BackupSetInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to find backup set with stop time less than '2016-12-19 16:27:30-0500'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Request repo2 - latest from repo2 will be chosen</comment>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepo</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreBackupSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>BackupSetInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to find backup set with stop time less than '2016-12-19 16:27:30-0500'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Switch paths so newest on repo1</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument> ,<argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>repoPath2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTarget</name></expr></argument>, <argument><expr><literal type="string">"2016-12-19 16:27:30-0500"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreBackupSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>BackupSetInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to find backup set with stop time less than '2016-12-19 16:27:30-0500'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument> ,<argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>repoPath2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTarget</name></expr></argument>, <argument><expr><literal type="string">"Tue, 15 Nov 1994 12:45:26"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreBackupSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"automatic backup set selection cannot be performed with provided time 'Tue, 15 Nov 1994 12:45:26'\n"</literal>
            <literal type="string">"HINT: time format must be YYYY-MM-DD HH:MM:SS with optional msec and optional timezone (+/- HH or HHMM or HH:MM) - if"</literal>
                <literal type="string">" timezone is omitted, local time is assumed (for UTC use +00)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"target time, multi repo, no candidates found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument> ,<argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>repoPath2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTarget</name></expr></argument>, <argument><expr><literal type="string">"2016-12-19 16:27:30-0500"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write out backup.info with no current backups to repo1 and repo2</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_RESTORE_BACKUP_INFO_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_RESTORE_BACKUP_INFO_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreBackupSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>BackupSetInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to find backup set with stop time less than '2016-12-19 16:27:30-0500'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: repo1: [BackupSetInvalidError] no backup sets to restore\n"</literal>
            <literal type="string">"P00   WARN: repo2: [BackupSetInvalidError] no backup sets to restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"target lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Match oldest backup on repo 2</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>repoPath2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTarget</name></expr></argument>, <argument><expr><literal type="string">"0/1C000101"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write out backup.info with no current backups to repo1, with current backups to repo2</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_RESTORE_BACKUP_INFO_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_RESTORE_BACKUP_INFO</name> <literal type="string">"\n"</literal> <name>TEST_RESTORE_BACKUP_INFO_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>backupData</name></expr></argument>, <argument><expr><call><name>restoreBackupSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get backup set for lsn 0/1C000101"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupData</name><operator>.</operator><name>backupSet</name></name></expr></argument>, <argument><expr><literal type="string">"20161219-212741F"</literal></expr></argument>, <argument><expr><literal type="string">"backup set found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>backupData</name><operator>.</operator><name>repoIdx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"backup set found, repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   WARN: repo1: [BackupSetInvalidError] no backup sets to restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Switch repo paths and target lsn to match newer backup on repo1</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>repoPath2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTarget</name></expr></argument>, <argument><expr><literal type="string">"0/1E000105"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>backupData</name></expr></argument>, <argument><expr><call><name>restoreBackupSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get backup set for lsn 0/1E000105"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupData</name><operator>.</operator><name>backupSet</name></name></expr></argument>, <argument><expr><literal type="string">"20161219-212741F_20161219-212918I"</literal></expr></argument>, <argument><expr><literal type="string">"backup set found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>backupData</name><operator>.</operator><name>repoIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"backup set found, repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Log warning if missing backup-lsn-stop is found before finding a match</comment>
        <comment type="line">// Missing backup-lsn-stop in repo1, no backups in repo2, no qualifying auto-selectable backup in either repo</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>repoPath2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTarget</name></expr></argument>, <argument><expr><literal type="string">"0/1C000101"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Re-write repo information with set missing backup-lsn-stop</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_RESTORE_BACKUP_INFO1</name> <literal type="string">"\n"</literal> <name>TEST_RESTORE_BACKUP_INFO_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreBackupSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>BackupSetInvalidError</name></expr></argument>, <argument><expr><literal type="string">"unable to find backup set with lsn less than or equal to '0/1C000101'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: repo1 reached backup from prior version missing required LSN info before finding a match -- backup"</literal>
                <literal type="string">" auto-select has been disabled for this repo\n"</literal>
            <literal type="string">"            HINT: you may specify a backup to restore using the --set option.\n"</literal>
            <literal type="string">"P00   WARN: repo2: [BackupSetInvalidError] no backup sets to restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Log warning if missing backup-lsn-stop is found before finding a match</comment>
        <comment type="line">// Missing backup-lsn-stop in repo1, qualifying auto-selectable backup set in repo2</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>repoPath2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTarget</name></expr></argument>, <argument><expr><literal type="string">"0/1C000102"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write repo2 information with data required to find backup</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_RESTORE_BACKUP_INFO</name> <literal type="string">"\n"</literal> <name>TEST_RESTORE_BACKUP_INFO_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>backupData</name></expr></argument>, <argument><expr><call><name>restoreBackupSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get backup set for lsn 0/1C000102"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupData</name><operator>.</operator><name>backupSet</name></name></expr></argument>, <argument><expr><literal type="string">"20161219-212741F"</literal></expr></argument>, <argument><expr><literal type="string">"backup set found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>backupData</name><operator>.</operator><name>repoIdx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"backup set found, repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: repo1 reached backup from prior version missing required LSN info before finding a match -- backup"</literal>
                <literal type="string">" auto-select has been disabled for this repo\n"</literal>
            <literal type="string">"            HINT: you may specify a backup to restore using the --set option."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// No backups to search for qualifying backup set</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTarget</name></expr></argument>, <argument><expr><literal type="string">"0/1A000102"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write repo info with no current backups</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_RESTORE_BACKUP_INFO_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreBackupSet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>BackupSetInvalidError</name></expr></argument>, <argument><expr><literal type="string">"unable to find backup set with lsn less than or equal to '0/1A000102'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: repo2: [BackupSetInvalidError] no backup sets to restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"restoreManifestValidate()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on mismatched label"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name> <init>= <expr><call><name>testManifestMinimal</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20161219-212741F"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreManifestValidate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20161219-212741F_20161219-212918I"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"requested backup '20161219-212741F_20161219-212918I' and manifest label '20161219-212741F' do not match\n"</literal>
            <literal type="string">"HINT: this indicates some sort of corruption (at the very least paths have been renamed)."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"restoreManifestMap()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pgPath</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>repoPath</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name> <init>= <expr><call><name>testManifestMinimal</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20161219-212741F"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remap data directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreManifestMap</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"base directory is not remapped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGDATA_STR</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>, <argument><expr><literal type="string">"base directory is not remapped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Now change pg1-path so the data directory gets remapped</comment>
        <expr_stmt><expr><name>pgPath</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreManifestMap</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"base directory is remapped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGDATA_STR</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>, <argument><expr><literal type="string">"base directory is remapped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: remap data directory to '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg2'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remap tablespaces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTablespaceMap</name></expr></argument>, <argument><expr><literal type="string">"bogus=/bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>restoreManifestMap</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TablespaceMapError</name></expr></argument>, <argument><expr><literal type="string">"unable to remap invalid tablespace 'bogus'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add some tablespaces</comment>
        <macro><name>manifestTargetAdd</name><argument_list>(
            <argument>manifest</argument>, <argument>&amp;(ManifestTarget){
                .name = STRDEF(<literal type="string">"pg_tblspc/1"</literal>)</argument>, <argument>.path = STRDEF(<literal type="string">"/1"</literal>)</argument>, <argument>.tablespaceId = <literal type="number">1</literal></argument>, <argument>.tablespaceName = STRDEF(<literal type="string">"1"</literal>)</argument>,
                <argument>.type = manifestTargetTypeLink}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>manifestLinkAdd</name><argument_list>(
            <argument>manifest</argument>, <argument>&amp;(ManifestLink){.name = STRDEF(<literal type="string">"pg_data/pg_tblspc/1"</literal>)</argument>, <argument>.destination = STRDEF(<literal type="string">"/1"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>manifestTargetAdd</name><argument_list>(
            <argument>manifest</argument>, <argument>&amp;(ManifestTarget){
                .name = STRDEF(<literal type="string">"pg_tblspc/2"</literal>)</argument>, <argument>.path = STRDEF(<literal type="string">"/2"</literal>)</argument>, <argument>.tablespaceId = <literal type="number">2</literal></argument>, <argument>.tablespaceName = STRDEF(<literal type="string">"ts2"</literal>)</argument>,
                <argument>.type = manifestTargetTypeLink}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>manifestLinkAdd</name><argument_list>(
            <argument>manifest</argument>, <argument>&amp;(ManifestLink){.name = STRDEF(<literal type="string">"pg_data/pg_tblspc/2"</literal>)</argument>, <argument>.destination = STRDEF(<literal type="string">"/2"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Error on different paths</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTablespaceMap</name></expr></argument>, <argument><expr><literal type="string">"2=/2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTablespaceMap</name></expr></argument>, <argument><expr><literal type="string">"ts2=/ts2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreManifestMap</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TablespaceMapError</name></expr></argument>, <argument><expr><literal type="string">"tablespace remapped by name 'ts2' and id 2 with different paths"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remap one tablespace using the id and another with the name</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTablespaceMap</name></expr></argument>, <argument><expr><literal type="string">"1=/1-2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTablespaceMap</name></expr></argument>, <argument><expr><literal type="string">"ts2=/2-2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreManifestMap</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remap tablespaces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_tblspc/1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"/1-2"</literal></expr></argument>, <argument><expr><literal type="string">"check tablespace 1 target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_tblspc/1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>destination</name></expr></argument>, <argument><expr><literal type="string">"/1-2"</literal></expr></argument>, <argument><expr><literal type="string">"check tablespace 1 link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_tblspc/2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"/2-2"</literal></expr></argument>, <argument><expr><literal type="string">"check tablespace 1 target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_tblspc/2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>destination</name></expr></argument>, <argument><expr><literal type="string">"/2-2"</literal></expr></argument>, <argument><expr><literal type="string">"check tablespace 1 link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: map tablespace 'pg_tblspc/1' to '/1-2'\n"</literal>
            <literal type="string">"P00   INFO: map tablespace 'pg_tblspc/2' to '/2-2'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remap a tablespace using just the id and map the rest with tablespace-map-all</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTablespaceMap</name></expr></argument>, <argument><expr><literal type="string">"2=/2-3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTablespaceMapAll</name></expr></argument>, <argument><expr><literal type="string">"/all"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreManifestMap</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remap tablespaces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_tblspc/1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"/all/1"</literal></expr></argument>, <argument><expr><literal type="string">"check tablespace 1 target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_tblspc/1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>destination</name></expr></argument>, <argument><expr><literal type="string">"/all/1"</literal></expr></argument>, <argument><expr><literal type="string">"check tablespace 1 link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_tblspc/2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"/2-3"</literal></expr></argument>, <argument><expr><literal type="string">"check tablespace 1 target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_tblspc/2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>destination</name></expr></argument>, <argument><expr><literal type="string">"/2-3"</literal></expr></argument>, <argument><expr><literal type="string">"check tablespace 1 link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: map tablespace 'pg_tblspc/1' to '/all/1'\n"</literal>
            <literal type="string">"P00   INFO: map tablespace 'pg_tblspc/2' to '/2-3'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remap all tablespaces with tablespace-map-all and update version to 9.2 to test warning</comment>
        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgVersion</name></name> <operator>=</operator> <name>PG_VERSION_92</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTablespaceMapAll</name></expr></argument>, <argument><expr><literal type="string">"/all2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreManifestMap</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remap tablespaces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_tblspc/1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"/all2/1"</literal></expr></argument>, <argument><expr><literal type="string">"check tablespace 1 target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_tblspc/1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>destination</name></expr></argument>, <argument><expr><literal type="string">"/all2/1"</literal></expr></argument>, <argument><expr><literal type="string">"check tablespace 1 link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_tblspc/2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"/all2/ts2"</literal></expr></argument>, <argument><expr><literal type="string">"check tablespace 1 target"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_tblspc/2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>destination</name></expr></argument>, <argument><expr><literal type="string">"/all2/ts2"</literal></expr></argument>, <argument><expr><literal type="string">"check tablespace 1 link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: map tablespace 'pg_tblspc/1' to '/all2/1'\n"</literal>
            <literal type="string">"P00   INFO: map tablespace 'pg_tblspc/2' to '/all2/ts2'\n"</literal>
            <literal type="string">"P00   WARN: update pg_tablespace.spclocation with new tablespace locations for PostgreSQL &lt;= 9.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on invalid link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkMap</name></expr></argument>, <argument><expr><literal type="string">"bogus=bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreManifestMap</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LinkMapError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to map link 'bogus'\n"</literal>
            <literal type="string">"HINT: Does the link reference a valid backup path or file?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on tablespace remap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add tablespace link which will be ignored unless specified with link-map</comment>
        <macro><name>manifestTargetAdd</name><argument_list>(
            <argument>manifest</argument>, <argument>&amp;(ManifestTarget){.name = STRDEF(<literal type="string">"pg_data/pg_tblspc/1"</literal>)</argument>, <argument>.path = STRDEF(<literal type="string">"/tblspc1"</literal>)</argument>,
            <argument>.type = manifestTargetTypeLink</argument>, <argument>.tablespaceId = <literal type="number">1</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>manifestLinkAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestLink){.name = STRDEF(<literal type="string">"pg_data/pg_tblspc/1"</literal>)</argument>, <argument>.destination = STRDEF(<literal type="string">"/tblspc1"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkMap</name></expr></argument>, <argument><expr><literal type="string">"pg_tblspc/1=/ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreManifestMap</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LinkMapError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to remap tablespace 'pg_tblspc/1'\n"</literal>
            <literal type="string">"HINT: use 'tablespace-map' option to remap tablespaces."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"add file link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkMap</name></expr></argument>, <argument><expr><literal type="string">"pg_hba.conf=../conf/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>manifestFileAdd</name><argument_list>(
            <argument>manifest</argument>,
            <argument>&amp;(ManifestFile){.name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/pg_hba.conf"</literal>)</argument>, <argument>.size = <literal type="number">4</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreManifestMap</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remap links"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"../conf"</literal></expr></argument>, <argument><expr><literal type="string">"check link path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>file</name></expr></argument>, <argument><expr><literal type="string">"pg_hba.conf"</literal></expr></argument>, <argument><expr><literal type="string">"check link file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>destination</name></expr></argument>, <argument><expr><literal type="string">"../conf/pg_hba.conf"</literal></expr></argument>, <argument><expr><literal type="string">"check link dest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>group</name></expr></argument>, <argument><expr><call><name>groupName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check link group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>user</name></expr></argument>, <argument><expr><call><name>userName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check link user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: link 'pg_hba.conf' to '../conf/pg_hba.conf'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on invalid file link path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkMap</name></expr></argument>, <argument><expr><literal type="string">"pg_hba.conf=bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreManifestMap</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LinkMapError</name></expr></argument>,
            <argument><expr><literal type="string">"'bogus' is not long enough to be the destination for file link 'pg_hba.conf'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: map link 'pg_hba.conf' to 'bogus'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"add path link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkMap</name></expr></argument>, <argument><expr><literal type="string">"pg_wal=/wal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkAll</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>manifestPathAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestPath){.name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/pg_wal"</literal>)</argument>, <argument>.mode = <literal type="number">0700</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreManifestMap</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remap links"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_wal"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"/wal"</literal></expr></argument>, <argument><expr><literal type="string">"check link path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_wal"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>file</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check link file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_wal"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>destination</name></expr></argument>, <argument><expr><literal type="string">"/wal"</literal></expr></argument>, <argument><expr><literal type="string">"check link dest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_wal"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>group</name></expr></argument>, <argument><expr><call><name>groupName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check link group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_wal"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>user</name></expr></argument>, <argument><expr><call><name>userName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check link user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: link 'pg_wal' to '/wal'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remap file and path links"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add path link that will not be remapped</comment>
        <macro><name>manifestTargetAdd</name><argument_list>(
            <argument>manifest</argument>, <argument>&amp;(ManifestTarget){.name = STRDEF(<literal type="string">"pg_data/pg_xact"</literal>)</argument>, <argument>.path = STRDEF(<literal type="string">"/pg_xact"</literal>)</argument>,
            <argument>.type = manifestTargetTypeLink}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>manifestLinkAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestLink){.name = STRDEF(<literal type="string">"pg_data/pg_xact"</literal>)</argument>, <argument>.destination = STRDEF(<literal type="string">"/pg_xact"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkMap</name></expr></argument>, <argument><expr><literal type="string">"pg_hba.conf=../conf2/pg_hba2.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkMap</name></expr></argument>, <argument><expr><literal type="string">"pg_wal=/wal2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreManifestMap</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remap links"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"../conf2"</literal></expr></argument>, <argument><expr><literal type="string">"check link path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>file</name></expr></argument>, <argument><expr><literal type="string">"pg_hba2.conf"</literal></expr></argument>, <argument><expr><literal type="string">"check link file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>destination</name></expr></argument>, <argument><expr><literal type="string">"../conf2/pg_hba2.conf"</literal></expr></argument>, <argument><expr><literal type="string">"check link dest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_wal"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"/wal2"</literal></expr></argument>, <argument><expr><literal type="string">"check link path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_wal"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>destination</name></expr></argument>, <argument><expr><literal type="string">"/wal2"</literal></expr></argument>, <argument><expr><literal type="string">"check link dest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>manifestTargetFindDefault</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_xact"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg_xact target missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>manifestLinkFindDefault</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_xact"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg_xact link missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: map link 'pg_hba.conf' to '../conf2/pg_hba2.conf'\n"</literal>
            <literal type="string">"P00   INFO: map link 'pg_wal' to '/wal2'\n"</literal>
            <literal type="string">"P00   WARN: contents of directory link 'pg_xact' will be restored in a directory at the same location"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"preserve all links"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkAll</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreManifestMap</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"leave links as they are"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"../conf2"</literal></expr></argument>, <argument><expr><literal type="string">"check link path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>file</name></expr></argument>, <argument><expr><literal type="string">"pg_hba2.conf"</literal></expr></argument>, <argument><expr><literal type="string">"check link file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>destination</name></expr></argument>, <argument><expr><literal type="string">"../conf2/pg_hba2.conf"</literal></expr></argument>, <argument><expr><literal type="string">"check link dest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestTargetFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_wal"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"/wal2"</literal></expr></argument>, <argument><expr><literal type="string">"check link path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>manifestLinkFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_wal"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>destination</name></expr></argument>, <argument><expr><literal type="string">"/wal2"</literal></expr></argument>, <argument><expr><literal type="string">"check link dest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove all links"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreManifestMap</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove all links"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(
            <argument><expr><call><name>manifestTargetFindDefault</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg_hba.conf target missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>manifestLinkFindDefault</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg_hba.conf link missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>manifestTargetFindDefault</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_wal"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg_wal target missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>manifestLinkFindDefault</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/pg_wal"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg_wal link missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: file link 'pg_hba.conf' will be restored as a file at the same location\n"</literal>
            <literal type="string">"P00   WARN: contents of directory link 'pg_wal' will be restored in a directory at the same location"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"restoreManifestOwner()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>userInitInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pgPath</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"owner is not root and all ownership is good"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name> <init>= <expr><call><name>testManifestMinimal</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20161219-212741F_20161219-21275D"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>rootReplaceUser</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>rootReplaceGroup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreManifestOwner</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootReplaceUser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootReplaceGroup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check ownership"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"owner is not root but has no user name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>manifest</name> <operator>=</operator> <call><name>testManifestMinimal</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20161219-212741F_20161219-21275I"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>userLocalData</name><operator>.</operator><name>groupName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>userLocalData</name><operator>.</operator><name>userName</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreManifestOwner</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootReplaceUser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootReplaceGroup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check ownership"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name>rootReplaceUser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"root replace user not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name>rootReplaceGroup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"root replace group not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: unknown user '"</literal> <name>TEST_USER</name> <literal type="string">"' in backup manifest mapped to current user\n"</literal>
            <literal type="string">"P00   WARN: unknown group '"</literal> <name>TEST_GROUP</name> <literal type="string">"' in backup manifest mapped to current group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>userInitInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"owner is not root and some ownership is bad"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>manifest</name> <operator>=</operator> <call><name>testManifestMinimal</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20161219-212741F_20161219-21275D"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ManifestPath</name></type> <name>path</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/bogus_path"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>user</name> <operator>=</operator> <macro><name>STRDEF</name><argument_list>(<argument><literal type="string">"path-user-bogus"</literal></argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>manifestPathAdd</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ManifestFile</name></type> <name>file</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/bogus_file"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0600</literal></expr>, <expr><operator>.</operator><name>group</name> <operator>=</operator> <macro><name>STRDEF</name><argument_list>(<argument><literal type="string">"file-group-bogus"</literal></argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>manifestFileAdd</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ManifestLink</name></type> <name>link</name> <init>= <expr><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/bogus_link"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>destination</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>group</name> <operator>=</operator> <macro><name>STRDEF</name><argument_list>(<argument><literal type="string">"link-group-bogus"</literal></argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>manifestLinkAdd</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreManifestOwner</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootReplaceUser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootReplaceGroup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check ownership"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name>rootReplaceUser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"root replace user not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name>rootReplaceGroup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"root replace group not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: unknown user in backup manifest mapped to current user\n"</literal>
            <literal type="string">"P00   WARN: unknown user 'path-user-bogus' in backup manifest mapped to current user\n"</literal>
            <literal type="string">"P00   WARN: unknown group in backup manifest mapped to current group\n"</literal>
            <literal type="string">"P00   WARN: unknown group 'file-group-bogus' in backup manifest mapped to current group\n"</literal>
            <literal type="string">"P00   WARN: unknown group 'link-group-bogus' in backup manifest mapped to current group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"owner is root and ownership is good"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>manifest</name> <operator>=</operator> <call><name>testManifestMinimal</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20161219-212741F_20161219-21275D"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>userLocalData</name><operator>.</operator><name>userRoot</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreManifestOwner</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootReplaceUser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootReplaceGroup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check ownership"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name>rootReplaceUser</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"root replace user not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name>rootReplaceGroup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"root replace group not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"owner is root and user is bad"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>manifestPathAdd</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreManifestOwner</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootReplaceUser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootReplaceGroup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check ownership"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name>rootReplaceUser</name></expr></argument>, <argument><expr><name>TEST_USER_STR</name></expr></argument>, <argument><expr><literal type="string">"root replace user set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name>rootReplaceGroup</name></expr></argument>, <argument><expr><name>TEST_GROUP_STR</name></expr></argument>, <argument><expr><literal type="string">"root replace group set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   WARN: unknown group in backup manifest mapped to '"</literal> <name>TEST_GROUP</name> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"owner is root and group is bad"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>manifest</name> <operator>=</operator> <call><name>testManifestMinimal</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20161219-212741F_20161219-21275D"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>manifestFileAdd</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manifestLinkAdd</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreManifestOwner</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootReplaceUser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootReplaceGroup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check ownership"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name>rootReplaceUser</name></expr></argument>, <argument><expr><name>TEST_USER_STR</name></expr></argument>, <argument><expr><literal type="string">"root replace user set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name>rootReplaceGroup</name></expr></argument>, <argument><expr><name>TEST_GROUP_STR</name></expr></argument>, <argument><expr><literal type="string">"root replace group set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   WARN: unknown user in backup manifest mapped to '"</literal> <name>TEST_USER</name> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>userInitInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"owner is root and ownership of pg_data is bad"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>manifestPathAdd</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manifestFileAdd</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"sudo chown 77777:77777 %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>userLocalData</name><operator>.</operator><name>userName</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>userLocalData</name><operator>.</operator><name>groupName</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>userLocalData</name><operator>.</operator><name>userRoot</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreManifestOwner</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootReplaceUser</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rootReplaceGroup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check ownership"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name>rootReplaceUser</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"root replace user set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name>rootReplaceGroup</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"root replace group set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: unknown user in backup manifest mapped to 'root'\n"</literal>
            <literal type="string">"P00   WARN: unknown group in backup manifest mapped to 'root'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>userInitInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"restoreClean*()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Set log level to detail</comment>
        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"restoreCleanOwnership() update to root (existing)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>userLocalData</name><operator>.</operator><name>userRoot</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <comment type="line">// Expect an error here since we can't really set ownership to root</comment>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreCleanOwnership</name><argument_list>(
                <argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>userId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>groupId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>FileOwnerError</name></expr></argument>, <argument><expr><literal type="string">"unable to set ownership for '"</literal> <name>TEST_PATH</name> <literal type="string">"': [1] Operation not permitted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00 DETAIL: update ownership for '"</literal> <name>TEST_PATH</name> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"restoreCleanOwnership() update to bogus (new)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Will succeed because bogus will be remapped to the current user/group</comment>
        <expr_stmt><expr><call><name>restoreCleanOwnership</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Test again with only group for coverage</comment>
        <expr_stmt><expr><call><name>restoreCleanOwnership</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>userId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>userInitInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"directory with bad permissions/mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pgPath</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>repoPath</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name> <init>= <expr><call><name>testManifestMinimal</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20161219-212741F_20161219-21275D"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>userLocalData</name><operator>.</operator><name>userId</name></name> <operator>=</operator> <name>TEST_USER_ID</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreCleanBuild</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathOpenError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to restore to path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' not owned by current user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>userLocalData</name><operator>.</operator><name>userRoot</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreCleanBuild</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>TEST_USER_STR</name></expr></argument>, <argument><expr><name>TEST_GROUP_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathOpenError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to restore to path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' without rwx permissions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>userInitInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreCleanBuild</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathOpenError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to restore to path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' without rwx permissions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"fail on restore with directory not empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_RECOVERYCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreCleanBuild</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathNotEmptyError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to restore to path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' because it contains files\n"</literal>
                <literal type="string">"HINT: try using --delta if this is what you intended."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"succeed when all directories empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_RECOVERYCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>manifestTargetAdd</name><argument_list>(
            <argument>manifest</argument>, <argument>&amp;(ManifestTarget){
                .name = STRDEF(<literal type="string">"pg_data/pg_hba.conf"</literal>)</argument>, <argument>.path = STRDEF(<literal type="string">"../conf"</literal>)</argument>, <argument>.file = STRDEF(<literal type="string">"pg_hba.conf"</literal>)</argument>,
                <argument>.type = manifestTargetTypeLink}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>manifestLinkAdd</name><argument_list>(
            <argument>manifest</argument>, <argument>&amp;(ManifestLink){.name = STRDEF(<literal type="string">"pg_data/pg_hba.conf"</literal>)</argument>, <argument>.destination = STRDEF(<literal type="string">"../conf/pg_hba.conf"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"conf"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreCleanBuild</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' exists\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/conf' exists\n"</literal>
            <literal type="string">"P00 DETAIL: create symlink '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_hba.conf' to '../conf/pg_hba.conf'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when linked file already exists without delta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"../conf/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreCleanBuild</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileExistsError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to restore file '"</literal> <name>TEST_PATH</name> <literal type="string">"/conf/pg_hba.conf' because it already exists\n"</literal>
            <literal type="string">"HINT: try using --delta if this is what you intended."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' exists\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/conf' exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"../conf/pg_hba.conf"</literal></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"succeed when all directories empty and ignore recovery.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"rm -rf %s/*"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"preserve"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreCleanBuild</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' exists\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/conf' exists\n"</literal>
            <literal type="string">"P00 DETAIL: create symlink '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_hba.conf' to '../conf/pg_hba.conf'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"rm -rf %s/*"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_RECOVERYCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreCleanBuild</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"normal restore ignore recovery.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' exists\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/conf' exists\n"</literal>
            <literal type="string">"P00 DETAIL: create symlink '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_hba.conf' to '../conf/pg_hba.conf'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"succeed when all directories empty and PG12 and preserve but no recovery files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"rm -rf %s/*"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgVersion</name></name> <operator>=</operator> <name>PG_VERSION_12</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreCleanBuild</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' exists\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/conf' exists\n"</literal>
            <literal type="string">"P00 DETAIL: create symlink '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_hba.conf' to '../conf/pg_hba.conf'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"succeed when all directories empty and ignore PG12 recovery files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"rm -rf %s/*"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>manifestFileAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestFile){.name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/"</literal> PG_FILE_POSTGRESQLAUTOCONF)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_POSTGRESQLAUTOCONF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_RECOVERYSIGNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_STANDBYSIGNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreCleanBuild</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' exists\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/conf' exists\n"</literal>
            <literal type="string">"P00 DETAIL: skip 'postgresql.auto.conf' -- recovery type is preserve\n"</literal>
            <literal type="string">"P00 DETAIL: create symlink '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_hba.conf' to '../conf/pg_hba.conf'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"succeed when all directories empty and PG12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"rm -rf %s/*"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>restoreCleanBuild</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' exists\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/conf' exists\n"</literal>
            <literal type="string">"P00 DETAIL: create symlink '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_hba.conf' to '../conf/pg_hba.conf'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"restoreSelectiveExpression()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Set log level to detail</comment>
        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"no valid databases"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argListClean</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListClean</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListClean</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListClean</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argListClean</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbInclude</name></expr></argument>, <argument><expr><name>UTF8_DB_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Manifest</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>manifest</name> <operator>=</operator> <call><name>manifestNewInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgVersion</name></name> <operator>=</operator> <name>PG_VERSION_90</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgCatalogVersion</name></name> <operator>=</operator> <call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_90</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>manifestTargetAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestTarget){.name = MANIFEST_TARGET_PGDATA_STR</argument>, <argument>.path = STRDEF(<literal type="string">"/pg"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestFile){.name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/"</literal> PG_FILE_PGVERSION)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreSelectiveExpression</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"no databases found for selective restore\n"</literal>
            <literal type="string">"HINT: is this a valid cluster?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"database id is missing on disk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>manifest-&gt;pub.memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Give non-systemId to postgres db</comment>
            <macro><name>manifestDbAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestDb){.name = STRDEF(<literal type="string">"postgres"</literal>)</argument>, <argument>.id = <literal type="number">16385</literal></argument>, <argument>.lastSystemId = <literal type="number">99999</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestDbAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestDb){.name = STRDEF(<literal type="string">"template0"</literal>)</argument>, <argument>.id = <literal type="number">12168</literal></argument>, <argument>.lastSystemId = <literal type="number">99999</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestDbAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestDb){.name = STRDEF(<literal type="string">"template1"</literal>)</argument>, <argument>.id = <literal type="number">1</literal></argument>, <argument>.lastSystemId = <literal type="number">99999</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestDbAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestDb){.name = STRDEF(<literal type="string">"user-made-system-db"</literal>)</argument>, <argument>.id = <literal type="number">16380</literal></argument>, <argument>.lastSystemId = <literal type="number">99999</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestDbAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestDb){.name = STRDEF(UTF8_DB_NAME)</argument>, <argument>.id = <literal type="number">16384</literal></argument>, <argument>.lastSystemId = <literal type="number">99999</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestFile){.name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/"</literal> PG_PATH_BASE <literal type="string">"/1/"</literal> PG_FILE_PGVERSION)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestFile){.name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/"</literal> PG_PATH_BASE <literal type="string">"/16381/"</literal> PG_FILE_PGVERSION)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestFile){.name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/"</literal> PG_PATH_BASE <literal type="string">"/16385/"</literal> PG_FILE_PGVERSION)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>restoreSelectiveExpression</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbMissingError</name></expr></argument>, <argument><expr><literal type="string">"database to include '"</literal> <name>UTF8_DB_NAME</name> <literal type="string">"' does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00 DETAIL: databases found for selective restore (1, 12168, 16380, 16381, 16385)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"database id to exclude is missing on disk"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListClean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbExclude</name></expr></argument>, <argument><expr><name>UTF8_DB_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>restoreSelectiveExpression</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbMissingError</name></expr></argument>, <argument><expr><literal type="string">"database to exclude '"</literal> <name>UTF8_DB_NAME</name> <literal type="string">"' does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00 DETAIL: databases found for selective restore (1, 12168, 16380, 16381, 16385)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"all databases selected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>manifest-&gt;pub.memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestFile){.name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/"</literal> PG_PATH_BASE <literal type="string">"/16384/"</literal> PG_FILE_PGVERSION)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListClean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbInclude</name></expr></argument>, <argument><expr><name>UTF8_DB_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>restoreSelectiveExpression</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"all databases selected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: databases found for selective restore (1, 12168, 16380, 16381, 16384, 16385)\n"</literal>
            <literal type="string">"P00   INFO: nothing to filter - all user databases have been selected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on system database selected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListClean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbInclude</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreSelectiveExpression</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"system databases (template0, postgres, etc.) are included by default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00 DETAIL: databases found for selective restore (1, 12168, 16380, 16381, 16384, 16385)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on system database with non-systemId selected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListClean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbInclude</name></expr></argument>, <argument><expr><literal type="string">"16385"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreSelectiveExpression</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"system databases (template0, postgres, etc.) are included by default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00 DETAIL: databases found for selective restore (1, 12168, 16380, 16381, 16384, 16385)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on system database with non-systemId selected, by name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListClean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbInclude</name></expr></argument>, <argument><expr><literal type="string">"postgres"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreSelectiveExpression</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"system databases (template0, postgres, etc.) are included by default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00 DETAIL: databases found for selective restore (1, 12168, 16380, 16381, 16384, 16385)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on missing database selected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListClean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbInclude</name></expr></argument>, <argument><expr><literal type="string">"7777777"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>restoreSelectiveExpression</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbMissingError</name></expr></argument>, <argument><expr><literal type="string">"database to include '7777777' does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00 DETAIL: databases found for selective restore (1, 12168, 16380, 16381, 16384, 16385)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"select database by id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>manifest-&gt;pub.memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <macro><name>manifestDbAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestDb){.name = STRDEF(<literal type="string">"test2"</literal>)</argument>, <argument>.id = <literal type="number">32768</literal></argument>, <argument>.lastSystemId = <literal type="number">99999</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestFile){.name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/"</literal> PG_PATH_BASE <literal type="string">"/32768/"</literal> PG_FILE_PGVERSION)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListClean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbInclude</name></expr></argument>, <argument><expr><literal type="string">"16384"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>restoreSelectiveExpression</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"(^pg_data/base/32768/)"</literal></expr></argument>, <argument><expr><literal type="string">"check expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: databases found for selective restore (1, 12168, 16380, 16381, 16384, 16385, 32768)\n"</literal>
            <literal type="string">"P00 DETAIL: databases excluded (zeroed) from selective restore (32768)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"one database selected without tablespace id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>manifest-&gt;pub.memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <macro><name>manifestTargetAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestTarget){
                    .name = STRDEF(MANIFEST_TARGET_PGTBLSPC <literal type="string">"/16387"</literal>)</argument>, <argument>.tablespaceId = <literal type="number">16387</literal></argument>, <argument>.tablespaceName = STRDEF(<literal type="string">"ts1"</literal>)</argument>,
                    <argument>.path = STRDEF(<literal type="string">"/ts1"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestFile){.name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/"</literal> PG_PATH_BASE <literal type="string">"/32768/"</literal> PG_FILE_PGVERSION)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreSelectiveExpression</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"(^pg_data/base/32768/)|(^pg_tblspc/16387/PG_9.0_201008051/32768/)"</literal></expr></argument>,
            <argument><expr><literal type="string">"check expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: databases found for selective restore (1, 12168, 16380, 16381, 16384, 16385, 32768)\n"</literal>
            <literal type="string">"P00 DETAIL: databases excluded (zeroed) from selective restore (32768)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"one database selected with tablespace id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgVersion</name></name> <operator>=</operator> <name>PG_VERSION_94</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgCatalogVersion</name></name> <operator>=</operator> <call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>manifest-&gt;pub.memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <macro><name>manifestDbAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestDb){.name = STRDEF(<literal type="string">"test3"</literal>)</argument>, <argument>.id = <literal type="number">65536</literal></argument>, <argument>.lastSystemId = <literal type="number">99999</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestFile){
                    .name = STRDEF(MANIFEST_TARGET_PGTBLSPC <literal type="string">"/16387/PG_9.4_201409291/65536/"</literal> PG_FILE_PGVERSION)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreSelectiveExpression</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"(^pg_data/base/32768/)|(^pg_tblspc/16387/PG_9.4_201409291/32768/)|(^pg_data/base/65536/)"</literal>
                <literal type="string">"|(^pg_tblspc/16387/PG_9.4_201409291/65536/)"</literal></expr></argument>,
            <argument><expr><literal type="string">"check expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: databases found for selective restore (1, 12168, 16380, 16381, 16384, 16385, 32768, 65536)\n"</literal>
            <literal type="string">"P00 DETAIL: databases excluded (zeroed) from selective restore (32768, 65536)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"exclude database by id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListClean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbExclude</name></expr></argument>, <argument><expr><literal type="string">"16384"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreSelectiveExpression</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"(^pg_data/base/16384/)|(^pg_tblspc/16387/PG_9.4_201409291/16384/)"</literal></expr></argument>,
            <argument><expr><literal type="string">"check expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: databases found for selective restore (1, 12168, 16380, 16381, 16384, 16385, 32768, 65536)\n"</literal>
            <literal type="string">"P00 DETAIL: databases excluded (zeroed) from selective restore (16384)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"exclude database by name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListClean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbExclude</name></expr></argument>, <argument><expr><name>UTF8_DB_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreSelectiveExpression</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"(^pg_data/base/16384/)|(^pg_tblspc/16387/PG_9.4_201409291/16384/)"</literal></expr></argument>,
            <argument><expr><literal type="string">"check expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: databases found for selective restore (1, 12168, 16380, 16381, 16384, 16385, 32768, 65536)\n"</literal>
            <literal type="string">"P00 DETAIL: databases excluded (zeroed) from selective restore (16384)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"exclude system database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListClean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbExclude</name></expr></argument>, <argument><expr><literal type="string">"16385"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreSelectiveExpression</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"(^pg_data/base/16385/)|(^pg_tblspc/16387/PG_9.4_201409291/16385/)"</literal></expr></argument>,
            <argument><expr><literal type="string">"check expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: databases found for selective restore (1, 12168, 16380, 16381, 16384, 16385, 32768, 65536)\n"</literal>
            <literal type="string">"P00 DETAIL: databases excluded (zeroed) from selective restore (16385)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on missing database to exclude selected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListClean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbExclude</name></expr></argument>, <argument><expr><literal type="string">"7777777"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>restoreSelectiveExpression</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbMissingError</name></expr></argument>, <argument><expr><literal type="string">"database to exclude '7777777' does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00 DETAIL: databases found for selective restore (1, 12168, 16380, 16381, 16384, 16385, 32768, 65536)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on combining include and exclude options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListClean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbInclude</name></expr></argument>, <argument><expr><literal type="string">"test2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbExclude</name></expr></argument>, <argument><expr><literal type="string">"test2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>restoreSelectiveExpression</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbInvalidError</name></expr></argument>, <argument><expr><literal type="string">"database to include '32768' is in the exclude list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00 DETAIL: databases found for selective restore (1, 12168, 16380, 16381, 16384, 16385, 32768, 65536)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"combine include and exclude options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListClean</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbInclude</name></expr></argument>, <argument><expr><literal type="string">"16384"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbExclude</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbExclude</name></expr></argument>, <argument><expr><literal type="string">"16385"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbExclude</name></expr></argument>, <argument><expr><literal type="string">"32768"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// user databases excluded will be silently ignored</comment>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreSelectiveExpression</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"(^pg_data/base/1/)|(^pg_tblspc/16387/PG_9.4_201409291/1/)|"</literal>
            <literal type="string">"(^pg_data/base/16385/)|(^pg_tblspc/16387/PG_9.4_201409291/16385/)|"</literal>
            <literal type="string">"(^pg_data/base/32768/)|(^pg_tblspc/16387/PG_9.4_201409291/32768/)|"</literal>
            <literal type="string">"(^pg_data/base/65536/)|(^pg_tblspc/16387/PG_9.4_201409291/65536/)"</literal></expr></argument>,
            <argument><expr><literal type="string">"check expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: databases found for selective restore (1, 12168, 16380, 16381, 16384, 16385, 32768, 65536)\n"</literal>
            <literal type="string">"P00 DETAIL: databases excluded (zeroed) from selective restore (1, 16385, 32768, 65536)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"restoreRecoveryOption() and restoreRecoveryConf()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argBaseList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>restoreLabel</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"LABEL"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECOVERY_SETTING_HEADER</name></cpp:macro>                             <cpp:value>"# Recovery settings generated by pgBackRest restore on LABEL\n"</cpp:value></cpp:define>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"user-specified options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRecoveryOption</name></expr></argument>, <argument><expr><literal type="string">"a-setting=a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRecoveryOption</name></expr></argument>, <argument><expr><literal type="string">"b_setting=b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryConf</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>RECOVERY_SETTING_HEADER</name>
            <literal type="string">"a_setting = 'a'\n"</literal>
            <literal type="string">"b_setting = 'b'\n"</literal>
            <literal type="string">"restore_command = '"</literal> <name>TEST_PROJECT_EXE</name> <literal type="string">" --lock-path="</literal> <name>HRN_PATH</name> <literal type="string">"/lock --log-path="</literal> <name>HRN_PATH</name> <literal type="string">" --pg1-path=/pg"</literal>
                <literal type="string">" --repo1-path=/repo --stanza=test1 archive-get %f \"%p\"'\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check recovery options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"user-specified cmd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptCmd</name></expr></argument>, <argument><expr><literal type="string">"/usr/local/bin/pg_wrapper.sh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryConf</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>RECOVERY_SETTING_HEADER</name>
            <literal type="string">"restore_command = '/usr/local/bin/pg_wrapper.sh --lock-path="</literal> <name>HRN_PATH</name> <literal type="string">"/lock --log-path="</literal> <name>HRN_PATH</name> <literal type="string">" --pg1-path=/pg"</literal>
                <literal type="string">" --repo1-path=/repo --stanza=test1 archive-get %f \"%p\"'\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"restore_command invokes /usr/local/bin/pg_wrapper.sh per --cmd option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"override restore_command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptRecoveryOption</name></expr></argument>, <argument><expr><literal type="string">"restore-command=my_restore_command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryConf</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>RECOVERY_SETTING_HEADER</name>
            <literal type="string">"restore_command = 'my_restore_command'\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check recovery options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"recovery target immediate, pg &lt; 12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryConf</name><argument_list>(<argument><expr><name>PG_VERSION_11</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>RECOVERY_SETTING_HEADER</name>
            <literal type="string">"restore_command = 'my_restore_command'\n"</literal>
            <literal type="string">"recovery_target = 'immediate'\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check recovery options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"recovery target immediate, pg &gt;= 12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryConf</name><argument_list>(<argument><expr><name>PG_VERSION_12</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>RECOVERY_SETTING_HEADER</name>
            <literal type="string">"restore_command = 'my_restore_command'\n"</literal>
            <literal type="string">"recovery_target = 'immediate'\n"</literal>
            <literal type="string">"recovery_target_timeline = 'current'\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check recovery options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"recovery target time with timeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTarget</name></expr></argument>, <argument><expr><literal type="string">"TIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTargetTimeline</name></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryConf</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>RECOVERY_SETTING_HEADER</name>
            <literal type="string">"restore_command = 'my_restore_command'\n"</literal>
            <literal type="string">"recovery_target_time = 'TIME'\n"</literal>
            <literal type="string">"recovery_target_timeline = '3'\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check recovery options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"recovery target inclusive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTarget</name></expr></argument>, <argument><expr><literal type="string">"TIME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTargetExclusive</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryConf</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>RECOVERY_SETTING_HEADER</name>
            <literal type="string">"restore_command = 'my_restore_command'\n"</literal>
            <literal type="string">"recovery_target_time = 'TIME'\n"</literal>
            <literal type="string">"recovery_target_inclusive = 'false'\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check recovery options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"no recovery_target_inclusive for target=name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTarget</name></expr></argument>, <argument><expr><literal type="string">"NAME"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryConf</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>RECOVERY_SETTING_HEADER</name>
            <literal type="string">"restore_command = 'my_restore_command'\n"</literal>
            <literal type="string">"recovery_target_name = 'NAME'\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check recovery options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"recovery target lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTarget</name></expr></argument>, <argument><expr><literal type="string">"5218/5E35BBA8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryConf</name><argument_list>(<argument><expr><name>PG_VERSION_10</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>RECOVERY_SETTING_HEADER</name>
            <literal type="string">"restore_command = 'my_restore_command'\n"</literal>
            <literal type="string">"recovery_target_lsn = '5218/5E35BBA8'\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check recovery options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"recovery target action = shutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTargetAction</name></expr></argument>, <argument><expr><literal type="string">"shutdown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryConf</name><argument_list>(<argument><expr><name>PG_VERSION_95</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>RECOVERY_SETTING_HEADER</name>
            <literal type="string">"restore_command = 'my_restore_command'\n"</literal>
            <literal type="string">"recovery_target = 'immediate'\n"</literal>
            <literal type="string">"recovery_target_action = 'shutdown'\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check recovery options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryConf</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"target-action=shutdown is only available in PostgreSQL &gt;= 9.5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"recovery target action = pause"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"immediate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTargetAction</name></expr></argument>, <argument><expr><literal type="string">"promote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryConf</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>RECOVERY_SETTING_HEADER</name>
            <literal type="string">"restore_command = 'my_restore_command'\n"</literal>
            <literal type="string">"recovery_target = 'immediate'\n"</literal>
            <literal type="string">"pause_at_recovery_target = 'false'\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check recovery options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryConf</name><argument_list>(<argument><expr><name>PG_VERSION_90</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"target-action option is only available in PostgreSQL &gt;= 9.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"recovery type = standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryConf</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>RECOVERY_SETTING_HEADER</name>
            <literal type="string">"restore_command = 'my_restore_command'\n"</literal>
            <literal type="string">"standby_mode = 'on'\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check recovery options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"recovery type = standby with timeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTargetTimeline</name></expr></argument>, <argument><expr><literal type="string">"current"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryConf</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>RECOVERY_SETTING_HEADER</name>
            <literal type="string">"restore_command = 'my_restore_command'\n"</literal>
            <literal type="string">"standby_mode = 'on'\n"</literal>
            <literal type="string">"recovery_target_timeline = 'current'\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check recovery options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when archive-mode set on PG &lt; 12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveMode</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryConf</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'archive-mode' is not supported on PostgreSQL &lt; 12\n"</literal>
                <literal type="string">"HINT: 'archive_mode' should be manually set to 'off' in postgresql.conf."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"recovery type = standby with recovery GUCs and archive-mode=off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveMode</name></expr></argument>, <argument><expr><literal type="string">"off"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryConf</name><argument_list>(<argument><expr><name>PG_VERSION_12</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>RECOVERY_SETTING_HEADER</name>
            <literal type="string">"restore_command = 'my_restore_command'\n"</literal>
            <literal type="string">"archive_mode = 'off'\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check recovery options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"restoreRecoveryWrite*()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pgPath</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>restoreLabel</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"LABEL"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECOVERY_SETTING_PREFIX</name></cpp:macro>                             <cpp:value>"# Removed by pgBackRest restore on LABEL # "</cpp:value></cpp:define>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when standby_mode setting is present"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRecoveryOption</name></expr></argument>, <argument><expr><literal type="string">"standby-mode=on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>restoreRecoveryWriteAutoConf</name><argument_list>(<argument><expr><name>PG_VERSION_12</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"'standby_mode' setting is not valid for PostgreSQL &gt;= 12\n"</literal>
            <literal type="string">"HINT: use --type=standby instead of --recovery-option=standby_mode=on."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   WARN: postgresql.auto.conf does not exist -- creating to contain recovery settings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"PG12 restore missing postgresql.auto.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>restoreRecoveryWriteAutoConf</name><argument_list>(<argument><expr><name>PG_VERSION_12</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET_EMPTY</name><argument_list>(<argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_POSTGRESQLAUTOCONF</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check postgresql.auto.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><name>PG_FILE_POSTGRESQLAUTOCONF</name> <literal type="string">"\n"</literal>
            <name>PG_FILE_RECOVERYSIGNAL</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"recovery.signal exists, standby.signal missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: postgresql.auto.conf does not exist -- creating to contain recovery settings\n"</literal>
            <literal type="string">"P00   INFO: write "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/postgresql.auto.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"PG12 restore type none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"rm -rf %s/*"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_POSTGRESQLAUTOCONF</name></expr></argument>,
            <argument><expr><literal type="string">"# DO NOT MODIFY\n"</literal>
            <literal type="string">"\t recovery_target_action='promote'\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>restoreRecoveryWriteAutoConf</name><argument_list>(<argument><expr><name>PG_VERSION_12</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_POSTGRESQLAUTOCONF</name></expr></argument>,
            <argument><expr><literal type="string">"# DO NOT MODIFY\n"</literal>
            <name>RECOVERY_SETTING_PREFIX</name> <literal type="string">"\t recovery_target_action='promote'\n\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check postgresql.auto.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><name>PG_FILE_POSTGRESQLAUTOCONF</name> <literal type="string">"\n"</literal>
            <name>PG_FILE_RECOVERYSIGNAL</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"recovery.signal exists, standby.signal missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: write updated "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/postgresql.auto.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"PG12 restore type standby and remove existing recovery settings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"rm -rf %s/*"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_POSTGRESQLAUTOCONF</name></expr></argument>,
            <argument><expr><literal type="string">"# DO NOT MODIFY\n"</literal>
            <literal type="string">"recovery_target_name\t='name'\n"</literal>
            <literal type="string">"recovery_target_inclusive = false\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRecoveryOption</name></expr></argument>, <argument><expr><literal type="string">"restore-command=my_restore_command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>restoreRecoveryWriteAutoConf</name><argument_list>(<argument><expr><name>PG_VERSION_12</name></expr></argument>, <argument><expr><name>restoreLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_POSTGRESQLAUTOCONF</name></expr></argument>,
            <argument><expr><literal type="string">"# DO NOT MODIFY\n"</literal>
            <name>RECOVERY_SETTING_PREFIX</name> <literal type="string">"recovery_target_name\t='name'\n"</literal>
            <name>RECOVERY_SETTING_PREFIX</name> <literal type="string">"recovery_target_inclusive = false\n"</literal>
            <literal type="string">"\n"</literal>
            <name>RECOVERY_SETTING_HEADER</name>
            <literal type="string">"restore_command = 'my_restore_command'\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check postgresql.auto.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><name>PG_FILE_POSTGRESQLAUTOCONF</name> <literal type="string">"\n"</literal>
            <name>PG_FILE_STANDBYSIGNAL</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"recovery.signal missing, standby.signal exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: write updated "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/postgresql.auto.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"PG12 restore type preserve"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name> <init>= <expr><call><name>testManifestMinimal</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20161219-212741F"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_12</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"rm -rf %s/*"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_POSTGRESQLAUTOCONF</name></expr></argument>, <argument><expr><literal type="string">"# DO NOT MODIFY\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_STANDBYSIGNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"preserve"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>restoreRecoveryWrite</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_POSTGRESQLAUTOCONF</name></expr></argument>, <argument><expr><literal type="string">"# DO NOT MODIFY\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check postgresql.auto.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><name>PG_FILE_POSTGRESQLAUTOCONF</name> <literal type="string">"\n"</literal>
            <name>PG_FILE_STANDBYSIGNAL</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"recovery.signal missing, standby.signal exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"PG12 restore type default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"rm -rf %s/*"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_POSTGRESQLAUTOCONF</name></expr></argument>, <argument><expr><literal type="string">"# DO NOT MODIFY\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>restoreRecoveryWrite</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_POSTGRESQLAUTOCONF_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"# DO NOT MODIFY\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check postgresql.auto.conf has changed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><name>PG_FILE_POSTGRESQLAUTOCONF</name> <literal type="string">"\n"</literal>
            <name>PG_FILE_RECOVERYSIGNAL</name> <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"recovery.signal exists, standby.signal missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: write updated "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/postgresql.auto.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cmdRestore()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pgPath</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>repoPath</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>repoPathEncrpyt</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/repo-encrypt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set log level to detail</comment>
        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"verify next queue calculations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>restoreJobQueueNext</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"client idx 0, queue idx 0, 1 queue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>restoreJobQueueNext</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"client idx 0, queue idx 0, 2 queues"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>restoreJobQueueNext</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"client idx 1, queue idx 1, 2 queues"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>restoreJobQueueNext</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"client idx 0, queue idx 1, 2 queues"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>restoreJobQueueNext</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"client idx 1, queue idx 0, 2 queues"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Locality error</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"incorrect locality"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="string">"pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdRestore</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HostInvalidError</name></expr></argument>, <argument><expr><literal type="string">"restore command must be run on the PostgreSQL host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"full restore without delta, multi-repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>repoPathEncrpyt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptSet</name></expr></argument>, <argument><expr><literal type="string">"20161219-212741F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_CIPHER_PASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_LABEL</name></cpp:macro>                                          <cpp:value>"20161219-212741F"</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PGDATA</name></cpp:macro>                                         <cpp:value>MANIFEST_TARGET_PGDATA "/"</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_REPO_PATH</name></cpp:macro>                                      <cpp:value>STORAGE_REPO_BACKUP "/" TEST_LABEL "/" TEST_PGDATA</cpp:value></cpp:define>

        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Manifest</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>manifest</name> <operator>=</operator> <call><name>manifestNewInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>info</name></name> <operator>=</operator> <call><name>infoNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabel</name></name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><name>TEST_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgVersion</name></name> <operator>=</operator> <name>PG_VERSION_90</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgCatalogVersion</name></name> <operator>=</operator> <call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_90</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupType</name></name> <operator>=</operator> <name>backupTypeFull</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupTimestampCopyStart</name></name> <operator>=</operator> <literal type="number">1482182861</literal></expr>;</expr_stmt> <comment type="line">// So file timestamps should be less than this</comment>

            <comment type="line">// Data directory</comment>
            <macro><name>manifestTargetAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestTarget){.name = MANIFEST_TARGET_PGDATA_STR</argument>, <argument>.path = pgPath}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestPath){.name = MANIFEST_TARGET_PGDATA_STR</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// Global directory</comment>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestPath){
                    .name = STRDEF(TEST_PGDATA PG_PATH_GLOBAL)</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// PG_VERSION</comment>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA PG_FILE_PGVERSION)</argument>, <argument>.size = <literal type="number">4</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>,
                    <argument>.checksumSha1 = <literal type="string">"b74d60e763728399bcd3fb63f7dd1f97b46c6b44"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument>storageRepoIdxWrite(<literal type="number">0</literal>)</argument>, <argument>TEST_REPO_PATH PG_FILE_PGVERSION</argument>, <argument>PG_VERSION_90_STR <literal type="string">"\n"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// Store the file also to the encrypted repo</comment>
            <macro><name>HRN_STORAGE_PUT_Z</name><argument_list>(
                <argument>storageRepoIdxWrite(<literal type="number">1</literal>)</argument>, <argument>TEST_REPO_PATH PG_FILE_PGVERSION</argument>, <argument>PG_VERSION_90_STR <literal type="string">"\n"</literal></argument>,
                <argument>.cipherType = cipherTypeAes256Cbc</argument>, <argument>.cipherPass = TEST_CIPHER_PASS_ARCHIVE</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// pg_tblspc</comment>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestPath){
                    .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/"</literal> MANIFEST_TARGET_PGTBLSPC)</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>,
                    <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// Always sort</comment>
            <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>targetList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fileList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>linkList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>pathList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>manifestSave</name><argument_list>(
            <argument><expr><name>manifest</name></expr></argument>,
            <argument><expr><call><name>storageWriteIo</name><argument_list>(
                <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/"</literal> <name>TEST_LABEL</name> <literal type="string">"/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Read the manifest, set a cipher passphrase and store it to the encrypted repo</comment>
        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifestEncrypted</name> <init>= <expr><call><name>manifestLoadFile</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/"</literal> <name>TEST_LABEL</name> <literal type="string">"/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>manifestCipherSubPassSet</name><argument_list>(<argument><expr><name>manifestEncrypted</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_CIPHER_PASS_ARCHIVE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Open file for write</comment>
        <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name> <init>= <expr><call><name>storageWriteIo</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(
                <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/"</literal> <name>TEST_LABEL</name> <literal type="string">"/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Add encryption filter and save the encrypted manifest</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_CIPHER_PASS_MANIFEST</name></cpp:macro> <cpp:value>"backpass"</cpp:value></cpp:define>
        <expr_stmt><expr><call><name>cipherBlockFilterGroupAdd</name><argument_list>(
            <argument><expr><call><name>ioWriteFilterGroup</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cipherModeEncrypt</name></expr></argument>,
            <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_CIPHER_PASS_MANIFEST</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>manifestSave</name><argument_list>(<argument><expr><name>manifestEncrypted</name></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write backup.info to the encrypted repo</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_RESTORE_BACKUP_INFO</name> <literal type="string">"\n[cipher]\ncipher-pass=\""</literal>
            <name>TEST_CIPHER_PASS_MANIFEST</name> <literal type="string">"\"\n\n"</literal> <name>TEST_RESTORE_BACKUP_INFO_DB</name></expr></argument>, <argument><expr><operator>.</operator><name>cipherType</name> <operator>=</operator> <name>cipherTypeAes256Cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdRestore</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"successful restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><call><name>zNewFmt</name><argument_list>(
                <argument><expr><literal type="string">"P00   WARN: repo1: [FileMissingError] unable to load info file"</literal>
                <literal type="string">" '%s/repo/backup/test1/backup.info' or '%s/repo/backup/test1/backup.info.copy':\n"</literal>
                <literal type="string">"            FileMissingError: unable to open missing file '%s/repo/backup/test1/backup.info' for read\n"</literal>
                <literal type="string">"            FileMissingError: unable to open missing file '%s/repo/backup/test1/backup.info.copy' for read\n"</literal>
                <literal type="string">"            HINT: backup.info cannot be opened and is required to perform a backup.\n"</literal>
                <literal type="string">"            HINT: has a stanza-create been performed?\n"</literal>
                <literal type="string">"P00   INFO: repo2: restore backup set 20161219-212741F\n"</literal>
                <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' exists\n"</literal>
                <literal type="string">"P00 DETAIL: create path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/global'\n"</literal>
                <literal type="string">"P00 DETAIL: create path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc'\n"</literal>
                <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/PG_VERSION (4B, 100.00%%) checksum b74d60e763728399bcd3fb63f7dd1f97b46c6b44"</literal>
                    <literal type="string">"\n"</literal>
                <literal type="string">"P00   INFO: write "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/recovery.conf\n"</literal>
                <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg'\n"</literal>
                <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc'\n"</literal>
                <literal type="string">"P00   WARN: backup does not contain 'global/pg_control' -- cluster will not start\n"</literal>
                <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/global'\n"</literal>
                <literal type="string">"P00   INFO: restore size = 4B, file total = 1"</literal></expr></argument>,
                <argument><expr><name>TEST_PATH</name></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove recovery.conf before file comparison since it will have a new timestamp.  Make sure it existed, though.</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_RECOVERYCONF</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><literal type="string">"./\n"</literal>
            <literal type="string">"PG_VERSION {s=4, t=1482182860}\n"</literal>
            <literal type="string">"global/\n"</literal>
            <literal type="string">"pg_tblspc/\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelBasic</name></expr></argument>, <argument><expr><operator>.</operator><name>includeDot</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"full restore with delta force"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>repoPathEncrpyt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"preserve"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptSet</name></expr></argument>, <argument><expr><literal type="string">"20161219-212741F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDelta</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptForce</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_CIPHER_PASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Munge PGDATA mode so it gets fixed</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_MODE</name><argument_list>(<argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Store backup.info to repo1 - repo1 will be selected because of the priority order</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_RESTORE_BACKUP_INFO</name> <literal type="string">"\n"</literal> <name>TEST_RESTORE_BACKUP_INFO_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure existing backup.manifest file is ignored</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>BACKUP_MANIFEST_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add a bogus file that will be removed</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"bogus-file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add a special file that will be removed</comment>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"mkfifo %s/pipe"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Modify time of postgresql.conf so it will be copied even though content is the same</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"postgresql.conf"</literal></expr></argument>, <argument><expr><literal type="string">"VALID_CONF"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Modify time of postgresql.auto.conf so it will be copied even though content is the same and timestamp matches</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"postgresql.auto.conf"</literal></expr></argument>, <argument><expr><literal type="string">"VALID_CONF_AUTO"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1482182861</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Size mismatch</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"size-mismatch"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Overwrite PG_VERSION with bogus content that will not be detected by delta force because the time and size are the same</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><literal type="string">"BOG\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1482182860</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Change destination of tablespace link</comment>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
            <argument><expr><call><name>symlink</name><argument_list>(<argument><expr><literal type="string">"/bogus"</literal></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/pg_tblspc/1"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>manifest-&gt;pub.memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// tablespace_map (will be ignored during restore)</comment>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA PG_FILE_TABLESPACEMAP)</argument>, <argument>.size = <literal type="number">0</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>, <argument>.checksumSha1 = HASH_TYPE_SHA1_ZERO}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument>storageRepoWrite()</argument>, <argument>TEST_REPO_PATH PG_FILE_TABLESPACEMAP</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/postgresql.conf"</literal>)</argument>, <argument>.size = <literal type="number">10</literal></argument>,
                    <argument>.timestamp = <literal type="number">1482182860</literal></argument>, <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>,
                    <argument>.checksumSha1 = <literal type="string">"1a49a3c2240449fee1422e4afcf44d5b96378511"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TEST_REPO_PATH</name> <literal type="string">"/postgresql.conf"</literal></expr></argument>, <argument><expr><literal type="string">"VALID_CONF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/postgresql.auto.conf"</literal>)</argument>, <argument>.size = <literal type="number">15</literal></argument>,
                    <argument>.timestamp = <literal type="number">1482182861</literal></argument>, <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>,
                    <argument>.checksumSha1 = <literal type="string">"37a0c84d42c3ec3d08c311cec2cef2a7ab55a7c3"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TEST_REPO_PATH</name> <literal type="string">"/postgresql.auto.conf"</literal></expr></argument>, <argument><expr><literal type="string">"VALID_CONF_AUTO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/size-mismatch"</literal>)</argument>, <argument>.size = <literal type="number">1</literal></argument>,
                    <argument>.timestamp = <literal type="number">1482182861</literal></argument>, <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>,
                    <argument>.checksumSha1 = <literal type="string">"c032adc1ff629c9b66f22749ad667e6beadf144b"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TEST_REPO_PATH</name> <literal type="string">"/size-mismatch"</literal></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// pg_tblspc/1</comment>
            <macro><name>manifestTargetAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestTarget){
                    .type = manifestTargetTypeLink</argument>, <argument>.name = STRDEF(MANIFEST_TARGET_PGTBLSPC <literal type="string">"/1"</literal>)</argument>,
                    <argument>.path = STRDEF(TEST_PATH <literal type="string">"/ts/1"</literal>)</argument>, <argument>.tablespaceId = <literal type="number">1</literal></argument>, <argument>.tablespaceName = STRDEF(<literal type="string">"ts1"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestPath){
                    .name = STRDEF(MANIFEST_TARGET_PGTBLSPC)</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestPath){
                    .name = STRDEF(MANIFEST_TARGET_PGTBLSPC <literal type="string">"/1"</literal>)</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestPath){
                    .name = STRDEF(MANIFEST_TARGET_PGTBLSPC <literal type="string">"/1/PG_9.0_201008051"</literal>)</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>,
                    <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestLinkAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestLink){
                    .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/"</literal> MANIFEST_TARGET_PGTBLSPC <literal type="string">"/1"</literal>)</argument>,
                    <argument>.destination = STRDEF(TEST_PATH <literal type="string">"/ts/1"</literal>)</argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// pg_tblspc/1/16384 path</comment>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestPath){
                    .name = STRDEF(MANIFEST_TARGET_PGTBLSPC <literal type="string">"/1/16384"</literal>)</argument>, <argument>.mode = <literal type="number">0700</literal></argument>,
                    <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// pg_tblspc/1/16384/PG_VERSION</comment>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(MANIFEST_TARGET_PGTBLSPC <literal type="string">"/1/16384/"</literal> PG_FILE_PGVERSION)</argument>, <argument>.size = <literal type="number">4</literal></argument>,
                    <argument>.timestamp = <literal type="number">1482182860</literal></argument>, <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>,
                    <argument>.checksumSha1 = <literal type="string">"b74d60e763728399bcd3fb63f7dd1f97b46c6b44"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
                <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/"</literal> <name>TEST_LABEL</name> <literal type="string">"/"</literal> <name>MANIFEST_TARGET_PGTBLSPC</name> <literal type="string">"/1/16384/"</literal> <name>PG_FILE_PGVERSION</name></expr></argument>,
                <argument><expr><name>PG_VERSION_90_STR</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Always sort</comment>
            <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>targetList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fileList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>linkList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>pathList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>manifestSave</name><argument_list>(
            <argument><expr><name>manifest</name></expr></argument>,
            <argument><expr><call><name>storageWriteIo</name><argument_list>(
                <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/"</literal> <name>TEST_LABEL</name> <literal type="string">"/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_LABEL</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_PGDATA</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_REPO_PATH</name></cpp:undef>

        <expr_stmt><expr><call><name>cmdRestore</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: repo1: restore backup set 20161219-212741F\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' exists\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/ts/1/PG_9.0_201008051' exists\n"</literal>
            <literal type="string">"P00   INFO: remove invalid files/links/paths from '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg'\n"</literal>
            <literal type="string">"P00 DETAIL: update mode for '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' to 0700\n"</literal>
            <literal type="string">"P00 DETAIL: remove invalid file '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/bogus-file'\n"</literal>
            <literal type="string">"P00 DETAIL: remove link '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1' because destination changed\n"</literal>
            <literal type="string">"P00 DETAIL: remove special file '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pipe'\n"</literal>
            <literal type="string">"P00 DETAIL: create symlink '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1' to '"</literal> <name>TEST_PATH</name> <literal type="string">"/ts/1'\n"</literal>
            <literal type="string">"P00 DETAIL: create path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1/16384'\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/postgresql.auto.conf (15B, 44.12%)"</literal>
                <literal type="string">" checksum 37a0c84d42c3ec3d08c311cec2cef2a7ab55a7c3\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/postgresql.conf (10B, 73.53%) checksum"</literal>
                <literal type="string">" 1a49a3c2240449fee1422e4afcf44d5b96378511\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/PG_VERSION - exists and matches size 4 and modification time 1482182860"</literal>
                <literal type="string">" (4B, 85.29%) checksum b74d60e763728399bcd3fb63f7dd1f97b46c6b44\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/size-mismatch (1B, 88.24%) checksum c032adc1ff629c9b66f22749ad667e6beadf144b\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/tablespace_map (0B, 88.24%)\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1/16384/PG_VERSION (4B, 100.00%)"</literal>
                <literal type="string">" checksum b74d60e763728399bcd3fb63f7dd1f97b46c6b44\n"</literal>
            <literal type="string">"P00   WARN: recovery type is preserve but recovery file does not exist at '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/recovery.conf'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1/16384'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1/PG_9.0_201008051'\n"</literal>
            <literal type="string">"P00   WARN: backup does not contain 'global/pg_control' -- cluster will not start\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/global'\n"</literal>
            <literal type="string">"P00   INFO: restore size = 34B, file total = 6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><literal type="string">"./\n"</literal>
            <literal type="string">"PG_VERSION {s=4, t=1482182860}\n"</literal>
            <literal type="string">"global/\n"</literal>
            <literal type="string">"pg_tblspc/\n"</literal>
            <literal type="string">"pg_tblspc/1&gt; {d="</literal> <name>TEST_PATH</name> <literal type="string">"/ts/1}\n"</literal>
            <literal type="string">"postgresql.auto.conf {s=15, t=1482182861}\n"</literal>
            <literal type="string">"postgresql.conf {s=10, t=1482182860}\n"</literal>
            <literal type="string">"size-mismatch {s=1, t=1482182861}\n"</literal>
            <literal type="string">"tablespace_map {s=0, t=1482182860}\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelBasic</name></expr></argument>, <argument><expr><operator>.</operator><name>includeDot</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_tblspc/1"</literal></expr></argument>,
            <argument><expr><literal type="string">".&gt; {d="</literal> <name>TEST_PATH</name> <literal type="string">"/ts/1}\n"</literal>
            <literal type="string">"16384/\n"</literal>
            <literal type="string">"16384/PG_VERSION {s=4, t=1482182860}\n"</literal>
            <literal type="string">"PG_9.0_201008051/\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelBasic</name></expr></argument>, <argument><expr><operator>.</operator><name>includeDot</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// PG_VERSION was not restored because delta force relies on time and size which were the same in the manifest and on disk</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><literal type="string">"BOG\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check PG_VERSION was not restored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Cleanup</comment>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"full restore with force"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Replace percent complete and restore size since they can cause a lot of churn when files are added/removed</comment>
        <expr_stmt><expr><call><name>hrnLogReplaceAdd</name><argument_list>(<argument><expr><literal type="string">", [0-9]{1,3}\\.[0-9]{2}%\\)"</literal></expr></argument>, <argument><expr><literal type="string">"[0-9]+\\.[0-9]+%"</literal></expr></argument>, <argument><expr><literal type="string">"PCT"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnLogReplaceAdd</name><argument_list>(<argument><expr><literal type="string">" restore size = [0-9]+[A-Z]+"</literal></expr></argument>, <argument><expr><literal type="string">"[^ ]+$"</literal></expr></argument>, <argument><expr><literal type="string">"SIZE"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><name>CFGOPTVAL_TYPE_PRESERVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptSet</name></expr></argument>, <argument><expr><literal type="string">"20161219-212741F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptForce</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>cmdRestore</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: repo1: restore backup set 20161219-212741F\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' exists\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/ts/1/PG_9.0_201008051' exists\n"</literal>
            <literal type="string">"P00   INFO: remove invalid files/links/paths from '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg'\n"</literal>
            <literal type="string">"P00   INFO: remove invalid files/links/paths from '"</literal> <name>TEST_PATH</name> <literal type="string">"/ts/1/PG_9.0_201008051'\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/postgresql.auto.conf (15B, [PCT]) checksum"</literal>
                <literal type="string">" 37a0c84d42c3ec3d08c311cec2cef2a7ab55a7c3\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/postgresql.conf (10B, [PCT]) checksum"</literal>
                <literal type="string">" 1a49a3c2240449fee1422e4afcf44d5b96378511\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/PG_VERSION (4B, [PCT]) checksum b74d60e763728399bcd3fb63f7dd1f97b46c6b44\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/size-mismatch (1B, [PCT]) checksum"</literal>
                <literal type="string">" c032adc1ff629c9b66f22749ad667e6beadf144b\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/tablespace_map (0B, [PCT])\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1/16384/PG_VERSION (4B, [PCT])"</literal>
                <literal type="string">" checksum b74d60e763728399bcd3fb63f7dd1f97b46c6b44\n"</literal>
            <literal type="string">"P00   WARN: recovery type is preserve but recovery file does not exist at '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/recovery.conf'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1/16384'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1/PG_9.0_201008051'\n"</literal>
            <literal type="string">"P00   WARN: backup does not contain 'global/pg_control' -- cluster will not start\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/global'\n"</literal>
            <literal type="string">"P00   INFO: restore size = [SIZE], file total = 6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><literal type="string">"./\n"</literal>
            <literal type="string">"PG_VERSION {s=4, t=1482182860}\n"</literal>
            <literal type="string">"global/\n"</literal>
            <literal type="string">"pg_tblspc/\n"</literal>
            <literal type="string">"pg_tblspc/1&gt; {d="</literal> <name>TEST_PATH</name> <literal type="string">"/ts/1}\n"</literal>
            <literal type="string">"postgresql.auto.conf {s=15, t=1482182861}\n"</literal>
            <literal type="string">"postgresql.conf {s=10, t=1482182860}\n"</literal>
            <literal type="string">"size-mismatch {s=1, t=1482182861}\n"</literal>
            <literal type="string">"tablespace_map {s=0, t=1482182860}\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelBasic</name></expr></argument>, <argument><expr><operator>.</operator><name>includeDot</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_tblspc/1"</literal></expr></argument>,
            <argument><expr><literal type="string">".&gt; {d="</literal> <name>TEST_PATH</name> <literal type="string">"/ts/1}\n"</literal>
            <literal type="string">"16384/\n"</literal>
            <literal type="string">"16384/PG_VERSION {s=4, t=1482182860}\n"</literal>
            <literal type="string">"PG_9.0_201008051/\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelBasic</name></expr></argument>, <argument><expr><operator>.</operator><name>includeDot</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// PG_VERSION was restored by the force option</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><name>PG_VERSION_90_STR</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check PG_VERSION was restored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove tablespace</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGTBLSPC</name> <literal type="string">"/1/PG_9.0_201008051"</literal></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove files</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"postgresql.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"postgresql.auto.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"size-mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"incremental delta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDelta</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkMap</name></expr></argument>, <argument><expr><literal type="string">"pg_wal=../wal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkMap</name></expr></argument>, <argument><expr><literal type="string">"postgresql.conf=../config/postgresql.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkMap</name></expr></argument>, <argument><expr><literal type="string">"pg_hba.conf=../config/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkMap</name></expr></argument>, <argument><expr><literal type="string">"pg_xact=../xact"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_LABEL_FULL</name></cpp:macro>                                     <cpp:value>"20161219-212741F"</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_LABEL_DIFF</name></cpp:macro>                                     <cpp:value>"20161219-212741F_20161219-212800D"</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_LABEL_INCR</name></cpp:macro>                                     <cpp:value>"20161219-212741F_20161219-212900I"</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_LABEL</name></cpp:macro>                                          <cpp:value>"20161219-212741F_20161219-212918I"</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PGDATA</name></cpp:macro>                                         <cpp:value>MANIFEST_TARGET_PGDATA "/"</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_REPO_PATH</name></cpp:macro>                                      <cpp:value>STORAGE_REPO_BACKUP "/" TEST_LABEL "/" TEST_PGDATA</cpp:value></cpp:define>

        <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Manifest</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>manifest</name> <operator>=</operator> <call><name>manifestNewInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>info</name></name> <operator>=</operator> <call><name>infoNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabel</name></name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><name>TEST_LABEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgVersion</name></name> <operator>=</operator> <name>PG_VERSION_10</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgCatalogVersion</name></name> <operator>=</operator> <call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupType</name></name> <operator>=</operator> <name>backupTypeIncr</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupTimestampCopyStart</name></name> <operator>=</operator> <literal type="number">1482182861</literal></expr>;</expr_stmt> <comment type="line">// So file timestamps should be less than this</comment>

            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>referenceList</name></name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>referenceList</name></name></expr></argument>, <argument><expr><name>TEST_LABEL_FULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>referenceList</name></name></expr></argument>, <argument><expr><name>TEST_LABEL_DIFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>referenceList</name></name></expr></argument>, <argument><expr><name>TEST_LABEL_INCR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Data directory</comment>
            <macro><name>manifestTargetAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestTarget){.name = MANIFEST_TARGET_PGDATA_STR</argument>, <argument>.path = pgPath}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestPath){.name = MANIFEST_TARGET_PGDATA_STR</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>.</operator><name>noErrorOnExists</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// global directory</comment>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestPath){
                    .name = STRDEF(TEST_PGDATA PG_PATH_GLOBAL)</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// global/pg_control</comment>
            <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>fileBuffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA PG_PATH_GLOBAL <literal type="string">"/"</literal> PG_FILE_PGCONTROL)</argument>, <argument>.size = <literal type="number">8192</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>,
                    <argument>.checksumSha1 = <literal type="string">"5e2b96c19c4f5c63a5afa2de504d29fe64a4c908"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>HRN_STORAGE_PUT</name><argument_list>(<argument>storageRepoWrite()</argument>, <argument>TEST_REPO_PATH PG_PATH_GLOBAL <literal type="string">"/"</literal> PG_FILE_PGCONTROL</argument>, <argument>fileBuffer</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// global/888</comment>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA PG_PATH_GLOBAL <literal type="string">"/888"</literal>)</argument>, <argument>.size = <literal type="number">0</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>,
                    <argument>.checksumSha1 = HASH_TYPE_SHA1_ZERO}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument>storageRepoWrite()</argument>, <argument>TEST_REPO_PATH PG_PATH_GLOBAL <literal type="string">"/888"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// global/999</comment>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA PG_PATH_GLOBAL <literal type="string">"/999"</literal>)</argument>, <argument>.size = <literal type="number">0</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>,
                    <argument>.checksumSha1 = HASH_TYPE_SHA1_ZERO}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument>storageRepoWrite()</argument>, <argument>TEST_REPO_PATH PG_PATH_GLOBAL <literal type="string">"/999"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// PG_VERSION</comment>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA PG_FILE_PGVERSION)</argument>, <argument>.size = <literal type="number">4</literal></argument>, <argument>.sizeRepo = <literal type="number">4</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>, <argument>.bundleId = <literal type="number">1</literal></argument>, <argument>.bundleOffset = <literal type="number">0</literal></argument>,
                    <argument>.reference = NULL</argument>, <argument>.checksumSha1 = <literal type="string">"8dbabb96e032b8d9f1993c0e4b9141e71ade01a1"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA <literal type="string">"yyy"</literal>)</argument>, <argument>.size = <literal type="number">3</literal></argument>, <argument>.sizeRepo = <literal type="number">3</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>, <argument>.bundleId = <literal type="number">1</literal></argument>, <argument>.bundleOffset = <literal type="number">8</literal></argument>,
                    <argument>.reference = NULL</argument>, <argument>.checksumSha1 = <literal type="string">"186154712b2d5f6791d85b9a0987b98fa231779c"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA <literal type="string">"xxxxx"</literal>)</argument>, <argument>.size = <literal type="number">5</literal></argument>, <argument>.sizeRepo = <literal type="number">5</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>, <argument>.bundleId = <literal type="number">1</literal></argument>, <argument>.bundleOffset = <literal type="number">11</literal></argument>,
                    <argument>.reference = NULL</argument>, <argument>.checksumSha1 = <literal type="string">"9addbf544119efa4a64223b649750a510f0d463f"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <comment type="line">// Set bogus sizeRepo and checksumSha1 to ensure this is not handled as a regular file</comment>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA <literal type="string">"zero-length"</literal>)</argument>, <argument>.size = <literal type="number">0</literal></argument>, <argument>.sizeRepo = <literal type="number">1</literal></argument>, <argument>.timestamp = <literal type="number">1482182866</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>, <argument>.bundleId = <literal type="number">1</literal></argument>, <argument>.bundleOffset = <literal type="number">16</literal></argument>,
                    <argument>.reference = NULL</argument>, <argument>.checksumSha1 = <literal type="string">"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA <literal type="string">"zz"</literal>)</argument>, <argument>.size = <literal type="number">2</literal></argument>, <argument>.sizeRepo = <literal type="number">2</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>, <argument>.bundleId = <literal type="number">1</literal></argument>, <argument>.bundleOffset = <literal type="number">17</literal></argument>,
                    <argument>.reference = NULL</argument>, <argument>.checksumSha1 = <literal type="string">"d7dacae2c968388960bf8970080a980ed5c5dcb7"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
                <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/"</literal> <name>TEST_LABEL</name> <literal type="string">"/bundle/1"</literal></expr></argument>,
                <argument><expr><name>PG_VERSION_94_STR</name> <literal type="string">"\n"</literal> <name>PG_VERSION_94_STR</name> <literal type="string">"\nyyyxxxxxAzzA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// base directory</comment>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestPath){
                    .name = STRDEF(TEST_PGDATA PG_PATH_BASE)</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// base/1 directory</comment>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestPath){
                    .name = STRDEF(TEST_PGDATA PG_PATH_BASE <literal type="string">"/1"</literal>)</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// base/1/PG_VERSION. File was written as part of bundle 1 above</comment>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA <literal type="string">"base/1/"</literal> PG_FILE_PGVERSION)</argument>, <argument>.size = <literal type="number">4</literal></argument>, <argument>.sizeRepo = <literal type="number">4</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>, <argument>.bundleId = <literal type="number">1</literal></argument>, <argument>.bundleOffset = <literal type="number">4</literal></argument>,
                    <argument>.checksumSha1 = <literal type="string">"8dbabb96e032b8d9f1993c0e4b9141e71ade01a1"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// base/1/2</comment>
            <expr_stmt><expr><name>fileBuffer</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA <literal type="string">"base/1/2"</literal>)</argument>, <argument>.size = <literal type="number">8192</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>,
                    <argument>.checksumSha1 = <literal type="string">"4d7b2a36c5387decf799352a3751883b7ceb96aa"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TEST_REPO_PATH</name> <literal type="string">"base/1/2"</literal></expr></argument>, <argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// base/1/10</comment>
            <expr_stmt><expr><name>fileBuffer</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">8194</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8193</literal></expr>]</index> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA <literal type="string">"base/1/10"</literal>)</argument>, <argument>.size = <literal type="number">8192</literal></argument>, <argument>.sizeRepo = <literal type="number">8192</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>, <argument>.bundleId = <literal type="number">1</literal></argument>, <argument>.bundleOffset = <literal type="number">1</literal></argument>,
                    <argument>.reference = STRDEF(TEST_LABEL_FULL)</argument>, <argument>.checksumSha1 = <literal type="string">"28757c756c03c37aca13692cb719c18d1510c190"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/"</literal> <name>TEST_LABEL_FULL</name> <literal type="string">"/bundle/1"</literal></expr></argument>, <argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// base/1/20 and base/1/21</comment>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA <literal type="string">"base/1/20"</literal>)</argument>, <argument>.size = <literal type="number">1</literal></argument>, <argument>.sizeRepo = <literal type="number">1</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>, <argument>.bundleId = <literal type="number">2</literal></argument>, <argument>.bundleOffset = <literal type="number">1</literal></argument>,
                    <argument>.reference = STRDEF(TEST_LABEL_DIFF)</argument>, <argument>.checksumSha1 = <literal type="string">"c032adc1ff629c9b66f22749ad667e6beadf144b"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA <literal type="string">"base/1/21"</literal>)</argument>, <argument>.size = <literal type="number">1</literal></argument>, <argument>.sizeRepo = <literal type="number">1</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>, <argument>.bundleId = <literal type="number">2</literal></argument>, <argument>.bundleOffset = <literal type="number">2</literal></argument>,
                    <argument>.reference = STRDEF(TEST_LABEL_DIFF)</argument>, <argument>.checksumSha1 = <literal type="string">"e9d71f5ee7c92d6dc9e92ffdad17b8bd49418f98"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/"</literal> <name>TEST_LABEL_DIFF</name> <literal type="string">"/bundle/2"</literal></expr></argument>, <argument><expr><literal type="string">"aXb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// base/1/30 and base/1/31</comment>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA <literal type="string">"base/1/30"</literal>)</argument>, <argument>.size = <literal type="number">1</literal></argument>, <argument>.sizeRepo = <literal type="number">1</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>, <argument>.bundleId = <literal type="number">2</literal></argument>, <argument>.bundleOffset = <literal type="number">1</literal></argument>,
                    <argument>.reference = STRDEF(TEST_LABEL_INCR)</argument>, <argument>.checksumSha1 = <literal type="string">"c032adc1ff629c9b66f22749ad667e6beadf144b"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA <literal type="string">"base/1/31"</literal>)</argument>, <argument>.size = <literal type="number">1</literal></argument>, <argument>.sizeRepo = <literal type="number">1</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>, <argument>.bundleId = <literal type="number">2</literal></argument>, <argument>.bundleOffset = <literal type="number">2</literal></argument>,
                    <argument>.reference = STRDEF(TEST_LABEL_INCR)</argument>, <argument>.checksumSha1 = <literal type="string">"e9d71f5ee7c92d6dc9e92ffdad17b8bd49418f98"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/"</literal> <name>TEST_LABEL_INCR</name> <literal type="string">"/bundle/2"</literal></expr></argument>, <argument><expr><literal type="string">"aXb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// system db name</comment>
            <macro><name>manifestDbAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestDb){.name = STRDEF(<literal type="string">"template1"</literal>)</argument>, <argument>.id = <literal type="number">1</literal></argument>, <argument>.lastSystemId = <literal type="number">99999</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// base/16384 directory</comment>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestPath){
                    .name = STRDEF(TEST_PGDATA PG_PATH_BASE <literal type="string">"/16384"</literal>)</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// base/16384/PG_VERSION</comment>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA <literal type="string">"base/16384/"</literal> PG_FILE_PGVERSION)</argument>, <argument>.size = <literal type="number">4</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>,
                    <argument>.checksumSha1 = <literal type="string">"8dbabb96e032b8d9f1993c0e4b9141e71ade01a1"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TEST_REPO_PATH</name> <literal type="string">"base/16384/"</literal> <name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><name>PG_VERSION_94_STR</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// base/16384/16385</comment>
            <expr_stmt><expr><name>fileBuffer</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">16384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA <literal type="string">"base/16384/16385"</literal>)</argument>, <argument>.size = <literal type="number">16384</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>,
                    <argument>.checksumSha1 = <literal type="string">"d74e5f7ebe52a3ed468ba08c5b6aefaccd1ca88f"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TEST_REPO_PATH</name> <literal type="string">"base/16384/16385"</literal></expr></argument>, <argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// base/32768 directory</comment>
            <macro><name>manifestDbAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestDb){.name = STRDEF(<literal type="string">"test2"</literal>)</argument>, <argument>.id = <literal type="number">32768</literal></argument>, <argument>.lastSystemId = <literal type="number">99999</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestPath){
                    .name = STRDEF(TEST_PGDATA PG_PATH_BASE <literal type="string">"/32768"</literal>)</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// base/32768/PG_VERSION</comment>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA <literal type="string">"base/32768/"</literal> PG_FILE_PGVERSION)</argument>, <argument>.size = <literal type="number">4</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>,
                    <argument>.checksumSha1 = <literal type="string">"8dbabb96e032b8d9f1993c0e4b9141e71ade01a1"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TEST_REPO_PATH</name> <literal type="string">"base/32768/"</literal> <name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><name>PG_VERSION_94_STR</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// base/32768/32769</comment>
            <expr_stmt><expr><name>fileBuffer</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">32768</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA <literal type="string">"base/32768/32769"</literal>)</argument>, <argument>.size = <literal type="number">32768</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>,
                    <argument>.checksumSha1 = <literal type="string">"a40f0986acb1531ce0cc75a23dcf8aa406ae9081"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TEST_REPO_PATH</name> <literal type="string">"base/32768/32769"</literal></expr></argument>, <argument><expr><name>fileBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// File link to postgresql.conf</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>MANIFEST_TARGET_PGDATA</name> <literal type="string">"/postgresql.conf"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <macro><name>manifestTargetAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestTarget){
                    .type = manifestTargetTypeLink</argument>, <argument>.name = name</argument>, <argument>.path = STRDEF(<literal type="string">"../config"</literal>)</argument>, <argument>.file = STRDEF(<literal type="string">"postgresql.conf"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestLinkAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestLink){
                    .name = name</argument>, <argument>.destination = STRDEF(<literal type="string">"../config/postgresql.conf"</literal>)</argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA <literal type="string">"postgresql.conf"</literal>)</argument>, <argument>.size = <literal type="number">15</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>,
                    <argument>.checksumSha1 = <literal type="string">"98b8abb2e681e2a5a7d8ab082c0a79727887558d"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TEST_REPO_PATH</name> <literal type="string">"postgresql.conf"</literal></expr></argument>, <argument><expr><literal type="string">"POSTGRESQL.CONF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// File link to pg_hba.conf</comment>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>MANIFEST_TARGET_PGDATA</name> <literal type="string">"/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>manifestTargetAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestTarget){
                    .type = manifestTargetTypeLink</argument>, <argument>.name = name</argument>, <argument>.path = STRDEF(<literal type="string">"../config"</literal>)</argument>, <argument>.file = STRDEF(<literal type="string">"pg_hba.conf"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestLinkAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestLink){
                    .name = name</argument>, <argument>.destination = STRDEF(<literal type="string">"../config/pg_hba.conf"</literal>)</argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA <literal type="string">"pg_hba.conf"</literal>)</argument>, <argument>.size = <literal type="number">11</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>,
                    <argument>.checksumSha1 = <literal type="string">"401215e092779574988a854d8c7caed7f91dba4b"</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TEST_REPO_PATH</name> <literal type="string">"pg_hba.conf"</literal></expr></argument>, <argument><expr><literal type="string">"PG_HBA.CONF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// tablespace_map (will be ignored during restore)</comment>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifest</argument>,
                <argument>&amp;(ManifestFile){
                    .name = STRDEF(TEST_PGDATA PG_FILE_TABLESPACEMAP)</argument>, <argument>.size = <literal type="number">0</literal></argument>, <argument>.timestamp = <literal type="number">1482182860</literal></argument>,
                    <argument>.mode = <literal type="number">0600</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()</argument>, <argument>.checksumSha1 = HASH_TYPE_SHA1_ZERO}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument>storageRepoWrite()</argument>, <argument>TEST_REPO_PATH PG_FILE_TABLESPACEMAP</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// Path link to pg_wal</comment>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>MANIFEST_TARGET_PGDATA</name> <literal type="string">"/pg_wal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>destination</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"../wal"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <macro><name>manifestTargetAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestTarget){.type = manifestTargetTypeLink</argument>, <argument>.name = name</argument>, <argument>.path = destination}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestPathAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestPath){.name = name</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestLinkAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestLink){.name = name</argument>, <argument>.destination = destination</argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
                <argument><expr><call><name>symlink</name><argument_list>(<argument><expr><literal type="string">"../wal"</literal></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/pg_wal"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// pg_xact path</comment>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestPath){.name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/pg_xact"</literal>)</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>,
                <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// pg_tblspc/1</comment>
            <macro><name>manifestTargetAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestTarget){
                    .type = manifestTargetTypeLink</argument>, <argument>.name = STRDEF(MANIFEST_TARGET_PGTBLSPC <literal type="string">"/1"</literal>)</argument>,
                    <argument>.path = STRDEF(TEST_PATH <literal type="string">"/ts/1"</literal>)</argument>, <argument>.tablespaceId = <literal type="number">1</literal></argument>, <argument>.tablespaceName = STRDEF(<literal type="string">"ts1"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestPath){
                    .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/"</literal> MANIFEST_TARGET_PGTBLSPC)</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>,
                    <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestPath){
                    .name = STRDEF(MANIFEST_TARGET_PGTBLSPC)</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestPath){
                    .name = STRDEF(MANIFEST_TARGET_PGTBLSPC <literal type="string">"/1"</literal>)</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestPathAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestPath){
                    .name = STRDEF(MANIFEST_TARGET_PGTBLSPC <literal type="string">"/1/PG_10_201707211"</literal>)</argument>, <argument>.mode = <literal type="number">0700</literal></argument>, <argument>.group = groupName()</argument>,
                    <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            <macro><name>manifestLinkAdd</name><argument_list>(
                <argument>manifest</argument>, <argument>&amp;(ManifestLink){
                    .name = STRDEF(MANIFEST_TARGET_PGDATA <literal type="string">"/"</literal> MANIFEST_TARGET_PGTBLSPC <literal type="string">"/1"</literal>)</argument>,
                    <argument>.destination = STRDEF(TEST_PATH <literal type="string">"/ts/1"</literal>)</argument>, <argument>.group = groupName()</argument>, <argument>.user = userName()}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// Always sort</comment>
            <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>targetList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fileList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>linkList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>pathList</name></name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>manifestSave</name><argument_list>(
            <argument><expr><name>manifest</name></expr></argument>,
            <argument><expr><call><name>storageWriteIo</name><argument_list>(
                <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/"</literal> <name>TEST_LABEL</name> <literal type="string">"/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add a few bogus paths/files/links to be removed in delta</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"bogus1/bogus2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_PATH_GLOBAL</name> <literal type="string">"/bogus3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create yyy file so it is not copied</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"yyy"</literal></expr></argument>, <argument><expr><literal type="string">"yyy"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add a few bogus links to be deleted</comment>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>symlink</name><argument_list>(<argument><expr><literal type="string">"../wal"</literal></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/pg_wal2"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdRestore</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"successful restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: repo1: restore backup set 20161219-212741F_20161219-212918I\n"</literal>
            <literal type="string">"P00   INFO: map link 'pg_hba.conf' to '../config/pg_hba.conf'\n"</literal>
            <literal type="string">"P00   INFO: map link 'pg_wal' to '../wal'\n"</literal>
            <literal type="string">"P00   INFO: link 'pg_xact' to '../xact'\n"</literal>
            <literal type="string">"P00   INFO: map link 'postgresql.conf' to '../config/postgresql.conf'\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' exists\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/config' exists\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/wal' exists\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/ts/1/PG_10_201707211' exists\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/xact' exists\n"</literal>
            <literal type="string">"P00 DETAIL: skip 'tablespace_map' -- tablespace links will be created based on mappings\n"</literal>
            <literal type="string">"P00   INFO: remove invalid files/links/paths from '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg'\n"</literal>
            <literal type="string">"P00 DETAIL: remove invalid path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/bogus1'\n"</literal>
            <literal type="string">"P00 DETAIL: remove invalid path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/global/bogus3'\n"</literal>
            <literal type="string">"P00 DETAIL: remove invalid link '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_wal2'\n"</literal>
            <literal type="string">"P00 DETAIL: remove invalid file '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/tablespace_map'\n"</literal>
            <literal type="string">"P00 DETAIL: create path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base'\n"</literal>
            <literal type="string">"P00 DETAIL: create path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/1'\n"</literal>
            <literal type="string">"P00 DETAIL: create path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/16384'\n"</literal>
            <literal type="string">"P00 DETAIL: create path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/32768'\n"</literal>
            <literal type="string">"P00 DETAIL: create symlink '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_xact' to '../xact'\n"</literal>
            <literal type="string">"P00 DETAIL: create symlink '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_hba.conf' to '../config/pg_hba.conf'\n"</literal>
            <literal type="string">"P00 DETAIL: create symlink '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/postgresql.conf' to '../config/postgresql.conf'\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/32768/32769 (32KB, [PCT]) checksum"</literal>
                <literal type="string">" a40f0986acb1531ce0cc75a23dcf8aa406ae9081\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/16384/16385 (16KB, [PCT]) checksum"</literal>
                <literal type="string">" d74e5f7ebe52a3ed468ba08c5b6aefaccd1ca88f\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/global/pg_control.pgbackrest.tmp (8KB, [PCT])"</literal>
                <literal type="string">" checksum 5e2b96c19c4f5c63a5afa2de504d29fe64a4c908\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/1/2 (8KB, [PCT]) checksum 4d7b2a36c5387decf799352a3751883b7ceb96aa\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/postgresql.conf (15B, [PCT]) checksum"</literal>
                <literal type="string">" 98b8abb2e681e2a5a7d8ab082c0a79727887558d\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_hba.conf (11B, [PCT]) checksum"</literal>
                <literal type="string">" 401215e092779574988a854d8c7caed7f91dba4b\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/32768/PG_VERSION (4B, [PCT])"</literal>
                <literal type="string">" checksum 8dbabb96e032b8d9f1993c0e4b9141e71ade01a1\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/16384/PG_VERSION (4B, [PCT])"</literal>
                <literal type="string">" checksum 8dbabb96e032b8d9f1993c0e4b9141e71ade01a1\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/1/10 (bundle 20161219-212741F/1/1, 8KB, [PCT])"</literal>
                <literal type="string">" checksum 28757c756c03c37aca13692cb719c18d1510c190\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/PG_VERSION (bundle 1/0, 4B, [PCT]) checksum"</literal>
                <literal type="string">" 8dbabb96e032b8d9f1993c0e4b9141e71ade01a1\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/1/PG_VERSION (bundle 1/4, 4B, [PCT]) checksum"</literal>
                <literal type="string">" 8dbabb96e032b8d9f1993c0e4b9141e71ade01a1\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/yyy - exists and matches backup (bundle 1/8, 3B, [PCT]) checksum"</literal>
                <literal type="string">" 186154712b2d5f6791d85b9a0987b98fa231779c\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/xxxxx (bundle 1/11, 5B, [PCT]) checksum"</literal>
                <literal type="string">" 9addbf544119efa4a64223b649750a510f0d463f\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/zz (bundle 1/17, 2B, [PCT]) checksum"</literal>
                <literal type="string">" d7dacae2c968388960bf8970080a980ed5c5dcb7\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/1/20 (bundle 20161219-212741F_20161219-212800D/2/1, 1B, [PCT]) checksum"</literal>
                <literal type="string">" c032adc1ff629c9b66f22749ad667e6beadf144b\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/1/21 (bundle 20161219-212741F_20161219-212800D/2/2, 1B, [PCT]) checksum"</literal>
                <literal type="string">" e9d71f5ee7c92d6dc9e92ffdad17b8bd49418f98\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/1/30 (bundle 20161219-212741F_20161219-212900I/2/1, 1B, [PCT]) checksum"</literal>
                <literal type="string">" c032adc1ff629c9b66f22749ad667e6beadf144b\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/1/31 (bundle 20161219-212741F_20161219-212900I/2/2, 1B, [PCT]) checksum"</literal>
                <literal type="string">" e9d71f5ee7c92d6dc9e92ffdad17b8bd49418f98\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/global/999 (0B, [PCT])\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/global/888 (0B, [PCT])\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/zero-length (bundle 1/16, 0B, [PCT])\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/config'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/1'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/16384'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/32768'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_wal'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_xact'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1/PG_10_201707211'\n"</literal>
            <literal type="string">"P00   INFO: restore global/pg_control (performed last to ensure aborted restores cannot be started)\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/global'\n"</literal>
            <literal type="string">"P00   INFO: restore size = [SIZE], file total = 21"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><literal type="string">"./\n"</literal>
            <literal type="string">"PG_VERSION {s=4, t=1482182860}\n"</literal>
            <literal type="string">"base/\n"</literal>
            <literal type="string">"base/1/\n"</literal>
            <literal type="string">"base/1/10 {s=8192, t=1482182860}\n"</literal>
            <literal type="string">"base/1/2 {s=8192, t=1482182860}\n"</literal>
            <literal type="string">"base/1/20 {s=1, t=1482182860}\n"</literal>
            <literal type="string">"base/1/21 {s=1, t=1482182860}\n"</literal>
            <literal type="string">"base/1/30 {s=1, t=1482182860}\n"</literal>
            <literal type="string">"base/1/31 {s=1, t=1482182860}\n"</literal>
            <literal type="string">"base/1/PG_VERSION {s=4, t=1482182860}\n"</literal>
            <literal type="string">"base/16384/\n"</literal>
            <literal type="string">"base/16384/16385 {s=16384, t=1482182860}\n"</literal>
            <literal type="string">"base/16384/PG_VERSION {s=4, t=1482182860}\n"</literal>
            <literal type="string">"base/32768/\n"</literal>
            <literal type="string">"base/32768/32769 {s=32768, t=1482182860}\n"</literal>
            <literal type="string">"base/32768/PG_VERSION {s=4, t=1482182860}\n"</literal>
            <literal type="string">"global/\n"</literal>
            <literal type="string">"global/888 {s=0, t=1482182860}\n"</literal>
            <literal type="string">"global/999 {s=0, t=1482182860}\n"</literal>
            <literal type="string">"global/pg_control {s=8192, t=1482182860}\n"</literal>
            <literal type="string">"pg_hba.conf&gt; {d=../config/pg_hba.conf}\n"</literal>
            <literal type="string">"pg_tblspc/\n"</literal>
            <literal type="string">"pg_tblspc/1&gt; {d="</literal> <name>TEST_PATH</name> <literal type="string">"/ts/1}\n"</literal>
            <literal type="string">"pg_wal&gt; {d=../wal}\n"</literal>
            <literal type="string">"pg_xact&gt; {d=../xact}\n"</literal>
            <literal type="string">"postgresql.conf&gt; {d=../config/postgresql.conf}\n"</literal>
            <literal type="string">"xxxxx {s=5, t=1482182860}\n"</literal>
            <literal type="string">"yyy {s=3, t=1482182860}\n"</literal>
            <literal type="string">"zero-length {s=0, t=1482182866}\n"</literal>
            <literal type="string">"zz {s=2, t=1482182860}\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelBasic</name></expr></argument>, <argument><expr><operator>.</operator><name>includeDot</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_tblspc/1"</literal></expr></argument>,
            <argument><expr><literal type="string">".&gt; {d="</literal> <name>TEST_PATH</name> <literal type="string">"/ts/1}\n"</literal>
            <literal type="string">"16384/\n"</literal>
            <literal type="string">"16384/PG_VERSION {s=4, t=1482182860}\n"</literal>
            <literal type="string">"PG_10_201707211/\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelBasic</name></expr></argument>, <argument><expr><operator>.</operator><name>includeDot</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"../wal"</literal></expr></argument>,
            <argument><expr><literal type="string">"./\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelBasic</name></expr></argument>, <argument><expr><operator>.</operator><name>includeDot</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"incremental delta selective restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/repo-bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepo</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptSpoolPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/spool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDelta</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"preserve"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkMap</name></expr></argument>, <argument><expr><literal type="string">"pg_wal=../wal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkMap</name></expr></argument>, <argument><expr><literal type="string">"postgresql.conf=../config/postgresql.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLinkMap</name></expr></argument>, <argument><expr><literal type="string">"pg_hba.conf=../config/pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbInclude</name></expr></argument>, <argument><expr><literal type="string">"16384"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Move pg1-path and put a link in its place. This tests that restore works when pg1-path is a symlink yet should be</comment>
        <comment type="line">// completely invisible in the manifest and logging.</comment>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"mv %s %s-data"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"ln -s %s-data %s "</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create the stanza archive pool path to check that it gets removed</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE</name> <literal type="string">"/empty.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write recovery.conf so we don't get a preserve warning</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_RECOVERYCONF</name></expr></argument>, <argument><expr><literal type="string">"Some Settings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Change timestamp so it will be updated</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_TIME</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"global/999"</literal></expr></argument>, <argument><expr><literal type="number">777</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Enlarge a file so it gets truncated. Keep timestamp the same to prove that it gets updated after the truncate.</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"base/16384/"</literal> <name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><name>PG_VERSION_94_STR</name> <literal type="string">"\n\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1482182860</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Enlarge a zero-length file so it gets truncated</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"global/888"</literal></expr></argument>, <argument><expr><literal type="string">"X"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Change size so delta will skip based on size</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"base/1/2"</literal></expr></argument>, <argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_MODE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"base/1/2"</literal></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Covert pg_wal to a path so it will be removed</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Covert pg_hba.conf to a path so it will be removed</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_hba.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_hba.conf"</literal></expr></argument>, <argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Update the manifest with online = true to test recovery start time logging</comment>
        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionOnline</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupTimestampStart</name></name> <operator>=</operator> <literal type="number">1482182958</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnLogReplaceAdd</name><argument_list>(<argument><expr><literal type="string">"[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"TIME"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>manifestSave</name><argument_list>(
            <argument><expr><name>manifest</name></expr></argument>,
            <argument><expr><call><name>storageWriteIo</name><argument_list>(
                <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/"</literal> <name>TEST_LABEL</name> <literal type="string">"/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdRestore</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"successful restore"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: repo2: restore backup set 20161219-212741F_20161219-212918I, recovery will start at [TIME]\n"</literal>
            <literal type="string">"P00   INFO: map link 'pg_hba.conf' to '../config/pg_hba.conf'\n"</literal>
            <literal type="string">"P00   INFO: map link 'pg_wal' to '../wal'\n"</literal>
            <literal type="string">"P00   INFO: map link 'postgresql.conf' to '../config/postgresql.conf'\n"</literal>
            <literal type="string">"P00 DETAIL: databases found for selective restore (1, 16384, 32768)\n"</literal>
            <literal type="string">"P00 DETAIL: databases excluded (zeroed) from selective restore (32768)\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' exists\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/config' exists\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/wal' exists\n"</literal>
            <literal type="string">"P00 DETAIL: check '"</literal> <name>TEST_PATH</name> <literal type="string">"/ts/1/PG_10_201707211' exists\n"</literal>
            <literal type="string">"P00 DETAIL: skip 'tablespace_map' -- tablespace links will be created based on mappings\n"</literal>
            <literal type="string">"P00 DETAIL: remove 'global/pg_control' so cluster will not start if restore does not complete\n"</literal>
            <literal type="string">"P00   INFO: remove invalid files/links/paths from '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg'\n"</literal>
            <literal type="string">"P00 DETAIL: remove invalid file '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_hba.conf'\n"</literal>
            <literal type="string">"P00 DETAIL: remove invalid path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_wal'\n"</literal>
            <literal type="string">"P00 DETAIL: remove invalid link '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_xact'\n"</literal>
            <literal type="string">"P00   INFO: remove invalid files/links/paths from '"</literal> <name>TEST_PATH</name> <literal type="string">"/wal'\n"</literal>
            <literal type="string">"P00   INFO: remove invalid files/links/paths from '"</literal> <name>TEST_PATH</name> <literal type="string">"/ts/1/PG_10_201707211'\n"</literal>
            <literal type="string">"P00 DETAIL: create symlink '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_wal' to '../wal'\n"</literal>
            <literal type="string">"P00 DETAIL: create path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_xact'\n"</literal>
            <literal type="string">"P00 DETAIL: create symlink '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_hba.conf' to '../config/pg_hba.conf'\n"</literal>
            <literal type="string">"P01 DETAIL: restore zeroed file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/32768/32769 (32KB, [PCT])\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/16384/16385 - exists and matches backup (16KB, [PCT])"</literal>
                <literal type="string">" checksum d74e5f7ebe52a3ed468ba08c5b6aefaccd1ca88f\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/global/pg_control.pgbackrest.tmp (8KB, [PCT])"</literal>
                <literal type="string">" checksum 5e2b96c19c4f5c63a5afa2de504d29fe64a4c908\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/1/2 (8KB, [PCT]) checksum 4d7b2a36c5387decf799352a3751883b7ceb96aa\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/postgresql.conf - exists and matches backup (15B, [PCT])"</literal>
                <literal type="string">" checksum 98b8abb2e681e2a5a7d8ab082c0a79727887558d\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_hba.conf - exists and matches backup (11B, [PCT])"</literal>
                <literal type="string">" checksum 401215e092779574988a854d8c7caed7f91dba4b\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/32768/PG_VERSION - exists and matches backup (4B, [PCT])"</literal>
                <literal type="string">" checksum 8dbabb96e032b8d9f1993c0e4b9141e71ade01a1\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/16384/PG_VERSION - exists and matches backup (4B, [PCT])"</literal>
                <literal type="string">" checksum 8dbabb96e032b8d9f1993c0e4b9141e71ade01a1\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/1/10 - exists and matches backup (bundle 20161219-212741F/1/1, 8KB,"</literal>
                <literal type="string">" [PCT]) checksum 28757c756c03c37aca13692cb719c18d1510c190\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/PG_VERSION - exists and matches backup (bundle 1/0, 4B, [PCT])"</literal>
                <literal type="string">" checksum 8dbabb96e032b8d9f1993c0e4b9141e71ade01a1\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/1/PG_VERSION - exists and matches backup (bundle 1/4, 4B, [PCT])"</literal>
                <literal type="string">" checksum 8dbabb96e032b8d9f1993c0e4b9141e71ade01a1\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/yyy - exists and matches backup (bundle 1/8, 3B, [PCT]) checksum"</literal>
                <literal type="string">" 186154712b2d5f6791d85b9a0987b98fa231779c\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/xxxxx - exists and matches backup (bundle 1/11, 5B, [PCT]) checksum"</literal>
                <literal type="string">" 9addbf544119efa4a64223b649750a510f0d463f\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/zz - exists and matches backup (bundle 1/17, 2B, [PCT]) checksum"</literal>
                <literal type="string">" d7dacae2c968388960bf8970080a980ed5c5dcb7\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/1/20 - exists and matches backup (bundle"</literal>
                <literal type="string">" 20161219-212741F_20161219-212800D/2/1, 1B, [PCT]) checksum c032adc1ff629c9b66f22749ad667e6beadf144b\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/1/21 - exists and matches backup (bundle"</literal>
                <literal type="string">" 20161219-212741F_20161219-212800D/2/2, 1B, [PCT]) checksum e9d71f5ee7c92d6dc9e92ffdad17b8bd49418f98\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/1/30 - exists and matches backup (bundle"</literal>
                <literal type="string">" 20161219-212741F_20161219-212900I/2/1, 1B, [PCT]) checksum c032adc1ff629c9b66f22749ad667e6beadf144b\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/1/31 - exists and matches backup (bundle"</literal>
                <literal type="string">" 20161219-212741F_20161219-212900I/2/2, 1B, [PCT]) checksum e9d71f5ee7c92d6dc9e92ffdad17b8bd49418f98\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/global/999 - exists and is zero size (0B, [PCT])\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/global/888 - exists and is zero size (0B, [PCT])\n"</literal>
            <literal type="string">"P01 DETAIL: restore file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/zero-length - exists and is zero size (bundle 1/16, 0B, [PCT])\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/config'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/1'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/16384'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/base/32768'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_wal'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_xact'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1'\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_tblspc/1/PG_10_201707211'\n"</literal>
            <literal type="string">"P00   INFO: restore global/pg_control (performed last to ensure aborted restores cannot be started)\n"</literal>
            <literal type="string">"P00 DETAIL: sync path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/global'\n"</literal>
            <literal type="string">"P00   INFO: restore size = [SIZE], file total = 21"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check stanza archive spool path was removed</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_PATH_ARCHIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <comment type="line">// Keep this test at the end since is corrupts the repo</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove a repo file so a restore job errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument>storageRepoWrite()</argument>, <argument>TEST_REPO_PATH PG_PATH_GLOBAL <literal type="string">"/"</literal> PG_FILE_PGCONTROL</argument>, <argument>.errorOnMissing = true</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_PATH_GLOBAL</name> <literal type="string">"/"</literal> <name>PG_FILE_PGCONTROL</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>jobRetry</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set log level to warn</comment>
        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelWarn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdRestore</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
            <argument><expr><literal type="string">"raised from local-1 shim protocol: unable to open missing file"</literal>
                <literal type="string">" '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/test1/20161219-212741F_20161219-212918I/pg_data/global/pg_control' for read\n"</literal>
            <literal type="string">"[FileMissingError] on retry after 0ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Free local processes that were not freed because of the error</comment>
        <expr_stmt><expr><call><name>protocolFree</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
