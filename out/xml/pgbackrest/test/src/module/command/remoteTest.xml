<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/command/remoteTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Remote Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessFork.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessStorage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create default storage object for testing</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>hrnStorage</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>HRN_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cmdRemote()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"no lock is required because process is &gt; 0 (not the main remote)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcess</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRemoteType</name></expr></argument>, <argument><expr><name>protocolStorageTypeRepo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdInfo</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleRemote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>cmdRemote</name><argument_list>(
                    <argument><expr><call><name>protocolServerNew</name><argument_list>(
                        <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ProtocolClient</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><call><name>protocolClientNew</name><argument_list>(
                    <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>,
                    <argument><expr><call><name>ioFdReadNewOpen</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"server read"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_READ_FD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"server write"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE_FD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>protocolClientNoOp</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>protocolClientFree</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"no remote lock is required for this command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcess</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRemoteType</name></expr></argument>, <argument><expr><name>protocolStorageTypeRepo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLockPath</name></expr></argument>, <argument><expr><literal type="string">"/bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleRemote</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>cmdRemote</name><argument_list>(
                    <argument><expr><call><name>protocolServerNew</name><argument_list>(
                        <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ProtocolClient</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>client</name></expr></argument>,
                    <argument><expr><call><name>protocolClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>,
                        <argument><expr><call><name>ioFdReadNewOpen</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"server read"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_READ_FD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"server write"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE_FD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"create client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>protocolClientNoOp</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>protocolClientFree</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remote lock is required but lock path is invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcess</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRemoteType</name></expr></argument>, <argument><expr><name>protocolStorageTypeRepo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLockPath</name></expr></argument>, <argument><expr><literal type="string">"/bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleRemote</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>cmdRemote</name><argument_list>(
                    <argument><expr><call><name>protocolServerNew</name><argument_list>(
                        <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ProtocolClient</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>client</name></expr></argument>,
                    <argument><expr><call><name>protocolClientNew</name><argument_list>(
                        <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>,
                        <argument><expr><call><name>ioFdReadNewOpen</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"server read"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_READ_FD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"server write"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE_FD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>protocolClientNoOp</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathCreateError</name></expr></argument>,
                    <argument><expr><literal type="string">"raised from test: unable to create path '/bogus': [13] Permission denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Do not send the exit command before freeing since the server has already errored</comment>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolClientNoExit</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"client no exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolClientFree</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"client free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remote lock is required and succeeds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcess</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRemoteType</name></expr></argument>, <argument><expr><name>protocolStorageTypeRepo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepo</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleRemote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>cmdRemote</name><argument_list>(
                    <argument><expr><call><name>protocolServerNew</name><argument_list>(
                        <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ProtocolClient</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>client</name></expr></argument>,
                    <argument><expr><call><name>protocolClientNew</name><argument_list>(
                        <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>,
                        <argument><expr><call><name>ioFdReadNewOpen</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"server read"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_READ_FD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"server write"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE_FD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"create client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>protocolClientNoOp</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(<argument><expr><name>hrnStorage</name></expr></argument>, <argument><expr><literal type="string">"lock/test-archive"</literal> <name>LOCK_FILE_EXT</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"lock exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>protocolClientFree</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remote lock is required but stop file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcess</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRemoteType</name></expr></argument>, <argument><expr><name>protocolStorageTypeRepo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleRemote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>cmdRemote</name><argument_list>(
                    <argument><expr><call><name>protocolServerNew</name><argument_list>(
                        <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>hrnStorage</name></expr></argument>, <argument><expr><literal type="string">"lock/all"</literal> <name>STOP_FILE_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>ProtocolClient</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>client</name></expr></argument>,
                    <argument><expr><call><name>protocolClientNew</name><argument_list>(
                        <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>,
                        <argument><expr><call><name>ioFdReadNewOpen</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"server read"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_READ_FD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"server write"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE_FD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>protocolClientNoOp</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>StopError</name></expr></argument>, <argument><expr><literal type="string">"raised from test: stop file exists for all stanzas"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Do not send the exit command before freeing since the server has already errored</comment>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolClientNoExit</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"client no exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolClientFree</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"client free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><name>hrnStorage</name></expr></argument>, <argument><expr><literal type="string">"lock/all"</literal> <name>STOP_FILE_EXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
