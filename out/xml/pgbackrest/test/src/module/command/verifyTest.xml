<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/command/verifyTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Verify Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPostgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPq.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessProtocol.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create storage</comment>
    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Install local command handler shim</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ProtocolServerHandler</name></type> <name><name>testLocalHandlerList</name><index>[]</index></name> <init>= <expr><block>{<expr><name>PROTOCOL_SERVER_HANDLER_VERIFY_LIST</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>hrnProtocolLocalShimInstall</name><argument_list>(<argument><expr><name>testLocalHandlerList</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>testLocalHandlerList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argListBase</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fileContents</name> <init>= <expr><literal type="string">"acefile"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>fileSize</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>fileChecksum</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"d1cd8a7d11daa26814b93eb604e1d49ab4b43770"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BACKUP_DB1_94</name></cpp:macro>                                                                                                     \
        <cpp:value>"db-catalog-version=201409291\n"                                                                                           \
        "db-control-version=942\n"                                                                                                 \
        "db-id=1\n"                                                                                                                \
        "db-system-id=" HRN_PG_SYSTEMID_94_Z "\n"                                                                                  \
        "db-version=\"9.4\"\n"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BACKUP_DB2_11</name></cpp:macro>                                                                                                     \
        <cpp:value>"db-catalog-version=201707211\n"                                                                                           \
        "db-control-version=1100\n"                                                                                                \
        "db-id=2\n"                                                                                                                \
        "db-system-id=" HRN_PG_SYSTEMID_11_Z "\n"                                                                                  \
        "db-version=\"11\"\n"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BACKUP_DB1_CURRENT_FULL1</name></cpp:macro>                                                                                          \
        <cpp:value>"20181119-152138F={"                                                                                                       \
        "\"backrest-format\":5,\"backrest-version\":\"2.28dev\","                                                                  \
        "\"backup-archive-start\":\"000000010000000000000002\",\"backup-archive-stop\":\"000000010000000000000002\","              \
        "\"backup-info-repo-size\":2369186,\"backup-info-repo-size-delta\":2369186,"                                               \
        "\"backup-info-size\":20162900,\"backup-info-size-delta\":20162900,"                                                       \
        "\"backup-timestamp-start\":1482182846,\"backup-timestamp-stop\":1482182861,\"backup-type\":\"full\","                     \
        "\"db-id\":1,\"option-archive-check\":true,\"option-archive-copy\":false,\"option-backup-standby\":false,"                 \
        "\"option-checksum-page\":true,\"option-compress\":true,\"option-hardlink\":false,\"option-online\":true}\n"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BACKUP_DB1_CURRENT_FULL2</name></cpp:macro>                                                                                          \
        <cpp:value>"20181119-152800F={"                                                                                                       \
        "\"backrest-format\":5,\"backrest-version\":\"2.08dev\","                                                                  \
        "\"backup-info-repo-size\":2369186,\"backup-info-repo-size-delta\":2369186,"                                               \
        "\"backup-info-size\":20162900,\"backup-info-size-delta\":20162900,"                                                       \
        "\"backup-timestamp-start\":1542640898,\"backup-timestamp-stop\":1542640911,\"backup-type\":\"full\","                     \
        "\"db-id\":1,\"option-archive-check\":true,\"option-archive-copy\":false,\"option-backup-standby\":false,"                 \
        "\"option-checksum-page\":true,\"option-compress\":true,\"option-hardlink\":false,\"option-online\":true}\n"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BACKUP_DB1_CURRENT_FULL3</name></cpp:macro>                                                                                          \
        <cpp:value>"20181119-152900F={"                                                                                                       \
        "\"backrest-format\":5,\"backrest-version\":\"2.08dev\","                                                                  \
        "\"backup-archive-start\":\"000000010000000000000004\",\"backup-archive-stop\":\"000000010000000000000004\","              \
        "\"backup-info-repo-size\":2369186,\"backup-info-repo-size-delta\":2369186,"                                               \
        "\"backup-info-size\":20162900,\"backup-info-size-delta\":20162900,"                                                       \
        "\"backup-timestamp-start\":1542640898,\"backup-timestamp-stop\":1542640911,\"backup-type\":\"full\","                     \
        "\"db-id\":1,\"option-archive-check\":true,\"option-archive-copy\":false,\"option-backup-standby\":false,"                 \
        "\"option-checksum-page\":true,\"option-compress\":true,\"option-hardlink\":false,\"option-online\":true}\n"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BACKUP_DB1_HISTORY</name></cpp:macro>                                                                                                \
        <cpp:value>"1={\"db-catalog-version\":201409291,\"db-control-version\":942,\"db-system-id\":" HRN_PG_SYSTEMID_94_Z ","                \
            "\"db-version\":\"9.4\"}"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BACKUP_DB2_HISTORY</name></cpp:macro>                                                                                                \
        <cpp:value>"2={\"db-catalog-version\":201707211,\"db-control-version\":1100,\"db-system-id\":" HRN_PG_SYSTEMID_11_Z ","               \
            "\"db-version\":\"11\"}"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BACKUP_INFO_MULTI_HISTORY_BASE</name></cpp:macro>                                                                                    \
        <cpp:value>"[backup:current]\n"                                                                                                       \
        TEST_BACKUP_DB1_CURRENT_FULL1                                                                                              \
        TEST_BACKUP_DB1_CURRENT_FULL2                                                                                              \
        TEST_BACKUP_DB1_CURRENT_FULL3                                                                                              \
        "\n"                                                                                                                       \
        "[db]\n"                                                                                                                   \
        TEST_BACKUP_DB2_11                                                                                                         \
        "\n"                                                                                                                       \
        "[db:history]\n"                                                                                                           \
        TEST_BACKUP_DB1_HISTORY                                                                                                    \
        "\n"                                                                                                                       \
        TEST_BACKUP_DB2_HISTORY</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ARCHIVE_INFO_BASE</name></cpp:macro>                                                                                                 \
        <cpp:value>"[db]\n"                                                                                                                   \
        "db-id=1\n"                                                                                                                \
        "db-system-id=" HRN_PG_SYSTEMID_94_Z "\n"                                                                                  \
        "db-version=\"9.4\"\n"                                                                                                     \
        "\n"                                                                                                                       \
        "[db:history]\n"                                                                                                           \
        "1={\"db-id\":" HRN_PG_SYSTEMID_94_Z ",\"db-version\":\"9.4\"}"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ARCHIVE_INFO_MULTI_HISTORY_BASE</name></cpp:macro>                                                                                   \
        <cpp:value>"[db]\n"                                                                                                                   \
        "db-id=2\n"                                                                                                                \
        "db-system-id=" HRN_PG_SYSTEMID_11_Z "\n"                                                                                  \
        "db-version=\"11\"\n"                                                                                                      \
        "\n"                                                                                                                       \
        "[db:history]\n"                                                                                                           \
        "1={\"db-id\":" HRN_PG_SYSTEMID_94_Z ",\"db-version\":\"9.4\"}\n"                                                          \
        "2={\"db-id\":" HRN_PG_SYSTEMID_11_Z ",\"db-version\":\"11\"}"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_HEADER</name></cpp:macro>                                                                                                   \
        <cpp:value>"[backup]\n"                                                                                                               \
        "backup-label=null\n"                                                                                                      \
        "backup-timestamp-copy-start=0\n"                                                                                          \
        "backup-timestamp-start=0\n"                                                                                               \
        "backup-timestamp-stop=0\n"                                                                                                \
        "backup-type=\"full\"\n"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_DB_92</name></cpp:macro>                                                                                                    \
        <cpp:value>"\n"                                                                                                                       \
        "[backup:db]\n"                                                                                                            \
        "db-catalog-version=201204301\n"                                                                                           \
        "db-control-version=922\n"                                                                                                 \
        "db-id=1\n"                                                                                                                \
        "db-system-id=" HRN_PG_SYSTEMID_94_Z "\n"                                                                                  \
        "db-version=\"9.2\"\n"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_DB_94</name></cpp:macro>                                                                                                    \
        <cpp:value>"\n"                                                                                                                       \
        "[backup:db]\n"                                                                                                            \
        "db-catalog-version=201409291\n"                                                                                           \
        "db-control-version=942\n"                                                                                                 \
        "db-id=1\n"                                                                                                                \
        "db-system-id=" HRN_PG_SYSTEMID_94_Z "\n"                                                                                  \
        "db-version=\"9.4\"\n"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_OPTION_ALL</name></cpp:macro>                                                                                               \
        <cpp:value>"\n"                                                                                                                       \
        "[backup:option]\n"                                                                                                        \
        "option-archive-check=false\n"                                                                                             \
        "option-archive-copy=false\n"                                                                                              \
        "option-checksum-page=false\n"                                                                                             \
        "option-compress=false\n"                                                                                                  \
        "option-compress-type=\"none\"\n"                                                                                          \
        "option-hardlink=false\n"                                                                                                  \
        "option-online=false\n"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_OPTION_ARCHIVE_TRUE</name></cpp:macro>                                                                                      \
        <cpp:value>"\n"                                                                                                                       \
        "[backup:option]\n"                                                                                                        \
        "option-archive-check=true\n"                                                                                              \
        "option-archive-copy=true\n"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_TARGET</name></cpp:macro>                                                                                                   \
        <cpp:value>"\n"                                                                                                                       \
        "[backup:target]\n"                                                                                                        \
        "pg_data={\"path\":\"/pg/base\",\"type\":\"path\"}\n"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_DB</name></cpp:macro>                                                                                                       \
        <cpp:value>"\n"                                                                                                                       \
        "[db]\n"                                                                                                                   \
        "postgres={\"db-id\":12173,\"db-last-system-id\":12168}\n"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_FILE</name></cpp:macro>                                                                                                     \
        <cpp:value>"\n"                                                                                                                       \
        "[target:file]\n"                                                                                                          \
        "pg_data/PG_VERSION={\"checksum\":\"184473f470864e067ee3a22e64b47b0a1c356f29\",\"size\":4,\"timestamp\":1565282114}\n"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_FILE_DEFAULT</name></cpp:macro>                                                                                             \
        <cpp:value>"\n"                                                                                                                       \
        "[target:file:default]\n"                                                                                                  \
        "group=\"group1\"\n"                                                                                                       \
        "mode=\"0600\"\n"                                                                                                          \
        "user=\"user1\"\n"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_LINK</name></cpp:macro>                                                                                                     \
        <cpp:value>"\n"                                                                                                                       \
        "[target:link]\n"                                                                                                          \
        "pg_data/pg_stat={\"destination\":\"../pg_stat\"}\n"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_LINK_DEFAULT</name></cpp:macro>                                                                                             \
        <cpp:value>"\n"                                                                                                                       \
        "[target:link:default]\n"                                                                                                  \
        "group=\"group1\"\n"                                                                                                       \
        "user=false\n"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_PATH</name></cpp:macro>                                                                                                     \
        <cpp:value>"\n"                                                                                                                       \
        "[target:path]\n"                                                                                                          \
        "pg_data={\"user\":\"user1\"}\n"                                                                                           \

    #define TEST_MANIFEST_PATH_DEFAULT                                                                                             \
        "\n"                                                                                                                       \
        "[target:path:default]\n"                                                                                                  \
        "group=false\n"                                                                                                            \
        "mode=\"0700\"\n"                                                                                                          \
        "user=\"user1\"\n"</cpp:value></cpp:define>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_INVALID_BACKREST_INFO</name></cpp:macro>                                                                                             \
        <cpp:value>"[backrest]\n"                                                                                                             \
        "backrest-checksum=\"BOGUS\"\n"                                                                                            \
        "backrest-format=5\n"                                                                                                      \
        "backrest-version=\"2.28\"\n"</cpp:value></cpp:define>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"verifyManifestFile()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Load Parameters</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BACKUP_LABEL_FULL</name></cpp:macro>                              <cpp:value>"20181119-152138F"</cpp:value></cpp:define>

        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>jobErrorTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>VerifyBackupResult</name></type> <name>backupResult</name> <init>= <expr><block>{<expr><operator>.</operator><name>backupLabel</name> <operator>=</operator> <macro><name>strNewZ</name><argument_list>(<argument>TEST_BACKUP_LABEL_FULL</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>InfoPg</name> <modifier>*</modifier></type><name>infoPg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>infoPg</name></expr></argument>, <argument><expr><call><name>infoArchivePg</name><argument_list>(<argument><expr><call><name>infoArchiveNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><call><name>harnessInfoChecksumZ</name><argument_list>(<argument><expr><name>TEST_ARCHIVE_INFO_BASE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"infoPg from archive.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"manifest.copy exists, no manifest main, manifest db version not in history, not current db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>STORAGE_REPO_BACKUP <literal type="string">"/"</literal> TEST_BACKUP_LABEL_FULL <literal type="string">"/"</literal> BACKUP_MANIFEST_FILE</argument>,
            <argument>TEST_MANIFEST_HEADER
            TEST_MANIFEST_DB_92
            TEST_MANIFEST_OPTION_ALL
            TEST_MANIFEST_TARGET
            TEST_MANIFEST_DB
            TEST_MANIFEST_FILE
            TEST_MANIFEST_FILE_DEFAULT
            TEST_MANIFEST_LINK
            TEST_MANIFEST_LINK_DEFAULT
            TEST_MANIFEST_PATH
            TEST_MANIFEST_PATH_DEFAULT</argument>,
            <argument>.comment = <literal type="string">"manifest db section mismatch"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>backupResult</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>backupValid</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>verifyManifestFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backupResult</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>infoPg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jobErrorTotal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"verify manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"manifest not set - pg version mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>backupResult</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><name>backupInvalid</name></expr></argument>, <argument><expr><literal type="string">"manifest unusable - backup invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/db/20181119-152138F/backup.manifest.copy'"</literal>
                <literal type="string">" for read\n"</literal>
            <literal type="string">"P00   INFO: '20181119-152138F' may not be recoverable - PG data (id 1, version 9.2, system-id "</literal>
                <name>HRN_PG_SYSTEMID_94_Z</name> <literal type="string">") is not in the backup.info history, skipping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"rerun test with db-system-id invalid and no main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/"</literal> <name>TEST_BACKUP_LABEL_FULL</name> <literal type="string">"/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>STORAGE_REPO_BACKUP <literal type="string">"/"</literal> TEST_BACKUP_LABEL_FULL <literal type="string">"/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>,
            <argument>TEST_MANIFEST_HEADER
            <literal type="string">"\n"</literal>
            <literal type="string">"[backup:db]\n"</literal>
            <literal type="string">"db-catalog-version=201409291\n"</literal>
            <literal type="string">"db-control-version=942\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id=0\n"</literal>
            <literal type="string">"db-version=\"9.4\"\n"</literal>
            TEST_MANIFEST_OPTION_ALL
            TEST_MANIFEST_TARGET
            TEST_MANIFEST_DB
            TEST_MANIFEST_FILE
            TEST_MANIFEST_FILE_DEFAULT
            TEST_MANIFEST_LINK
            TEST_MANIFEST_LINK_DEFAULT
            TEST_MANIFEST_PATH
            TEST_MANIFEST_PATH_DEFAULT</argument>,
            <argument>.comment = <literal type="string">"manifest copy - invalid system-id"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><name><name>backupResult</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>backupValid</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>verifyManifestFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backupResult</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>infoPg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jobErrorTotal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"verify manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"manifest not set - pg system-id mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>backupResult</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><name>backupInvalid</name></expr></argument>, <argument><expr><literal type="string">"manifest unusable - backup invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/db/20181119-152138F/backup.manifest' for read\n"</literal>
            <literal type="string">"P00 DETAIL: 20181119-152138F/backup.manifest is missing or unusable, using copy\n"</literal>
            <literal type="string">"P00   INFO: '20181119-152138F' may not be recoverable - PG data (id 1, version 9.4, system-id 0) is not in the "</literal>
                <literal type="string">"backup.info history, skipping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"rerun copy test with db-id invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>STORAGE_REPO_BACKUP <literal type="string">"/"</literal> TEST_BACKUP_LABEL_FULL <literal type="string">"/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>,
            <argument>TEST_MANIFEST_HEADER
            <literal type="string">"\n"</literal>
            <literal type="string">"[backup:db]\n"</literal>
            <literal type="string">"db-catalog-version=201409291\n"</literal>
            <literal type="string">"db-control-version=942\n"</literal>
            <literal type="string">"db-id=0\n"</literal>
            <literal type="string">"db-system-id="</literal> HRN_PG_SYSTEMID_94_Z <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.4\"\n"</literal>
            TEST_MANIFEST_OPTION_ALL
            TEST_MANIFEST_TARGET
            TEST_MANIFEST_DB
            TEST_MANIFEST_FILE
            TEST_MANIFEST_FILE_DEFAULT
            TEST_MANIFEST_LINK
            TEST_MANIFEST_LINK_DEFAULT
            TEST_MANIFEST_PATH
            TEST_MANIFEST_PATH_DEFAULT</argument>,
            <argument>.comment = <literal type="string">"manifest copy - invalid db-id"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><name><name>backupResult</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>backupValid</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>verifyManifestFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backupResult</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>infoPg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jobErrorTotal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"verify manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"manifest not set - pg db-id mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>backupResult</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><name>backupInvalid</name></expr></argument>, <argument><expr><literal type="string">"manifest unusable - backup invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/db/20181119-152138F/backup.manifest' for read\n"</literal>
            <literal type="string">"P00 DETAIL: 20181119-152138F/backup.manifest is missing or unusable, using copy\n"</literal>
            <literal type="string">"P00   INFO: '20181119-152138F' may not be recoverable - PG data (id 0, version 9.4, system-id "</literal>
                <name>HRN_PG_SYSTEMID_94_Z</name> <literal type="string">") is not in the backup.info history, skipping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"missing main manifest, errored copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>backupResult</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>backupValid</name></expr>;</expr_stmt>

        <macro><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>TEST_PATH <literal type="string">"/repo/"</literal> STORAGE_PATH_BACKUP <literal type="string">"/db/"</literal> TEST_BACKUP_LABEL_FULL <literal type="string">"/"</literal> BACKUP_MANIFEST_FILE
            INFO_COPY_EXT</argument>, <argument>TEST_INVALID_BACKREST_INFO</argument>, <argument>.comment = <literal type="string">"invalid manifest copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>verifyManifestFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backupResult</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>infoPg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jobErrorTotal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"verify manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>backupResult</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><name>backupInvalid</name></expr></argument>, <argument><expr><literal type="string">"manifest unusable - backup invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/db/20181119-152138F/backup.manifest' for read\n"</literal>
            <literal type="string">"P00 DETAIL: invalid checksum, actual 'e056f784a995841fd4e2802b809299b8db6803a2' but expected 'BOGUS' "</literal>
                <literal type="string">"&lt;REPO:BACKUP&gt;/20181119-152138F/backup.manifest.copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"current backup true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo/"</literal> <name>STORAGE_PATH_BACKUP</name> <literal type="string">"/db/"</literal> <name>TEST_BACKUP_LABEL_FULL</name> <literal type="string">"/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>,
            <argument><expr><name>TEST_INVALID_BACKREST_INFO</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"invalid manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>verifyManifestFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backupResult</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>infoPg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jobErrorTotal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"verify manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"manifest not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>backupResult</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><name>backupInvalid</name></expr></argument>, <argument><expr><literal type="string">"manifest unusable - backup invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: invalid checksum, actual 'e056f784a995841fd4e2802b809299b8db6803a2' but expected 'BOGUS' "</literal>
                <literal type="string">"&lt;REPO:BACKUP&gt;/20181119-152138F/backup.manifest\n"</literal>
            <literal type="string">"P00 DETAIL: invalid checksum, actual 'e056f784a995841fd4e2802b809299b8db6803a2' but expected 'BOGUS' "</literal>
                <literal type="string">"&lt;REPO:BACKUP&gt;/20181119-152138F/backup.manifest.copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write a valid manifest with a manifest copy that is invalid</comment>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>STORAGE_REPO_BACKUP <literal type="string">"/"</literal> TEST_BACKUP_LABEL_FULL <literal type="string">"/"</literal> BACKUP_MANIFEST_FILE</argument>,
            <argument>TEST_MANIFEST_HEADER
            TEST_MANIFEST_DB_94
            TEST_MANIFEST_OPTION_ALL
            TEST_MANIFEST_TARGET
            TEST_MANIFEST_DB
            TEST_MANIFEST_FILE
            TEST_MANIFEST_FILE_DEFAULT
            TEST_MANIFEST_LINK
            TEST_MANIFEST_LINK_DEFAULT
            TEST_MANIFEST_PATH
            TEST_MANIFEST_PATH_DEFAULT</argument>,
            <argument>.comment = <literal type="string">"valid manifest"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><name><name>backupResult</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>backupValid</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>verifyManifestFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>backupResult</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>infoPg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jobErrorTotal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"verify manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR_NE</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"manifest set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>backupResult</name><operator>.</operator><name>status</name></name></expr></argument>, <argument><expr><name>backupValid</name></expr></argument>, <argument><expr><literal type="string">"manifest usable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00 DETAIL: backup '20181119-152138F' manifest.copy does not match manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>harnessLogLevelReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"verifyCreateArchiveIdRange()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>VerifyWalRange</name> <modifier>*</modifier></type><name>walRangeResult</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>errTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>walFileList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>VerifyArchiveResult</name></type> <name>archiveResult</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>archiveId</name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"9.4-1"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>walRangeList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VerifyWalRange</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>archiveIdResultList</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VerifyArchiveResult</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>archiveIdComparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>archiveResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>VerifyArchiveResult</name> <modifier>*</modifier></type><name>archiveIdResult</name> <init>= <expr><call><name>lstGetLast</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"Single WAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>archiveIdResult</name><operator>-&gt;</operator><name>pgWalInfo</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>PG_WAL_SEGMENT_SIZE_DEFAULT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>archiveIdResult</name><operator>-&gt;</operator><name>pgWalInfo</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>PG_VERSION_94</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000000-daa497dba64008db824607940609ba1cd7c6c501.gz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>verifyCreateArchiveIdRange</name><argument_list>(<argument><expr><name>archiveIdResult</name></expr></argument>, <argument><expr><name>walFileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errTotal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create archiveId WAL range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name>errTotal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"no errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>VerifyArchiveResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>walRangeList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"single range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>walRangeResult</name></expr></argument>, <argument><expr><operator>(</operator><name>VerifyWalRange</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>VerifyArchiveResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>walRangeList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"get range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000000"</literal></expr></argument>, <argument><expr><literal type="string">"start range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000000"</literal></expr></argument>, <argument><expr><literal type="string">"stop range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"Duplicate WAL only - no range, all removed from list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lstClear</name><argument_list>(<argument><expr><name><name>archiveIdResult</name><operator>-&gt;</operator><name>walRangeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add a duplicate</comment>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>verifyCreateArchiveIdRange</name><argument_list>(<argument><expr><name>archiveIdResult</name></expr></argument>, <argument><expr><name>walFileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errTotal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create archiveId WAL range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name>errTotal</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"duplicate WAL error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"all WAL removed from WAL file list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><name><name>archiveIdResult</name><operator>-&gt;</operator><name>walRangeList</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"no range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: duplicate WAL '000000020000000200000000' for '9.4-1' exists, skipping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"FF Wal not skipped &gt; 9.2, duplicates at beginning and end of list are removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>errTotal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>, <argument><expr><literal type="string">"000000020000000100000000-daa497dba64008db824607940609ba1cd7c6c501.gz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>, <argument><expr><literal type="string">"000000020000000100000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>, <argument><expr><literal type="string">"000000020000000100000000-aaaaaadba64008db824607940609ba1cd7c6c501"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>, <argument><expr><literal type="string">"0000000200000001000000FD-daa497dba64008db824607940609ba1cd7c6c501.gz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>, <argument><expr><literal type="string">"0000000200000001000000FE-a6e1a64f0813352bc2e97f116a1800377e17d2e4.gz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>, <argument><expr><literal type="string">"0000000200000001000000FF-daa497dba64008db824607940609ba1cd7c6c501"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>verifyCreateArchiveIdRange</name><argument_list>(<argument><expr><name>archiveIdResult</name></expr></argument>, <argument><expr><name>walFileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errTotal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create archiveId WAL range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name>errTotal</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"triplicate WAL error at beginning, duplicate WAL at end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"only duplicate WAL removed from WAL list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"single archiveId result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><name><name>archiveIdResult</name><operator>-&gt;</operator><name>walRangeList</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"single range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>walRangeResult</name></expr></argument>, <argument><expr><operator>(</operator><name>VerifyWalRange</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>VerifyArchiveResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>walRangeList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"get range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><literal type="string">"0000000200000001000000FD"</literal></expr></argument>, <argument><expr><literal type="string">"start range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000000"</literal></expr></argument>, <argument><expr><literal type="string">"stop range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: duplicate WAL '000000020000000100000000' for '9.4-1' exists, skipping\n"</literal>
            <literal type="string">"P00   INFO: duplicate WAL '000000020000000200000001' for '9.4-1' exists, skipping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"FF Wal skipped &lt;= 9.2, duplicates in middle of list removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Clear the range lists and rerun the test with PG_VERSION_92 to ensure FF is reported as an error</comment>
        <expr_stmt><expr><call><name>lstClear</name><argument_list>(<argument><expr><name><name>archiveIdResult</name><operator>-&gt;</operator><name>walRangeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errTotal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>archiveIdResult</name><operator>-&gt;</operator><name>archiveId</name></name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"9.2-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>archiveIdResult</name><operator>-&gt;</operator><name>pgWalInfo</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>PG_VERSION_92</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000002"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>verifyCreateArchiveIdRange</name><argument_list>(<argument><expr><name>archiveIdResult</name></expr></argument>, <argument><expr><name>walFileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errTotal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create archiveId WAL range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name>errTotal</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"error reported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>VerifyArchiveResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>walRangeList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"multiple ranges"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>walRangeResult</name></expr></argument>, <argument><expr><operator>(</operator><name>VerifyWalRange</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>VerifyArchiveResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>walRangeList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"get range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><literal type="string">"0000000200000001000000FD"</literal></expr></argument>, <argument><expr><literal type="string">"start range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000000"</literal></expr></argument>, <argument><expr><literal type="string">"stop range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>walRangeResult</name></expr></argument>, <argument><expr><operator>(</operator><name>VerifyWalRange</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>VerifyArchiveResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>walRangeList</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"get second range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000002"</literal></expr></argument>, <argument><expr><literal type="string">"start range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000002"</literal></expr></argument>, <argument><expr><literal type="string">"stop range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: invalid WAL '0000000200000001000000FF' for '9.2-1' exists, skipping\n"</literal>
            <literal type="string">"P00   INFO: duplicate WAL '000000020000000200000001' for '9.2-1' exists, skipping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><name>walFileList</name></expr></argument>,
            <argument><expr><literal type="string">"0000000200000001000000FD-daa497dba64008db824607940609ba1cd7c6c501.gz\n"</literal>
            <literal type="string">"0000000200000001000000FE-a6e1a64f0813352bc2e97f116a1800377e17d2e4.gz\n"</literal>
            <literal type="string">"000000020000000200000000\n000000020000000200000002\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"skipped files removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"Rerun &lt;= 9.2, missing FF not a gap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Clear the range lists, rerun the PG_VERSION_92 test to ensure the missing FF is not considered a gap</comment>
        <expr_stmt><expr><call><name>lstClear</name><argument_list>(<argument><expr><name><name>archiveIdResult</name><operator>-&gt;</operator><name>walRangeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errTotal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>verifyCreateArchiveIdRange</name><argument_list>(<argument><expr><name>archiveIdResult</name></expr></argument>, <argument><expr><name>walFileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errTotal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create archiveId WAL range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name>errTotal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"error reported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>VerifyArchiveResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>walRangeList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"multiple ranges"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>walRangeResult</name></expr></argument>, <argument><expr><operator>(</operator><name>VerifyWalRange</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>VerifyArchiveResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>walRangeList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"get range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><literal type="string">"0000000200000001000000FD"</literal></expr></argument>, <argument><expr><literal type="string">"start range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000000"</literal></expr></argument>, <argument><expr><literal type="string">"stop range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>walRangeResult</name></expr></argument>, <argument><expr><operator>(</operator><name>VerifyWalRange</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>VerifyArchiveResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>walRangeList</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"get second range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000002"</literal></expr></argument>, <argument><expr><literal type="string">"start range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000002"</literal></expr></argument>, <argument><expr><literal type="string">"stop range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"version &gt; 9.2, missing FF is a gap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Clear the range lists and update the version &gt; 9.2 so missing FF is considered a gap in the WAL ranges</comment>
        <expr_stmt><expr><call><name>lstClear</name><argument_list>(<argument><expr><name><name>archiveIdResult</name><operator>-&gt;</operator><name>walRangeList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>errTotal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>archiveIdResult</name><operator>-&gt;</operator><name>archiveId</name></name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"9.6-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>archiveIdResult</name><operator>-&gt;</operator><name>pgWalInfo</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>PG_VERSION_96</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000003-123456"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>walFileList</name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000004-123456"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>verifyCreateArchiveIdRange</name><argument_list>(<argument><expr><name>archiveIdResult</name></expr></argument>, <argument><expr><name>walFileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errTotal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create archiveId WAL range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name>errTotal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"no errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>VerifyArchiveResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>walRangeList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"multiple ranges"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>walRangeResult</name></expr></argument>, <argument><expr><operator>(</operator><name>VerifyWalRange</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>VerifyArchiveResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>walRangeList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"get first range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><literal type="string">"0000000200000001000000FD"</literal></expr></argument>, <argument><expr><literal type="string">"start range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><literal type="string">"0000000200000001000000FE"</literal></expr></argument>, <argument><expr><literal type="string">"stop range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>walRangeResult</name></expr></argument>, <argument><expr><operator>(</operator><name>VerifyWalRange</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>VerifyArchiveResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>walRangeList</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"get second range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000000"</literal></expr></argument>, <argument><expr><literal type="string">"start range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000000"</literal></expr></argument>, <argument><expr><literal type="string">"stop range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>walRangeResult</name></expr></argument>, <argument><expr><operator>(</operator><name>VerifyWalRange</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>VerifyArchiveResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>walRangeList</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"get third range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000002"</literal></expr></argument>, <argument><expr><literal type="string">"start range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>walRangeResult</name><operator>-&gt;</operator><name>stop</name></name></expr></argument>, <argument><expr><literal type="string">"000000020000000200000004"</literal></expr></argument>, <argument><expr><literal type="string">"stop range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"verifyPgHistory()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Create backup.info</comment>
        <decl_stmt><decl><type><name>InfoBackup</name> <modifier>*</modifier></type><name>backupInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>backupInfo</name></expr></argument>, <argument><expr><call><name>infoBackupNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><call><name>harnessInfoChecksumZ</name><argument_list>(<argument><expr><name>TEST_BACKUP_INFO_MULTI_HISTORY_BASE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"backup.info multi-history"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"history mismatch - missing history"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create archive.info - history mismatch</comment>
        <decl_stmt><decl><type><name>InfoArchive</name> <modifier>*</modifier></type><name>archiveInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>archiveInfo</name></expr></argument>, <argument><expr><call><name>infoArchiveNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><call><name>harnessInfoChecksumZ</name><argument_list>(
                <argument><expr><literal type="string">"[db]\n"</literal>
                <literal type="string">"db-id=2\n"</literal>
                <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_11_Z</name> <literal type="string">"\n"</literal>
                <literal type="string">"db-version=\"11\"\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[db:history]\n"</literal>
                <literal type="string">"2={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_11_Z</name> <literal type="string">",\"db-version\":\"11\"}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"archive.info missing history"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>verifyPgHistory</name><argument_list>(<argument><expr><call><name>infoArchivePg</name><argument_list>(<argument><expr><name>archiveInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>backupInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"archive and backup history lists do not match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"history mismatch - system id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>archiveInfo</name></expr></argument>, <argument><expr><call><name>infoArchiveNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><call><name>harnessInfoChecksumZ</name><argument_list>(
                <argument><expr><literal type="string">"[db]\n"</literal>
                <literal type="string">"db-id=2\n"</literal>
                <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_11_Z</name> <literal type="string">"\n"</literal>
                <literal type="string">"db-version=\"11\"\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[db:history]\n"</literal>
                <literal type="string">"1={\"db-id\":6625592122879095777,\"db-version\":\"9.4\"}\n"</literal>
                <literal type="string">"2={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_11_Z</name> <literal type="string">",\"db-version\":\"11\"}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"archive.info history system id mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>verifyPgHistory</name><argument_list>(<argument><expr><call><name>infoArchivePg</name><argument_list>(<argument><expr><name>archiveInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>backupInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"archive and backup history lists do not match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"history mismatch - version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>archiveInfo</name></expr></argument>, <argument><expr><call><name>infoArchiveNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><call><name>harnessInfoChecksumZ</name><argument_list>(
                <argument><expr><literal type="string">"[db]\n"</literal>
                <literal type="string">"db-id=2\n"</literal>
                <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_11_Z</name> <literal type="string">"\n"</literal>
                <literal type="string">"db-version=\"11\"\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[db:history]\n"</literal>
                <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_94_Z</name> <literal type="string">",\"db-version\":\"9.5\"}\n"</literal>
                <literal type="string">"2={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_11_Z</name> <literal type="string">",\"db-version\":\"11\"}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"archive.info history version mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>verifyPgHistory</name><argument_list>(<argument><expr><call><name>infoArchivePg</name><argument_list>(<argument><expr><name>archiveInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>backupInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"archive and backup history lists do not match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"history mismatch - id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>archiveInfo</name></expr></argument>, <argument><expr><call><name>infoArchiveNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><call><name>harnessInfoChecksumZ</name><argument_list>(
                <argument><expr><literal type="string">"[db]\n"</literal>
                <literal type="string">"db-id=2\n"</literal>
                <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_11_Z</name> <literal type="string">"\n"</literal>
                <literal type="string">"db-version=\"11\"\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[db:history]\n"</literal>
                <literal type="string">"3={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_94_Z</name> <literal type="string">",\"db-version\":\"9.4\"}\n"</literal>
                <literal type="string">"2={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_11_Z</name> <literal type="string">",\"db-version\":\"11\"}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"archive.info history id mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>verifyPgHistory</name><argument_list>(<argument><expr><call><name>infoArchivePg</name><argument_list>(<argument><expr><name>archiveInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>backupInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"archive and backup history lists do not match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"verifySetBackupCheckArchive(), verifyLogInvalidResult(), verifyRender()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"verifySetBackupCheckArchive()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>InfoBackup</name> <modifier>*</modifier></type><name>backupInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InfoArchive</name> <modifier>*</modifier></type><name>archiveInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>backupInfo</name></expr></argument>, <argument><expr><call><name>infoBackupNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><call><name>harnessInfoChecksumZ</name><argument_list>(<argument><expr><name>TEST_BACKUP_INFO_MULTI_HISTORY_BASE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"backup.info multi-history"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>archiveInfo</name></expr></argument>, <argument><expr><call><name>infoArchiveNewLoad</name><argument_list>(<argument><expr><call><name>ioBufferReadNew</name><argument_list>(<argument><expr><call><name>harnessInfoChecksumZ</name><argument_list>(<argument><expr><name>TEST_ARCHIVE_INFO_MULTI_HISTORY_BASE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"archive.info multi-history"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>InfoPg</name> <modifier>*</modifier></type><name>pgHistory</name> <init>= <expr><call><name>infoArchivePg</name><argument_list>(<argument><expr><name>archiveInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>backupList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>backupList</name></expr></argument>, <argument><expr><literal type="string">"20181119-152138F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>backupList</name></expr></argument>, <argument><expr><literal type="string">"20181119-152900F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>archiveIdList</name> <init>= <expr><call><name>strLstComparatorSet</name><argument_list>(<argument><expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>archiveIdComparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>archiveIdList</name></expr></argument>, <argument><expr><literal type="string">"9.4-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>archiveIdList</name></expr></argument>, <argument><expr><literal type="string">"11-2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>errTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// Add backup to end of list</comment>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>backupList</name></expr></argument>, <argument><expr><literal type="string">"20181119-153000F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>archiveIdList</name></expr></argument>, <argument><expr><literal type="string">"12-3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>verifySetBackupCheckArchive</name><argument_list>(<argument><expr><name>backupList</name></expr></argument>, <argument><expr><name>backupInfo</name></expr></argument>, <argument><expr><name>archiveIdList</name></expr></argument>, <argument><expr><name>pgHistory</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errTotal</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"20181119-153000F"</literal></expr></argument>, <argument><expr><literal type="string">"current backup, missing archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name>errTotal</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"error logged"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: archiveIds '12-3' are not in the archive.info history list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>errTotal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>archiveIdList</name></expr></argument>, <argument><expr><literal type="string">"13-4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>verifySetBackupCheckArchive</name><argument_list>(<argument><expr><name>backupList</name></expr></argument>, <argument><expr><name>backupInfo</name></expr></argument>, <argument><expr><name>archiveIdList</name></expr></argument>, <argument><expr><name>pgHistory</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errTotal</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"20181119-153000F"</literal></expr></argument>, <argument><expr><literal type="string">"test multiple archiveIds on disk not in archive.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name>errTotal</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"error logged"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: archiveIds '12-3, 13-4' are not in the archive.info history list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"verifyLogInvalidResult() - missing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>verifyLogInvalidResult</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE_STR</name></expr></argument>, <argument><expr><name>verifyFileMissing</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"missingfilename"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"file missing message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   WARN: file missing 'missingfilename'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"verifyRender() - missing file, empty invalidList"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>archiveIdResultList</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VerifyArchiveResult</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>archiveIdComparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>backupResultList</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VerifyBackupResult</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>VerifyArchiveResult</name></type> <name>archiveIdResult</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>archiveId</name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"9.6-1"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>totalWalFile</name> <operator>=</operator> <literal type="number">1</literal></expr>,
            <expr><operator>.</operator><name>walRangeList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VerifyWalRange</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>VerifyWalRange</name></type> <name>walRange</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>start</name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>stop</name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>invalidFileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VerifyInvalidFile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>archiveIdResult</name><operator>.</operator><name>walRangeList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>walRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>archiveIdResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>verifyRender</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>, <argument><expr><name>backupResultList</name></expr></argument>, <argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptVerbose</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"\n"</literal>
            <literal type="string">"  archiveId: 9.6-1, total WAL checked: 1, total valid WAL: 0"</literal></expr></argument>, <argument><expr><literal type="string">"archive: no invalid file list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>VerifyInvalidFile</name></type> <name>invalidFile</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>fileName</name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>reason</name> <operator>=</operator> <name>verifyFileMissing</name></expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>walRange</name><operator>.</operator><name>invalidFileList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>invalidFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>VerifyBackupResult</name></type> <name>backupResult</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>backupLabel</name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"test-backup-label"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>status</name> <operator>=</operator> <name>backupInvalid</name></expr>,
            <expr><operator>.</operator><name>totalFileVerify</name> <operator>=</operator> <literal type="number">1</literal></expr>,
            <expr><operator>.</operator><name>invalidFileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VerifyInvalidFile</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr>,
        }</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>backupResult</name><operator>.</operator><name>invalidFileList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>invalidFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>backupResultList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backupResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>verifyRender</name><argument_list>(<argument><expr><name>archiveIdResultList</name></expr></argument>, <argument><expr><name>backupResultList</name></expr></argument>, <argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptVerbose</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"\n"</literal>
            <literal type="string">"  archiveId: 9.6-1, total WAL checked: 1, total valid WAL: 0\n"</literal>
            <literal type="string">"    missing: 1\n"</literal>
            <literal type="string">"  backup: test-backup-label, status: invalid, total files checked: 1, total valid files: 0\n"</literal>
            <literal type="string">"    missing: 1"</literal></expr></argument>, <argument><expr><literal type="string">"archive file missing, backup file missing, no text, no verbose"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"verifyAddInvalidWalFile() - file missing (coverage test)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>verifyAddInvalidWalFile</name><argument_list>(<argument><expr><name><name>archiveIdResult</name><operator>.</operator><name>walRangeList</name></name></expr></argument>, <argument><expr><name>verifyFileMissing</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"coverage test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cmdVerify() - info files"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Load Parameters</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"backup.info invalid checksum, neither backup copy nor archive infos exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_INVALID_BACKREST_INFO</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"invalid backup.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Redirect stdout to a file</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>stdoutSave</name> <init>= <expr><call><name>dup</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>stdoutFile</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/stdout.info"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>freopen</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>FileWriteError</name></expr></argument>, <argument><expr><literal type="string">"unable to reopen stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Not in a test wrapper to avoid writing to stdout</comment>
        <expr_stmt><expr><call><name>cmdVerify</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Restore normal stdout</comment>
        <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>stdoutSave</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check output of verify command stored in file</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: invalid checksum, actual 'e056f784a995841fd4e2802b809299b8db6803a2' but expected 'BOGUS' "</literal>
                <literal type="string">"&lt;REPO:BACKUP&gt;/backup.info\n"</literal>
            <literal type="string">"P00 DETAIL: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/db/backup.info.copy' for read\n"</literal>
            <literal type="string">"P00 DETAIL: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/db/archive.info' for read\n"</literal>
            <literal type="string">"P00 DETAIL: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/db/archive.info.copy' for read\n"</literal>
            <literal type="string">"P00   INFO: stanza: db\n"</literal>
            <literal type="string">"            status: error\n"</literal>
            <literal type="string">"              No usable backup.info file\n"</literal>
            <literal type="string">"              No usable archive.info file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"backup.info invalid checksum, backup.info.copy valid, archive.info not exist, archive copy checksum invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>, <argument>TEST_INVALID_BACKREST_INFO</argument>,
            <argument>.comment = <literal type="string">"invalid archive.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>,
            <argument><literal type="string">"[backup:current]\n"</literal>
            TEST_BACKUP_DB1_CURRENT_FULL1
            <literal type="string">"\n"</literal>
            <literal type="string">"[db]\n"</literal>
            TEST_BACKUP_DB1_94
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            TEST_BACKUP_DB1_HISTORY</argument>,
            <argument>.comment = <literal type="string">"valid backup.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Redirect stdout to a file</comment>
        <expr_stmt><expr><name>stdoutSave</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>stdoutFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/stdout.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>freopen</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>FileWriteError</name></expr></argument>, <argument><expr><literal type="string">"unable to reopen stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Not in a test wrapper to avoid writing to stdout</comment>
        <expr_stmt><expr><call><name>cmdVerify</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Restore normal stdout</comment>
        <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>stdoutSave</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check output of verify command stored in file</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: invalid checksum, actual 'e056f784a995841fd4e2802b809299b8db6803a2' but expected 'BOGUS'"</literal>
                <literal type="string">" &lt;REPO:BACKUP&gt;/backup.info\n"</literal>
            <literal type="string">"P00 DETAIL: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/db/archive.info' for read\n"</literal>
            <literal type="string">"P00 DETAIL: invalid checksum, actual 'e056f784a995841fd4e2802b809299b8db6803a2' but expected 'BOGUS'"</literal>
                <literal type="string">" &lt;REPO:ARCHIVE&gt;/archive.info.copy\n"</literal>
            <literal type="string">"P00   INFO: stanza: db\n"</literal>
            <literal type="string">"            status: error\n"</literal>
            <literal type="string">"              No usable archive.info file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"backup.info and copy valid but checksum mismatch, archive.info checksum invalid, archive.info copy valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_BACKUP_INFO_MULTI_HISTORY_BASE</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid backup.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_INVALID_BACKREST_INFO</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"invalid archive.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>, <argument>TEST_ARCHIVE_INFO_BASE</argument>, <argument>.comment = <literal type="string">"valid archive.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Redirect stdout to a file</comment>
        <expr_stmt><expr><name>stdoutSave</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>stdoutFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/stdout.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>freopen</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>FileWriteError</name></expr></argument>, <argument><expr><literal type="string">"unable to reopen stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Not in a test wrapper to avoid writing to stdout</comment>
        <expr_stmt><expr><call><name>cmdVerify</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Restore normal stdout</comment>
        <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>stdoutSave</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check output of verify command stored in file</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: backup.info.copy does not match backup.info\n"</literal>
            <literal type="string">"P00 DETAIL: invalid checksum, actual 'e056f784a995841fd4e2802b809299b8db6803a2' but expected 'BOGUS'"</literal>
                <literal type="string">" &lt;REPO:ARCHIVE&gt;/archive.info\n"</literal>
            <literal type="string">"P00   INFO: stanza: db\n"</literal>
            <literal type="string">"            status: error\n"</literal>
            <literal type="string">"            backup info file and archive info file do not match\n"</literal>
            <literal type="string">"            archive: id = 1, version = 9.4, system-id = 10000000000000090400\n"</literal>
            <literal type="string">"            backup : id = 2, version = 11, system-id = 10000000000000110000\n"</literal>
            <literal type="string">"            HINT: this may be a symptom of repository corruption!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"backup.info and copy valid and checksums match, archive.info and copy valid, but checksum mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>, <argument>TEST_BACKUP_INFO_MULTI_HISTORY_BASE</argument>,
            <argument>.comment = <literal type="string">"valid backup.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_ARCHIVE_INFO_MULTI_HISTORY_BASE</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid archive.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdVerify</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"usable backup and archive info files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: archive.info.copy does not match archive.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"backup.info valid, copy invalid, archive.info valid, copy invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument>storageRepoWrite()</argument>, <argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>, <argument>.comment = <literal type="string">"remove backup.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument>storageRepoWrite()</argument>, <argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>, <argument>.comment = <literal type="string">"remove archive.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdVerify</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"usable backup and archive info files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/db/backup.info.copy' for read\n"</literal>
            <literal type="string">"P00 DETAIL: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/db/archive.info.copy' for read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"backup.info and copy missing, archive.info and copy valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptVerbose</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>, <argument>TEST_ARCHIVE_INFO_MULTI_HISTORY_BASE</argument>,
            <argument>.comment = <literal type="string">"valid and matching archive.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Redirect stdout to a file</comment>
        <expr_stmt><expr><name>stdoutSave</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>stdoutFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/stdout.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>freopen</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>FileWriteError</name></expr></argument>, <argument><expr><literal type="string">"unable to reopen stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Not in a test wrapper to avoid writing to stdout</comment>
        <expr_stmt><expr><call><name>cmdVerify</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Restore normal stdout</comment>
        <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>stdoutSave</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check output of verify command stored in file</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/db/backup.info' for read\n"</literal>
            <literal type="string">"P00 DETAIL: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/db/backup.info.copy' for read\n"</literal>
            <literal type="string">"P00   INFO: stanza: db\n"</literal>
            <literal type="string">"            status: error\n"</literal>
            <literal type="string">"              No usable backup.info file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>harnessLogLevelReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"verifyFile()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Load Parameters</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"zero-sized file in archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>filePathName</name> <init>= <expr><call><name>strNewZ</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/testfile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>filePathName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>verifyFile</name><argument_list>(<argument><expr><name>filePathName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>HASH_TYPE_SHA1_ZERO</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>verifyOk</name></expr></argument>, <argument><expr><literal type="string">"file ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file size invalid in archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>filePathName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fileContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>verifyFile</name><argument_list>(<argument><expr><name>filePathName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><name>fileChecksum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>verifySizeInvalid</name></expr></argument>, <argument><expr><literal type="string">"file size invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file missing in archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>verifyFile</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/missingFile"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><name>fileChecksum</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>verifyFileMissing</name></expr></argument>, <argument><expr><literal type="string">"file missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"encrypted/compressed file in backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create a compressed encrypted repo file in backup</comment>
        <expr_stmt><expr><name>filePathName</name> <operator>=</operator> <call><name>strCatZ</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/testfile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>filePathName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fileContents</name></expr></argument>, <argument><expr><operator>.</operator><name>compressType</name> <operator>=</operator> <name>compressTypeGz</name></expr></argument>, <argument><expr><operator>.</operator><name>cipherType</name> <operator>=</operator> <name>cipherTypeAes256Cbc</name></expr></argument>,
            <argument><expr><operator>.</operator><name>cipherPass</name> <operator>=</operator> <literal type="string">"pass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>filePathName</name></expr></argument>, <argument><expr><literal type="string">".gz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>verifyFile</name><argument_list>(<argument><expr><name>filePathName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>compressTypeGz</name></expr></argument>, <argument><expr><name>fileChecksum</name></expr></argument>, <argument><expr><name>fileSize</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pass"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>verifyOk</name></expr></argument>, <argument><expr><literal type="string">"file encrypted compressed ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>verifyFile</name><argument_list>(
                <argument><expr><name>filePathName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>compressTypeGz</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"badchecksum"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fileSize</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pass"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>verifyChecksumMismatch</name></expr></argument>,
                <argument><expr><literal type="string">"file encrypted compressed checksum mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cmdVerify(), verifyProcess() - errors"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <comment type="line">// Load Parameters with multi-repo</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Store valid archive/backup info files</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_ARCHIVE_INFO_MULTI_HISTORY_BASE</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid archive.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>, <argument>TEST_ARCHIVE_INFO_MULTI_HISTORY_BASE</argument>,
            <argument>.comment = <literal type="string">"valid archive.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"valid info files, WAL files present, no backups"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_NO_CURRENT_BACKUP</name></cpp:macro>                                                                                             \
            <cpp:value>"[db]\n"                                                                                                               \
            TEST_BACKUP_DB2_11                                                                                                     \
            "\n"                                                                                                                   \
            "[db:history]\n"                                                                                                       \
            TEST_BACKUP_DB1_HISTORY                                                                                                \
            "\n"                                                                                                                   \
            TEST_BACKUP_DB2_HISTORY</cpp:value></cpp:define>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_NO_CURRENT_BACKUP</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"no current backups"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>, <argument>TEST_NO_CURRENT_BACKUP</argument>, <argument>.comment = <literal type="string">"no current backups copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Create WAL file with just header info and small WAL size</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>walBuffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(<argument>(PgWal){.version = PG_VERSION_11</argument>, <argument>.size = <literal type="number">1024</literal> * <literal type="number">1024</literal>}</argument>, <argument>walBuffer</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>walBufferSha1</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-2/0000000200000007/000000020000000700000FFE-%s"</literal></expr></argument>, <argument><expr><name>walBufferSha1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid WAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-2/0000000200000007/000000020000000700000FFE-bad817043007aa2100c44c712bcb456db705dab9"</literal></expr></argument>,
            <argument><expr><name>walBuffer</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"duplicate WAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set log detail level to capture ranges (there should be none)</comment>
        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Redirect stdout to a file</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>stdoutSave</name> <init>= <expr><call><name>dup</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>stdoutFile</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/stdout.info"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>freopen</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>FileWriteError</name></expr></argument>, <argument><expr><literal type="string">"unable to reopen stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Not in a test wrapper to avoid writing to stdout</comment>
        <expr_stmt><expr><call><name>cmdVerify</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Restore normal stdout</comment>
        <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>stdoutSave</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check output of verify command stored in file</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: no backups exist in the repo\n"</literal>
            <literal type="string">"P00   INFO: duplicate WAL '000000020000000700000FFE' for '11-2' exists, skipping\n"</literal>
            <literal type="string">"P00 DETAIL: path '11-2/0000000200000007' does not contain any valid WAL to be processed\n"</literal>
            <literal type="string">"P00   INFO: stanza: db\n"</literal>
            <literal type="string">"            status: error\n"</literal>
            <literal type="string">"              archiveId: 11-2, total WAL checked: 2, total valid WAL: 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>harnessLogLevelReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-2/0000000200000007/000000020000000700000FFE-bad817043007aa2100c44c712bcb456db705dab9"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"remove duplicate WAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/9.4-1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"empty path for old archiveId"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-2/0000000100000000"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"empty timeline path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-2/0000000200000007/000000020000000700000FFD-a6e1a64f0813352bc2e97f116a1800377e17d2e4"</literal></expr></argument>,
            <argument><expr><name>walBuffer</name></expr></argument>, <argument><expr><operator>.</operator><name>compressType</name> <operator>=</operator> <name>compressTypeGz</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"first WAL compressed - but checksum failure"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>zNewFmt</name><argument_list>(
                <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-2/0000000200000007/000000020000000700000FFF-%s"</literal></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"invalidsize"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"invalidsize"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"WAL - invalid size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-2/0000000200000008/000000020000000800000000-%s"</literal></expr></argument>, <argument><expr><name>walBufferSha1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"WAL - continue range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set log detail level to capture ranges</comment>
        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Test verifyProcess directly</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>verifyProcess</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptVerbose</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"stanza: db\n"</literal>
            <literal type="string">"status: error\n"</literal>
            <literal type="string">"  archiveId: 11-2, total WAL checked: 4, total valid WAL: 2\n"</literal>
            <literal type="string">"    checksum invalid: 1, size invalid: 1"</literal></expr></argument>, <argument><expr><literal type="string">"verifyProcess() no text, no verbose"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: no backups exist in the repo\n"</literal>
            <literal type="string">"P00 DETAIL: archive path '9.4-1' is empty\n"</literal>
            <literal type="string">"P00 DETAIL: path '11-2/0000000100000000' does not contain any valid WAL to be processed\n"</literal>
            <literal type="string">"P01   INFO: invalid checksum "</literal>
                <literal type="string">"'11-2/0000000200000007/000000020000000700000FFD-a6e1a64f0813352bc2e97f116a1800377e17d2e4.gz'\n"</literal>
            <literal type="string">"P01   INFO: invalid size "</literal>
                <literal type="string">"'11-2/0000000200000007/000000020000000700000FFF-ee161f898c9012dd0c28b3fd1e7140b9cf411306'\n"</literal>
            <literal type="string">"P00 DETAIL: archiveId: 11-2, wal start: 000000020000000700000FFD, wal stop: 000000020000000800000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>harnessLogLevelReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"no text output, verbose, with verify failures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptVerbose</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Verify text output, verbose, with verify failures</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>verifyProcess</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptVerbose</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"stanza: db\n"</literal>
            <literal type="string">"status: error\n"</literal>
            <literal type="string">"  archiveId: 9.4-1, total WAL checked: 0, total valid WAL: 0\n"</literal>
            <literal type="string">"  archiveId: 11-2, total WAL checked: 4, total valid WAL: 2\n"</literal>
            <literal type="string">"    missing: 0, checksum invalid: 1, size invalid: 1, other: 0\n"</literal>
            <literal type="string">"  backup: none found"</literal></expr></argument> , <argument><expr><literal type="string">"verbose, with failures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P01   INFO: invalid checksum "</literal>
                <literal type="string">"'11-2/0000000200000007/000000020000000700000FFD-a6e1a64f0813352bc2e97f116a1800377e17d2e4.gz'\n"</literal>
            <literal type="string">"P01   INFO: invalid size "</literal>
                <literal type="string">"'11-2/0000000200000007/000000020000000700000FFF-ee161f898c9012dd0c28b3fd1e7140b9cf411306'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"text output, verbose, with verify failures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOutput</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Verify text output, verbose, with verify failures</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>verifyProcess</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptVerbose</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"stanza: db\n"</literal>
            <literal type="string">"status: error\n"</literal>
            <literal type="string">"  archiveId: 9.4-1, total WAL checked: 0, total valid WAL: 0\n"</literal>
            <literal type="string">"  archiveId: 11-2, total WAL checked: 4, total valid WAL: 2\n"</literal>
            <literal type="string">"    missing: 0, checksum invalid: 1, size invalid: 1, other: 0\n"</literal>
            <literal type="string">"  backup: none found"</literal></expr></argument>, <argument><expr><literal type="string">"verify text output, verbose, with verify failures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P01   INFO: invalid checksum "</literal>
                <literal type="string">"'11-2/0000000200000007/000000020000000700000FFD-a6e1a64f0813352bc2e97f116a1800377e17d2e4.gz'\n"</literal>
            <literal type="string">"P01   INFO: invalid size "</literal>
                <literal type="string">"'11-2/0000000200000007/000000020000000700000FFF-ee161f898c9012dd0c28b3fd1e7140b9cf411306'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"valid info files, start next timeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Load Parameters - single default repo</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-2/0000000200000008/000000020000000800000002-%s"</literal></expr></argument>, <argument><expr><name>walBufferSha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>walBuffer</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"WAL - starts next range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-2/0000000300000000/000000030000000000000000-%s"</literal></expr></argument>, <argument><expr><name>walBufferSha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>walBuffer</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"WAL - starts next timeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-2/0000000300000000/000000030000000000000001-%s"</literal></expr></argument>, <argument><expr><name>walBufferSha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>walBuffer</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"WAL - end next timeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set log level to errors only</comment>
        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptVerbose</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"verbose is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><operator>(</operator><call><name>cfgOptionStrId</name><argument_list>(<argument><expr><name>cfgOptOutput</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CFGOPTVAL_OUTPUT_TEXT</name><operator>)</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"text is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Redirect stdout to a file</comment>
        <expr_stmt><expr><name>stdoutSave</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>stdoutFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/stdout.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>freopen</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>FileWriteError</name></expr></argument>, <argument><expr><literal type="string">"unable to reopen stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Not in a test wrapper to avoid writing to stdout</comment>
        <expr_stmt><expr><call><name>cmdVerify</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Restore normal stdout</comment>
        <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>stdoutSave</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check output of verify command stored in file</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"none output, with verify failures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOutput</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Verify none output</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>verifyProcess</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptVerbose</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"stanza: db\n"</literal>
            <literal type="string">"status: error\n"</literal>
            <literal type="string">"  archiveId: 11-2, total WAL checked: 7, total valid WAL: 5\n"</literal>
            <literal type="string">"    checksum invalid: 1, size invalid: 1"</literal></expr></argument>, <argument><expr><literal type="string">"verify none output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"valid info files - various archive/backup errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Load Parameters - single non-default repo</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepo</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>jobRetry</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-2/0000000200000008/000000020000000800000003-656817043007aa2100c44c712bcb456db705dab9"</literal></expr></argument>,
            <argument><expr><name>walBuffer</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0200</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"WAL - file not readable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20181119-152800F"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"prior backup path missing manifests"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoIdxWrite(<literal type="number">0</literal>)</argument>, <argument>STORAGE_REPO_BACKUP <literal type="string">"/20181119-152810F/"</literal> BACKUP_MANIFEST_FILE</argument>,
            <argument>TEST_MANIFEST_HEADER
            TEST_MANIFEST_DB_94
            TEST_MANIFEST_OPTION_ALL
            TEST_MANIFEST_TARGET
            TEST_MANIFEST_DB</argument>,
            <argument>.comment = <literal type="string">"manifest without target files"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Create full backup with files</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20181119-152900F/pg_data/PG_VERSION"</literal></expr></argument>, <argument><expr><literal type="string">"BOGUS"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"put checksum-error backup file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20181119-152900F/pg_data/testzero"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"put zero-size backup file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20181119-152900F/pg_data/testvalid"</literal></expr></argument>, <argument><expr><name>fileContents</name></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"put valid file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write manifests for full backup</comment>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>manifestContent</name> <init>= <macro><name>strNewFmt</name><argument_list>(
            <argument><literal type="string">"[backup]\n"</literal>
            <literal type="string">"backup-label=\"20181119-152900F\"\n"</literal>
            <literal type="string">"backup-timestamp-copy-start=0\n"</literal>
            <literal type="string">"backup-timestamp-start=0\n"</literal>
            <literal type="string">"backup-timestamp-stop=0\n"</literal>
            <literal type="string">"backup-type=\"full\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[backup:db]\n"</literal>
            TEST_BACKUP_DB2_11
            TEST_MANIFEST_OPTION_ALL
            TEST_MANIFEST_TARGET
            TEST_MANIFEST_DB
            TEST_MANIFEST_FILE
            <literal type="string">"pg_data/testvalid={\"checksum\":\"%s\",\"size\":7,\"timestamp\":1565282114}\n"</literal>
            <literal type="string">"pg_data/testzero={\"repo-size\":20,\"size\":0,\"timestamp\":1601405663}\n"</literal>
            TEST_MANIFEST_FILE_DEFAULT
            TEST_MANIFEST_LINK
            TEST_MANIFEST_LINK_DEFAULT
            TEST_MANIFEST_PATH
            TEST_MANIFEST_PATH_DEFAULT</argument>,
            <argument>strZ(fileChecksum)</argument>)</argument_list></macro></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20181119-152900F/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>manifestContent</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid manifest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoIdxWrite(<literal type="number">0</literal>)</argument>, <argument>STORAGE_REPO_BACKUP <literal type="string">"/20181119-152900F/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>,
            <argument>strZ(manifestContent)</argument>, <argument>.comment = <literal type="string">"valid manifest copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Create a manifest for the dependent that has references</comment>
        <expr_stmt><expr><name>manifestContent</name> <operator>=</operator> <macro><name>strNewFmt</name><argument_list>(
                <argument><literal type="string">"[backup]\n"</literal>
                <literal type="string">"backup-label=\"20181119-152900F_20181119-152909D\"\n"</literal>
                <literal type="string">"backup-timestamp-copy-start=0\n"</literal>
                <literal type="string">"backup-timestamp-start=0\n"</literal>
                <literal type="string">"backup-timestamp-stop=0\n"</literal>
                <literal type="string">"backup-type=\"diff\"\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[backup:db]\n"</literal>
                TEST_BACKUP_DB2_11
                TEST_MANIFEST_OPTION_ALL
                TEST_MANIFEST_TARGET
                TEST_MANIFEST_DB
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/PG_VERSION={\"checksum\":\"184473f470864e067ee3a22e64b47b0a1c356f29\","</literal>
                    <literal type="string">"\"reference\":\"20181119-152900F\",\"size\":4,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/testfile={\"checksum\":\"%s\",\"reference\":\"20181119-152900F\",\"size\":7,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/testfile2={\"checksum\":\"%s\",\"size\":7,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/testmissing="</literal>
                    <literal type="string">"{\"checksum\":\"123473f470864e067ee3a22e64b47b0a1c356abc\",\"size\":7,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/testother={\"checksum\":\"%s\",\"reference\":\"UNPROCESSEDBACKUP\",\"size\":7,\"timestamp\":1565282114}\n"</literal>
                TEST_MANIFEST_FILE_DEFAULT
                TEST_MANIFEST_LINK
                TEST_MANIFEST_LINK_DEFAULT
                TEST_MANIFEST_PATH
                TEST_MANIFEST_PATH_DEFAULT</argument>,
            <argument>strZ(fileChecksum)</argument>, <argument>strZ(fileChecksum)</argument>, <argument>strZ(fileChecksum)</argument>)</argument_list></macro></expr>;</expr_stmt>

        <comment type="line">// Write manifests for dependent backup</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20181119-152900F_20181119-152909D/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>manifestContent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"manifest to dependent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoIdxWrite(<literal type="number">0</literal>)</argument>, <argument>STORAGE_REPO_BACKUP <literal type="string">"/20181119-152900F_20181119-152909D/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>,
            <argument>strZ(manifestContent)</argument>, <argument>.comment = <literal type="string">"manifest copy to dependent"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20181119-152900F_20181119-152909D/pg_data/testfile2"</literal></expr></argument>, <argument><expr><name>fileContents</name></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"put valid file to dependent"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create an unprocessed backup label with a file that will be referenced in the dependent manifest</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/UNPROCESSEDBACKUP/pg_data/testother"</literal></expr></argument>, <argument><expr><name>fileContents</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0200</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"put unreadable file to unprocessed backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create in-progress backup</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20181119-153000F"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create empty backup path for newest backup so in-progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set log level to capture ranges</comment>
        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptVerbose</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"verbose is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><operator>(</operator><call><name>cfgOptionStrId</name><argument_list>(<argument><expr><name>cfgOptOutput</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CFGOPTVAL_OUTPUT_TEXT</name><operator>)</operator></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"text is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Redirect stdout to a file</comment>
        <expr_stmt><expr><name>stdoutSave</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>stdoutFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/stdout.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>freopen</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>FileWriteError</name></expr></argument>, <argument><expr><literal type="string">"unable to reopen stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Not in a test wrapper to avoid writing to stdout</comment>
        <expr_stmt><expr><call><name>cmdVerify</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Restore normal stdout</comment>
        <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>stdoutSave</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check output of verify command stored in file</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
                <argument><expr><literal type="string">"P00 DETAIL: archive path '9.4-1' is empty\n"</literal>
                <literal type="string">"P00 DETAIL: path '11-2/0000000100000000' does not contain any valid WAL to be processed\n"</literal>
                <literal type="string">"P01   INFO: invalid checksum "</literal>
                    <literal type="string">"'11-2/0000000200000007/000000020000000700000FFD-a6e1a64f0813352bc2e97f116a1800377e17d2e4.gz'\n"</literal>
                <literal type="string">"P01   INFO: invalid size "</literal>
                    <literal type="string">"'11-2/0000000200000007/000000020000000700000FFF-ee161f898c9012dd0c28b3fd1e7140b9cf411306'\n"</literal>
                <literal type="string">"P01   INFO: invalid result "</literal>
                    <literal type="string">"11-2/0000000200000008/000000020000000800000003-656817043007aa2100c44c712bcb456db705dab9: [41] raised from "</literal>
                    <literal type="string">"local-1 shim protocol: unable to open file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/db/"</literal>
                    <literal type="string">"11-2/0000000200000008/000000020000000800000003-656817043007aa2100c44c712bcb456db705dab9' for read:"</literal>
                    <literal type="string">" [13] Permission denied\n"</literal>
                <literal type="string">"            [FileOpenError] on retry after 0ms\n"</literal>
                <literal type="string">"P00 DETAIL: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/db/20181119-152800F/backup.manifest' for read\n"</literal>
                <literal type="string">"P00 DETAIL: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/db/20181119-152800F/backup.manifest.copy'"</literal>
                    <literal type="string">" for read\n"</literal>
                <literal type="string">"P00 DETAIL: manifest missing for '20181119-152800F' - backup may have expired\n"</literal>
                <literal type="string">"P00 DETAIL: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/db/20181119-152810F/backup.manifest.copy'"</literal>
                    <literal type="string">" for read\n"</literal>
                <literal type="string">"P00   INFO: backup '20181119-152810F' manifest does not contain any target files to verify\n"</literal>
                <literal type="string">"P01   INFO: invalid checksum '20181119-152900F/pg_data/PG_VERSION'\n"</literal>
                <literal type="string">"P01   INFO: file missing '20181119-152900F_20181119-152909D/pg_data/testmissing'\n"</literal>
                <literal type="string">"P00 DETAIL: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/db/20181119-153000F/backup.manifest' for read\n"</literal>
                <literal type="string">"P00   INFO: backup '20181119-153000F' appears to be in progress, skipping\n"</literal>
                <literal type="string">"P01   INFO: invalid result UNPROCESSEDBACKUP/pg_data/testother: [41] raised from local-1 shim protocol:"</literal>
                    <literal type="string">" unable to open file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/db/UNPROCESSEDBACKUP/pg_data/testother' for read: [13]"</literal>
                    <literal type="string">" Permission denied\n"</literal>
                <literal type="string">"            [FileOpenError] on retry after 0ms\n"</literal>
                <literal type="string">"P00 DETAIL: archiveId: 11-2, wal start: 000000020000000700000FFD, wal stop: 000000020000000800000000\n"</literal>
                <literal type="string">"P00 DETAIL: archiveId: 11-2, wal start: 000000020000000800000002, wal stop: 000000020000000800000003\n"</literal>
                <literal type="string">"P00 DETAIL: archiveId: 11-2, wal start: 000000030000000000000000, wal stop: 000000030000000000000001\n"</literal>
                <literal type="string">"P00   INFO: stanza: db\n"</literal>
                <literal type="string">"            status: error\n"</literal>
                <literal type="string">"              archiveId: 11-2, total WAL checked: 8, total valid WAL: 5\n"</literal>
                <literal type="string">"                checksum invalid: 1, size invalid: 1, other: 1\n"</literal>
                <literal type="string">"              backup: 20181119-152800F, status: manifest missing, total files checked: 0, total valid files: 0\n"</literal>
                <literal type="string">"              backup: 20181119-152810F, status: invalid, total files checked: 0, total valid files: 0\n"</literal>
                <literal type="string">"              backup: 20181119-152900F, status: invalid, total files checked: 3, total valid files: 2\n"</literal>
                <literal type="string">"                checksum invalid: 1\n"</literal>
                <literal type="string">"              backup: 20181119-152900F_20181119-152909D, status: invalid, total files checked: 5,"</literal>
                                   <literal type="string">" total valid files: 2\n"</literal>
                <literal type="string">"                missing: 1, checksum invalid: 1, other: 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>harnessLogLevelReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"text output, not verbose, with verify failures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOutput</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Verify text output, not verbose, with failures</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>verifyProcess</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptVerbose</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"stanza: db\n"</literal>
            <literal type="string">"status: error\n"</literal>
            <literal type="string">"  archiveId: 11-2, total WAL checked: 8, total valid WAL: 5\n"</literal>
            <literal type="string">"    checksum invalid: 1, size invalid: 1, other: 1\n"</literal>
            <literal type="string">"  backup: 20181119-152800F, status: manifest missing, total files checked: 0, total valid files: 0\n"</literal>
            <literal type="string">"  backup: 20181119-152810F, status: invalid, total files checked: 0, total valid files: 0\n"</literal>
            <literal type="string">"  backup: 20181119-152900F, status: invalid, total files checked: 3, total valid files: 2\n"</literal>
            <literal type="string">"    checksum invalid: 1\n"</literal>
            <literal type="string">"  backup: 20181119-152900F_20181119-152909D, status: invalid, total files checked: 5, total valid files: 2\n"</literal>
            <literal type="string">"    missing: 1, checksum invalid: 1, other: 1"</literal></expr></argument>, <argument><expr><literal type="string">"verify text output, not verbose, with verify failures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
                <argument><expr><literal type="string">"P01   INFO: invalid checksum "</literal>
                    <literal type="string">"'11-2/0000000200000007/000000020000000700000FFD-a6e1a64f0813352bc2e97f116a1800377e17d2e4.gz'\n"</literal>
                <literal type="string">"P01   INFO: invalid size "</literal>
                    <literal type="string">"'11-2/0000000200000007/000000020000000700000FFF-ee161f898c9012dd0c28b3fd1e7140b9cf411306'\n"</literal>
                <literal type="string">"P01   INFO: invalid result "</literal>
                    <literal type="string">"11-2/0000000200000008/000000020000000800000003-656817043007aa2100c44c712bcb456db705dab9: [41] raised from "</literal>
                    <literal type="string">"local-1 shim protocol: unable to open file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/db/"</literal>
                    <literal type="string">"11-2/0000000200000008/000000020000000800000003-656817043007aa2100c44c712bcb456db705dab9' for read:"</literal>
                    <literal type="string">" [13] Permission denied\n"</literal>
                <literal type="string">"P00   INFO: backup '20181119-152810F' manifest does not contain any target files to verify\n"</literal>
                <literal type="string">"P01   INFO: invalid checksum '20181119-152900F/pg_data/PG_VERSION'\n"</literal>
                <literal type="string">"P01   INFO: file missing '20181119-152900F_20181119-152909D/pg_data/testmissing'\n"</literal>
                <literal type="string">"P00   INFO: backup '20181119-153000F' appears to be in progress, skipping\n"</literal>
                <literal type="string">"P01   INFO: invalid result UNPROCESSEDBACKUP/pg_data/testother: [41] raised from local-1 shim protocol:"</literal>
                    <literal type="string">" unable to open file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/db/UNPROCESSEDBACKUP/pg_data/testother' for read: [13]"</literal>
                    <literal type="string">" Permission denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cmdVerify()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Load Parameters</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BACKUP_DB1_CURRENT_FULL3_DIFF1</name></cpp:macro>                                                                                \
            <cpp:value>"20181119-152900F_20181119-152909D={"                                                                                  \
            "\"backrest-format\":5,\"backrest-version\":\"2.08dev\","                                                              \
            "\"backup-archive-start\":\"000000010000000000000006\",\"backup-archive-stop\":\"000000010000000000000007\","          \
            "\"backup-info-repo-size\":2369186,\"backup-info-repo-size-delta\":2369186,"                                           \
            "\"backup-info-size\":20162900,\"backup-info-size-delta\":20162900,"                                                   \
            "\"backup-timestamp-start\":1542640898,\"backup-timestamp-stop\":1542640911,\"backup-type\":\"full\","                 \
            "\"db-id\":1,\"option-archive-check\":true,\"option-archive-copy\":false,\"option-backup-standby\":false,"             \
            "\"option-checksum-page\":true,\"option-compress\":true,\"option-hardlink\":false,\"option-online\":true}\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BACKUP_DB2_CURRENT_FULL1</name></cpp:macro>                                                                                      \
            <cpp:value>"20201119-163000F={"                                                                                                   \
            "\"backrest-format\":5,\"backrest-version\":\"2.08dev\","                                                              \
            "\"backup-archive-start\":\"000000020000000000000001\",\"backup-archive-stop\":\"000000020000000000000001\","          \
            "\"backup-info-repo-size\":2369186,\"backup-info-repo-size-delta\":2369186,"                                           \
            "\"backup-info-size\":20162900,\"backup-info-size-delta\":20162900,"                                                   \
            "\"backup-timestamp-start\":1542640898,\"backup-timestamp-stop\":1542640911,\"backup-type\":\"full\","                 \
            "\"db-id\":2,\"option-archive-check\":true,\"option-archive-copy\":false,\"option-backup-standby\":false,"             \
            "\"option-checksum-page\":true,\"option-compress\":true,\"option-hardlink\":false,\"option-online\":true}\n"</cpp:value></cpp:define>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"prior backup verification incomplete - referenced file checked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_ARCHIVE_INFO_MULTI_HISTORY_BASE</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid archive.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>, <argument>TEST_ARCHIVE_INFO_MULTI_HISTORY_BASE</argument>,
            <argument>.comment = <literal type="string">"valid archive.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BACKUP_INFO</name></cpp:macro>                                                                                                   \
            <cpp:value>"[backup:current]\n"                                                                                                   \
            TEST_BACKUP_DB1_CURRENT_FULL3                                                                                          \
            TEST_BACKUP_DB1_CURRENT_FULL3_DIFF1                                                                                    \
            TEST_BACKUP_DB2_CURRENT_FULL1                                                                                          \
            "\n"                                                                                                                   \
            "[db]\n"                                                                                                               \
            TEST_BACKUP_DB2_11                                                                                                     \
            "\n"                                                                                                                   \
            "[db:history]\n"                                                                                                       \
            TEST_BACKUP_DB1_HISTORY                                                                                                \
            "\n"                                                                                                                   \
            TEST_BACKUP_DB2_HISTORY</cpp:value></cpp:define>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_BACKUP_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(<argument>storageRepoWrite()</argument>, <argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>, <argument>TEST_BACKUP_INFO</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Create valid full backup for DB1</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_FULL_DB1</name></cpp:macro>                                                                                             \
            <cpp:value>TEST_MANIFEST_HEADER                                                                                                   \
            TEST_MANIFEST_DB_94                                                                                                    \
            TEST_MANIFEST_OPTION_ALL                                                                                               \
            TEST_MANIFEST_TARGET                                                                                                   \
            TEST_MANIFEST_DB                                                                                                       \
            TEST_MANIFEST_FILE                                                                                                     \
            TEST_MANIFEST_FILE_DEFAULT                                                                                             \
            TEST_MANIFEST_LINK                                                                                                     \
            TEST_MANIFEST_LINK_DEFAULT                                                                                             \
            TEST_MANIFEST_PATH                                                                                                     \
            TEST_MANIFEST_PATH_DEFAULT</cpp:value></cpp:define>

        <comment type="line">// Write manifests for full backup</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20181119-152900F/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>, <argument><expr><name>TEST_MANIFEST_FULL_DB1</name></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid manifest - full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>STORAGE_REPO_BACKUP <literal type="string">"/20181119-152900F/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>, <argument>TEST_MANIFEST_FULL_DB1</argument>,
            <argument>.comment = <literal type="string">"valid manifest copy - full"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Create valid diff backup for DB1</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_DIFF_DB1</name></cpp:macro>                                                                                             \
            <cpp:value>TEST_MANIFEST_HEADER                                                                                                   \
            TEST_MANIFEST_DB_94                                                                                                    \
            TEST_MANIFEST_OPTION_ALL                                                                                               \
            TEST_MANIFEST_TARGET                                                                                                   \
            TEST_MANIFEST_DB                                                                                                       \
            "\n"                                                                                                                   \
            "[target:file]\n"                                                                                                      \
            "pg_data/PG_VERSION={\"checksum\":\"184473f470864e067ee3a22e64b47b0a1c356f29\",\"reference\":\"20181119-152900F\""     \
                ",\"size\":4,\"timestamp\":1565282114}\n"                                                                          \
            TEST_MANIFEST_FILE_DEFAULT                                                                                             \
            TEST_MANIFEST_LINK                                                                                                     \
            TEST_MANIFEST_LINK_DEFAULT                                                                                             \
            TEST_MANIFEST_PATH                                                                                                     \
            TEST_MANIFEST_PATH_DEFAULT</cpp:value></cpp:define>

        <comment type="line">// Write manifests for diff backup</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20181119-152900F_20181119-152909D/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>,
            <argument><expr><name>TEST_MANIFEST_DIFF_DB1</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid manifest - diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>STORAGE_REPO_BACKUP <literal type="string">"/20181119-152900F_20181119-152909D/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>,
            <argument>TEST_MANIFEST_DIFF_DB1</argument>, <argument>.comment = <literal type="string">"valid manifest copy - diff"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Put the file referenced by both backups into the full backup</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20181119-152900F/pg_data/PG_VERSION"</literal></expr></argument>, <argument><expr><name>fileContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Redirect stdout to a file</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>stdoutSave</name> <init>= <expr><call><name>dup</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>stdoutFile</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/stdout.info"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>freopen</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>FileWriteError</name></expr></argument>, <argument><expr><literal type="string">"unable to reopen stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Not in a test wrapper to avoid writing to stdout</comment>
        <expr_stmt><expr><call><name>cmdVerify</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Restore normal stdout</comment>
        <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>stdoutSave</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check output of verify command stored in file</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// The error for the referenced file is logged twice because it is checked again by the second backup since the first backup</comment>
        <comment type="line">// verification had not yet completed before the second backup verification began</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P01   INFO: invalid checksum '20181119-152900F/pg_data/PG_VERSION'\n"</literal>
            <literal type="string">"P01   INFO: invalid checksum '20181119-152900F/pg_data/PG_VERSION'\n"</literal>
            <literal type="string">"P00   INFO: stanza: db\n"</literal>
            <literal type="string">"            status: error\n"</literal>
            <literal type="string">"              backup: 20181119-152900F, status: invalid, total files checked: 1, total valid files: 0\n"</literal>
            <literal type="string">"                checksum invalid: 1\n"</literal>
            <literal type="string">"              backup: 20181119-152900F_20181119-152909D, status: invalid, total files checked: 1,"</literal>
                <literal type="string">" total valid files: 0\n"</literal>
            <literal type="string">"                checksum invalid: 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"valid backup, prior backup verification complete - referenced file not checked"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set process max to 1 and add more files to check so first backup completes before second is checked</comment>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcessMax</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>manifestContent</name> <init>= <macro><name>strNewFmt</name><argument_list>(
            <argument>TEST_MANIFEST_HEADER
            TEST_MANIFEST_DB_94
            TEST_MANIFEST_OPTION_ALL
            TEST_MANIFEST_TARGET
            TEST_MANIFEST_DB
            TEST_MANIFEST_FILE
            <literal type="string">"pg_data/base/1/555_init={\"checksum\":\"%s\",\"size\":1,\"timestamp\":1565282114}\n"</literal>
            <literal type="string">"pg_data/base/1/555_init.1={\"size\":0,\"timestamp\":1565282114}\n"</literal>
            TEST_MANIFEST_FILE_DEFAULT
            TEST_MANIFEST_LINK
            TEST_MANIFEST_LINK_DEFAULT
            TEST_MANIFEST_PATH
            TEST_MANIFEST_PATH_DEFAULT</argument>,
            <argument>strZ(fileChecksum)</argument>)</argument_list></macro></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20181119-152900F/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>manifestContent</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid manifest - full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>STORAGE_REPO_BACKUP <literal type="string">"/20181119-152900F/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>, <argument>strZ(manifestContent)</argument>,
            <argument>.comment = <literal type="string">"valid manifest copy - full"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20181119-152900F/pg_data/base/1/555_init"</literal></expr></argument>, <argument><expr><name>fileContents</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"invalid size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Diff manifest</comment>
        <expr_stmt><expr><name>manifestContent</name> <operator>=</operator> <macro><name>strNewZ</name><argument_list>(
            <argument>TEST_MANIFEST_HEADER
            TEST_MANIFEST_DB_94
            TEST_MANIFEST_OPTION_ALL
            TEST_MANIFEST_TARGET
            TEST_MANIFEST_DB
            <literal type="string">"\n"</literal>
            <literal type="string">"[target:file]\n"</literal>
            <literal type="string">"pg_data/PG_VERSION={\"checksum\":\"184473f470864e067ee3a22e64b47b0a1c356f29\",\"reference\":\"20181119-152900F\""</literal>
                <literal type="string">",\"size\":4,\"timestamp\":1565282114}\n"</literal>
            TEST_MANIFEST_FILE_DEFAULT
            TEST_MANIFEST_LINK
            TEST_MANIFEST_LINK_DEFAULT
            TEST_MANIFEST_PATH
            TEST_MANIFEST_PATH_DEFAULT</argument>)</argument_list></macro></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20181119-152900F_20181119-152909D/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>manifestContent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid manifest - diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>STORAGE_REPO_BACKUP <literal type="string">"/20181119-152900F_20181119-152909D/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>,
            <argument>strZ(manifestContent)</argument>, <argument>.comment = <literal type="string">"valid manifest copy - diff"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Create valid full backup and valid diff backup</comment>
        <expr_stmt><expr><name>manifestContent</name> <operator>=</operator> <macro><name>strNewFmt</name><argument_list>(
                <argument>TEST_MANIFEST_HEADER
                <literal type="string">"backup-bundle=true\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[backup:db]\n"</literal>
                TEST_BACKUP_DB2_11
                TEST_MANIFEST_OPTION_ALL
                TEST_MANIFEST_TARGET
                TEST_MANIFEST_DB
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/validfile={\"bni\":1,\"bno\":3,\"checksum\":\"%s\",\"size\":%u,\"timestamp\":1565282114}\n"</literal>
                <literal type="string">"pg_data/zerofile={\"size\":0,\"timestamp\":1565282114}\n"</literal>
                TEST_MANIFEST_FILE_DEFAULT
                TEST_MANIFEST_LINK
                TEST_MANIFEST_LINK_DEFAULT
                TEST_MANIFEST_PATH
                TEST_MANIFEST_PATH_DEFAULT</argument>,
                <argument>strZ(fileChecksum)</argument>, <argument>(unsigned int)fileSize</argument>)</argument_list></macro></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20201119-163000F/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>manifestContent</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid manifest - full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>STORAGE_REPO_BACKUP <literal type="string">"/20201119-163000F/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>, <argument>strZ(manifestContent)</argument>,
            <argument>.comment = <literal type="string">"valid manifest copy - full"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name>  <literal type="string">"/20201119-163000F/bundle/1"</literal></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"XXX%s"</literal></expr></argument>, <argument><expr><name>fileContents</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create WAL file with just header info and small WAL size</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>walBuffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(<argument>(PgWal){.version = PG_VERSION_11</argument>, <argument>.size = <literal type="number">1024</literal> * <literal type="number">1024</literal>}</argument>, <argument>walBuffer</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>walBufferSha1</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-2/0000000200000000/000000020000000000000001-%s"</literal></expr></argument>, <argument><expr><name>walBufferSha1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid WAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Redirect stdout to a file</comment>
        <expr_stmt><expr><name>stdoutSave</name> <operator>=</operator> <call><name>dup</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>stdoutFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/stdout.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>freopen</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>FileWriteError</name></expr></argument>, <argument><expr><literal type="string">"unable to reopen stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Not in a test wrapper to avoid writing to stdout</comment>
        <expr_stmt><expr><call><name>cmdVerify</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Restore normal stdout</comment>
        <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>stdoutSave</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check output of verify command stored in file</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P01   INFO: invalid checksum '20181119-152900F/pg_data/PG_VERSION'\n"</literal>
            <literal type="string">"P01   INFO: invalid size '20181119-152900F/pg_data/base/1/555_init'\n"</literal>
            <literal type="string">"P01   INFO: file missing '20181119-152900F/pg_data/base/1/555_init.1'\n"</literal>
            <literal type="string">"P00   INFO: stanza: db\n"</literal>
            <literal type="string">"            status: error\n"</literal>
            <literal type="string">"              backup: 20181119-152900F, status: invalid, total files checked: 3, total valid files: 0\n"</literal>
            <literal type="string">"                missing: 1, checksum invalid: 1, size invalid: 1\n"</literal>
            <literal type="string">"              backup: 20181119-152900F_20181119-152909D, status: invalid, total files checked: 1,"</literal>
                <literal type="string">" total valid files: 0\n"</literal>
            <literal type="string">"                checksum invalid: 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cmdVerify() verbose text"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Load Parameters</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOutput</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptVerbose</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BACKUP_DB1_CURRENT_FULL3_DIFF1</name></cpp:macro>                                                                                \
            <cpp:value>"20181119-152900F_20181119-152909D={"                                                                                  \
            "\"backrest-format\":5,\"backrest-version\":\"2.08dev\","                                                              \
            "\"backup-archive-start\":\"000000010000000000000006\",\"backup-archive-stop\":\"000000010000000000000007\","          \
            "\"backup-info-repo-size\":2369186,\"backup-info-repo-size-delta\":2369186,"                                           \
            "\"backup-info-size\":20162900,\"backup-info-size-delta\":20162900,"                                                   \
            "\"backup-timestamp-start\":1542640898,\"backup-timestamp-stop\":1542640911,\"backup-type\":\"full\","                 \
            "\"db-id\":1,\"option-archive-check\":true,\"option-archive-copy\":false,\"option-backup-standby\":false,"             \
            "\"option-checksum-page\":true,\"option-compress\":true,\"option-hardlink\":false,\"option-online\":true}\n"</cpp:value></cpp:define>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BACKUP_DB2_CURRENT_FULL1</name></cpp:macro>                                                                                      \
            <cpp:value>"20201119-163000F={"                                                                                                   \
            "\"backrest-format\":5,\"backrest-version\":\"2.08dev\","                                                              \
            "\"backup-archive-start\":\"000000020000000000000001\",\"backup-archive-stop\":\"000000020000000000000001\","          \
            "\"backup-info-repo-size\":2369186,\"backup-info-repo-size-delta\":2369186,"                                           \
            "\"backup-info-size\":20162900,\"backup-info-size-delta\":20162900,"                                                   \
            "\"backup-timestamp-start\":1542640898,\"backup-timestamp-stop\":1542640911,\"backup-type\":\"full\","                 \
            "\"db-id\":2,\"option-archive-check\":true,\"option-archive-copy\":false,\"option-backup-standby\":false,"             \
            "\"option-checksum-page\":true,\"option-compress\":true,\"option-hardlink\":false,\"option-online\":true}\n"</cpp:value></cpp:define>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"prior backup verification incomplete - referenced file checked verbose, text output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_ARCHIVE_INFO_MULTI_HISTORY_BASE</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid archive.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>, <argument>TEST_ARCHIVE_INFO_MULTI_HISTORY_BASE</argument>,
            <argument>.comment = <literal type="string">"valid archive.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BACKUP_INFO</name></cpp:macro>                                                                                                   \
            <cpp:value>"[backup:current]\n"                                                                                                   \
            TEST_BACKUP_DB1_CURRENT_FULL3                                                                                          \
            TEST_BACKUP_DB1_CURRENT_FULL3_DIFF1                                                                                    \
            TEST_BACKUP_DB2_CURRENT_FULL1                                                                                          \
            "\n"                                                                                                                   \
            "[db]\n"                                                                                                               \
            TEST_BACKUP_DB2_11                                                                                                     \
            "\n"                                                                                                                   \
            "[db:history]\n"                                                                                                       \
            TEST_BACKUP_DB1_HISTORY                                                                                                \
            "\n"                                                                                                                   \
            TEST_BACKUP_DB2_HISTORY</cpp:value></cpp:define>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_BACKUP_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(<argument>storageRepoWrite()</argument>, <argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>, <argument>TEST_BACKUP_INFO</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Create valid full backup for DB1</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_FULL_DB1</name></cpp:macro>                                                                                             \
            <cpp:value>TEST_MANIFEST_HEADER                                                                                                   \
            TEST_MANIFEST_DB_94                                                                                                    \
            TEST_MANIFEST_OPTION_ALL                                                                                               \
            TEST_MANIFEST_TARGET                                                                                                   \
            TEST_MANIFEST_DB                                                                                                       \
            TEST_MANIFEST_FILE                                                                                                     \
            TEST_MANIFEST_FILE_DEFAULT                                                                                             \
            TEST_MANIFEST_LINK                                                                                                     \
            TEST_MANIFEST_LINK_DEFAULT                                                                                             \
            TEST_MANIFEST_PATH                                                                                                     \
            TEST_MANIFEST_PATH_DEFAULT</cpp:value></cpp:define>

        <comment type="line">// Write manifests for full backup</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20181119-152900F/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>, <argument><expr><name>TEST_MANIFEST_FULL_DB1</name></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid manifest - full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>STORAGE_REPO_BACKUP <literal type="string">"/20181119-152900F/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>, <argument>TEST_MANIFEST_FULL_DB1</argument>,
            <argument>.comment = <literal type="string">"valid manifest copy - full"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Create valid diff backup for DB1</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_MANIFEST_DIFF_DB1</name></cpp:macro>                                                                                             \
            <cpp:value>TEST_MANIFEST_HEADER                                                                                                   \
            TEST_MANIFEST_DB_94                                                                                                    \
            TEST_MANIFEST_OPTION_ALL                                                                                               \
            TEST_MANIFEST_TARGET                                                                                                   \
            TEST_MANIFEST_DB                                                                                                       \
            "\n"                                                                                                                   \
            "[target:file]\n"                                                                                                      \
            "pg_data/PG_VERSION={\"checksum\":\"184473f470864e067ee3a22e64b47b0a1c356f29\",\"reference\":\"20181119-152900F\""     \
                ",\"size\":4,\"timestamp\":1565282114}\n"                                                                          \
            TEST_MANIFEST_FILE_DEFAULT                                                                                             \
            TEST_MANIFEST_LINK                                                                                                     \
            TEST_MANIFEST_LINK_DEFAULT                                                                                             \
            TEST_MANIFEST_PATH                                                                                                     \
            TEST_MANIFEST_PATH_DEFAULT</cpp:value></cpp:define>

        <comment type="line">// Write manifests for diff backup</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20181119-152900F_20181119-152909D/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>,
            <argument><expr><name>TEST_MANIFEST_DIFF_DB1</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid manifest - diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>STORAGE_REPO_BACKUP <literal type="string">"/20181119-152900F_20181119-152909D/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>,
            <argument>TEST_MANIFEST_DIFF_DB1</argument>, <argument>.comment = <literal type="string">"valid manifest copy - diff"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Put the file referenced by both backups into the full backup</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20181119-152900F/pg_data/PG_VERSION"</literal></expr></argument>, <argument><expr><name>fileContents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Redirect stdout to a file</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>stdoutSave</name> <init>= <expr><call><name>dup</name><argument_list>(<argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>stdoutFile</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/stdout.info"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>freopen</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>FileWriteError</name></expr></argument>, <argument><expr><literal type="string">"unable to reopen stdout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Not in a test wrapper to avoid writing to stdout</comment>
        <expr_stmt><expr><call><name>cmdVerify</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Restore normal stdout</comment>
        <expr_stmt><expr><call><name>dup2</name><argument_list>(<argument><expr><name>stdoutSave</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check output of verify command stored in file</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>stdoutFile</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"stanza: db\n"</literal>
            <literal type="string">"status: error\n"</literal>
            <literal type="string">"  archiveId: none found\n"</literal>
            <literal type="string">"  backup: 20181119-152900F, status: invalid, total files checked: 1, total valid files: 0\n"</literal>
            <literal type="string">"    missing: 0, checksum invalid: 1, size invalid: 0, other: 0\n"</literal>
            <literal type="string">"  backup: 20181119-152900F_20181119-152909D, status: invalid, total files checked: 1, total valid files: 0\n"</literal>
            <literal type="string">"    missing: 0, checksum invalid: 1, size invalid: 0, other: 0\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// The error for the referenced file is logged twice because it is checked again by the second backup since the first backup</comment>
        <comment type="line">// verification had not yet completed before the second backup verification began</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P01   INFO: invalid checksum '20181119-152900F/pg_data/PG_VERSION'\n"</literal>
            <literal type="string">"P01   INFO: invalid checksum '20181119-152900F/pg_data/PG_VERSION'\n"</literal>
            <literal type="string">"P00   INFO: stanza: db\n"</literal>
            <literal type="string">"            status: error\n"</literal>
            <literal type="string">"              archiveId: none found\n"</literal>
            <literal type="string">"              backup: 20181119-152900F, status: invalid, total files checked: 1, total valid files: 0\n"</literal>
            <literal type="string">"                missing: 0, checksum invalid: 1, size invalid: 0, other: 0\n"</literal>
            <literal type="string">"              backup: 20181119-152900F_20181119-152909D, status: invalid, total files checked: 1,"</literal>
                <literal type="string">" total valid files: 0\n"</literal>
            <literal type="string">"                missing: 0, checksum invalid: 1, size invalid: 0, other: 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"verifyProcess(), none output, not verbose, no failures"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <comment type="line">// Load Parameters with multi-repo</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOutput</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Store valid archive/backup info files</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_ARCHIVE_INFO_MULTI_HISTORY_BASE</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid archive.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>, <argument>TEST_ARCHIVE_INFO_MULTI_HISTORY_BASE</argument>,
            <argument>.comment = <literal type="string">"valid archive.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"none output, not verbose, with no verify failures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_NO_CURRENT_BACKUP</name></cpp:macro>                                                                                             \
            <cpp:value>"[db]\n"                                                                                                               \
            TEST_BACKUP_DB2_11                                                                                                     \
            "\n"                                                                                                                   \
            "[db:history]\n"                                                                                                       \
            TEST_BACKUP_DB1_HISTORY                                                                                                \
            "\n"                                                                                                                   \
            TEST_BACKUP_DB2_HISTORY</cpp:value></cpp:define>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_NO_CURRENT_BACKUP</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"no current backups"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>, <argument>TEST_NO_CURRENT_BACKUP</argument>, <argument>.comment = <literal type="string">"no current backups copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Create WAL file with just header info and small WAL size</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>walBuffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(<argument>(PgWal){.version = PG_VERSION_11</argument>, <argument>.size = <literal type="number">1024</literal> * <literal type="number">1024</literal>}</argument>, <argument>walBuffer</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>walBufferSha1</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-2/0000000200000007/000000020000000700000FFE-%s"</literal></expr></argument>, <argument><expr><name>walBufferSha1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid WAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Verify text output with no verify errors</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>verifyProcess</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptVerbose</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"verify none output, not verbose, with no failures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: no backups exist in the repo\n"</literal>
            <literal type="string">"P00 DETAIL: archiveId: 11-2, wal start: 000000020000000700000FFE, wal stop: 000000020000000700000FFE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"none output, verbose, with no verify failures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptVerbose</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>verifyProcess</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptVerbose</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"stanza: db\n"</literal>
            <literal type="string">"status: ok\n"</literal>
            <literal type="string">"  archiveId: 11-2, total WAL checked: 1, total valid WAL: 1\n"</literal>
            <literal type="string">"    missing: 0, checksum invalid: 0, size invalid: 0, other: 0\n"</literal>
            <literal type="string">"  backup: none found"</literal></expr></argument>,
            <argument><expr><literal type="string">"verify none output, verbose, with no failures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: no backups exist in the repo\n"</literal>
            <literal type="string">"P00 DETAIL: archiveId: 11-2, wal start: 000000020000000700000FFE, wal stop: 000000020000000700000FFE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"verifyProcess(), text"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <comment type="line">// Load Parameters with multi-repo</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOutput</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Store valid archive/backup info files</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_ARCHIVE_INFO_MULTI_HISTORY_BASE</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid archive.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>, <argument>TEST_ARCHIVE_INFO_MULTI_HISTORY_BASE</argument>,
            <argument>.comment = <literal type="string">"valid archive.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"text output, not verbose, with no verify failures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_NO_CURRENT_BACKUP</name></cpp:macro>                                                                                             \
            <cpp:value>"[db]\n"                                                                                                               \
            TEST_BACKUP_DB2_11                                                                                                     \
            "\n"                                                                                                                   \
            "[db:history]\n"                                                                                                       \
            TEST_BACKUP_DB1_HISTORY                                                                                                \
            "\n"                                                                                                                   \
            TEST_BACKUP_DB2_HISTORY</cpp:value></cpp:define>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_NO_CURRENT_BACKUP</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"no current backups"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>, <argument>TEST_NO_CURRENT_BACKUP</argument>, <argument>.comment = <literal type="string">"no current backups copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Create WAL file with just header info and small WAL size</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>walBuffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(<argument>(PgWal){.version = PG_VERSION_11</argument>, <argument>.size = <literal type="number">1024</literal> * <literal type="number">1024</literal>}</argument>, <argument>walBuffer</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>walBufferSha1</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-2/0000000200000007/000000020000000700000FFE-%s"</literal></expr></argument>, <argument><expr><name>walBufferSha1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid WAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Verify text output with no verify errors</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>verifyProcess</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptVerbose</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"verify text output, not verbose, with no failures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: no backups exist in the repo\n"</literal>
            <literal type="string">"P00 DETAIL: archiveId: 11-2, wal start: 000000020000000700000FFE, wal stop: 000000020000000700000FFE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"verifyProcess(), text, verbose"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <comment type="line">// Load Parameters with multi-repo</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOutput</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptVerbose</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVerify</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Store valid archive/backup info files</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_ARCHIVE_INFO_MULTI_HISTORY_BASE</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid archive.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>, <argument>TEST_ARCHIVE_INFO_MULTI_HISTORY_BASE</argument>,
            <argument>.comment = <literal type="string">"valid archive.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"text output, verbose with no verify failures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_NO_CURRENT_BACKUP</name></cpp:macro>                                                                                             \
            <cpp:value>"[db]\n"                                                                                                               \
            TEST_BACKUP_DB2_11                                                                                                     \
            "\n"                                                                                                                   \
            "[db:history]\n"                                                                                                       \
            TEST_BACKUP_DB1_HISTORY                                                                                                \
            "\n"                                                                                                                   \
            TEST_BACKUP_DB2_HISTORY</cpp:value></cpp:define>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><name>TEST_NO_CURRENT_BACKUP</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"no current backups"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>HRN_INFO_PUT</name><argument_list>(
            <argument>storageRepoWrite()</argument>, <argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>, <argument>TEST_NO_CURRENT_BACKUP</argument>, <argument>.comment = <literal type="string">"no current backups copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Create WAL file with just header info and small WAL size</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>walBuffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(<argument>(PgWal){.version = PG_VERSION_11</argument>, <argument>.size = <literal type="number">1024</literal> * <literal type="number">1024</literal>}</argument>, <argument>walBuffer</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>walBufferSha1</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-2/0000000200000007/000000020000000700000FFE-%s"</literal></expr></argument>, <argument><expr><name>walBufferSha1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"valid WAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Verify text output with no verify errors</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>verifyProcess</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptVerbose</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"stanza: db\n"</literal>
            <literal type="string">"status: ok\n"</literal>
            <literal type="string">"  archiveId: 11-2, total WAL checked: 1, total valid WAL: 1\n"</literal>
            <literal type="string">"    missing: 0, checksum invalid: 0, size invalid: 0, other: 0\n"</literal>
            <literal type="string">"  backup: none found"</literal></expr></argument>, <argument><expr><literal type="string">"verify text output, verbose, with no failures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00 DETAIL: no backups exist in the repo\n"</literal>
            <literal type="string">"P00 DETAIL: archiveId: 11-2, wal start: 000000020000000700000FFE, wal stop: 000000020000000700000FFE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
