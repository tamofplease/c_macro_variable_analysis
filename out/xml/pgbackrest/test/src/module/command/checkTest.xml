<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/command/checkTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Check Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/stanza/create.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoArchive.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoBackup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPostgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPq.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// PQfinish() is strictly checked</comment>
    <expr_stmt><expr><call><name>harnessPqScriptStrictSet</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cmdCheck()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Load Parameters</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveTimeout</name></expr></argument>, <argument><expr><literal type="string">".5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdCheck</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"fail to connect to database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set up harness to expect a failure to connect to the database</comment>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_CONNECTDB</argument>, <argument>.param = <literal type="string">"[\"dbname='postgres' port=5432\"]"</literal>}</argument>,
            <argument>{.function = HRNPQ_STATUS</argument>, <argument>.resultInt = CONNECTION_BAD}</argument>,
            <argument>{.function = HRNPQ_ERRORMESSAGE</argument>, <argument>.resultZ = <literal type="string">"error"</literal>}</argument>,
            <argument>{.function = HRNPQ_FINISH}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdCheck</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ConfigError</name></expr></argument>, <argument><expr><literal type="string">"no database found\nHINT: check indexed pg-path/pg-host configurations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: unable to check pg1: [DbConnectError] unable to connect to 'dbname='postgres' port=5432': error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"standby only, repo local - fail to find primary database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_92</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg"</literal>, true, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdCheck</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ConfigError</name></expr></argument>, <argument><expr><literal type="string">"primary database not found\nHINT: check indexed pg-path/pg-host configurations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"standby only, multiple pg databases and remote repos - fail to find primary database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"5433"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"repo.domain.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveTimeout</name></expr></argument>, <argument><expr><literal type="string">".5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdCheck</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_92</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Two standbys found but no primary</comment>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, <literal type="string">"/pgdata"</literal>, true, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_OPEN_GE_92(<literal type="number">8</literal>, <literal type="string">"dbname='postgres' port=5433"</literal>, PG_VERSION_92, <literal type="string">"/pgdata"</literal>, true, NULL, NULL)</argument>,

            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">8</literal>)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdCheck</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ConfigError</name></expr></argument>, <argument><expr><literal type="string">"primary database not found\nHINT: check indexed pg-path/pg-host configurations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"standby only, one pg database and remote repo - code coverage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Standby only, repo remote but only one pg-path configured</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"repo.domain.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveTimeout</name></expr></argument>, <argument><expr><literal type="string">".5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdCheck</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, <literal type="string">"/pgdata"</literal>, true, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Only confirming we get passed the check for repoIsLocal || more than one pg-path configured</comment>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdCheck</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DbMismatchError</name></expr></argument>,
            <argument><expr><literal type="string">"version '9.2' and path '/pgdata' queried from cluster do not match version '9.2' and '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' read from"</literal>
                <literal type="string">" '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/global/pg_control'\n"</literal>
            <literal type="string">"HINT: the pg1-path and pg1-port settings likely reference different clusters."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"backup-standby set without standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveTimeout</name></expr></argument>, <argument><expr><literal type="string">".5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptBackupStandby</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdCheck</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Primary database connection ok</comment>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg"</literal>, false, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdCheck</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to load info file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/test1/archive.info' or '"</literal> <name>TEST_PATH</name>
                <literal type="string">"/repo/archive/test1/archive.info.copy':\n"</literal>
            <literal type="string">"FileMissingError: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/test1/archive.info' for read\n"</literal>
            <literal type="string">"FileMissingError: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/test1/archive.info.copy' for read\n"</literal>
            <literal type="string">"HINT: archive.info cannot be opened but is required to push/get WAL segments.\n"</literal>
            <literal type="string">"HINT: is archive_command configured correctly in postgresql.conf?\n"</literal>
            <literal type="string">"HINT: has a stanza-create been performed?\n"</literal>
            <literal type="string">"HINT: use --no-archive-check to disable archive checks during backup if you have an alternate archiving scheme."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: option 'backup-standby' is enabled but standby is not properly configured\n"</literal>
            <literal type="string">"P00   INFO: check repo1 configuration (primary)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"standby and primary database - standby path doesn't match pg_control"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveTimeout</name></expr></argument>, <argument><expr><literal type="string">".5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"5433"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdCheck</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control for standby</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_92</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Standby database path doesn't match pg_control</comment>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, TEST_PATH, true, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_OPEN_GE_92(<literal type="number">8</literal>, <literal type="string">"dbname='postgres' port=5433"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg8"</literal>, false, NULL, NULL)</argument>,

            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">8</literal>)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdCheck</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DbMismatchError</name></expr></argument>,
            <argument><expr><literal type="string">"version '"</literal> <name>PG_VERSION_92_STR</name> <literal type="string">"' and path '"</literal> <name>TEST_PATH</name> <literal type="string">"' queried from cluster do not match version '"</literal> <name>PG_VERSION_92_STR</name>
                <literal type="string">"' and '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' read from '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/global/pg_control'\n"</literal>
            <literal type="string">"HINT: the pg1-path and pg1-port settings likely reference different clusters."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"standby and primary database - error on primary but standby check ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control for primary</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_92</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create info files</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_92_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.2\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_92_Z</name> <literal type="string">",\"db-version\":\"9.2\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-catalog-version=201608131\n"</literal>
            <literal type="string">"db-control-version=920\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_92_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.2\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-catalog-version\":201608131,\"db-control-version\":920,\"db-system-id\":"</literal> <name>HRN_PG_SYSTEMID_92_Z</name> <literal type="string">","</literal>
                <literal type="string">"\"db-version\":\"9.2\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Single repo config - error when checking archive mode setting on database</comment>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg"</literal>, true, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_OPEN_GE_92(<literal type="number">8</literal>, <literal type="string">"dbname='postgres' port=5433"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg8"</literal>, false, <literal type="string">"off"</literal>, NULL)</argument>,

            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">8</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Error on primary but standby check ok</comment>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdCheck</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ArchiveDisabledError</name></expr></argument>, <argument><expr><literal type="string">"archive_mode must be enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: check repo1 (standby)\n"</literal>
            <literal type="string">"P00   INFO: switch wal not performed because this is a standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"mulit-repo - standby and primary database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Multi-repo - add a second repo (repo2)</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argListRepo2</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argListRepo2</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdCheck</name></expr></argument>, <argument><expr><name>argListRepo2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg"</literal>, true, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_OPEN_GE_92(<literal type="number">8</literal>, <literal type="string">"dbname='postgres' port=5433"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg8"</literal>, false, NULL, NULL)</argument>,

            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">8</literal>)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// Stanza has not yet been created on repo2 but is created (and checked) on repo1</comment>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>cmdCheck</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to load info file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo2/archive/test1/archive.info' or"</literal>
                <literal type="string">" '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo2/archive/test1/archive.info.copy':\n"</literal>
            <literal type="string">"FileMissingError: "</literal> <name>STORAGE_ERROR_READ_MISSING</name> <literal type="string">"\n"</literal>
            <literal type="string">"FileMissingError: "</literal> <name>STORAGE_ERROR_READ_MISSING</name> <literal type="string">"\n"</literal>
            <literal type="string">"HINT: archive.info cannot be opened but is required to push/get WAL segments.\n"</literal>
            <literal type="string">"HINT: is archive_command configured correctly in postgresql.conf?\n"</literal>
            <literal type="string">"HINT: has a stanza-create been performed?\n"</literal>
            <literal type="string">"HINT: use --no-archive-check to disable archive checks during backup if you have an alternate archiving scheme."</literal></expr></argument>,
            <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo2/archive/test1/archive.info"</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo2/archive/test1/archive.info.copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: check repo1 (standby)\n"</literal>
            <literal type="string">"P00   INFO: check repo2 (standby)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"multi-repo - primary database only, WAL not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveTimeout</name></expr></argument>, <argument><expr><literal type="string">".5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdCheck</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create stanza files on repo2</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_92_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.2\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_92_Z</name> <literal type="string">",\"db-version\":\"9.2\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-catalog-version=201608131\n"</literal>
            <literal type="string">"db-control-version=920\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_92_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.2\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-catalog-version\":201608131,\"db-control-version\":920,\"db-system-id\":"</literal> <name>HRN_PG_SYSTEMID_92_Z</name> <literal type="string">","</literal>
                <literal type="string">"\"db-version\":\"9.2\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Error when WAL segment not found</comment>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg"</literal>, false, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_CREATE_RESTORE_POINT(<literal type="number">1</literal>, <literal type="string">"1/1"</literal>)</argument>,
            <argument>HRNPQ_MACRO_WAL_SWITCH(<literal type="number">1</literal>, <literal type="string">"xlog"</literal>, <literal type="string">"000000010000000100000001"</literal>)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdCheck</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ArchiveTimeoutError</name></expr></argument>,
            <argument><expr><literal type="string">"WAL segment 000000010000000100000001 was not archived before the 500ms timeout\n"</literal>
            <literal type="string">"HINT: check the archive_command to ensure that all options are correct (especially --stanza).\n"</literal>
            <literal type="string">"HINT: check the PostgreSQL server log for errors.\n"</literal>
            <literal type="string">"HINT: run the 'start' command if the stanza was previously stopped."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: check repo1 configuration (primary)\n"</literal>
            <literal type="string">"P00   INFO: check repo2 configuration (primary)\n"</literal>
            <literal type="string">"P00   INFO: check repo1 archive for WAL (primary)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"multi-repo - WAL segment switch performed once for all repos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create WAL segment</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// WAL segment switch is performed once for all repos</comment>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg"</literal>, false, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_CREATE_RESTORE_POINT(<literal type="number">1</literal>, <literal type="string">"1/1"</literal>)</argument>,
            <argument>HRNPQ_MACRO_WAL_SWITCH(<literal type="number">1</literal>, <literal type="string">"xlog"</literal>, <literal type="string">"000000010000000100000001"</literal>)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/9.2-1/000000010000000100000001-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal></expr></argument>,
            <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/9.2-1/000000010000000100000001-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal></expr></argument>,
            <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdCheck</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check primary, WAL archived"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: check repo1 configuration (primary)\n"</literal>
            <literal type="string">"P00   INFO: check repo2 configuration (primary)\n"</literal>
            <literal type="string">"P00   INFO: check repo1 archive for WAL (primary)\n"</literal>
            <literal type="string">"P00   INFO: WAL segment 000000010000000100000001 successfully archived to '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/test1/9.2-1/"</literal>
                <literal type="string">"0000000100000001/000000010000000100000001-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' on repo1\n"</literal>
            <literal type="string">"P00   INFO: check repo2 archive for WAL (primary)\n"</literal>
            <literal type="string">"P00   INFO: WAL segment 000000010000000100000001 successfully archived to '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo2/archive/test1/9.2-1/"</literal>
                <literal type="string">"0000000100000001/000000010000000100000001-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' on repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"Primary == NULL (for test coverage)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>DbGetResult</name></type> <name>dbGroup</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>checkPrimary</name><argument_list>(<argument><expr><name>dbGroup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"primary == NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"checkDbConfig(), checkArchiveCommand()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"checkArchiveCommand() errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>checkArchiveCommand</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ArchiveCommandInvalidError</name></expr></argument>, <argument><expr><literal type="string">"archive_command '[null]' must contain "</literal> <name>PROJECT_BIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>checkArchiveCommand</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ArchiveCommandInvalidError</name></expr></argument>, <argument><expr><literal type="string">"archive_command '' must contain "</literal> <name>PROJECT_BIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>checkArchiveCommand</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"backrest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ArchiveCommandInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"archive_command 'backrest' must contain "</literal> <name>PROJECT_BIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"checkArchiveCommand() valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>checkArchiveCommand</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pgbackrest --stanza=demo archive-push %p"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"archive_command valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"checkDbConfig() valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"5433"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdCheck</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_92</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_92</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>DbGetResult</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg"</literal>, false, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_OPEN_GE_92(<literal type="number">8</literal>, <literal type="string">"dbname='postgres' port=5433"</literal>, PG_VERSION_92, <literal type="string">"/badpath"</literal>, true, NULL, NULL)</argument>,

            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">8</literal>)</argument>,
            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get primary and standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>checkDbConfig</name><argument_list>(<argument><expr><name>PG_VERSION_92</name></expr></argument>, <argument><expr><name><name>db</name><operator>.</operator><name>primaryIdx</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"valid db config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"checkDbConfig() version mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>checkDbConfig</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><name><name>db</name><operator>.</operator><name>primaryIdx</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbMismatchError</name></expr></argument>,
            <argument><expr><literal type="string">"version '"</literal> <name>PG_VERSION_92_STR</name> <literal type="string">"' and path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' queried from cluster do not match version '"</literal>
            <name>PG_VERSION_94_STR</name> <literal type="string">"' and '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' read from '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/global/pg_control'\n"</literal>
            <literal type="string">"HINT: the pg1-path and pg1-port settings likely reference different clusters."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"checkDbConfig() path mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>checkDbConfig</name><argument_list>(<argument><expr><name>PG_VERSION_92</name></expr></argument>, <argument><expr><name><name>db</name><operator>.</operator><name>standbyIdx</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbMismatchError</name></expr></argument>,
            <argument><expr><literal type="string">"version '"</literal> <name>PG_VERSION_92_STR</name> <literal type="string">"' and path '%s' queried from cluster do not match version '"</literal> <name>PG_VERSION_92_STR</name> <literal type="string">"' and"</literal>
                <literal type="string">" '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg8' read from '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg8/global/pg_control'\n"</literal>
            <literal type="string">"HINT: the pg8-path and pg8-port settings likely reference different clusters."</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>dbPgDataPath</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"checkDbConfig() archive-check=false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveCheck</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdCheck</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>checkDbConfig</name><argument_list>(<argument><expr><name>PG_VERSION_92</name></expr></argument>, <argument><expr><name><name>db</name><operator>.</operator><name>primaryIdx</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"valid db config --no-archive-check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"checkDbConfig() archive-check not valid for command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"5433"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaCreate</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>checkDbConfig</name><argument_list>(<argument><expr><name>PG_VERSION_92</name></expr></argument>, <argument><expr><name><name>db</name><operator>.</operator><name>primaryIdx</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"valid db config, archive-check not valid for command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"checkDbConfig() archive_mode=always not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdCheck</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg"</literal>, false, <literal type="string">"always"</literal>, NULL)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>checkDbConfig</name><argument_list>(<argument><expr><name>PG_VERSION_92</name></expr></argument>, <argument><expr><name><name>db</name><operator>.</operator><name>primaryIdx</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FeatureNotSupportedError</name></expr></argument>,
            <argument><expr><literal type="string">"archive_mode=always not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"disable archive_mode=always check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveModeCheck</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdCheck</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>checkDbConfig</name><argument_list>(<argument><expr><name>PG_VERSION_92</name></expr></argument>, <argument><expr><name><name>db</name><operator>.</operator><name>primaryIdx</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"checkStanzaInfo(), checkStanzaInfoPg()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"checkStanzaInfo() - files match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>InfoArchive</name> <modifier>*</modifier></type><name>archiveInfo</name> <init>= <expr><call><name>infoArchiveNew</name><argument_list>(<argument><expr><name>PG_VERSION_96</name></expr></argument>, <argument><expr><literal type="number">6569239123849665679</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InfoPgData</name></type> <name>archivePg</name> <init>= <expr><call><name>infoPgData</name><argument_list>(<argument><expr><call><name>infoArchivePg</name><argument_list>(<argument><expr><name>archiveInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>infoPgDataCurrentId</name><argument_list>(<argument><expr><call><name>infoArchivePg</name><argument_list>(<argument><expr><name>archiveInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>InfoBackup</name> <modifier>*</modifier></type><name>backupInfo</name> <init>= <expr><call><name>infoBackupNew</name><argument_list>(<argument><expr><name>PG_VERSION_96</name></expr></argument>, <argument><expr><literal type="number">6569239123849665679</literal></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_96</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InfoPgData</name></type> <name>backupPg</name> <init>= <expr><call><name>infoPgData</name><argument_list>(<argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>backupInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>infoPgDataCurrentId</name><argument_list>(<argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>backupInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>checkStanzaInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>archivePg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backupPg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza info files match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"checkStanzaInfo() - corrupted backup file: system id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>backupInfo</name> <operator>=</operator> <call><name>infoBackupNew</name><argument_list>(<argument><expr><name>PG_VERSION_96</name></expr></argument>, <argument><expr><literal type="number">6569239123849665999</literal></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_96</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>backupPg</name> <operator>=</operator> <call><name>infoPgData</name><argument_list>(<argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>backupInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>infoPgDataCurrentId</name><argument_list>(<argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>backupInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>checkStanzaInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>archivePg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backupPg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"backup info file and archive info file do not match\n"</literal>
            <literal type="string">"archive: id = 1, version = 9.6, system-id = 6569239123849665679\n"</literal>
            <literal type="string">"backup : id = 1, version = 9.6, system-id = 6569239123849665999\n"</literal>
            <literal type="string">"HINT: this may be a symptom of repository corruption!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"checkStanzaInfo() - corrupted backup file: system id and version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>backupInfo</name> <operator>=</operator> <call><name>infoBackupNew</name><argument_list>(<argument><expr><name>PG_VERSION_95</name></expr></argument>, <argument><expr><literal type="number">6569239123849665999</literal></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_95</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>backupPg</name> <operator>=</operator> <call><name>infoPgData</name><argument_list>(<argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>backupInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>infoPgDataCurrentId</name><argument_list>(<argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>backupInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>checkStanzaInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>archivePg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backupPg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"backup info file and archive info file do not match\n"</literal>
            <literal type="string">"archive: id = 1, version = 9.6, system-id = 6569239123849665679\n"</literal>
            <literal type="string">"backup : id = 1, version = 9.5, system-id = 6569239123849665999\n"</literal>
            <literal type="string">"HINT: this may be a symptom of repository corruption!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"checkStanzaInfo() - corrupted backup file: version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>backupInfo</name> <operator>=</operator> <call><name>infoBackupNew</name><argument_list>(<argument><expr><name>PG_VERSION_95</name></expr></argument>, <argument><expr><literal type="number">6569239123849665679</literal></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_95</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>backupPg</name> <operator>=</operator> <call><name>infoPgData</name><argument_list>(<argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>backupInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>infoPgDataCurrentId</name><argument_list>(<argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>backupInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>checkStanzaInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>archivePg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backupPg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"backup info file and archive info file do not match\n"</literal>
            <literal type="string">"archive: id = 1, version = 9.6, system-id = 6569239123849665679\n"</literal>
            <literal type="string">"backup : id = 1, version = 9.5, system-id = 6569239123849665679\n"</literal>
            <literal type="string">"HINT: this may be a symptom of repository corruption!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"checkStanzaInfo() - corrupted backup file: db id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>infoBackupPgSet</name><argument_list>(<argument><expr><name>backupInfo</name></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>, <argument><expr><literal type="number">6569239123849665679</literal></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_96</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>backupPg</name> <operator>=</operator> <call><name>infoPgData</name><argument_list>(<argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>backupInfo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>infoPgDataCurrentId</name><argument_list>(<argument><expr><call><name>infoBackupPg</name><argument_list>(<argument><expr><name>backupInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>checkStanzaInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>archivePg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>backupPg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"backup info file and archive info file do not match\n"</literal>
            <literal type="string">"archive: id = 1, version = 9.6, system-id = 6569239123849665679\n"</literal>
            <literal type="string">"backup : id = 2, version = 9.6, system-id = 6569239123849665679\n"</literal>
            <literal type="string">"HINT: this may be a symptom of repository corruption!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"checkStanzaInfoPg() - version mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_CIPHER_PASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaCreate</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create info files</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza create - encryption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'test1' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Version mismatch</comment>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>checkStanzaInfoPg</name><argument_list>(
                <argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><name>HRN_PG_SYSTEMID_94</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>FileInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"backup and archive info files exist but do not match the database\n"</literal>
            <literal type="string">"HINT: is this the correct stanza?\n"</literal>
            <literal type="string">"HINT: did an error occur during stanza-upgrade?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"checkStanzaInfoPg() - systemId mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// SystemId mismatch</comment>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>checkStanzaInfoPg</name><argument_list>(
                <argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>, <argument><expr><literal type="number">6569239123849665699</literal></expr></argument>, <argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>FileInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"backup and archive info files exist but do not match the database\n"</literal>
            <literal type="string">"HINT: is this the correct stanza?\n"</literal>
            <literal type="string">"HINT: did an error occur during stanza-upgrade?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
