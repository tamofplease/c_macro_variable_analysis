<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/command/stanzaTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Stanza Commands
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPostgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPq.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create storage objects for the testing location and for the harness directory for items such as logs, stop files, etc</comment>
    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageHrn</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>HRN_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STANZA</name></cpp:macro>                                             <cpp:value>"db"</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_STANZA_OTHER</name></cpp:macro>                                       <cpp:value>"otherstanza"</cpp:value></cpp:define>

    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argListBase</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><name>TEST_STANZA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cmdStanzaCreate(), checkStanzaInfo(), cmdStanzaDelete()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"stanza-create: repo option not valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Load Parameters</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepo</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>hrnCfgLoadP</name><argument_list>(<argument><expr><name>cfgCmdStanzaCreate</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>, <argument><expr><literal type="string">"option 'repo' not valid for command 'stanza-create'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"stanza-create: stop file error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaCreate</name></expr></argument>, <argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create the stop file, test, then remove the stop file</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>lockStopFileName</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>StopError</name></expr></argument>, <argument><expr><literal type="string">"stop file exists for stanza db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>lockStopFileName</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"stanza-create: validate info files created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaCreate</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza create - one repo, no files exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><literal type="string">"test.info"</literal></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.6\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">",\"db-version\":\"9.6\"}\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"put archive info to test file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><operator>(</operator><call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><macro><name>STRDEF</name><argument_list>(<argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.info"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
            <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"test and stanza archive info files are equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><literal type="string">"test.info"</literal></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-catalog-version=201608131\n"</literal>
            <literal type="string">"db-control-version=960\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.6\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-catalog-version\":201608131,\"db-control-version\":960,\"db-system-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">","</literal>
                <literal type="string">"\"db-version\":\"9.6\"}\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"put backup info to test file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><operator>(</operator><call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><macro><name>STRDEF</name><argument_list>(<argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.info"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
            <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"test and stanza backup info files are equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"cmdStanzaCreate success - multi-repo and encryption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"12345678"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"87654321"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaCreate</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza create - files already exist on repo1 and both are valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo1\n"</literal>
            <literal type="string">"P00   INFO: stanza 'db' already exists on repo1 and is valid\n"</literal>
            <literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo2\n"</literal>
            <literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo3\n"</literal>
            <literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>InfoArchive</name> <modifier>*</modifier></type><name>infoArchive</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>infoArchive</name></expr></argument>, <argument><expr><call><name>infoArchiveLoadFile</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>,
            <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"12345678"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"load archive info from encrypted repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR_NE</name><argument_list>(<argument><expr><call><name>infoArchiveCipherPass</name><argument_list>(<argument><expr><name>infoArchive</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"cipher sub set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>InfoBackup</name> <modifier>*</modifier></type><name>infoBackup</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>infoBackup</name></expr></argument>, <argument><expr><call><name>infoBackupLoadFile</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"12345678"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"load backup info from encrypted repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR_NE</name><argument_list>(<argument><expr><call><name>infoBackupCipherPass</name><argument_list>(<argument><expr><name>infoBackup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"cipher sub set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>strEq</name><argument_list>(<argument><expr><call><name>infoArchiveCipherPass</name><argument_list>(<argument><expr><name>infoArchive</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>infoBackupCipherPass</name><argument_list>(<argument><expr><name>infoBackup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>,
            <argument><expr><literal type="string">"cipher sub different for archive and backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Confirm non-encrypted repo created successfully</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>infoArchive</name></expr></argument>, <argument><expr><call><name>infoArchiveLoadFile</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"load archive info from repo3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>infoArchiveCipherPass</name><argument_list>(<argument><expr><name>infoArchive</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"archive cipher sub not set on non-encrypted repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>infoBackup</name></expr></argument>, <argument><expr><call><name>infoBackupLoadFile</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"load backup info from repo3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>infoBackupCipherPass</name><argument_list>(<argument><expr><name>infoBackup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"backup cipher sub not set on non-encrypted repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Confirm other repo encrypted with different password</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>infoArchive</name></expr></argument>, <argument><expr><call><name>infoArchiveLoadFile</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>,
            <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"87654321"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"load archive info from encrypted repo4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR_NE</name><argument_list>(<argument><expr><call><name>infoArchiveCipherPass</name><argument_list>(<argument><expr><name>infoArchive</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"cipher sub set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>infoBackup</name></expr></argument>, <argument><expr><call><name>infoBackupLoadFile</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"87654321"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"load backup info from encrypted repo4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR_NE</name><argument_list>(<argument><expr><call><name>infoBackupCipherPass</name><argument_list>(<argument><expr><name>infoBackup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"cipher sub set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"cmdStanzaCreate missing files - multi-repo and encryption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove backup.info on repo1</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove archive.info on repo2</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove info files on repo3</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove copy files repo4</comment>
        <macro><name>TEST_STORAGE_EXISTS</name><argument_list>(<argument>storageRepoIdxWrite(<literal type="number">3</literal>)</argument>, <argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>, <argument>.remove = true</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>TEST_STORAGE_EXISTS</name><argument_list>(<argument>storageRepoIdxWrite(<literal type="number">3</literal>)</argument>, <argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>, <argument>.remove = true</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza create - success with missing files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo1\n"</literal>
            <literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo2\n"</literal>
            <literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo3\n"</literal>
            <literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><macro><name>STRDEF</name><argument_list>(<argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"backup.info recreated repo1 from backup.info.copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><macro><name>STRDEF</name><argument_list>(<argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"archive.info repo2 recreated from archive.info.copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><operator>(</operator><call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><macro><name>STRDEF</name><argument_list>(<argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><macro><name>STRDEF</name><argument_list>(<argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
            <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"info files recreated repo3 from copy files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><operator>(</operator><call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><macro><name>STRDEF</name><argument_list>(<argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><macro><name>STRDEF</name><argument_list>(<argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
            <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"copy files recreated repo4 from info files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"cmdStanzaDelete - multi-repo and encryption, delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argListCmd</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argListCmd</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argListCmd</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argListCmd</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argListCmd</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListCmd</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><name>TEST_STANZA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListCmd</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>hrnCfgLoadP</name><argument_list>(<argument><expr><name>cfgCmdStanzaDelete</name></expr></argument>, <argument><expr><name>argListCmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionRequiredError</name></expr></argument>,
            <argument><expr><literal type="string">"stanza-delete command requires option: repo\n"</literal>
            <literal type="string">"HINT: this command requires a specific repository to operate on"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add the repo option</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argListDelete</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argListCmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListDelete</name></expr></argument>, <argument><expr><name>cfgOptRepo</name></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaDelete</name></expr></argument>, <argument><expr><name>argListDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdStanzaDelete</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
            <argument><expr><literal type="string">"stop file does not exist for stanza 'db'\n"</literal>
            <literal type="string">"HINT: has the pgbackrest stop command been run on this server for this stanza?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create the stop file</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>lockStopFileName</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo4"</literal></expr></argument>,
            <argument><expr><literal type="string">"archive/\n"</literal>
            <literal type="string">"archive/db/\n"</literal>
            <literal type="string">"archive/db/archive.info\n"</literal>
            <literal type="string">"archive/db/archive.info.copy\n"</literal>
            <literal type="string">"backup/\n"</literal>
            <literal type="string">"backup/db/\n"</literal>
            <literal type="string">"backup/db/backup.info\n"</literal>
            <literal type="string">"backup/db/backup.info.copy\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"stanza exists in repo4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaDelete</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza delete - repo4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo4"</literal></expr></argument>, <argument><expr><literal type="string">"archive/\nbackup/\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"stanza deleted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><call><name>lockStopFileName</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"confirm stop file removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove the cipher pass environment variable otherwise stanza-create will recreate the stanza</comment>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Stanza with directories only</comment>
        <expr_stmt><expr><name>argListDelete</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListDelete</name></expr></argument>, <argument><expr><name>cfgOptRepo</name></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaDelete</name></expr></argument>, <argument><expr><name>argListDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/9.6-1/1234567812345678"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create archive sub directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20190708-154306F"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create backup sub directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>lockStopFileName</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create stop file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaDelete</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza delete - repo3 - sub directories only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo3"</literal></expr></argument>, <argument><expr><literal type="string">"archive/\nbackup/\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"stanza deleted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"cmdStanzaCreate errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"12345678"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaCreate</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Backup files removed - archive.info and archive.info.copy exist repo2</comment>
        <macro><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument>storageRepoIdxWrite(<literal type="number">1</literal>)</argument>, <argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>, <argument>.remove = true</argument>,
            <argument>.comment = <literal type="string">"repo2: remove backup.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"repo2: remove backup.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
            <argument><expr><literal type="string">"archive.info exists but backup.info is missing on repo2\n"</literal>
            <literal type="string">"HINT: this may be a symptom of repository corruption!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo1\n"</literal>
            <literal type="string">"P00   INFO: stanza 'db' already exists on repo1 and is valid\n"</literal>
            <literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Archive files removed - backup.info and backup.info.copy exist repo1</comment>
        <macro><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument>storageRepoIdxWrite(<literal type="number">0</literal>)</argument>, <argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>, <argument>.remove = true</argument>,
            <argument>.comment = <literal type="string">"repo1: remove archive.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"repo1: remove archive.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
            <argument><expr><literal type="string">"backup.info exists but archive.info is missing on repo1\n"</literal>
            <literal type="string">"HINT: this may be a symptom of repository corruption!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Delete the last repo so only 1 remains</comment>
        <expr_stmt><expr><name>argListDelete</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListDelete</name></expr></argument>, <argument><expr><name>cfgOptRepo</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaDelete</name></expr></argument>, <argument><expr><name>argListDelete</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>lockStopFileName</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create stop file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaDelete</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza delete - only 1 remains"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove the cipher pass environment variable otherwise stanza-create will recreate the stanza</comment>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaCreate</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Archive files removed - backup.info exists</comment>
        <macro><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument>storageRepoIdxWrite(<literal type="number">0</literal>)</argument>, <argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>, <argument>.remove = true</argument>,
            <argument>.comment = <literal type="string">"repo1: remove backup.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
            <argument><expr><literal type="string">"backup.info exists but archive.info is missing on repo1\n"</literal>
            <literal type="string">"HINT: this may be a symptom of repository corruption!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Archive files removed - backup.info.copy exists, backup.info moved to backup.info.copy</comment>
        <macro><name>HRN_STORAGE_MOVE</name><argument_list>(<argument>storageRepoIdxWrite(<literal type="number">0</literal>)</argument>, <argument>INFO_BACKUP_PATH_FILE</argument>, <argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
            <argument><expr><literal type="string">"backup.info exists but archive.info is missing on repo1\n"</literal>
            <literal type="string">"HINT: this may be a symptom of repository corruption!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Backup files removed - archive.info file exists</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.6\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">",\"db-version\":\"9.6\"}\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"put archive info to file repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument>storageRepoIdxWrite(<literal type="number">0</literal>)</argument>, <argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>, <argument>.remove = true</argument>,
            <argument>.comment = <literal type="string">"repo1: remove backup.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
            <argument><expr><literal type="string">"archive.info exists but backup.info is missing on repo1\n"</literal>
            <literal type="string">"HINT: this may be a symptom of repository corruption!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Backup files removed - archive.info.copy file exists (renamed from archive.info)</comment>
        <macro><name>HRN_STORAGE_MOVE</name><argument_list>(<argument>storageRepoIdxWrite(<literal type="number">0</literal>)</argument>, <argument>INFO_ARCHIVE_PATH_FILE</argument>, <argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
            <argument><expr><literal type="string">"archive.info exists but backup.info is missing on repo1\n"</literal>
            <literal type="string">"HINT: this may be a symptom of repository corruption!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"checkStanzaInfo() - already checked in checkTest so just a sanity check here"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create a corrupted backup file - db id</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-catalog-version=201608131\n"</literal>
            <literal type="string">"db-control-version=960\n"</literal>
            <literal type="string">"db-id=2\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.6\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"2={\"db-catalog-version\":201608131,\"db-control-version\":960,\"db-system-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">","</literal>
                <literal type="string">"\"db-version\":\"9.6\"}\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"put backup info to file - bad db-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FileInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"backup info file and archive info file do not match\n"</literal>
            <literal type="string">"archive: id = 1, version = 9.6, system-id = "</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"backup : id = 2, version = 9.6, system-id = "</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"HINT: this may be a symptom of repository corruption!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"archive.info file and backup.info files that match but do not match the current database version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Copy files may or may not exist - remove</comment>
        <macro><name>HRN_STORAGE_REMOVE</name><argument_list>(
            <argument>storageRepoIdxWrite(<literal type="number">0</literal>)</argument>, <argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>, <argument>.comment = <literal type="string">"repo1: remove archive.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>HRN_STORAGE_REMOVE</name><argument_list>(
            <argument>storageRepoIdxWrite(<literal type="number">0</literal>)</argument>, <argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>, <argument>.comment = <literal type="string">"repo1: remove backup.info.copy"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-catalog-version=201510051\n"</literal>
            <literal type="string">"db-control-version=942\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.5\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-catalog-version\":201510051,\"db-control-version\":942,\"db-system-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">","</literal>
                <literal type="string">"\"db-version\":\"9.5\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.5\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">",\"db-version\":\"9.5\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FileInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"backup and archive info files exist but do not match the database\n"</literal>
            <literal type="string">"HINT: is this the correct stanza?\n"</literal>
            <literal type="string">"HINT: did an error occur during stanza-upgrade?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"archive.info and backup.info files that match but do not match the current database system-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id=6569239123849665999\n"</literal>
            <literal type="string">"db-version=\"9.6\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":6569239123849665999,\"db-version\":\"9.6\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-catalog-version=201608131\n"</literal>
            <literal type="string">"db-control-version=960\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id=6569239123849665999\n"</literal>
            <literal type="string">"db-version=\"9.6\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-catalog-version\":201608131,\"db-control-version\":960,\"db-system-id\":6569239123849665999,"</literal>
                <literal type="string">"\"db-version\":\"9.6\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FileInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"backup and archive info files exist but do not match the database\n"</literal>
            <literal type="string">"HINT: is this the correct stanza?\n"</literal>
            <literal type="string">"HINT: did an error occur during stanza-upgrade?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove the info files and add sub directory to backup</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/backup.history"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create directory in backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PathNotEmptyError</name></expr></argument>, <argument><expr><literal type="string">"backup directory not empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// File in archive, directory in backup</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/somefile"</literal></expr></argument>, <argument><expr><literal type="string">"some content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PathNotEmptyError</name></expr></argument>, <argument><expr><literal type="string">"backup directory and/or archive directory not empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// File in archive, backup empty</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/backup.history"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"remove backup subdir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PathNotEmptyError</name></expr></argument>, <argument><expr><literal type="string">"archive directory not empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"repeat last test using --force (deprecated)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptForce</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaCreate</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PathNotEmptyError</name></expr></argument>, <argument><expr><literal type="string">"archive directory not empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: option --force is no longer supported\n"</literal>
            <literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"pgValidate(), online=y"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Load Parameters</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><name>TEST_STANZA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaCreate</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pgControl and database match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_92</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg"</literal>, false, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza create - db online"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>,
            <argument><expr><literal type="string">"archive/\n"</literal>
            <literal type="string">"archive/db/\n"</literal>
            <literal type="string">"archive/db/archive.info\n"</literal>
            <literal type="string">"archive/db/archive.info.copy\n"</literal>
            <literal type="string">"backup/\n"</literal>
            <literal type="string">"backup/db/\n"</literal>
            <literal type="string">"backup/db/backup.info\n"</literal>
            <literal type="string">"backup/db/backup.info.copy\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"stanza created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaUpgrade</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg"</literal>, false, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaUpgrade</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza upgrade - db online"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: stanza-upgrade for stanza 'db' on repo1\n"</literal>
            <literal type="string">"P00   INFO: stanza 'db' on repo1 is already up to date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pg_control and version mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control with different version</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_91</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg"</literal>, false, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>pgValidate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DbMismatchError</name></expr></argument>,
            <argument><expr><literal type="string">"version '"</literal> <name>PG_VERSION_92_STR</name> <literal type="string">"' and path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' queried from cluster do not match version '"</literal>
            <name>PG_VERSION_91_STR</name> <literal type="string">"' and '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' read from '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/"</literal> <name>PG_PATH_GLOBAL</name> <literal type="string">"/"</literal> <name>PG_FILE_PGCONTROL</name> <literal type="string">"'\n"</literal>
            <literal type="string">"HINT: the pg1-path and pg1-port settings likely reference different clusters."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pg_control and path mismatch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_92</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg2"</literal>, false, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>pgValidate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>DbMismatchError</name></expr></argument>,
            <argument><expr><literal type="string">"version '"</literal> <name>PG_VERSION_92_STR</name> <literal type="string">"' and path '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg2' queried from cluster do not match version '"</literal>
                <name>PG_VERSION_92_STR</name> <literal type="string">"' and '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg' read from '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/"</literal> <name>PG_PATH_GLOBAL</name> <literal type="string">"/"</literal> <name>PG_FILE_PGCONTROL</name>
            <literal type="string">"'\nHINT: the pg1-path and pg1-port settings likely reference different clusters."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"primary at pg2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><name>TEST_STANZA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"5434"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaCreate</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control for primary</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_92</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control for standby</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_94</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg"</literal>, true, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_OPEN_GE_92(<literal type="number">2</literal>, <literal type="string">"dbname='postgres' port=5434"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg1"</literal>, false, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <decl_stmt><decl><type><name>PgControl</name></type> <name>pgControl</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>pgControl</name></expr></argument>, <argument><expr><call><name>pgValidate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"validate primary on pg2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>pgControl</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>PG_VERSION_92</name></expr></argument>, <argument><expr><literal type="string">"version set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>pgControl</name><operator>.</operator><name>systemId</name></name></expr></argument>, <argument><expr><name>HRN_PG_SYSTEMID_92</name></expr></argument>, <argument><expr><literal type="string">"systemId set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>pgControl</name><operator>.</operator><name>catalogVersion</name></name></expr></argument>, <argument><expr><literal type="number">201204301</literal></expr></argument>, <argument><expr><literal type="string">"catalogVersion set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cmdStanzaUpgrade()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"stanza-upgrade - config errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Load Parameters</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepo</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>hrnCfgLoadP</name><argument_list>(<argument><expr><name>cfgCmdStanzaUpgrade</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'repo' not valid for command 'stanza-upgrade'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaUpgrade</name></expr></argument>, <argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create the stop file, test and remove</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>lockStopFileName</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdStanzaUpgrade</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>StopError</name></expr></argument>, <argument><expr><literal type="string">"stop file exists for stanza db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>lockStopFileName</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <comment type="line">// Create pg_control for the rest of the tests</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"stanza-upgrade - info file mismatch: db-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Stanza with only archive.info and backup.info but no .copy files</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-catalog-version=201608131\n"</literal>
            <literal type="string">"db-control-version=960\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.6\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-catalog-version\":201608131,\"db-control-version\":960,\"db-system-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">","</literal>
                <literal type="string">"\"db-version\":\"9.6\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// backup info up to date but archive info db-id mismatch</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=2\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.6\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"2={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">",\"db-version\":\"9.6\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdStanzaUpgrade</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FileInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"backup info file and archive info file do not match\n"</literal>
            <literal type="string">"archive: id = 2, version = 9.6, system-id = "</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"backup : id = 1, version = 9.6, system-id = "</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"HINT: this may be a symptom of repository corruption!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-upgrade for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"stanza-upgrade - info file mismatch: archive version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// backup info up to date but archive info version is not</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-catalog-version=201608131\n"</literal>
            <literal type="string">"db-control-version=960\n"</literal>
            <literal type="string">"db-id=2\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.6\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-catalog-version\":201510051,\"db-control-version\":942,\"db-system-id\":6569239123849665999,"</literal>
                <literal type="string">"\"db-version\":\"9.5\"}\n"</literal>
            <literal type="string">"2={\"db-catalog-version\":201608131,\"db-control-version\":960,\"db-system-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">","</literal>
                <literal type="string">"\"db-version\":\"9.6\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.5\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">",\"db-version\":\"9.5\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaUpgrade</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza upgrade - archive.info file upgraded - version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-upgrade for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><literal type="string">"test.info"</literal></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=2\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.6\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">",\"db-version\":\"9.5\"}\n"</literal>
            <literal type="string">"2={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">",\"db-version\":\"9.6\"}\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"put archive info to test file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><operator>(</operator><call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><macro><name>STRDEF</name><argument_list>(<argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.info"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
            <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"test and stanza archive info files are equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"stanza-upgrade - info file mismatch: backup version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// archive info up to date but backup info version is not</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-catalog-version=201608131\n"</literal>
            <literal type="string">"db-control-version=960\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.5\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-catalog-version\":201510051,\"db-control-version\":942,\"db-system-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">","</literal>
                <literal type="string">"\"db-version\":\"9.5\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaUpgrade</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza upgrade - backup.info file upgraded - version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-upgrade for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><literal type="string">"test.info"</literal></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-catalog-version=201608131\n"</literal>
            <literal type="string">"db-control-version=960\n"</literal>
            <literal type="string">"db-id=2\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.6\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-catalog-version\":201510051,\"db-control-version\":942,\"db-system-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">","</literal>
                <literal type="string">"\"db-version\":\"9.5\"}\n"</literal>
            <literal type="string">"2={\"db-catalog-version\":201608131,\"db-control-version\":960,\"db-system-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">","</literal>
                <literal type="string">"\"db-version\":\"9.6\"}\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"put backup info to test file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><operator>(</operator><call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><macro><name>STRDEF</name><argument_list>(<argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.info"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
            <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"test and stanza backup info files are equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"stanza-upgrade - info file mismatch: archive system-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// backup info up to date but archive info system-id is not</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-catalog-version=201608131\n"</literal>
            <literal type="string">"db-control-version=960\n"</literal>
            <literal type="string">"db-id=2\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.6\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-catalog-version\":201510051,\"db-control-version\":942,\"db-system-id\":6569239123849665999,"</literal>
                <literal type="string">"\"db-version\":\"9.5\"}\n"</literal>
            <literal type="string">"2={\"db-catalog-version\":201608131,\"db-control-version\":960,\"db-system-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">","</literal>
                <literal type="string">"\"db-version\":\"9.6\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id=6569239123849665999\n"</literal>
            <literal type="string">"db-version=\"9.6\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":6569239123849665999,\"db-version\":\"9.6\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaUpgrade</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza upgrade - archive.info file upgraded - system-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-upgrade for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><literal type="string">"test.info"</literal></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=2\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.6\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":6569239123849665999,\"db-version\":\"9.6\"}\n"</literal>
            <literal type="string">"2={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">",\"db-version\":\"9.6\"}\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"put archive info to test file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><operator>(</operator><call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><macro><name>STRDEF</name><argument_list>(<argument>INFO_ARCHIVE_PATH_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.info"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
            <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"test and stanza archive info files are equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"stanza-upgrade - info file mismatch: backup system-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// archive info up to date but backup info system-id is not</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-catalog-version=201608131\n"</literal>
            <literal type="string">"db-control-version=960\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"db-system-id=6569239123849665999\n"</literal>
            <literal type="string">"db-version=\"9.6\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-catalog-version\":201608131,\"db-control-version\":960,\"db-system-id\":6569239123849665999,"</literal>
                <literal type="string">"\"db-version\":\"9.6\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaUpgrade</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza upgrade - backup.info file upgraded - system-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-upgrade for stanza 'db' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><literal type="string">"test.info"</literal></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-catalog-version=201608131\n"</literal>
            <literal type="string">"db-control-version=960\n"</literal>
            <literal type="string">"db-id=2\n"</literal>
            <literal type="string">"db-system-id="</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"db-version=\"9.6\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-catalog-version\":201608131,\"db-control-version\":960,\"db-system-id\":6569239123849665999,"</literal>
                <literal type="string">"\"db-version\":\"9.6\"}\n"</literal>
            <literal type="string">"2={\"db-catalog-version\":201608131,\"db-control-version\":960,\"db-system-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">","</literal>
                <literal type="string">"\"db-version\":\"9.6\"}\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"put backup info to test file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><operator>(</operator><call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><macro><name>STRDEF</name><argument_list>(<argument>INFO_BACKUP_PATH_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>bufEq</name><argument_list>(
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.info"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,
            <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"test and stanza backup info files are equal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cmdStanzaDelete(), stanzaDelete()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Load Parameters</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argListCmd</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argListCmd</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Load Parameters</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argListCmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><name>TEST_STANZA_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/"</literal> <name>TEST_STANZA_OTHER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaCreate</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control for stanza-create</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create a stanza that will not be deleted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'otherstanza' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><name>TEST_STANZA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaDelete</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"stanza-delete - stanza already deleted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaDelete</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza delete - success on stanza does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"stanza-delete - only archive exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Confirm stanza does not exist</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo/archive"</literal></expr></argument>, <argument><expr><literal type="string">"otherstanza/\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>noRecurse</name><operator>=</operator><name>true</name></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"stanza '"</literal> <name>TEST_STANZA</name> <literal type="string">"' archive does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo/backup"</literal></expr></argument>, <argument><expr><literal type="string">"otherstanza/\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>noRecurse</name><operator>=</operator><name>true</name></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"stanza '"</literal> <name>TEST_STANZA</name> <literal type="string">"' backup does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create stanza archive only</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create empty archive info for stanza '"</literal> <name>TEST_STANZA</name> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>lockStopFileName</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create stop file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo/archive"</literal></expr></argument>,
            <argument><expr><literal type="string">"db/\n"</literal>
            <literal type="string">"otherstanza/\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>noRecurse</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"stanza archive exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaDelete</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza delete - archive only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo/archive"</literal></expr></argument>, <argument><expr><literal type="string">"otherstanza/\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>noRecurse</name><operator>=</operator><name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"stanza '"</literal> <name>TEST_STANZA</name> <literal type="string">"' deleted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"stanza-delete - only backup exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create stanza backup only</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create empty backup info for stanza '"</literal> <name>TEST_STANZA</name> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>lockStopFileName</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create stop file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo/backup"</literal></expr></argument>,
            <argument><expr><literal type="string">"db/\n"</literal>
            <literal type="string">"otherstanza/\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>noRecurse</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"stanza backup exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaDelete</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza delete - backup only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo/backup"</literal></expr></argument>, <argument><expr><literal type="string">"otherstanza/\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>noRecurse</name><operator>=</operator><name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"stanza '"</literal> <name>TEST_STANZA</name> <literal type="string">"' deleted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"stanza-delete - empty directories"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaDelete</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove stanza '"</literal> <name>TEST_STANZA</name> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create only stanza paths</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo/archive/"</literal> <name>TEST_STANZA</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create empty stanza archive path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo/backup/"</literal> <name>TEST_STANZA</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create empty stanza backup path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaDelete</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza delete - empty directories"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo/archive"</literal></expr></argument>, <argument><expr><literal type="string">"otherstanza/\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>noRecurse</name><operator>=</operator><name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"stanza '"</literal> <name>TEST_STANZA</name> <literal type="string">"' deleted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"delete errors when pg appears to be running"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create empty backup info for stanza '"</literal> <name>TEST_STANZA</name> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><name>storageHrn</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>lockStopFileName</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create stop file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_POSTMTRPID</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create "</literal> <name>PG_FILE_POSTMTRPID</name> <literal type="string">" file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdStanzaDelete</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PgRunningError</name></expr></argument>, <argument><expr><name>PG_FILE_POSTMTRPID</name> <literal type="string">" exists - looks like "</literal> <name>PG_NAME</name> <literal type="string">" is running. "</literal>
            <literal type="string">"To delete stanza 'db' on repo1, shut down "</literal> <name>PG_NAME</name> <literal type="string">" for stanza 'db' and try again, or use --force."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Specify repo option</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argListDel</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argListDel</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListDel</name></expr></argument>, <argument><expr><name>cfgOptRepo</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaDelete</name></expr></argument>, <argument><expr><name>argListDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_BACKUP_PATH_FILE</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create empty backup info repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdStanzaDelete</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PgRunningError</name></expr></argument>, <argument><expr><name>PG_FILE_POSTMTRPID</name> <literal type="string">" exists - looks like "</literal> <name>PG_NAME</name> <literal type="string">" is running. "</literal>
            <literal type="string">"To delete stanza 'db' on repo2, shut down "</literal> <name>PG_NAME</name> <literal type="string">" for stanza 'db' and try again, or use --force."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"force delete when pg appears to be running, multi-repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><name>TEST_STANZA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepo</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptForce</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaDelete</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdStanzaDelete</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stanza '"</literal> <name>TEST_STANZA</name> <literal type="string">"' delete --force"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storagePathExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"repo/backup/"</literal> <name>TEST_STANZA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"repo1: stanza deleted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storagePathExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"repo2/backup/"</literal> <name>TEST_STANZA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"repo2: stanza not deleted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"ensure other stanza never deleted from repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>,
            <argument><expr><literal type="string">"archive/\n"</literal>
            <literal type="string">"archive/otherstanza/\n"</literal>
            <literal type="string">"archive/otherstanza/archive.info\n"</literal>
            <literal type="string">"archive/otherstanza/archive.info.copy\n"</literal>
            <literal type="string">"backup/\n"</literal>
            <literal type="string">"backup/otherstanza/\n"</literal>
            <literal type="string">"backup/otherstanza/backup.info\n"</literal>
            <literal type="string">"backup/otherstanza/backup.info.copy\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"otherstanza exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
