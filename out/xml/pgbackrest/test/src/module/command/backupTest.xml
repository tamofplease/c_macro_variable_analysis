<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/command/backupTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Backup Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/stanza/create.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/stanza/upgrade.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/interface/static.vendor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessBackup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPostgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPq.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessProtocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessStorage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Get a list of all files in the backup and a redacted version of the manifest that can be tested against a static string
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>testBackupValidateList</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><name>Manifest</name> <modifier>*</modifier><specifier>const</specifier></type> <name>manifest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ManifestData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>manifestData</name></decl></parameter>,
    <parameter><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Output root path if it is a link so we can verify the destination</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>StorageInfo</name></type> <name>dotInfo</name> <init>= <expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>dotInfo</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>storageTypeLink</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">". {link, d=%s}\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>dotInfo</name><operator>.</operator><name>linkDestination</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Output path contents</comment>
    <decl_stmt><decl><type><name>StorageIterator</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageItr</name> <init>= <expr><call><name>storageNewItrP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>sortOrder</name> <operator>=</operator> <name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name>storageItrMore</name><argument_list>(<argument><expr><name>storageItr</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>StorageInfo</name></type> <name>info</name> <init>= <expr><call><name>storageItrNext</name><argument_list>(<argument><expr><name>storageItr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Don't include backup.manifest or copy. We'll test that they are present elsewhere</comment>
        <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>storageTypeFile</name> <operator>&amp;&amp;</operator>
            <operator>(</operator><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>BACKUP_MANIFEST_FILE</name></expr></argument>)</argument_list></call> <operator>||</operator> <macro><name>strEqZ</name><argument_list>(<argument>info.name</argument>, <argument>BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>)</argument_list></macro><operator>)</operator></expr>)</condition>
        <block>{<block_content>
            <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <switch>switch <condition>(<expr><name><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>storageTypeFile</name></expr>:</case>
            <block>{<block_content>
                <comment type="line">// Test mode, user, group. These values are not in the manifest but we know what they should be based on the default</comment>
                <comment type="line">// mode and current user/group.</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>mode</name></name> <operator>!=</operator> <literal type="number">0640</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"'%s' mode is not 0640"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>TEST_USER_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"'%s' user should be '"</literal> <name>TEST_USER</name> <literal type="string">"'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><name>TEST_GROUP_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"'%s' group should be '"</literal> <name>TEST_GROUP</name> <literal type="string">"'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Build file list (needed because bundles can contain multiple files)</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <decl_stmt><decl><type><name>List</name> <modifier>*</modifier><specifier>const</specifier></type> <name>fileList</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ManifestFilePack</name> <operator>*</operator><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name>bundle</name> <init>= <expr><call><name>strBeginsWithZ</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"bundle/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>bundle</name></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>bundleId</name> <init>= <expr><call><name>cvtZToUInt64</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"bundle"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>fileIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fileIdx</name> <operator>&lt;</operator> <call><name>manifestFileTotal</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>fileIdx</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>ManifestFilePack</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>filePack</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fileList</name></name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>ManifestFile</name></type> <name>file</name> <init>= <expr><call><name>manifestFileUnpack</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>*</operator><name>filePack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <comment type="line">// File bundle is part of this backup</comment>
                        <if_stmt><if>if <condition>(<expr><name><name>file</name><operator>.</operator><name>bundleId</name></name> <operator>==</operator> <name>bundleId</name> <operator>&amp;&amp;</operator> <name><name>file</name><operator>.</operator><name>reference</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filePack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>manifestName</name> <init>= <expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name><name>manifestData</name><operator>-&gt;</operator><name>backupOptionCompressType</name></name> <operator>!=</operator> <name>compressTypeNone</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>manifestName</name> <operator>=</operator> <call><name>strSubN</name><argument_list>(
                            <argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strSize</name><argument_list>(<argument><expr><call><name>compressExtStr</name><argument_list>(<argument><expr><name><name>manifestData</name><operator>-&gt;</operator><name>backupOptionCompressType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <decl_stmt><decl><type><name>ManifestFilePack</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>filePack</name> <init>= <expr><call><name>manifestFilePackFindInternal</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>manifestName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filePack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <comment type="line">// Check files</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>fileIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fileIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>fileIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>ManifestFilePack</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>filePack</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ManifestFilePack</name> <operator>*</operator><operator>*</operator><operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ManifestFile</name></type> <name>file</name> <init>= <expr><call><name>manifestFileUnpack</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>*</operator><name>filePack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>bundle</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%s/%s {file"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%s {file"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <comment type="line">// Calculate checksum/size and decompress if needed</comment>
                    <comment type="line">// -------------------------------------------------------------------------------------------------------------</comment>
                    <decl_stmt><decl><type><name>StorageRead</name> <modifier>*</modifier></type><name>read</name> <init>= <expr><call><name>storageNewReadP</name><argument_list>(
                        <argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>file</name><operator>.</operator><name>bundleOffset</name></name></expr></argument>,
                        <argument><expr><operator>.</operator><name>limit</name> <operator>=</operator> <call><name>VARUINT64</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>sizeRepo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name><name>manifestData</name><operator>-&gt;</operator><name>backupOptionCompressType</name></name> <operator>!=</operator> <name>compressTypeNone</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(
                            <argument><expr><call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>decompressFilter</name><argument_list>(<argument><expr><name><name>manifestData</name><operator>-&gt;</operator><name>backupOptionCompressType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cryptoHashNew</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><call><name>bufUsed</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>checksum</name> <init>= <expr><call><name>bufHex</name><argument_list>(
                        <argument><expr><call><name>pckReadBinP</name><argument_list>(<argument><expr><call><name>ioFilterGroupResultP</name><argument_list>(<argument><expr><call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CRYPTO_HASH_FILTER_TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">", s=%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEqZ</name><argument_list>(<argument><expr><name>checksum</name></expr></argument>, <argument><expr><name><name>file</name><operator>.</operator><name>checksumSha1</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"'%s' checksum does match manifest"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <comment type="line">// Test size and repo-size. If compressed then set the repo-size to size so it will not be in test output. Even</comment>
                    <comment type="line">// the same compression algorithm can give slightly different results based on the version so repo-size is not</comment>
                    <comment type="line">// deterministic for compression.</comment>
                    <comment type="line">// -------------------------------------------------------------------------------------------------------------</comment>
                    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name><name>file</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"'%s' size does match manifest"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <comment type="line">// Repo size can only be compared to file size when not bundled</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bundle</name></expr>)</condition>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <name><name>file</name><operator>.</operator><name>sizeRepo</name></name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"'%s' repo size does match manifest"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name><name>manifestData</name><operator>-&gt;</operator><name>backupOptionCompressType</name></name> <operator>!=</operator> <name>compressTypeNone</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name><name>file</name><operator>.</operator><name>sizeRepo</name></name> <operator>=</operator> <name><name>file</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <comment type="line">// Bundle id/offset are too noisy so remove them. They are checked size/checksum and listed with the files.</comment>
                    <comment type="line">// -------------------------------------------------------------------------------------------------------------</comment>
                    <expr_stmt><expr><name><name>file</name><operator>.</operator><name>bundleId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>file</name><operator>.</operator><name>bundleOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

                    <comment type="line">// pg_control and WAL headers have different checksums depending on cpu architecture so remove the checksum from</comment>
                    <comment type="line">// the test output.</comment>
                    <comment type="line">// -------------------------------------------------------------------------------------------------------------</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>MANIFEST_TARGET_PGDATA</name> <literal type="string">"/"</literal> <name>PG_PATH_GLOBAL</name> <literal type="string">"/"</literal> <name>PG_FILE_PGCONTROL</name></expr></argument>)</argument_list></call> <operator>||</operator>
                        <call><name>strBeginsWith</name><argument_list>(
                            <argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>MANIFEST_TARGET_PGDATA</name> <literal type="string">"/%s/"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>pgWalPath</name><argument_list>(<argument><expr><name><name>manifestData</name><operator>-&gt;</operator><name>pgVersion</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>file</name><operator>.</operator><name>checksumSha1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Update changes to manifest file</comment>
                    <expr_stmt><expr><call><name>manifestFilePackUpdate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>filePack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>

                <break>break;</break>
            </block_content>}</block>

            <case>case <expr><name>storageTypeLink</name></expr>:</case>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%s {link, d=%s}\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>linkDestination</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>storageTypePath</name></expr>:</case>
            <block>{<block_content>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%s {path"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Check against the manifest</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bundle"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>manifestPathFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Test mode, user, group. These values are not in the manifest but we know what they should be based on the default</comment>
                <comment type="line">// mode and current user/group.</comment>
                <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>mode</name></name> <operator>!=</operator> <literal type="number">0750</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"'%s' mode is not 00750"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>TEST_USER_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"'%s' user should be '"</literal> <name>TEST_USER</name> <literal type="string">"'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><name>TEST_GROUP_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"'%s' group should be '"</literal> <name>TEST_GROUP</name> <literal type="string">"'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>

            <case>case <expr><name>storageTypeSpecial</name></expr>:</case>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unexpected special file '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></while>

    <comment type="line">// Check all files in manifest. Since the scan above maps from files to the manifest, any referenced files will not be checked.</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>fileIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fileIdx</name> <operator>&lt;</operator> <call><name>manifestFileTotal</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>fileIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ManifestFilePack</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>filePack</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>fileList</name></name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ManifestFile</name></type> <name>file</name> <init>= <expr><call><name>manifestFileUnpack</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><operator>*</operator><name>filePack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If compressed then set the repo-size to size so it will not be in test output. Even the same compression algorithm can</comment>
        <comment type="line">// give slightly different results based on the version so repo-size is not deterministic for compression.</comment>
        <if_stmt><if>if <condition>(<expr><name><name>manifestData</name><operator>-&gt;</operator><name>backupOptionCompressType</name></name> <operator>!=</operator> <name>compressTypeNone</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>file</name><operator>.</operator><name>sizeRepo</name></name> <operator>=</operator> <name><name>file</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Bundle id/offset are too noisy so remove them. They are verified against size/checksum and listed with the files.</comment>
        <expr_stmt><expr><name><name>file</name><operator>.</operator><name>bundleId</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>file</name><operator>.</operator><name>bundleOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <comment type="line">// Update changes to manifest file</comment>
        <expr_stmt><expr><call><name>manifestFilePackUpdate</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>filePack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>testBackupValidate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STORAGE</name></expr></argument>, <argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>storage</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Build a list of files in the backup path and verify against the manifest</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name> <init>= <expr><call><name>manifestLoadFile</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>testBackupValidateList</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>manifestData</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure both backup.manifest files exist since we skipped them in the callback above</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>BACKUP_MANIFEST_FILE</name> <literal type="string">" is missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><macro><name>strNewFmt</name><argument_list>(<argument><literal type="string">"%s/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>, <argument>strZ(path)</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <macro><name>THROW</name><argument_list>(<argument>AssertError</argument>, <argument>BACKUP_MANIFEST_FILE INFO_COPY_EXT <literal type="string">" is missing"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Output the manifest to a string and exclude sections that don't need validation. Note that each of these sections should</comment>
        <comment type="line">// be considered from automatic validation but adding them to the output will make the tests too noisy. One good technique</comment>
        <comment type="line">// would be to remove it from the output only after validation so new values will cause changes in the output.</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>manifestSaveBuffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>manifestSave</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>manifestSaveBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>manifestEdit</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>manifestLine</name> <init>= <expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>manifestSaveBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>bSkipSection</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>lineIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lineIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>manifestLine</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>lineIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>manifestLine</name></expr></argument>, <argument><expr><name>lineIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>strChr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="char">'['</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><call><name>strSubN</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>INFO_SECTION_BACKREST</name></expr></argument>)</argument_list></call> <operator>||</operator>
                    <call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP</name></expr></argument>)</argument_list></call> <operator>||</operator>
                    <call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_DB</name></expr></argument>)</argument_list></call> <operator>||</operator>
                    <call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_BACKUP_OPTION</name></expr></argument>)</argument_list></call> <operator>||</operator>
                    <call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_DB</name></expr></argument>)</argument_list></call> <operator>||</operator>
                    <call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_FILE_DEFAULT</name></expr></argument>)</argument_list></call> <operator>||</operator>
                    <call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_LINK_DEFAULT</name></expr></argument>)</argument_list></call> <operator>||</operator>
                    <call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>MANIFEST_SECTION_TARGET_PATH_DEFAULT</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>bSkipSection</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>bSkipSection</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bSkipSection</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>manifestEdit</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"--------\n%s\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strTrim</name><argument_list>(<argument><expr><name>manifestEdit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Generate pq scripts for versions of PostgreSQL
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>TestBackupPqScriptParam</name>
<block>{
    <expr_stmt><expr><name>VAR_PARAM_HEADER</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>startFast</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>backupStandby</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>errorAfterStart</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>noWal</name></decl>;</decl_stmt>                                                     <comment type="line">// Don't write test WAL segments</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>noPriorWal</name></decl>;</decl_stmt>                                                <comment type="line">// Don't write prior test WAL segments</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>noArchiveCheck</name></decl>;</decl_stmt>                                            <comment type="line">// Do not check archive</comment>
    <decl_stmt><decl><type><name>CompressType</name></type> <name>walCompressType</name></decl>;</decl_stmt>                                   <comment type="line">// Compress type for the archive files</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>walTotal</name></decl>;</decl_stmt>                                          <comment type="line">// Total WAL to write</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>timeline</name></decl>;</decl_stmt>                                          <comment type="line">// Timeline to use for WAL files</comment>
}</block></struct></type> <name>TestBackupPqScriptParam</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testBackupPqScriptP</name><parameter_list>(<parameter><type><name>pgVersion</name></type></parameter>, <parameter><type><name>backupStartTime</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                                                       \
    <cpp:value>testBackupPqScript(pgVersion, backupStartTime, (TestBackupPqScriptParam){VAR_PARAM_INIT, __VA_ARGS__})</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>testBackupPqScript</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pgVersion</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>backupTimeStart</name></decl></parameter>, <parameter><decl><type><name>TestBackupPqScriptParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pg1Path</name> <init>= <expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pg2Path</name> <init>= <expr><name>TEST_PATH</name> <literal type="string">"/pg2"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// If no timeline specified then use timeline 1</comment>
    <expr_stmt><expr><name><name>param</name><operator>.</operator><name>timeline</name></name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><operator>.</operator><name>timeline</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>param</name><operator>.</operator><name>timeline</name></name></expr></else></ternary></expr>;</expr_stmt>

    <comment type="line">// Read pg_control to get info about the cluster</comment>
    <decl_stmt><decl><type><name>PgControl</name></type> <name>pgControl</name> <init>= <expr><call><name>pgControlFromFile</name><argument_list>(<argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Set archive timeout really small to save time on errors</comment>
    <expr_stmt><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptArchiveTimeout</name></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><call><name>varNewInt64</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set LSN and WAL start/stop</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>lsnStart</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>backupTimeStart</name> <operator>&amp;</operator> <literal type="number">0xFFFFFF00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>lsnStop</name> <init>=
        <expr><name>lsnStart</name> <operator>+</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name><name>param</name><operator>.</operator><name>walTotal</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>param</name><operator>.</operator><name>walTotal</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <name><name>pgControl</name><operator>.</operator><name>walSegmentSize</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>pgControl</name><operator>.</operator><name>walSegmentSize</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>walSegmentPrior</name> <init>= <expr><call><name>strZ</name><argument_list>(
        <argument><expr><call><name>pgLsnToWalSegment</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>timeline</name></name></expr></argument>, <argument><expr><name>lsnStart</name> <operator>-</operator> <name><name>pgControl</name><operator>.</operator><name>walSegmentSize</name></name></expr></argument>, <argument><expr><name><name>pgControl</name><operator>.</operator><name>walSegmentSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lsnStartStr</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>pgLsnToStr</name><argument_list>(<argument><expr><name>lsnStart</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>walSegmentStart</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>pgLsnToWalSegment</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>timeline</name></name></expr></argument>, <argument><expr><name>lsnStart</name></expr></argument>, <argument><expr><name><name>pgControl</name><operator>.</operator><name>walSegmentSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lsnStopStr</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>pgLsnToStr</name><argument_list>(<argument><expr><name>lsnStop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>walSegmentStop</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>pgLsnToWalSegment</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>timeline</name></name></expr></argument>, <argument><expr><name>lsnStop</name></expr></argument>, <argument><expr><name><name>pgControl</name><operator>.</operator><name>walSegmentSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Save pg_control with updated info</comment>
    <expr_stmt><expr><name><name>pgControl</name><operator>.</operator><name>checkpoint</name></name> <operator>=</operator> <name>lsnStart</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pgControl</name><operator>.</operator><name>timeline</name></name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>timeline</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
        <argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_PATH_GLOBAL</name> <literal type="string">"/"</literal> <name>PG_FILE_PGCONTROL</name></expr></argument>, <argument><expr><call><name>hrnPgControlToBuffer</name><argument_list>(<argument><expr><name>pgControl</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Update pg_control on primary with the backup time</comment>
    <expr_stmt><expr><call><name>HRN_PG_CONTROL_TIME</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Write WAL segments to the archive</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>param</name><operator>.</operator><name>noPriorWal</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>InfoArchive</name> <modifier>*</modifier></type><name>infoArchive</name> <init>= <expr><call><name>infoArchiveLoadFile</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>archiveId</name> <init>= <expr><call><name>infoArchiveId</name><argument_list>(<argument><expr><name>infoArchive</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>walSegmentList</name> <init>= <expr><call><name>pgLsnRangeToWalSegmentList</name><argument_list>(
            <argument><expr><name><name>pgControl</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>timeline</name></name></expr></argument>, <argument><expr><name>lsnStart</name> <operator>-</operator> <name><name>pgControl</name><operator>.</operator><name>walSegmentSize</name></name></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>noWal</name></name></expr> ?</condition><then> <expr><name>lsnStart</name> <operator>-</operator> <name><name>pgControl</name><operator>.</operator><name>walSegmentSize</name></name></expr> </then><else>: <expr><name>lsnStop</name></expr></else></ternary></expr></argument>,
            <argument><expr><name><name>pgControl</name><operator>.</operator><name>walSegmentSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>walBuffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pgControl</name><operator>.</operator><name>walSegmentSize</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(<argument>(PgWal){.version = pgControl.version</argument>, <argument>.systemId = pgControl.systemId}</argument>, <argument>walBuffer</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>walChecksum</name> <init>= <expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>walSegmentIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>walSegmentIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>walSegmentList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>walSegmentIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>StorageWrite</name> <modifier>*</modifier></type><name>write</name> <init>= <expr><call><name>storageNewWriteP</name><argument_list>(
                <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>strNewFmt</name><argument_list>(
                    <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/%s/%s-%s%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>archiveId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>walSegmentList</name></expr></argument>, <argument><expr><name>walSegmentIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>walChecksum</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>compressExtStr</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>walCompressType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>walCompressType</name></name> <operator>!=</operator> <name>compressTypeNone</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><call><name>ioWriteFilterGroup</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>compressFilter</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>walCompressType</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if_stmt><if>if <condition>(<expr><name>pgVersion</name> <operator>==</operator> <name>PG_VERSION_95</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>param</name><operator>.</operator><name>backupStandby</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>param</name><operator>.</operator><name>errorAfterStart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>noArchiveCheck</name></name></expr>)</condition>
        <block>{<block_content>
            <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
            {
                <comment type="line">// Connect to primary</comment>
                HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_95, pg1Path, false, NULL, NULL)</argument>,

                <comment type="line">// Get start time</comment>
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal>)</argument>,

                <comment type="line">// Start backup</comment>
                <argument>HRNPQ_MACRO_ADVISORY_LOCK(<literal type="number">1</literal>, true)</argument>,
                <argument>HRNPQ_MACRO_IS_IN_BACKUP(<literal type="number">1</literal>, false)</argument>,
                <argument>HRNPQ_MACRO_START_BACKUP_LE_95(<literal type="number">1</literal>, param.startFast, lsnStartStr, walSegmentStart)</argument>,
                <argument>HRNPQ_MACRO_DATABASE_LIST_1(<literal type="number">1</literal>, <literal type="string">"test1"</literal>)</argument>,
                <argument>HRNPQ_MACRO_TABLESPACE_LIST_0(<literal type="number">1</literal>)</argument>,

                <comment type="line">// Get copy start time</comment>
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal> + <literal type="number">999</literal>)</argument>,
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal> + <literal type="number">1000</literal>)</argument>,

                <comment type="line">// Ping</comment>
                <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">1</literal>, false)</argument>,
                <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">1</literal>, false)</argument>,

                <comment type="line">// Stop backup</comment>
                <argument>HRNPQ_MACRO_STOP_BACKUP_LE_95(<literal type="number">1</literal>, lsnStopStr, walSegmentStop)</argument>,

                <comment type="line">// Get stop time</comment>
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal> + <literal type="number">2000</literal>)</argument>,

                <argument>HRNPQ_MACRO_DONE()
            }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
            {
                <comment type="line">// Connect to primary</comment>
                HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_95, pg1Path, false, NULL, NULL)</argument>,

                <comment type="line">// Get start time</comment>
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal>)</argument>,

                <comment type="line">// Start backup</comment>
                <argument>HRNPQ_MACRO_ADVISORY_LOCK(<literal type="number">1</literal>, true)</argument>,
                <argument>HRNPQ_MACRO_IS_IN_BACKUP(<literal type="number">1</literal>, false)</argument>,
                <argument>HRNPQ_MACRO_CURRENT_WAL_LE_96(<literal type="number">1</literal>, walSegmentPrior)</argument>,
                <argument>HRNPQ_MACRO_START_BACKUP_LE_95(<literal type="number">1</literal>, param.startFast, lsnStartStr, walSegmentStart)</argument>,
                <argument>HRNPQ_MACRO_DATABASE_LIST_1(<literal type="number">1</literal>, <literal type="string">"test1"</literal>)</argument>,
                <argument>HRNPQ_MACRO_TABLESPACE_LIST_0(<literal type="number">1</literal>)</argument>,

                <comment type="line">// Get copy start time</comment>
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal> + <literal type="number">999</literal>)</argument>,
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal> + <literal type="number">1000</literal>)</argument>,

                <comment type="line">// Ping</comment>
                <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">1</literal>, false)</argument>,
                <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">1</literal>, false)</argument>,

                <comment type="line">// Stop backup</comment>
                <argument>HRNPQ_MACRO_STOP_BACKUP_LE_95(<literal type="number">1</literal>, lsnStopStr, walSegmentStop)</argument>,

                <comment type="line">// Get stop time</comment>
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal> + <literal type="number">2000</literal>)</argument>,

                <argument>HRNPQ_MACRO_DONE()
            }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if type="elseif">else if <condition>(<expr><name>pgVersion</name> <operator>==</operator> <name>PG_VERSION_96</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>backupStandby</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>param</name><operator>.</operator><name>errorAfterStart</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>param</name><operator>.</operator><name>noArchiveCheck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Save pg_control with updated info</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_PATH_GLOBAL</name> <literal type="string">"/"</literal> <name>PG_FILE_PGCONTROL</name></expr></argument>, <argument><expr><call><name>hrnPgControlToBuffer</name><argument_list>(<argument><expr><name>pgControl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>noPriorWal</name></name></expr>)</condition>
        <block>{<block_content>
            <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
            {
                <comment type="line">// Connect to primary</comment>
                HRNPQ_MACRO_OPEN_GE_96(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_96, pg1Path, false, NULL, NULL)</argument>,

                <comment type="line">// Connect to standby</comment>
                <argument>HRNPQ_MACRO_OPEN_GE_96(<literal type="number">2</literal>, <literal type="string">"dbname='postgres' port=5433"</literal>, PG_VERSION_96, pg2Path, true, NULL, NULL)</argument>,

                <comment type="line">// Get start time</comment>
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal>)</argument>,

                <comment type="line">// Start backup</comment>
                <argument>HRNPQ_MACRO_ADVISORY_LOCK(<literal type="number">1</literal>, true)</argument>,
                <argument>HRNPQ_MACRO_CURRENT_WAL_LE_96(<literal type="number">1</literal>, walSegmentPrior)</argument>,
                <argument>HRNPQ_MACRO_START_BACKUP_96(<literal type="number">1</literal>, true, lsnStartStr, walSegmentStart)</argument>,
                <argument>HRNPQ_MACRO_DATABASE_LIST_1(<literal type="number">1</literal>, <literal type="string">"test1"</literal>)</argument>,
                <argument>HRNPQ_MACRO_TABLESPACE_LIST_0(<literal type="number">1</literal>)</argument>,

                <comment type="line">// Wait for standby to sync</comment>
                <argument>HRNPQ_MACRO_REPLAY_WAIT_96(<literal type="number">2</literal>, lsnStartStr)</argument>,

                <argument>HRNPQ_MACRO_DONE()
            }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
            {
                <comment type="line">// Connect to primary</comment>
                HRNPQ_MACRO_OPEN_GE_96(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_96, pg1Path, false, NULL, NULL)</argument>,

                <comment type="line">// Connect to standby</comment>
                <argument>HRNPQ_MACRO_OPEN_GE_96(<literal type="number">2</literal>, <literal type="string">"dbname='postgres' port=5433"</literal>, PG_VERSION_96, pg2Path, true, NULL, NULL)</argument>,

                <comment type="line">// Get start time</comment>
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal>)</argument>,

                <comment type="line">// Start backup</comment>
                <argument>HRNPQ_MACRO_ADVISORY_LOCK(<literal type="number">1</literal>, true)</argument>,
                <argument>HRNPQ_MACRO_CURRENT_WAL_LE_96(<literal type="number">1</literal>, walSegmentPrior)</argument>,
                <argument>HRNPQ_MACRO_START_BACKUP_96(<literal type="number">1</literal>, true, lsnStartStr, walSegmentStart)</argument>,
                <argument>HRNPQ_MACRO_DATABASE_LIST_1(<literal type="number">1</literal>, <literal type="string">"test1"</literal>)</argument>,
                <argument>HRNPQ_MACRO_TABLESPACE_LIST_0(<literal type="number">1</literal>)</argument>,

                <comment type="line">// Wait for standby to sync</comment>
                <argument>HRNPQ_MACRO_REPLAY_WAIT_96(<literal type="number">2</literal>, lsnStartStr)</argument>,

                <comment type="line">// Get copy start time</comment>
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal> + <literal type="number">999</literal>)</argument>,
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal> + <literal type="number">1000</literal>)</argument>,

                <comment type="line">// Ping</comment>
                <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">1</literal>, false)</argument>,
                <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">2</literal>, true)</argument>,
                <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">1</literal>, false)</argument>,
                <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">2</literal>, true)</argument>,

                <comment type="line">// Stop backup</comment>
                <argument>HRNPQ_MACRO_STOP_BACKUP_96(<literal type="number">1</literal>, lsnStopStr, walSegmentStop, false)</argument>,

                <comment type="line">// Get stop time</comment>
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal> + <literal type="number">2000</literal>)</argument>,

                <argument>HRNPQ_MACRO_DONE()
            }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <if type="elseif">else if <condition>(<expr><name>pgVersion</name> <operator>==</operator> <name>PG_VERSION_11</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>param</name><operator>.</operator><name>backupStandby</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>param</name><operator>.</operator><name>noArchiveCheck</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>errorAfterStart</name></name></expr>)</condition>
        <block>{<block_content>
            <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
            {
                <comment type="line">// Connect to primary</comment>
                HRNPQ_MACRO_OPEN_GE_96(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_11, pg1Path, false, NULL, NULL)</argument>,

                <comment type="line">// Get start time</comment>
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal>)</argument>,

                <comment type="line">// Start backup</comment>
                <argument>HRNPQ_MACRO_ADVISORY_LOCK(<literal type="number">1</literal>, true)</argument>,
                <argument>HRNPQ_MACRO_CURRENT_WAL_GE_10(<literal type="number">1</literal>, walSegmentPrior)</argument>,
                <argument>HRNPQ_MACRO_START_BACKUP_GE_10(<literal type="number">1</literal>, param.startFast, lsnStartStr, walSegmentStart)</argument>,
                <argument>HRNPQ_MACRO_DATABASE_LIST_1(<literal type="number">1</literal>, <literal type="string">"test1"</literal>)</argument>,
                <argument>HRNPQ_MACRO_TABLESPACE_LIST_1(<literal type="number">1</literal>, <literal type="number">32768</literal>, <literal type="string">"tblspc32768"</literal>)</argument>,

                <comment type="line">// Get copy start time</comment>
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal> + <literal type="number">999</literal>)</argument>,
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal> + <literal type="number">1000</literal>)</argument>,

                <argument>HRNPQ_MACRO_DONE()
            }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
            {
                <comment type="line">// Connect to primary</comment>
                HRNPQ_MACRO_OPEN_GE_96(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_11, pg1Path, false, NULL, NULL)</argument>,

                <comment type="line">// Get start time</comment>
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal>)</argument>,

                <comment type="line">// Start backup</comment>
                <argument>HRNPQ_MACRO_ADVISORY_LOCK(<literal type="number">1</literal>, true)</argument>,
                <argument>HRNPQ_MACRO_CURRENT_WAL_GE_10(<literal type="number">1</literal>, walSegmentStart)</argument>,
                <argument>HRNPQ_MACRO_START_BACKUP_GE_10(<literal type="number">1</literal>, param.startFast, lsnStartStr, walSegmentStart)</argument>,

                <comment type="line">// Switch WAL segment so it can be checked</comment>
                <argument>HRNPQ_MACRO_CREATE_RESTORE_POINT(<literal type="number">1</literal>, <literal type="string">"X/X"</literal>)</argument>,
                <argument>HRNPQ_MACRO_WAL_SWITCH(<literal type="number">1</literal>, <literal type="string">"wal"</literal>, walSegmentStart)</argument>,

                <comment type="line">// Get database and tablespace list</comment>
                <argument>HRNPQ_MACRO_DATABASE_LIST_1(<literal type="number">1</literal>, <literal type="string">"test1"</literal>)</argument>,
                <argument>HRNPQ_MACRO_TABLESPACE_LIST_1(<literal type="number">1</literal>, <literal type="number">32768</literal>, <literal type="string">"tblspc32768"</literal>)</argument>,

                <comment type="line">// Get copy start time</comment>
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal> + <literal type="number">999</literal>)</argument>,
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal> + <literal type="number">1000</literal>)</argument>,

                <comment type="line">// Ping</comment>
                <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">1</literal>, false)</argument>,
                <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">1</literal>, false)</argument>,

                <comment type="line">// Stop backup</comment>
                <argument>HRNPQ_MACRO_STOP_BACKUP_GE_10(<literal type="number">1</literal>, lsnStopStr, walSegmentStop, true)</argument>,

                <comment type="line">// Get stop time</comment>
                <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, (int64_t)backupTimeStart * <literal type="number">1000</literal> + <literal type="number">2000</literal>)</argument>,

                <argument>HRNPQ_MACRO_DONE()
            }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unsupported test version %u"</literal></expr></argument>, <argument><expr><name>pgVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>           <comment type="line">// {uncoverable - no invalid versions in tests}</comment>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Install local command handler shim</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ProtocolServerHandler</name></type> <name><name>testLocalHandlerList</name><index>[]</index></name> <init>= <expr><block>{<expr><name>PROTOCOL_SERVER_HANDLER_BACKUP_LIST</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>hrnProtocolLocalShimInstall</name><argument_list>(<argument><expr><name>testLocalHandlerList</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>testLocalHandlerList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// The tests expect the timezone to be UTC</comment>
    <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"TZ"</literal></expr></argument>, <argument><expr><literal type="string">"UTC"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"backupRegExp()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>full</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20181119-152138F"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>incr</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20181119-152138F_20181119-152152I"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>diff</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20181119-152138F_20181119-152152D"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"regular expression - error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>backupRegExpP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"assertion 'param.full || param.differential || param.incremental' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"regular expression - match full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><call><name>backupRegExpP</name><argument_list>(<argument><expr><operator>.</operator><name>full</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"^[0-9]{8}\\-[0-9]{6}F$"</literal></expr></argument>, <argument><expr><literal type="string">"full backup regex with anchors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>incr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"does not exactly match incr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"does not exactly match diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>full</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"exactly matches full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"regular expression - match full, incremental"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>backupRegExpP</name><argument_list>(<argument><expr><operator>.</operator><name>full</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>incremental</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"^[0-9]{8}\\-[0-9]{6}F(\\_[0-9]{8}\\-[0-9]{6}I){0,1}$"</literal></expr></argument>, <argument><expr><literal type="string">"full and optional incr backup regex with anchors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>incr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"match incr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"does not match diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>full</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"match full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>regExpMatchOne</name><argument_list>(
                <argument><expr><name>filter</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"12341234-123123F_12341234-123123IG"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"does not match with trailing character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>regExpMatchOne</name><argument_list>(
                <argument><expr><name>filter</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"A12341234-123123F_12341234-123123I"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"does not match with leading character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"regular expression - match full, differential"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>backupRegExpP</name><argument_list>(<argument><expr><operator>.</operator><name>full</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>differential</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"^[0-9]{8}\\-[0-9]{6}F(\\_[0-9]{8}\\-[0-9]{6}D){0,1}$"</literal></expr></argument>, <argument><expr><literal type="string">"full and optional diff backup regex with anchors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>incr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"does not match incr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"match diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>full</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"match full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"regular expression - match full, incremental, differential"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>backupRegExpP</name><argument_list>(<argument><expr><operator>.</operator><name>full</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>incremental</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>differential</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"^[0-9]{8}\\-[0-9]{6}F(\\_[0-9]{8}\\-[0-9]{6}(D|I)){0,1}$"</literal></expr></argument>,
            <argument><expr><literal type="string">"full, optional diff and incr backup regex with anchors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>incr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"match incr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"match diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>full</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"match full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"regular expression - match incremental, differential without end anchor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>backupRegExpP</name><argument_list>(<argument><expr><operator>.</operator><name>incremental</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>differential</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>noAnchorEnd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"^[0-9]{8}\\-[0-9]{6}F\\_[0-9]{8}\\-[0-9]{6}(D|I)"</literal></expr></argument>, <argument><expr><literal type="string">"diff and incr backup regex with anchors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>incr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"match incr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"match diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>full</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"does not match full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>regExpMatchOne</name><argument_list>(
                <argument><expr><name>filter</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"A12341234-123123F_12341234-123123I"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"does not match with leading character"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"regular expression - match incremental"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>backupRegExpP</name><argument_list>(<argument><expr><operator>.</operator><name>incremental</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"^[0-9]{8}\\-[0-9]{6}F\\_[0-9]{8}\\-[0-9]{6}I$"</literal></expr></argument>, <argument><expr><literal type="string">"incr backup regex with anchors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>incr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"match incr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"does not match diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>full</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"does not match full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"regular expression - match differential"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>backupRegExpP</name><argument_list>(<argument><expr><operator>.</operator><name>differential</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><literal type="string">"^[0-9]{8}\\-[0-9]{6}F\\_[0-9]{8}\\-[0-9]{6}D$"</literal></expr></argument>, <argument><expr><literal type="string">"diff backup regex with anchors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>incr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"does not match incr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"match diff"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><name>filter</name></expr></argument>, <argument><expr><name>full</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"does not match full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"PageChecksum"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"segment page default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name>PG_SEGMENT_PAGE_DEFAULT</name></expr></argument>, <argument><expr><literal type="number">131072</literal></expr></argument>, <argument><expr><literal type="string">"check pages per segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"two misaligned buffers in a row"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">513</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x00</literal><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>PageHeaderData</name><operator>)</operator><block>{<expr><operator>.</operator><name>pd_upper</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>bufferOut</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">513</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name> <init>= <expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>bufferOut</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(
            <argument><expr><call><name>ioWriteFilterGroup</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>pageChecksumNewPack</name><argument_list>(<argument><expr><call><name>ioFilterParamList</name><argument_list>(<argument><expr><call><name>pageChecksumNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PG_SEGMENT_PAGE_DEFAULT</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"should not be possible to see two misaligned pages in a row"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"retry a page with an invalid checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write to file with valid checksums</comment>
        <expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x00</literal><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>PageHeaderData</name><operator>)</operator><block>{<expr><operator>.</operator><name>pd_upper</name> <operator>=</operator> <literal type="number">0x00</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x01</literal><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>PageHeaderData</name><operator>)</operator><block>{<expr><operator>.</operator><name>pd_upper</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x01</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>pd_checksum</name> <operator>=</operator> <call><name>pgPageChecksum</name><argument_list>(
            <argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x01</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x02</literal><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>PageHeaderData</name><operator>)</operator><block>{<expr><operator>.</operator><name>pd_upper</name> <operator>=</operator> <literal type="number">0x00</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x03</literal><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>PageHeaderData</name><operator>)</operator><block>{<expr><operator>.</operator><name>pd_upper</name> <operator>=</operator> <literal type="number">0xFE</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x03</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>pd_checksum</name> <operator>=</operator> <call><name>pgPageChecksum</name><argument_list>(
            <argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x03</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"relation"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Now break the checksum to force a retry</comment>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x01</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>pd_checksum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x03</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>pd_checksum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>write</name> <operator>=</operator> <call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>bufferOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(
            <argument><expr><call><name>ioWriteFilterGroup</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>pageChecksumNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PG_SEGMENT_PAGE_DEFAULT</name></expr></argument>, <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"relation"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>hrnPackToStr</name><argument_list>(<argument><expr><call><name>ioFilterGroupResultPackP</name><argument_list>(<argument><expr><call><name>ioWriteFilterGroup</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PAGE_CHECKSUM_FILTER_TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"2:bool:true, 3:bool:true"</literal></expr></argument>, <argument><expr><literal type="string">"valid on retry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"segmentNumber()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>segmentNumber</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"999"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"No segment number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>segmentNumber</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"999.123"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>, <argument><expr><literal type="string">"Segment number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"backupFile()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pgFile</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"testfile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>missingFile</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"missing"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>backupLabel</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20190718-155825F"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>backupPathFile</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>BackupFileResult</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <comment type="line">// Load Parameters</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create the pg path</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pg file missing - ignoreMissing=true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>fileList</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackupFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>BackupFile</name></type> <name>file</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>pgFile</name> <operator>=</operator> <name>missingFile</name></expr>,
            <expr><operator>.</operator><name>pgFileIgnoreMissing</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileSize</name> <operator>=</operator> <literal type="number">0</literal></expr>,
            <expr><operator>.</operator><name>pgFileCopyExactSize</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksum</name> <operator>=</operator> <name>NULL</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksumPage</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>manifestFile</name> <operator>=</operator> <name>missingFile</name></expr>,
            <expr><operator>.</operator><name>manifestFileHasReference</name> <operator>=</operator> <name>false</name></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>repoFile</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>manifestFile</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><operator>*</operator><operator>(</operator><name>BackupFileResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><call><name>backupFile</name><argument_list>(<argument><expr><name>repoFile</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"pg file missing, ignoreMissing=true, no delta"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copySize</name></name> <operator>+</operator> <name><name>result</name><operator>.</operator><name>repoSize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"copy/repo size 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>backupCopyResult</name></name></expr></argument>, <argument><expr><name>backupCopyResultSkip</name></expr></argument>, <argument><expr><literal type="string">"skip file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pg file missing - ignoreMissing=false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackupFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BackupFile</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pgFile</name> <operator>=</operator> <name>missingFile</name></expr>,
            <expr><operator>.</operator><name>pgFileIgnoreMissing</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>pgFileSize</name> <operator>=</operator> <literal type="number">0</literal></expr>,
            <expr><operator>.</operator><name>pgFileCopyExactSize</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksum</name> <operator>=</operator> <name>NULL</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksumPage</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>manifestFile</name> <operator>=</operator> <name>missingFile</name></expr>,
            <expr><operator>.</operator><name>manifestFileHasReference</name> <operator>=</operator> <name>false</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>backupFile</name><argument_list>(<argument><expr><name>repoFile</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/missing' for read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create a pg file to backup</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"atestfile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove repo file</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupPathFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"test pagechecksum while db file grows"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Increase the file size but most of the following tests will still treat the file as size 9.  This tests the common case</comment>
        <comment type="line">// where a file grows while a backup is running.</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"atestfile###"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackupFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BackupFile</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pgFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>pgFileIgnoreMissing</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>pgFileSize</name> <operator>=</operator> <literal type="number">9</literal></expr>,
            <expr><operator>.</operator><name>pgFileCopyExactSize</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksum</name> <operator>=</operator> <name>NULL</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksumPage</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>manifestFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>manifestFileHasReference</name> <operator>=</operator> <name>false</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>repoFile</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>manifestFile</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><operator>*</operator><operator>(</operator><name>BackupFileResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><call><name>backupFile</name><argument_list>(<argument><expr><name>repoFile</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"file checksummed with pageChecksum enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copySize</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"copy=pgFile size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>repoSize</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"repo=pgFile size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>backupCopyResult</name></name></expr></argument>, <argument><expr><name>backupCopyResultCopy</name></expr></argument>, <argument><expr><literal type="string">"copy file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copyChecksum</name></name></expr></argument>, <argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>, <argument><expr><literal type="string">"copy checksum matches"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>hrnPackToStr</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pageChecksumResult</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"2:bool:false, 3:bool:false"</literal></expr></argument>, <argument><expr><literal type="string">"pageChecksumResult"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupPathFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check exists in repo, remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pgFileSize, ignoreMissing=false, backupLabel, pgFileChecksumPage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackupFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BackupFile</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pgFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>pgFileIgnoreMissing</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>pgFileSize</name> <operator>=</operator> <literal type="number">8</literal></expr>,
            <expr><operator>.</operator><name>pgFileCopyExactSize</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksum</name> <operator>=</operator> <name>NULL</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksumPage</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>manifestFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>manifestFileHasReference</name> <operator>=</operator> <name>false</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><operator>*</operator><operator>(</operator><name>BackupFileResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><call><name>backupFile</name><argument_list>(<argument><expr><name>repoFile</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"backup file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copySize</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"copy size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>repoSize</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"repo size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>backupCopyResult</name></name></expr></argument>, <argument><expr><name>backupCopyResultCopy</name></expr></argument>, <argument><expr><literal type="string">"copy file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copyChecksum</name></name></expr></argument>, <argument><expr><literal type="string">"c3ae4687ea8ccd47bfdb190dbe7fd3b37545fdb9"</literal></expr></argument>, <argument><expr><literal type="string">"checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>hrnPackToStr</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pageChecksumResult</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"2:bool:false, 3:bool:false"</literal></expr></argument>, <argument><expr><literal type="string">"page checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupPathFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"atestfile###"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file exists in repo and db, checksum match - NOOP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackupFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BackupFile</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pgFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>pgFileDelta</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileIgnoreMissing</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>pgFileSize</name> <operator>=</operator> <literal type="number">9</literal></expr>,
            <expr><operator>.</operator><name>pgFileCopyExactSize</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksum</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>pgFileChecksumPage</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>manifestFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>manifestFileHasReference</name> <operator>=</operator> <name>true</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// File exists in repo and db, pg checksum match, delta set, ignoreMissing false, hasReference - NOOP</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><operator>*</operator><operator>(</operator><name>BackupFileResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><call><name>backupFile</name><argument_list>(<argument><expr><name>repoFile</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"file in db and repo, checksum equal, no ignoreMissing, no pageChecksum, delta, hasReference"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copySize</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"copy size set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>repoSize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"repo size not set since already exists in repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>backupCopyResult</name></name></expr></argument>, <argument><expr><name>backupCopyResultNoOp</name></expr></argument>, <argument><expr><literal type="string">"noop file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copyChecksum</name></name></expr></argument>, <argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>, <argument><expr><literal type="string">"copy checksum matches"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pageChecksumResult</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"page checksum result is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupPathFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"atestfile###"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"file not modified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file exists in repo and db, checksum mismatch - COPY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackupFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BackupFile</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pgFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>pgFileDelta</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileIgnoreMissing</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>pgFileSize</name> <operator>=</operator> <literal type="number">9</literal></expr>,
            <expr><operator>.</operator><name>pgFileCopyExactSize</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksum</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1234567890123456789012345678901234567890"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>pgFileChecksumPage</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>manifestFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>manifestFileHasReference</name> <operator>=</operator> <name>true</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// File exists in repo and db, pg checksum mismatch, delta set, ignoreMissing false, hasReference - COPY</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><operator>*</operator><operator>(</operator><name>BackupFileResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><call><name>backupFile</name><argument_list>(<argument><expr><name>repoFile</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"file in db and repo, pg checksum not equal, no ignoreMissing, no pageChecksum, delta, hasReference"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copySize</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"copy 9 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>repoSize</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"repo=copy size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>backupCopyResult</name></name></expr></argument>, <argument><expr><name>backupCopyResultCopy</name></expr></argument>, <argument><expr><literal type="string">"copy file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copyChecksum</name></name></expr></argument>, <argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>, <argument><expr><literal type="string">"copy checksum for file size 9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pageChecksumResult</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"page checksum result is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupPathFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"atestfile"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"9 bytes copied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file exists in repo and pg, copy only exact file even if size passed is greater - COPY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackupFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BackupFile</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pgFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>pgFileDelta</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileIgnoreMissing</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>pgFileSize</name> <operator>=</operator> <literal type="number">9999999</literal></expr>,
            <expr><operator>.</operator><name>pgFileCopyExactSize</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksum</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>pgFileChecksumPage</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>manifestFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>manifestFileHasReference</name> <operator>=</operator> <name>true</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// File exists in repo and pg, pg checksum same, pg size passed is different, delta set, ignoreMissing false, hasReference</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><operator>*</operator><operator>(</operator><name>BackupFileResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><call><name>backupFile</name><argument_list>(<argument><expr><name>repoFile</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"db &amp; repo file, pg checksum same, pg size different, no ignoreMissing, no pageChecksum, delta, hasReference"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copySize</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"copy=pgFile size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>repoSize</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="string">"repo=pgFile size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>backupCopyResult</name></name></expr></argument>, <argument><expr><name>backupCopyResultCopy</name></expr></argument>, <argument><expr><literal type="string">"copy file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copyChecksum</name></name></expr></argument>, <argument><expr><literal type="string">"c3ae4687ea8ccd47bfdb190dbe7fd3b37545fdb9"</literal></expr></argument>, <argument><expr><literal type="string">"copy checksum updated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pageChecksumResult</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"page checksum result is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupPathFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"atestfile###"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"confirm contents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"resumed file is missing in repo but present in resumed manifest, file same name in repo - RECOPY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackupFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BackupFile</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pgFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>pgFileDelta</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileIgnoreMissing</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>pgFileSize</name> <operator>=</operator> <literal type="number">9</literal></expr>,
            <expr><operator>.</operator><name>pgFileCopyExactSize</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksum</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>pgFileChecksumPage</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>manifestFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>manifestFileResume</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>manifestFileHasReference</name> <operator>=</operator> <name>false</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>repoFile</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>manifestFile</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20190718-155825F"</literal></expr></argument>, <argument><expr><literal type="string">"testfile\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"resumed file is missing in repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><operator>*</operator><operator>(</operator><name>BackupFileResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><call><name>backupFile</name><argument_list>(<argument><expr><name>repoFile</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"backup 9 bytes of pgfile to file to resume in repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copySize</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"copy 9 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>repoSize</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"repo=copy size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>backupCopyResult</name></name></expr></argument>, <argument><expr><name>backupCopyResultReCopy</name></expr></argument>, <argument><expr><literal type="string">"check recopy result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copyChecksum</name></name></expr></argument>, <argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>, <argument><expr><literal type="string">"copy checksum for file size 9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pageChecksumResult</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"page checksum result is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupPathFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"atestfile###"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"existing file with same name as pgFile not modified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20190718-155825F/"</literal> <name>BOGUS_STR</name></expr></argument>, <argument><expr><literal type="string">"atestfile"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"resumed file copied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file exists in repo &amp; db, checksum not same in repo - RECOPY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupPathFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"adifferentfile"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"create different file (size and checksum) with same name in repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackupFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BackupFile</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pgFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>pgFileDelta</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileIgnoreMissing</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>pgFileSize</name> <operator>=</operator> <literal type="number">9</literal></expr>,
            <expr><operator>.</operator><name>pgFileCopyExactSize</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksum</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>pgFileChecksumPage</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>manifestFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>manifestFileResume</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>manifestFileHasReference</name> <operator>=</operator> <name>false</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>repoFile</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>manifestFile</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Delta set, ignoreMissing false, no hasReference</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><operator>*</operator><operator>(</operator><name>BackupFileResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><call><name>backupFile</name><argument_list>(<argument><expr><name>repoFile</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"db &amp; repo file, pgFileMatch, repo checksum no match, no ignoreMissing, no pageChecksum, delta, no hasReference"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copySize</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"copy 9 bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>repoSize</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"repo=copy size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>backupCopyResult</name></name></expr></argument>, <argument><expr><name>backupCopyResultReCopy</name></expr></argument>, <argument><expr><literal type="string">"recopy file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copyChecksum</name></name></expr></argument>, <argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>, <argument><expr><literal type="string">"copy checksum for file size 9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pageChecksumResult</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"page checksum result is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupPathFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"atestfile"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"existing file recopied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file exists in repo but missing from db, checksum same in repo - SKIP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackupFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BackupFile</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pgFile</name> <operator>=</operator> <name>missingFile</name></expr>,
            <expr><operator>.</operator><name>pgFileDelta</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileIgnoreMissing</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileSize</name> <operator>=</operator> <literal type="number">9</literal></expr>,
            <expr><operator>.</operator><name>pgFileCopyExactSize</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksum</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>pgFileChecksumPage</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>manifestFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>manifestFileResume</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>manifestFileHasReference</name> <operator>=</operator> <name>false</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><operator>*</operator><operator>(</operator><name>BackupFileResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><call><name>backupFile</name><argument_list>(<argument><expr><name>repoFile</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"file in repo only, checksum in repo equal, ignoreMissing=true, no pageChecksum, delta, no hasReference"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copySize</name></name> <operator>+</operator> <name><name>result</name><operator>.</operator><name>repoSize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"copy=repo=0 size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>backupCopyResult</name></name></expr></argument>, <argument><expr><name>backupCopyResultSkip</name></expr></argument>, <argument><expr><literal type="string">"skip file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copyChecksum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"copy checksum NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pageChecksumResult</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"page checksum result is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20190718-155825F"</literal></expr></argument>, <argument><expr><name>BOGUS_STR</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"file removed from repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"compression set, all other boolean parameters false - COPY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackupFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BackupFile</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pgFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>pgFileIgnoreMissing</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>pgFileSize</name> <operator>=</operator> <literal type="number">9</literal></expr>,
            <expr><operator>.</operator><name>pgFileCopyExactSize</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksum</name> <operator>=</operator> <name>NULL</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksumPage</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>manifestFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>manifestFileHasReference</name> <operator>=</operator> <name>false</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>repoFile</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/%s.gz"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>manifestFile</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><operator>*</operator><operator>(</operator><name>BackupFileResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><call><name>backupFile</name><argument_list>(<argument><expr><name>repoFile</name></expr></argument>, <argument><expr><name>compressTypeGz</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"pg file exists, no checksum, no ignoreMissing, compression, no pageChecksum, no delta, no hasReference"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copySize</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"copy=pgFile size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>repoSize</name></name></expr></argument>, <argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><literal type="string">"repo compress size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>backupCopyResult</name></name></expr></argument>, <argument><expr><name>backupCopyResultCopy</name></expr></argument>, <argument><expr><literal type="string">"copy file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copyChecksum</name></name></expr></argument>, <argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>, <argument><expr><literal type="string">"copy checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pageChecksumResult</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"page checksum result is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/%s.gz"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"copy file to repo compress success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pg and repo file exist &amp; match, prior checksum, compression - COPY CHECKSUM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackupFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BackupFile</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pgFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>pgFileIgnoreMissing</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>pgFileSize</name> <operator>=</operator> <literal type="number">9</literal></expr>,
            <expr><operator>.</operator><name>pgFileCopyExactSize</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksum</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>pgFileChecksumPage</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>manifestFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>manifestFileResume</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>manifestFileHasReference</name> <operator>=</operator> <name>false</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><operator>*</operator><operator>(</operator><name>BackupFileResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><call><name>backupFile</name><argument_list>(<argument><expr><name>repoFile</name></expr></argument>, <argument><expr><name>compressTypeGz</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"pg file &amp; repo exists, match, checksum, no ignoreMissing, compression, no pageChecksum, no delta, no hasReference"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copySize</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"copy=pgFile size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>repoSize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"repo size not calculated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>backupCopyResult</name></name></expr></argument>, <argument><expr><name>backupCopyResultChecksum</name></expr></argument>, <argument><expr><literal type="string">"checksum file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copyChecksum</name></name></expr></argument>, <argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>, <argument><expr><literal type="string">"compressed repo file checksum matches"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/%s.gz"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"compressed file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"create a zero sized file - checksum will be set but in backupManifestUpdate it will not be copied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create zero sized file in pg</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"zerofile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackupFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BackupFile</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pgFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"zerofile"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>pgFileIgnoreMissing</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>pgFileSize</name> <operator>=</operator> <literal type="number">0</literal></expr>,
            <expr><operator>.</operator><name>pgFileCopyExactSize</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksum</name> <operator>=</operator> <name>NULL</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksumPage</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>manifestFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"zerofile"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>manifestFileHasReference</name> <operator>=</operator> <name>false</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>repoFile</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>manifestFile</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// No prior checksum, no compression, no pageChecksum, no delta, no hasReference</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><operator>*</operator><operator>(</operator><name>BackupFileResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><call><name>backupFile</name><argument_list>(<argument><expr><name>repoFile</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"zero-sized pg file exists, no repo file, no ignoreMissing, no pageChecksum, no delta, no hasReference"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copySize</name></name> <operator>+</operator> <name><name>result</name><operator>.</operator><name>repoSize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"copy=repo=pgFile size 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>backupCopyResult</name></name></expr></argument>, <argument><expr><name>backupCopyResultCopy</name></expr></argument>, <argument><expr><literal type="string">"copy file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR_NE</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copyChecksum</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"checksum set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pageChecksumResult</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"page checksum result is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20190718-155825F"</literal></expr></argument>,
            <argument><expr><name>BOGUS_STR</name> <literal type="string">"\n"</literal>
            <literal type="string">"testfile.gz\n"</literal>
            <literal type="string">"zerofile\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"copy zero file to repo success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"copy file to encrypted repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Load Parameters</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><name>TEST_CIPHER_PASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create the pg path and pg file to backup</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pgFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"atestfile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackupFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BackupFile</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pgFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>pgFileIgnoreMissing</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>pgFileSize</name> <operator>=</operator> <literal type="number">9</literal></expr>,
            <expr><operator>.</operator><name>pgFileCopyExactSize</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksum</name> <operator>=</operator> <name>NULL</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksumPage</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>manifestFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>manifestFileHasReference</name> <operator>=</operator> <name>false</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>repoFile</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>manifestFile</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// No prior checksum, no compression, no pageChecksum, no delta, no hasReference</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><operator>*</operator><operator>(</operator><name>BackupFileResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(
                <argument><expr><call><name>backupFile</name><argument_list>(<argument><expr><name>repoFile</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_CIPHER_PASS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"pg file exists, no repo file, no ignoreMissing, no pageChecksum, no delta, no hasReference"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copySize</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"copy size set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>repoSize</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"repo size set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>backupCopyResult</name></name></expr></argument>, <argument><expr><name>backupCopyResultCopy</name></expr></argument>, <argument><expr><literal type="string">"copy file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copyChecksum</name></name></expr></argument>, <argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>, <argument><expr><literal type="string">"copy checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pageChecksumResult</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"page checksum NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupPathFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"atestfile"</literal></expr></argument>, <argument><expr><operator>.</operator><name>cipherType</name> <operator>=</operator> <name>cipherTypeAes256Cbc</name></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"copy file to encrypted repo success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"delta, copy file (size mismatch) to encrypted repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackupFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BackupFile</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pgFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>pgFileDelta</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileIgnoreMissing</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>pgFileSize</name> <operator>=</operator> <literal type="number">8</literal></expr>,
            <expr><operator>.</operator><name>pgFileCopyExactSize</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksum</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>pgFileChecksumPage</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>manifestFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>manifestFileResume</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>manifestFileHasReference</name> <operator>=</operator> <name>false</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Delta but pgFile does not match size passed, prior checksum, no compression, no pageChecksum, delta, no hasReference</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><operator>*</operator><operator>(</operator><name>BackupFileResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(
                <argument><expr><call><name>backupFile</name><argument_list>(<argument><expr><name>repoFile</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_CIPHER_PASS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"pg and repo file exists, pgFileMatch false, no ignoreMissing, no pageChecksum, delta, no hasReference"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copySize</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"copy size set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>repoSize</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"repo size set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>backupCopyResult</name></name></expr></argument>, <argument><expr><name>backupCopyResultCopy</name></expr></argument>, <argument><expr><literal type="string">"copy file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copyChecksum</name></name></expr></argument>, <argument><expr><literal type="string">"acc972a8319d4903b839c64ec217faa3e77b4fcb"</literal></expr></argument>, <argument><expr><literal type="string">"copy checksum for size passed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pageChecksumResult</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"page checksum NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupPathFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"atestfil"</literal></expr></argument>, <argument><expr><operator>.</operator><name>cipherType</name> <operator>=</operator> <name>cipherTypeAes256Cbc</name></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"delta, copy file (size missmatch) to encrypted repo success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"no delta, recopy (size mismatch) file to encrypted repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackupFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BackupFile</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pgFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>pgFileIgnoreMissing</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>pgFileSize</name> <operator>=</operator> <literal type="number">9</literal></expr>,
            <expr><operator>.</operator><name>pgFileCopyExactSize</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksum</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>pgFileChecksumPage</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>manifestFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>manifestFileResume</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>manifestFileHasReference</name> <operator>=</operator> <name>false</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><operator>*</operator><operator>(</operator><name>BackupFileResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(
                <argument><expr><call><name>backupFile</name><argument_list>(<argument><expr><name>repoFile</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_CIPHER_PASS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"pg and repo file exists, checksum mismatch, no ignoreMissing, no pageChecksum, no delta, no hasReference"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copySize</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"copy size set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>repoSize</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"repo size set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>backupCopyResult</name></name></expr></argument>, <argument><expr><name>backupCopyResultReCopy</name></expr></argument>, <argument><expr><literal type="string">"recopy file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copyChecksum</name></name></expr></argument>, <argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>, <argument><expr><literal type="string">"copy checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pageChecksumResult</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"page checksum NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupPathFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"atestfile"</literal></expr></argument>, <argument><expr><operator>.</operator><name>cipherType</name> <operator>=</operator> <name>cipherTypeAes256Cbc</name></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"recopy file to encrypted repo success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"no delta, recopy (checksum mismatch), file to encrypted repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BackupFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file</name> <operator>=</operator> <operator>(</operator><name>BackupFile</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pgFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>pgFileIgnoreMissing</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>pgFileSize</name> <operator>=</operator> <literal type="number">9</literal></expr>,
            <expr><operator>.</operator><name>pgFileCopyExactSize</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>pgFileChecksum</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1234567890123456789012345678901234567890"</literal></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>pgFileChecksumPage</name> <operator>=</operator> <name>false</name></expr>,
            <expr><operator>.</operator><name>manifestFile</name> <operator>=</operator> <name>pgFile</name></expr>,
            <expr><operator>.</operator><name>manifestFileResume</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>manifestFileHasReference</name> <operator>=</operator> <name>false</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><operator>*</operator><operator>(</operator><name>BackupFileResult</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(
                <argument><expr><call><name>backupFile</name><argument_list>(<argument><expr><name>repoFile</name></expr></argument>, <argument><expr><name>compressTypeNone</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_CIPHER_PASS</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"backup file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copySize</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"copy size set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>repoSize</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="string">"repo size set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>backupCopyResult</name></name></expr></argument>, <argument><expr><name>backupCopyResultReCopy</name></expr></argument>, <argument><expr><literal type="string">"recopy file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>copyChecksum</name></name></expr></argument>, <argument><expr><literal type="string">"9bc8ab2dda60ef4beed07d1e19ce0676d5edde67"</literal></expr></argument>, <argument><expr><literal type="string">"copy checksum for size passed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pageChecksumResult</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"page checksum NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>backupPathFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"atestfile"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>cipherType</name> <operator>=</operator> <name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"recopy file to encrypted repo, success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"backupLabelCreate()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>time_t</name></type> <name>timestamp</name> <init>= <expr><literal type="number">1575401652</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>backupLabel</name> <init>= <expr><call><name>backupLabelFormat</name><argument_list>(<argument><expr><name>backupTypeFull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"assign label when no history"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/backup.history/2019"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>backupLabelCreate</name><argument_list>(<argument><expr><name>backupTypeFull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>backupLabel</name></expr></argument>, <argument><expr><literal type="string">"create label"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"assign label when history is older"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name>zNewFmt</name><argument_list>(
                <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/backup.history/2019/%s.manifest.gz"</literal></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>backupLabelFormat</name><argument_list>(<argument><expr><name>backupTypeFull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>timestamp</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>backupLabelCreate</name><argument_list>(<argument><expr><name>backupTypeFull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>backupLabel</name></expr></argument>, <argument><expr><literal type="string">"create label"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"assign label when backup is older"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>backupLabelFormat</name><argument_list>(<argument><expr><name>backupTypeFull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>timestamp</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>backupLabelCreate</name><argument_list>(<argument><expr><name>backupTypeFull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>backupLabel</name></expr></argument>, <argument><expr><literal type="string">"create label"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"advance time when backup is same"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>backupLabelFormat</name><argument_list>(<argument><expr><name>backupTypeFull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>backupLabelCreate</name><argument_list>(<argument><expr><name>backupTypeFull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"20191203-193413F"</literal></expr></argument>, <argument><expr><literal type="string">"create label"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when new label is in the past even with advanced time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>backupLabelFormat</name><argument_list>(<argument><expr><name>backupTypeFull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>timestamp</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>backupLabelCreate</name><argument_list>(<argument><expr><name>backupTypeFull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ClockError</name></expr></argument>,
            <argument><expr><literal type="string">"new backup label '20191203-193413F' is not later than latest backup label '20191203-193413F'\n"</literal>
            <literal type="string">"HINT: has the timezone changed?\n"</literal>
            <literal type="string">"HINT: is there clock skew?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when new label is in the past even with advanced time (from history)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name>zNewFmt</name><argument_list>(
                <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/backup.history/2019/%s.manifest.gz"</literal></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>backupLabelFormat</name><argument_list>(<argument><expr><name>backupTypeFull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>timestamp</name> <operator>+</operator> <literal type="number">3600</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>backupLabelCreate</name><argument_list>(<argument><expr><name>backupTypeFull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ClockError</name></expr></argument>,
            <argument><expr><literal type="string">"new backup label '20191203-193413F' is not later than latest backup label '20191203-203412F'\n"</literal>
            <literal type="string">"HINT: has the timezone changed?\n"</literal>
            <literal type="string">"HINT: is there clock skew?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"backupInit()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Set log level to detail</comment>
        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when backup from standby is not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptBackupStandby</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>backupInit</name><argument_list>(<argument><expr><call><name>infoBackupNew</name><argument_list>(<argument><expr><name>PG_VERSION_91</name></expr></argument>, <argument><expr><name>HRN_PG_SYSTEMID_91</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_91</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>ConfigError</name></expr></argument>, <argument><expr><literal type="string">"option 'backup-standby' not valid for PostgreSQL &lt; 9.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"warn and reset when backup from standby used in offline mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_92</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptBackupStandby</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>backupInit</name><argument_list>(<argument><expr><call><name>infoBackupNew</name><argument_list>(<argument><expr><name>PG_VERSION_92</name></expr></argument>, <argument><expr><name>HRN_PG_SYSTEMID_92</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_92</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"backup init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptBackupStandby</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check backup-standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: option backup-standby is enabled but backup is offline - backups will be performed from the primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when pg_control does not match stanza"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>backupInit</name><argument_list>(<argument><expr><call><name>infoBackupNew</name><argument_list>(<argument><expr><name>PG_VERSION_11</name></expr></argument>, <argument><expr><name>HRN_PG_SYSTEMID_11</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_11</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>BackupMismatchError</name></expr></argument>,
            <argument><expr><literal type="string">"PostgreSQL version 10, system-id "</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">" do not match stanza version 11, system-id"</literal>
                <literal type="string">" "</literal> <name>HRN_PG_SYSTEMID_11_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"HINT: is this the correct stanza?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>backupInit</name><argument_list>(<argument><expr><call><name>infoBackupNew</name><argument_list>(<argument><expr><name>PG_VERSION_10</name></expr></argument>, <argument><expr><name>HRN_PG_SYSTEMID_11</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_10</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>BackupMismatchError</name></expr></argument>,
            <argument><expr><literal type="string">"PostgreSQL version 10, system-id "</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">" do not match stanza version 10, system-id"</literal>
                <literal type="string">" "</literal> <name>HRN_PG_SYSTEMID_11_Z</name> <literal type="string">"\n"</literal>
            <literal type="string">"HINT: is this the correct stanza?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"reset stop-auto when PostgreSQL &lt; 9.3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_90</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStopAuto</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>backupInit</name><argument_list>(<argument><expr><call><name>infoBackupNew</name><argument_list>(<argument><expr><name>PG_VERSION_90</name></expr></argument>, <argument><expr><name>HRN_PG_SYSTEMID_90</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_90</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"backup init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptStopAuto</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check stop-auto"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   WARN: stop-auto option is only available in PostgreSQL &gt;= 9.3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"reset checksum-page when the cluster does not have checksums enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_93</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create stanza</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaCreate</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'test1' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptChecksumPage</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            <comment type="line">// Connect to primary</comment>
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_93, TEST_PATH <literal type="string">"/pg1"</literal>, false, NULL, NULL)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>dbFree</name><argument_list>(
                <argument><expr><call><name>backupInit</name><argument_list>(<argument><expr><call><name>infoBackupNew</name><argument_list>(<argument><expr><name>PG_VERSION_93</name></expr></argument>, <argument><expr><name>HRN_PG_SYSTEMID_93</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_93</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>dbPrimary</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"backup init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptChecksumPage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check checksum-page"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: checksum-page option set to true but checksums are not enabled on the cluster, resetting to false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"ok if cluster checksums are enabled and checksum-page is any value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control with page checksums</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_93</name></expr></argument>, <argument><expr><operator>.</operator><name>pageChecksum</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptChecksumPage</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            <comment type="line">// Connect to primary</comment>
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_93, TEST_PATH <literal type="string">"/pg1"</literal>, false, NULL, NULL)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>dbFree</name><argument_list>(
                <argument><expr><call><name>backupInit</name><argument_list>(<argument><expr><call><name>infoBackupNew</name><argument_list>(<argument><expr><name>PG_VERSION_93</name></expr></argument>, <argument><expr><name>HRN_PG_SYSTEMID_93</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_93</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>dbPrimary</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"backup init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptChecksumPage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check checksum-page"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control without page checksums</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_93</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            <comment type="line">// Connect to primary</comment>
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_93, TEST_PATH <literal type="string">"/pg1"</literal>, false, NULL, NULL)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>dbFree</name><argument_list>(
                <argument><expr><call><name>backupInit</name><argument_list>(<argument><expr><call><name>infoBackupNew</name><argument_list>(<argument><expr><name>PG_VERSION_93</name></expr></argument>, <argument><expr><name>HRN_PG_SYSTEMID_93</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_93</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>dbPrimary</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"backup init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptChecksumPage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check checksum-page"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"backupTime()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"sleep retries and stall error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_93</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create stanza</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaCreate</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'test1' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            <comment type="line">// Connect to primary</comment>
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_93, TEST_PATH <literal type="string">"/pg1"</literal>, false, NULL, NULL)</argument>,

            <comment type="line">// Advance the time slowly to force retries</comment>
            <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, <literal type="number">1575392588998</literal>)</argument>,
            <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, <literal type="number">1575392588999</literal>)</argument>,
            <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, <literal type="number">1575392589001</literal>)</argument>,

            <comment type="line">// Stall time to force an error</comment>
            <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, <literal type="number">1575392589998</literal>)</argument>,
            <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, <literal type="number">1575392589997</literal>)</argument>,
            <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, <literal type="number">1575392589998</literal>)</argument>,
            <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, <literal type="number">1575392589999</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <decl_stmt><decl><type><name>BackupData</name> <modifier>*</modifier></type><name>backupData</name> <init>= <expr><call><name>backupInit</name><argument_list>(
            <argument><expr><call><name>infoBackupNew</name><argument_list>(<argument><expr><name>PG_VERSION_93</name></expr></argument>, <argument><expr><name>HRN_PG_SYSTEMID_93</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_93</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>backupTime</name><argument_list>(<argument><expr><name>backupData</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1575392588</literal></expr></argument>, <argument><expr><literal type="string">"multiple tries for sleep"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>backupTime</name><argument_list>(<argument><expr><name>backupData</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>KernelError</name></expr></argument>, <argument><expr><literal type="string">"PostgreSQL clock has not advanced to the next second after 3 tries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>backupData</name><operator>-&gt;</operator><name>dbPrimary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"backupResumeFind()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><name>backupTypeFull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptCompress</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"cannot resume when manifest and copy are missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20191003-105320F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>backupResumeFind</name><argument_list>(<argument><expr><operator>(</operator><name>Manifest</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"find resumable backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: backup '20191003-105320F' cannot be resumed: partially deleted by prior resume or invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"cannot resume when resume is disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20191003-105320F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptResume</name></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><name>BOOL_FALSE_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument>storageRepoWrite()</argument>, <argument>STORAGE_REPO_BACKUP <literal type="string">"/20191003-105320F/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>backupResumeFind</name><argument_list>(<argument><expr><operator>(</operator><name>Manifest</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"find resumable backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: backup '20191003-105320F' cannot be resumed: resume is disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check backup path removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptResume</name></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><name>BOOL_TRUE_VAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"cannot resume when error on manifest load"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Manifest</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>manifest</name> <operator>=</operator> <call><name>manifestNewInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupType</name></name> <operator>=</operator> <name>backupTypeFull</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backrestVersion</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"BOGUS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument>storageRepoWrite()</argument>, <argument>STORAGE_REPO_BACKUP <literal type="string">"/20191003-105320F/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>, <argument><literal type="string">"X"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>backupResumeFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"find resumable backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: backup '20191003-105320F' cannot be resumed: unable to read"</literal>
                <literal type="string">" &lt;REPO:BACKUP&gt;/20191003-105320F/backup.manifest.copy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"cannot resume when pgBackRest version has changed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifestResume</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Manifest</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>manifestResume</name> <operator>=</operator> <call><name>manifestNewInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifestResume</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>info</name></name> <operator>=</operator> <call><name>infoNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifestResume</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupType</name></name> <operator>=</operator> <name>backupTypeFull</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifestResume</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabel</name></name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"20191003-105320F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifestResume</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>pgVersion</name></name> <operator>=</operator> <name>PG_VERSION_12</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <macro><name>manifestTargetAdd</name><argument_list>(<argument>manifestResume</argument>, <argument>&amp;(ManifestTarget){.name = MANIFEST_TARGET_PGDATA_STR</argument>, <argument>.path = STRDEF(<literal type="string">"/pg"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>manifestPathAdd</name><argument_list>(<argument>manifestResume</argument>, <argument>&amp;(ManifestPath){.name = MANIFEST_TARGET_PGDATA_STR}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>manifestFileAdd</name><argument_list>(<argument>manifestResume</argument>, <argument>&amp;(ManifestFile){.name = STRDEF(<literal type="string">"pg_data/"</literal> PG_FILE_PGVERSION)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>manifestSave</name><argument_list>(
            <argument><expr><name>manifestResume</name></expr></argument>,
            <argument><expr><call><name>storageWriteIo</name><argument_list>(
                <argument><expr><call><name>storageNewWriteP</name><argument_list>(
                    <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><macro><name>STRDEF</name><argument_list>(<argument>STORAGE_REPO_BACKUP <literal type="string">"/20191003-105320F/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>backupResumeFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"find resumable backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: backup '20191003-105320F' cannot be resumed:"</literal>
                <literal type="string">" new pgBackRest version 'BOGUS' does not match resumable pgBackRest version '"</literal> <name>PROJECT_VERSION</name> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check backup path removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backrestVersion</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>PROJECT_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"cannot resume when backup labels do not match (resumable is null)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupType</name></name> <operator>=</operator> <name>backupTypeFull</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabelPrior</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20191003-105320F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>manifestSave</name><argument_list>(
            <argument><expr><name>manifestResume</name></expr></argument>,
            <argument><expr><call><name>storageWriteIo</name><argument_list>(
                <argument><expr><call><name>storageNewWriteP</name><argument_list>(
                    <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><macro><name>STRDEF</name><argument_list>(<argument>STORAGE_REPO_BACKUP <literal type="string">"/20191003-105320F/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>backupResumeFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"find resumable backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: backup '20191003-105320F' cannot be resumed:"</literal>
                <literal type="string">" new prior backup label '&lt;undef&gt;' does not match resumable prior backup label '20191003-105320F'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check backup path removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabelPrior</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"cannot resume when backup labels do not match (new is null)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>manifest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupType</name></name> <operator>=</operator> <name>backupTypeFull</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>manifestResume</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabelPrior</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20191003-105320F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>manifestSave</name><argument_list>(
            <argument><expr><name>manifestResume</name></expr></argument>,
            <argument><expr><call><name>storageWriteIo</name><argument_list>(
                <argument><expr><call><name>storageNewWriteP</name><argument_list>(
                    <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><macro><name>STRDEF</name><argument_list>(<argument>STORAGE_REPO_BACKUP <literal type="string">"/20191003-105320F/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>backupResumeFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"find resumable backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: backup '20191003-105320F' cannot be resumed:"</literal>
                <literal type="string">" new prior backup label '20191003-105320F' does not match resumable prior backup label '&lt;undef&gt;'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check backup path removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>manifestResume</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupLabelPrior</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"cannot resume when compression does not match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>manifestResume</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionCompressType</name></name> <operator>=</operator> <name>compressTypeGz</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>manifestSave</name><argument_list>(
            <argument><expr><name>manifestResume</name></expr></argument>,
            <argument><expr><call><name>storageWriteIo</name><argument_list>(
                <argument><expr><call><name>storageNewWriteP</name><argument_list>(
                    <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><macro><name>STRDEF</name><argument_list>(<argument>STORAGE_REPO_BACKUP <literal type="string">"/20191003-105320F/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>backupResumeFind</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"find resumable backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: backup '20191003-105320F' cannot be resumed:"</literal>
                <literal type="string">" new compression 'none' does not match resumable compression 'gz'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check backup path removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>manifestResume</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>data</name><operator>.</operator><name>backupOptionCompressType</name></name> <operator>=</operator> <name>compressTypeNone</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"backupJobResult()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Set log level to detail</comment>
        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"report job error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ProtocolParallelJob</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><call><name>protocolParallelJobNew</name><argument_list>(<argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>protocolCommandNew</name><argument_list>(<argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>protocolParallelJobErrorSet</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>errorTypeCode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>AssertError</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"error message"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>currentPercentComplete</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>backupJobResult</name><argument_list>(<argument><expr><operator>(</operator><name>Manifest</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>job</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>currentPercentComplete</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"error message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"report host/100% progress on noop result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create job that skips file</comment>
        <expr_stmt><expr><name>job</name> <operator>=</operator> <call><name>protocolParallelJobNew</name><argument_list>(<argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>protocolCommandNew</name><argument_list>(<argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>resultPack</name> <init>= <expr><call><name>protocolPackNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>resultPack</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><name>resultPack</name></expr></argument>, <argument><expr><name>backupCopyResultNoOp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>resultPack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>resultPack</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>resultPack</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>resultPack</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>resultPack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>protocolParallelJobResultSet</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>pckReadNew</name><argument_list>(<argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name>resultPack</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create manifest with file</comment>
        <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Manifest</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>manifest</name> <operator>=</operator> <call><name>manifestNewInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(<argument>manifest</argument>, <argument>&amp;(ManifestFile){.name = STRDEF(<literal type="string">"pg_data/test"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>uint64_t</name></type> <name>sizeProgress</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>currentPercentComplete</name> <operator>=</operator> <literal type="number">4567</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>lockAcquire</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptExecId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lockTypeBackup</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"acquire backup lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>backupJobResult</name><argument_list>(<argument><expr><name>manifest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>job</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sizeProgress</name></expr></argument>,
            <argument><expr><operator>&amp;</operator><name>currentPercentComplete</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"log noop result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lockRelease</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"release backup lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00 DETAIL: match file from prior backup host:"</literal> <name>TEST_PATH</name> <literal type="string">"/test (0B, 100.00%)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Offline tests should only be used to test offline functionality and errors easily tested in offline mode</comment>
    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cmdBackup() offline"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Set log level to detail</comment>
        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Replace backup labels since the times are not deterministic</comment>
        <expr_stmt><expr><call><name>hrnLogReplaceAdd</name><argument_list>(<argument><expr><literal type="string">"[0-9]{8}-[0-9]{6}F_[0-9]{8}-[0-9]{6}I"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"INCR"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnLogReplaceAdd</name><argument_list>(<argument><expr><literal type="string">"[0-9]{8}-[0-9]{6}F_[0-9]{8}-[0-9]{6}D"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"DIFF"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnLogReplaceAdd</name><argument_list>(<argument><expr><literal type="string">"[0-9]{8}-[0-9]{6}F"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"FULL"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create stanza</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaCreate</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_90</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'test1' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when pg appears to be running"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_POSTMTRPID</name></expr></argument>, <argument><expr><literal type="string">"PID"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PgRunningError</name></expr></argument>,
            <argument><expr><literal type="string">"--no-online passed but "</literal> <name>PG_FILE_POSTMTRPID</name> <literal type="string">" exists - looks like "</literal> <name>PG_NAME</name> <literal type="string">" is running. Shut down "</literal> <name>PG_NAME</name> <literal type="string">" and"</literal>
                <literal type="string">" try again, or use --force."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   WARN: no prior backup exists, incr backup has been changed to full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"offline full backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptCompress</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptForce</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"postgresql.conf"</literal></expr></argument>, <argument><expr><literal type="string">"CONFIGSTUFF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG_FMT</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: no prior backup exists, incr backup has been changed to full\n"</literal>
            <literal type="string">"P00   WARN: --no-online passed and "</literal> <name>PG_FILE_POSTMTRPID</name> <literal type="string">" exists but --force was passed so backup will continue though"</literal>
                <literal type="string">" it looks like "</literal> <name>PG_NAME</name> <literal type="string">" is running and the backup will probably not be consistent\n"</literal>
            <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/global/pg_control (8KB, 99.86%%) checksum %s\n"</literal>
            <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/postgresql.conf (11B, 100.00%%) checksum"</literal>
                <literal type="string">" e3db315c260e79211b7b52587123b7aa060f30ab\n"</literal>
            <literal type="string">"P00   INFO: new backup label = [FULL-1]\n"</literal>
            <literal type="string">"P00   INFO: full backup size = 8KB, file total = 2"</literal></expr></argument>,
            <argument><expr><ternary><condition><expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr> ?</condition><then>
                <expr><operator>(</operator><ternary><condition><expr><call><name>TEST_BIG_ENDIAN</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"ec84602c8b4f62bd0ef10bd3dfcb04c3b3ce4a35"</literal></expr> </then><else>: <expr><literal type="string">"b7ec43e4646f5d06c95881df0c572630a1221377"</literal></expr></else></ternary><operator>)</operator></expr> </then><else>:
                <expr><literal type="string">"f21ff9abdcd1ec2f600d4ee8e5792c9b61eb2e37"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make pg no longer appear to be running</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_POSTMTRPID</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when no files have changed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptCompress</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><name>backupTypeDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>, <argument><expr><literal type="string">"no files have changed since the last backup - this seems unlikely"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: last backup label = [FULL-1], version = "</literal> <name>PROJECT_VERSION</name> <literal type="string">"\n"</literal>
            <literal type="string">"P00   WARN: diff backup cannot alter compress-type option to 'gz', reset to value in [FULL-1]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"offline incr backup to test unresumable backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptCompress</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptChecksumPage</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><name>backupTypeIncr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><literal type="string">"VER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: last backup label = [FULL-1], version = "</literal> <name>PROJECT_VERSION</name> <literal type="string">"\n"</literal>
            <literal type="string">"P00   WARN: incr backup cannot alter 'checksum-page' option to 'true', reset to 'false' from [FULL-1]\n"</literal>
            <literal type="string">"P00   WARN: backup '[DIFF-1]' cannot be resumed: new backup type 'incr' does not match resumable backup type 'diff'\n"</literal>
            <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/PG_VERSION (3B, 100.00%) checksum c8663c2525f44b6d9c687fbceb4aafc63ed8b451\n"</literal>
            <literal type="string">"P00 DETAIL: reference pg_data/global/pg_control to [FULL-1]\n"</literal>
            <literal type="string">"P00 DETAIL: reference pg_data/postgresql.conf to [FULL-1]\n"</literal>
            <literal type="string">"P00   INFO: new backup label = [INCR-1]\n"</literal>
            <literal type="string">"P00   INFO: incr backup size = 3B, file total = 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"offline diff backup to test prior backup must be full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptCompress</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><name>backupTypeDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>sleepMSec</name><argument_list>(<argument><expr><name>MSEC_PER_SEC</name> <operator>-</operator> <operator>(</operator><call><name>timeMSec</name><argument_list>()</argument_list></call> <operator>%</operator> <name>MSEC_PER_SEC</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><literal type="string">"VR2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: last backup label = [FULL-1], version = "</literal> <name>PROJECT_VERSION</name> <literal type="string">"\n"</literal>
            <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/PG_VERSION (3B, 100.00%) checksum 6f1894088c578e4f0b9888e8e8a997d93cbbc0c5\n"</literal>
            <literal type="string">"P00 DETAIL: reference pg_data/global/pg_control to [FULL-1]\n"</literal>
            <literal type="string">"P00 DETAIL: reference pg_data/postgresql.conf to [FULL-1]\n"</literal>
            <literal type="string">"P00   INFO: new backup label = [DIFF-2]\n"</literal>
            <literal type="string">"P00   INFO: diff backup size = 3B, file total = 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"only repo2 configured"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create stanza on a second repo</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_CIPHER_PASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaCreate</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'test1' on repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set log level to warn</comment>
        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelWarn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// With repo2 the only repo configured, ensure it is chosen by confirming diff is changed to full due to no prior backups</comment>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><name>backupTypeDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   WARN: no prior backup exists, diff backup has been changed to full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"multi-repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set log level to detail</comment>
        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add repo1 to the configuration</comment>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: repo option not specified, defaulting to repo1\n"</literal>
            <literal type="string">"P00   INFO: last backup label = [FULL-1], version = "</literal> <name>PROJECT_VERSION</name> <literal type="string">"\n"</literal>
            <literal type="string">"P00   WARN: diff backup cannot alter compress-type option to 'gz', reset to value in [FULL-1]\n"</literal>
            <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/PG_VERSION (3B, 100.00%) checksum 6f1894088c578e4f0b9888e8e8a997d93cbbc0c5\n"</literal>
            <literal type="string">"P00 DETAIL: reference pg_data/global/pg_control to [FULL-1]\n"</literal>
            <literal type="string">"P00 DETAIL: reference pg_data/postgresql.conf to [FULL-1]\n"</literal>
            <literal type="string">"P00   INFO: new backup label = [DIFF-3]\n"</literal>
            <literal type="string">"P00   INFO: diff backup size = 3B, file total = 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"multi-repo - specify repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepo</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><literal type="string">"VER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>backupCount</name> <init>= <expr><call><name>strLstSize</name><argument_list>(<argument><expr><call><name>storageListP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_PATH_BACKUP</name> <literal type="string">"/test1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: last backup label = [FULL-2], version = "</literal> <name>PROJECT_VERSION</name> <literal type="string">"\n"</literal>
            <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/PG_VERSION (3B, 100.00%) checksum c8663c2525f44b6d9c687fbceb4aafc63ed8b451\n"</literal>
            <literal type="string">"P00 DETAIL: reference pg_data/global/pg_control to [FULL-2]\n"</literal>
            <literal type="string">"P00 DETAIL: reference pg_data/postgresql.conf to [FULL-2]\n"</literal>
            <literal type="string">"P00   INFO: new backup label = [DIFF-4]\n"</literal>
            <literal type="string">"P00   INFO: diff backup size = 3B, file total = 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><call><name>storageListP</name><argument_list>(<argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_PATH_BACKUP</name> <literal type="string">"/test1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>backupCount</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
            <argument><expr><literal type="string">"new backup repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Cleanup</comment>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>harnessLogLevelReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cmdBackup() online"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pg1Path</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>repoPath</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pg2Path</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pg2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set log level to detail</comment>
        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Replace percent complete and backup size since they can cause a lot of churn when files are added/removed</comment>
        <expr_stmt><expr><call><name>hrnLogReplaceAdd</name><argument_list>(<argument><expr><literal type="string">", [0-9]{1,3}.[0-9]{1,2}%\\)"</literal></expr></argument>, <argument><expr><literal type="string">"[0-9].+%"</literal></expr></argument>, <argument><expr><literal type="string">"PCT"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnLogReplaceAdd</name><argument_list>(<argument><expr><literal type="string">" backup size = [0-9]+[A-Z]+"</literal></expr></argument>, <argument><expr><literal type="string">"[^ ]+$"</literal></expr></argument>, <argument><expr><literal type="string">"SIZE"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Replace checksums since they can differ between architectures (e.g. 32/64 bit)</comment>
        <expr_stmt><expr><call><name>hrnLogReplaceAdd</name><argument_list>(<argument><expr><literal type="string">"\\) checksum [a-f0-9]{40}"</literal></expr></argument>, <argument><expr><literal type="string">"[a-f0-9]{40}$"</literal></expr></argument>, <argument><expr><literal type="string">"SHA1"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Backup start time epoch.  The idea is to not have backup times (and therefore labels) ever change.  Each backup added</comment>
        <comment type="line">// should be separated by 100,000 seconds (1,000,000 after stanza-upgrade) but after the initial assignments this will only</comment>
        <comment type="line">// be possible at the beginning and the end, so new backups added in the middle will average the start times of the prior</comment>
        <comment type="line">// and next backup to get their start time.  Backups added to the beginning of the test will need to subtract from the</comment>
        <comment type="line">// epoch.</comment>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACKUP_EPOCH</name></cpp:macro>                                        <cpp:value>1570000000</cpp:value></cpp:define>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"online 9.5 resume uncompressed full backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>time_t</name></type> <name>backupTimeStart</name> <init>= <expr><name>BACKUP_EPOCH</name></expr></init></decl>;</decl_stmt>

        <block>{<block_content>
            <comment type="line">// Create stanza</comment>
            <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pg1Path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaCreate</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Create pg_control</comment>
            <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_95</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-create for stanza 'test1' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Load options</comment>
            <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pg1Path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><name>backupTypeFull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStopAuto</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptCompress</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveCheck</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Add files</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"postgresql.conf"</literal></expr></argument>, <argument><expr><literal type="string">"CONFIGSTUFF"</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><name>PG_VERSION_95_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>pgWalPath</name><argument_list>(<argument><expr><name>PG_VERSION_95</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>noParentCreate</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Create a backup manifest that looks like a halted backup manifest</comment>
            <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifestResume</name> <init>= <expr><call><name>manifestNewBuild</name><argument_list>(
                <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_95</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_95</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ManifestData</name> <modifier>*</modifier></type><name>manifestResumeData</name> <init>= <expr><operator>(</operator><name>ManifestData</name> <operator>*</operator><operator>)</operator><call><name>manifestData</name><argument_list>(<argument><expr><name>manifestResume</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>manifestResumeData</name><operator>-&gt;</operator><name>backupType</name></name> <operator>=</operator> <name>backupTypeFull</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>resumeLabel</name> <init>= <expr><call><name>backupLabelCreate</name><argument_list>(<argument><expr><name>backupTypeFull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>backupTimeStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>manifestBackupLabelSet</name><argument_list>(<argument><expr><name>manifestResume</name></expr></argument>, <argument><expr><name>resumeLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Copy a file to be resumed that has not changed in the repo</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_COPY</name><argument_list>(
                <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/pg_data/PG_VERSION"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>resumeLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>ManifestFilePack</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>filePack</name> <init>= <expr><call><name>manifestFilePackFindInternal</name><argument_list>(<argument><expr><name>manifestResume</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/PG_VERSION"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ManifestFile</name></type> <name>file</name> <init>= <expr><call><name>manifestFileUnpack</name><argument_list>(<argument><expr><name>manifestResume</name></expr></argument>, <argument><expr><operator>*</operator><name>filePack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>checksumSha1</name></name></expr></argument>, <argument><expr><literal type="string">"06d06bb31b570b94d7b4325f511f853dbe771c21"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>manifestFilePackUpdate</name><argument_list>(<argument><expr><name>manifestResume</name></expr></argument>, <argument><expr><name>filePack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Save the resume manifest</comment>
            <expr_stmt><expr><call><name>manifestSave</name><argument_list>(
                <argument><expr><name>manifestResume</name></expr></argument>,
                <argument><expr><call><name>storageWriteIo</name><argument_list>(
                    <argument><expr><call><name>storageNewWriteP</name><argument_list>(
                        <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><macro><name>strNewFmt</name><argument_list>(<argument>STORAGE_REPO_BACKUP <literal type="string">"/%s/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>, <argument>strZ(resumeLabel)</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Run backup</comment>
            <expr_stmt><expr><call><name>testBackupPqScriptP</name><argument_list>(<argument><expr><name>PG_VERSION_95</name></expr></argument>, <argument><expr><name>backupTimeStart</name></expr></argument>, <argument><expr><operator>.</operator><name>noArchiveCheck</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>noWal</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
                <argument><expr><literal type="string">"P00   INFO: execute exclusive backup start: backup begins after the next regular checkpoint completes\n"</literal>
                <literal type="string">"P00   INFO: backup start archive = 0000000105D944C000000000, lsn = 5d944c0/0\n"</literal>
                <literal type="string">"P00   WARN: resumable backup 20191002-070640F of same type exists -- invalid files will be removed then the backup"</literal>
                    <literal type="string">" will resume\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/global/pg_control (8KB, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/postgresql.conf (11B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: checksum resumed file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/PG_VERSION (3B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P00   INFO: execute exclusive backup stop and wait for all WAL segments to archive\n"</literal>
                <literal type="string">"P00   INFO: backup stop archive = 0000000105D944C000000000, lsn = 5d944c0/800000\n"</literal>
                <literal type="string">"P00   INFO: new backup label = 20191002-070640F\n"</literal>
                <literal type="string">"P00   INFO: full backup size = [SIZE], file total = 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
                <argument><expr><call><name>testBackupValidate</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/latest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">". {link, d=20191002-070640F}\n"</literal>
                <literal type="string">"pg_data {path}\n"</literal>
                <literal type="string">"pg_data/PG_VERSION {file, s=3}\n"</literal>
                <literal type="string">"pg_data/global {path}\n"</literal>
                <literal type="string">"pg_data/global/pg_control {file, s=8192}\n"</literal>
                <literal type="string">"pg_data/pg_xlog {path}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf {file, s=11}\n"</literal>
                <literal type="string">"--------\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\""</literal> <name>TEST_PATH</name> <literal type="string">"/pg1\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/PG_VERSION={\"checksum\":\"06d06bb31b570b94d7b4325f511f853dbe771c21\",\"size\":3"</literal>
                    <literal type="string">",\"timestamp\":1570000000}\n"</literal>
                <literal type="string">"pg_data/global/pg_control={\"size\":8192,\"timestamp\":1570000000}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"checksum\":\"e3db315c260e79211b7b52587123b7aa060f30ab\",\"size\":11"</literal>
                    <literal type="string">",\"timestamp\":1570000000}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <literal type="string">"pg_data/global={}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={}\n"</literal></expr></argument>,
                <argument><expr><literal type="string">"compare file list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"online resumed compressed 9.5 full backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Backup start time</comment>
        <expr_stmt><expr><name>backupTimeStart</name> <operator>=</operator> <name>BACKUP_EPOCH</name> <operator>+</operator> <literal type="number">100000</literal></expr>;</expr_stmt>

        <block>{<block_content>
            <comment type="line">// Load options</comment>
            <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pg1Path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><name>backupTypeFull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStopAuto</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveCopy</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Create a backup manifest that looks like a halted backup manifest</comment>
            <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifestResume</name> <init>= <expr><call><name>manifestNewBuild</name><argument_list>(
                <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_95</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_95</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ManifestData</name> <modifier>*</modifier></type><name>manifestResumeData</name> <init>= <expr><operator>(</operator><name>ManifestData</name> <operator>*</operator><operator>)</operator><call><name>manifestData</name><argument_list>(<argument><expr><name>manifestResume</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>manifestResumeData</name><operator>-&gt;</operator><name>backupType</name></name> <operator>=</operator> <name>backupTypeFull</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifestResumeData</name><operator>-&gt;</operator><name>backupOptionCompressType</name></name> <operator>=</operator> <name>compressTypeGz</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>resumeLabel</name> <init>= <expr><call><name>backupLabelCreate</name><argument_list>(<argument><expr><name>backupTypeFull</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>backupTimeStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>manifestBackupLabelSet</name><argument_list>(<argument><expr><name>manifestResume</name></expr></argument>, <argument><expr><name>resumeLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// File exists in cluster and repo but not in the resume manifest</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"not-in-resume"</literal></expr></argument>, <argument><expr><literal type="string">"TEST"</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
                <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/pg_data/not-in-resume.gz"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>resumeLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Remove checksum from file so it won't be resumed</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
                <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/pg_data/global/pg_control.gz"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>resumeLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>ManifestFilePack</name> <modifier>*</modifier><modifier>*</modifier><specifier>const</specifier></type> <name>filePack</name> <init>= <expr><call><name>manifestFilePackFindInternal</name><argument_list>(<argument><expr><name>manifestResume</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_data/global/pg_control"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ManifestFile</name></type> <name>file</name> <init>= <expr><call><name>manifestFileUnpack</name><argument_list>(<argument><expr><name>manifestResume</name></expr></argument>, <argument><expr><operator>*</operator><name>filePack</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>file</name><operator>.</operator><name>checksumSha1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>manifestFilePackUpdate</name><argument_list>(<argument><expr><name>manifestResume</name></expr></argument>, <argument><expr><name>filePack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Size does not match between cluster and resume manifest</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"size-mismatch"</literal></expr></argument>, <argument><expr><literal type="string">"TEST"</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
                <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/pg_data/size-mismatch.gz"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>resumeLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifestResume</argument>, <argument>&amp;(ManifestFile){
                    .name = STRDEF(<literal type="string">"pg_data/size-mismatch"</literal>)</argument>, <argument>.checksumSha1 = <literal type="string">"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</literal></argument>,
                    <argument>.size = <literal type="number">33</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// Time does not match between cluster and resume manifest</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"time-mismatch"</literal></expr></argument>, <argument><expr><literal type="string">"TEST"</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
                <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/pg_data/time-mismatch.gz"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>resumeLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifestResume</argument>, <argument>&amp;(ManifestFile){
                    .name = STRDEF(<literal type="string">"pg_data/time-mismatch"</literal>)</argument>, <argument>.checksumSha1 = <literal type="string">"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"</literal></argument>, <argument>.size = <literal type="number">4</literal></argument>,
                    <argument>.timestamp = backupTimeStart - <literal type="number">1</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// Size is zero in cluster and resume manifest. ??? We'd like to remove this requirement after the migration.</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"zero-size"</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
                <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/pg_data/zero-size.gz"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>resumeLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ZERO-SIZE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifestResume</argument>, <argument>&amp;(ManifestFile){.name = STRDEF(<literal type="string">"pg_data/zero-size"</literal>)</argument>, <argument>.size = <literal type="number">0</literal></argument>, <argument>.timestamp = backupTimeStart}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// Path is not in manifest</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/pg_data/bogus_path"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>resumeLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// File is not in manifest</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
                <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/pg_data/global/bogus.gz"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>resumeLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// File has incorrect compression type</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/pg_data/global/bogus"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>resumeLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Save the resume manifest</comment>
            <expr_stmt><expr><call><name>manifestSave</name><argument_list>(
                <argument><expr><name>manifestResume</name></expr></argument>,
                <argument><expr><call><name>storageWriteIo</name><argument_list>(
                    <argument><expr><call><name>storageNewWriteP</name><argument_list>(
                        <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><macro><name>strNewFmt</name><argument_list>(<argument>STORAGE_REPO_BACKUP <literal type="string">"/%s/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>, <argument>strZ(resumeLabel)</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Disable storageFeaturePath so paths will not be created before files are copied</comment>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Storage</name> <operator>*</operator><operator>)</operator><call><name>storageRepoWrite</name><argument_list>()</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>pub</name><operator>.</operator><name>interface</name><operator>.</operator><name>feature</name></name> <operator>^=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>storageFeaturePath</name></expr>;</expr_stmt>

            <comment type="line">// Disable storageFeaturePathSync so paths will not be synced</comment>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Storage</name> <operator>*</operator><operator>)</operator><call><name>storageRepoWrite</name><argument_list>()</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>pub</name><operator>.</operator><name>interface</name><operator>.</operator><name>feature</name></name> <operator>^=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>storageFeaturePathSync</name></expr>;</expr_stmt>

            <comment type="line">// Run backup</comment>
            <expr_stmt><expr><call><name>testBackupPqScriptP</name><argument_list>(<argument><expr><name>PG_VERSION_95</name></expr></argument>, <argument><expr><name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Enable storage features</comment>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Storage</name> <operator>*</operator><operator>)</operator><call><name>storageRepoWrite</name><argument_list>()</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>pub</name><operator>.</operator><name>interface</name><operator>.</operator><name>feature</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>storageFeaturePath</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Storage</name> <operator>*</operator><operator>)</operator><call><name>storageRepoWrite</name><argument_list>()</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>pub</name><operator>.</operator><name>interface</name><operator>.</operator><name>feature</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>storageFeaturePathSync</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
                <argument><expr><literal type="string">"P00   INFO: execute exclusive backup start: backup begins after the next regular checkpoint completes\n"</literal>
                <literal type="string">"P00   INFO: backup start archive = 0000000105D95D3000000000, lsn = 5d95d30/0\n"</literal>
                <literal type="string">"P00   INFO: check archive for prior segment 0000000105D95D2F000000FF\n"</literal>
                <literal type="string">"P00   WARN: resumable backup 20191003-105320F of same type exists -- invalid files will be removed then the backup"</literal>
                    <literal type="string">" will resume\n"</literal>
                <literal type="string">"P00 DETAIL: remove path '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/test1/20191003-105320F/pg_data/bogus_path' from resumed"</literal>
                    <literal type="string">" backup\n"</literal>
                <literal type="string">"P00 DETAIL: remove file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/test1/20191003-105320F/pg_data/global/bogus' from resumed"</literal>
                    <literal type="string">" backup (mismatched compression type)\n"</literal>
                <literal type="string">"P00 DETAIL: remove file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/test1/20191003-105320F/pg_data/global/bogus.gz' from resumed"</literal>
                    <literal type="string">" backup (missing in manifest)\n"</literal>
                <literal type="string">"P00 DETAIL: remove file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/test1/20191003-105320F/pg_data/global/pg_control.gz' from"</literal>
                    <literal type="string">" resumed backup (no checksum in resumed manifest)\n"</literal>
                <literal type="string">"P00 DETAIL: remove file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/test1/20191003-105320F/pg_data/not-in-resume.gz' from resumed"</literal>
                    <literal type="string">" backup (missing in resumed manifest)\n"</literal>
                <literal type="string">"P00 DETAIL: remove file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/test1/20191003-105320F/pg_data/size-mismatch.gz' from resumed"</literal>
                    <literal type="string">" backup (mismatched size)\n"</literal>
                <literal type="string">"P00 DETAIL: remove file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/test1/20191003-105320F/pg_data/time-mismatch.gz' from resumed"</literal>
                    <literal type="string">" backup (mismatched timestamp)\n"</literal>
                <literal type="string">"P00 DETAIL: remove file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/test1/20191003-105320F/pg_data/zero-size.gz' from resumed"</literal>
                    <literal type="string">" backup (zero size)\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/global/pg_control (8KB, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/postgresql.conf (11B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/time-mismatch (4B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/size-mismatch (4B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/not-in-resume (4B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/PG_VERSION (3B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/zero-size (0B, [PCT])\n"</literal>
                <literal type="string">"P00   INFO: execute exclusive backup stop and wait for all WAL segments to archive\n"</literal>
                <literal type="string">"P00   INFO: backup stop archive = 0000000105D95D3000000000, lsn = 5d95d30/800000\n"</literal>
                <literal type="string">"P00   INFO: check archive for segment(s) 0000000105D95D3000000000:0000000105D95D3000000000\n"</literal>
                <literal type="string">"P00 DETAIL: copy segment 0000000105D95D3000000000 to backup\n"</literal>
                <literal type="string">"P00   INFO: new backup label = 20191003-105320F\n"</literal>
                <literal type="string">"P00   INFO: full backup size = [SIZE], file total = 8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
                <argument><expr><call><name>testBackupValidate</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/latest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">". {link, d=20191003-105320F}\n"</literal>
                <literal type="string">"pg_data {path}\n"</literal>
                <literal type="string">"pg_data/PG_VERSION.gz {file, s=3}\n"</literal>
                <literal type="string">"pg_data/global {path}\n"</literal>
                <literal type="string">"pg_data/global/pg_control.gz {file, s=8192}\n"</literal>
                <literal type="string">"pg_data/not-in-resume.gz {file, s=4}\n"</literal>
                <literal type="string">"pg_data/pg_xlog {path}\n"</literal>
                <literal type="string">"pg_data/pg_xlog/0000000105D95D3000000000.gz {file, s=16777216}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf.gz {file, s=11}\n"</literal>
                <literal type="string">"pg_data/size-mismatch.gz {file, s=4}\n"</literal>
                <literal type="string">"pg_data/time-mismatch.gz {file, s=4}\n"</literal>
                <literal type="string">"pg_data/zero-size.gz {file, s=0}\n"</literal>
                <literal type="string">"--------\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\""</literal> <name>TEST_PATH</name> <literal type="string">"/pg1\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/PG_VERSION={\"checksum\":\"06d06bb31b570b94d7b4325f511f853dbe771c21\",\"size\":3"</literal>
                    <literal type="string">",\"timestamp\":1570000000}\n"</literal>
                <literal type="string">"pg_data/global/pg_control={\"size\":8192,\"timestamp\":1570100000}\n"</literal>
                <literal type="string">"pg_data/not-in-resume={\"checksum\":\"984816fd329622876e14907634264e6f332e9fb3\",\"size\":4"</literal>
                    <literal type="string">",\"timestamp\":1570100000}\n"</literal>
                <literal type="string">"pg_data/pg_xlog/0000000105D95D3000000000={\"size\":16777216,\"timestamp\":1570100002}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"checksum\":\"e3db315c260e79211b7b52587123b7aa060f30ab\",\"size\":11"</literal>
                    <literal type="string">",\"timestamp\":1570000000}\n"</literal>
                <literal type="string">"pg_data/size-mismatch={\"checksum\":\"984816fd329622876e14907634264e6f332e9fb3\",\"size\":4"</literal>
                    <literal type="string">",\"timestamp\":1570100000}\n"</literal>
                <literal type="string">"pg_data/time-mismatch={\"checksum\":\"984816fd329622876e14907634264e6f332e9fb3\",\"size\":4"</literal>
                    <literal type="string">",\"timestamp\":1570100000}\n"</literal>
                <literal type="string">"pg_data/zero-size={\"size\":0,\"timestamp\":1570100000}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <literal type="string">"pg_data/global={}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={}\n"</literal></expr></argument>,
                <argument><expr><literal type="string">"compare file list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Remove test files</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"not-in-resume"</literal></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"size-mismatch"</literal></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"time-mismatch"</literal></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"zero-size"</literal></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"online resumed compressed 9.5 diff backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>backupTimeStart</name> <operator>=</operator> <name>BACKUP_EPOCH</name> <operator>+</operator> <literal type="number">200000</literal></expr>;</expr_stmt>

        <block>{<block_content>
            <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pg1Path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><name>backupTypeDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptCompress</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStopAuto</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHardlink</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Load the previous manifest and null out the checksum-page option to be sure it gets set to false in this backup</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>manifestPriorFile</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/latest/"</literal> <name>BACKUP_MANIFEST_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifestPrior</name> <init>= <expr><call><name>manifestNewLoad</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>manifestPriorFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ManifestData</name> <operator>*</operator><operator>)</operator><call><name>manifestData</name><argument_list>(<argument><expr><name>manifestPrior</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>backupOptionChecksumPage</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>manifestSave</name><argument_list>(<argument><expr><name>manifestPrior</name></expr></argument>, <argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>manifestPriorFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Create a backup manifest that looks like a halted backup manifest</comment>
            <decl_stmt><decl><type><name>Manifest</name> <modifier>*</modifier></type><name>manifestResume</name> <init>= <expr><call><name>manifestNewBuild</name><argument_list>(
                <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_95</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_95</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ManifestData</name> <modifier>*</modifier></type><name>manifestResumeData</name> <init>= <expr><operator>(</operator><name>ManifestData</name> <operator>*</operator><operator>)</operator><call><name>manifestData</name><argument_list>(<argument><expr><name>manifestResume</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>manifestResumeData</name><operator>-&gt;</operator><name>backupType</name></name> <operator>=</operator> <name>backupTypeDiff</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifestResumeData</name><operator>-&gt;</operator><name>backupLabelPrior</name></name> <operator>=</operator> <call><name>manifestData</name><argument_list>(<argument><expr><name>manifestPrior</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>backupLabel</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>manifestResumeData</name><operator>-&gt;</operator><name>backupOptionCompressType</name></name> <operator>=</operator> <name>compressTypeGz</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>resumeLabel</name> <init>= <expr><call><name>backupLabelCreate</name><argument_list>(
                <argument><expr><name>backupTypeDiff</name></expr></argument>, <argument><expr><call><name>manifestData</name><argument_list>(<argument><expr><name>manifestPrior</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>backupLabel</name></expr></argument>, <argument><expr><name>backupTimeStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>manifestBackupLabelSet</name><argument_list>(<argument><expr><name>manifestResume</name></expr></argument>, <argument><expr><name>resumeLabel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name><name>manifestResume</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>referenceList</name></name></expr></argument>, <argument><expr><literal type="string">"BOGUS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Reference in manifest</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/pg_data/PG_VERSION.gz"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>resumeLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Reference in resumed manifest</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"resume-ref"</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/pg_data/resume-ref.gz"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>resumeLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifestResume</argument>, <argument>&amp;(ManifestFile){.name = STRDEF(<literal type="string">"pg_data/resume-ref"</literal>)</argument>, <argument>.size = <literal type="number">0</literal></argument>, <argument>.reference = STRDEF(<literal type="string">"BOGUS"</literal>)}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// Time does not match between cluster and resume manifest (but resume because time is in future so delta enabled). Note</comment>
            <comment type="line">// also that the repo file is intentionally corrupt to generate a warning about corruption in the repository.</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"time-mismatch2"</literal></expr></argument>, <argument><expr><literal type="string">"TEST"</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name> <operator>+</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
                <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/pg_data/time-mismatch2.gz"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>resumeLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name>manifestFileAdd</name><argument_list>(
                <argument>manifestResume</argument>, <argument>&amp;(ManifestFile){
                    .name = STRDEF(<literal type="string">"pg_data/time-mismatch2"</literal>)</argument>, <argument>.checksumSha1 = <literal type="string">"984816fd329622876e14907634264e6f332e9fb3"</literal></argument>, <argument>.size = <literal type="number">4</literal></argument>,
                    <argument>.timestamp = backupTimeStart}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

            <comment type="line">// Links are always removed on resume</comment>
            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
                <argument><expr><call><name>symlink</name><argument_list>(
                    <argument><expr><literal type="string">".."</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/pg_data/link"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>resumeLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Special files should not be in the repo</comment>
            <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(
                <argument><expr><literal type="string">"mkfifo -m 666 %s"</literal></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/%s/pg_data/pipe"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>resumeLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Save the resume manifest</comment>
            <expr_stmt><expr><call><name>manifestSave</name><argument_list>(
                <argument><expr><name>manifestResume</name></expr></argument>,
                <argument><expr><call><name>storageWriteIo</name><argument_list>(
                    <argument><expr><call><name>storageNewWriteP</name><argument_list>(
                        <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><macro><name>strNewFmt</name><argument_list>(<argument>STORAGE_REPO_BACKUP <literal type="string">"/%s/"</literal> BACKUP_MANIFEST_FILE INFO_COPY_EXT</argument>, <argument>strZ(resumeLabel)</argument>)</argument_list></macro></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Run backup</comment>
            <expr_stmt><expr><call><name>testBackupPqScriptP</name><argument_list>(<argument><expr><name>PG_VERSION_95</name></expr></argument>, <argument><expr><name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Check log</comment>
            <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
                <argument><expr><literal type="string">"P00   INFO: last backup label = 20191003-105320F, version = "</literal> <name>PROJECT_VERSION</name> <literal type="string">"\n"</literal>
                <literal type="string">"P00   WARN: diff backup cannot alter compress-type option to 'none', reset to value in 20191003-105320F\n"</literal>
                <literal type="string">"P00   INFO: execute exclusive backup start: backup begins after the next regular checkpoint completes\n"</literal>
                <literal type="string">"P00   INFO: backup start archive = 0000000105D9759000000000, lsn = 5d97590/0\n"</literal>
                <literal type="string">"P00   INFO: check archive for prior segment 0000000105D9758F000000FF\n"</literal>
                <literal type="string">"P00   WARN: file 'time-mismatch2' has timestamp (1570200100) in the future (relative to copy start 1570200000),"</literal>
                    <literal type="string">" enabling delta checksum\n"</literal>
                <literal type="string">"P00   WARN: resumable backup 20191003-105320F_20191004-144000D of same type exists -- invalid files will be"</literal>
                    <literal type="string">" removed then the backup will resume\n"</literal>
                <literal type="string">"P00 DETAIL: remove file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/test1/20191003-105320F_20191004-144000D/pg_data/PG_VERSION.gz'"</literal>
                    <literal type="string">" from resumed backup (reference in manifest)\n"</literal>
                <literal type="string">"P00   WARN: remove special file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/test1/20191003-105320F_20191004-144000D/pg_data/pipe'"</literal>
                    <literal type="string">" from resumed backup\n"</literal>
                <literal type="string">"P00 DETAIL: remove file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/backup/test1/20191003-105320F_20191004-144000D/pg_data/resume-ref.gz'"</literal>
                    <literal type="string">" from resumed backup (reference in resumed manifest)\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/global/pg_control (8KB, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: match file from prior backup "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/postgresql.conf (11B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P00   WARN: resumed backup file pg_data/time-mismatch2 does not have expected checksum"</literal>
                    <literal type="string">" 984816fd329622876e14907634264e6f332e9fb3. The file will be recopied and backup will continue but this may be"</literal>
                    <literal type="string">" an issue unless the resumed backup path in the repository is known to be corrupted.\n"</literal>
                <literal type="string">"            NOTE: this does not indicate a problem with the PostgreSQL page checksums.\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/time-mismatch2 (4B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: match file from prior backup "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/PG_VERSION (3B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/resume-ref (0B, [PCT])\n"</literal>
                <literal type="string">"P00 DETAIL: hardlink pg_data/PG_VERSION to 20191003-105320F\n"</literal>
                <literal type="string">"P00 DETAIL: hardlink pg_data/postgresql.conf to 20191003-105320F\n"</literal>
                <literal type="string">"P00   INFO: execute exclusive backup stop and wait for all WAL segments to archive\n"</literal>
                <literal type="string">"P00   INFO: backup stop archive = 0000000105D9759000000000, lsn = 5d97590/800000\n"</literal>
                    <literal type="string">"P00   INFO: check archive for segment(s) 0000000105D9759000000000:0000000105D9759000000000\n"</literal>
                <literal type="string">"P00   INFO: new backup label = 20191003-105320F_20191004-144000D\n"</literal>
                <literal type="string">"P00   INFO: diff backup size = [SIZE], file total = 5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Check repo directory</comment>
            <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
                <argument><expr><call><name>testBackupValidate</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/latest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">". {link, d=20191003-105320F_20191004-144000D}\n"</literal>
                <literal type="string">"pg_data {path}\n"</literal>
                <literal type="string">"pg_data/PG_VERSION.gz {file, s=3}\n"</literal>
                <literal type="string">"pg_data/global {path}\n"</literal>
                <literal type="string">"pg_data/global/pg_control.gz {file, s=8192}\n"</literal>
                <literal type="string">"pg_data/pg_xlog {path}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf.gz {file, s=11}\n"</literal>
                <literal type="string">"pg_data/resume-ref.gz {file, s=0}\n"</literal>
                <literal type="string">"pg_data/time-mismatch2.gz {file, s=4}\n"</literal>
                <literal type="string">"--------\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\""</literal> <name>TEST_PATH</name> <literal type="string">"/pg1\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/PG_VERSION={\"checksum\":\"06d06bb31b570b94d7b4325f511f853dbe771c21\",\"reference\":\"20191003-105320F\""</literal>
                    <literal type="string">",\"size\":3,\"timestamp\":1570000000}\n"</literal>
                <literal type="string">"pg_data/global/pg_control={\"size\":8192,\"timestamp\":1570200000}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"checksum\":\"e3db315c260e79211b7b52587123b7aa060f30ab\""</literal>
                    <literal type="string">",\"reference\":\"20191003-105320F\",\"size\":11,\"timestamp\":1570000000}\n"</literal>
                <literal type="string">"pg_data/resume-ref={\"size\":0,\"timestamp\":1570200000}\n"</literal>
                <literal type="string">"pg_data/time-mismatch2={\"checksum\":\"984816fd329622876e14907634264e6f332e9fb3\",\"size\":4"</literal>
                    <literal type="string">",\"timestamp\":1570200100}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <literal type="string">"pg_data/global={}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={}\n"</literal></expr></argument>,
                <argument><expr><literal type="string">"compare file list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Remove test files</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"resume-ref"</literal></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"time-mismatch2"</literal></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"online 9.6 backup-standby full backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>backupTimeStart</name> <operator>=</operator> <name>BACKUP_EPOCH</name> <operator>+</operator> <literal type="number">1200000</literal></expr>;</expr_stmt>

        <block>{<block_content>
            <comment type="line">// Update pg_control</comment>
            <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Update version</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><name>PG_VERSION_96_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Upgrade stanza</comment>
            <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pg1Path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaUpgrade</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>cmdStanzaUpgrade</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-upgrade for stanza 'test1' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Load options</comment>
            <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pg1Path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>pg2Path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"5433"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptCompress</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptBackupStandby</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStartFast</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveCopy</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Add pg_control to standby</comment>
            <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Create file to copy from the standby. This file will be zero-length on the primary and non-zero-length on the standby</comment>
            <comment type="line">// but no bytes will be copied.</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/1"</literal></expr></argument>, <argument><expr><literal type="string">"1234"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Create file to copy from the standby. This file will be smaller on the primary than the standby and have no common</comment>
            <comment type="line">// data in the bytes that exist on primary and standby.  If the file is copied from the primary instead of the standby</comment>
            <comment type="line">// the checksum will change but not the size.</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/2"</literal></expr></argument>, <argument><expr><literal type="string">"DA"</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/2"</literal></expr></argument>, <argument><expr><literal type="string">"5678"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Create file to copy from the standby. This file will be larger on the primary than the standby and have no common</comment>
            <comment type="line">// data in the bytes that exist on primary and standby.  If the file is copied from the primary instead of the standby</comment>
            <comment type="line">// the checksum and size will change.</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/3"</literal></expr></argument>, <argument><expr><literal type="string">"TEST"</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/3"</literal></expr></argument>, <argument><expr><literal type="string">"ABC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Create a file on the primary that does not exist on the standby to test that the file is removed from the manifest</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/0"</literal></expr></argument>, <argument><expr><literal type="string">"DATA"</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Set log level to warn because the following test uses multiple processes so the log order will not be deterministic</comment>
            <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelWarn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Run backup but error on first archive check</comment>
            <expr_stmt><expr><call><name>testBackupPqScriptP</name><argument_list>(
                <argument><expr><name>PG_VERSION_96</name></expr></argument>, <argument><expr><name>backupTimeStart</name></expr></argument>, <argument><expr><operator>.</operator><name>noPriorWal</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>backupStandby</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>walCompressType</name> <operator>=</operator> <name>compressTypeGz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                <argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ArchiveTimeoutError</name></expr></argument>,
                <argument><expr><literal type="string">"WAL segment 0000000105DA69BF000000FF was not archived before the 100ms timeout\n"</literal>
                <literal type="string">"HINT: check the archive_command to ensure that all options are correct (especially --stanza).\n"</literal>
                <literal type="string">"HINT: check the PostgreSQL server log for errors.\n"</literal>
                <literal type="string">"HINT: run the 'start' command if the stanza was previously stopped."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Run backup but error on archive check</comment>
            <expr_stmt><expr><call><name>testBackupPqScriptP</name><argument_list>(
                <argument><expr><name>PG_VERSION_96</name></expr></argument>, <argument><expr><name>backupTimeStart</name></expr></argument>, <argument><expr><operator>.</operator><name>noWal</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>backupStandby</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>walCompressType</name> <operator>=</operator> <name>compressTypeGz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                <argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ArchiveTimeoutError</name></expr></argument>,
                <argument><expr><literal type="string">"WAL segment 0000000105DA69C000000000 was not archived before the 100ms timeout\n"</literal>
                <literal type="string">"HINT: check the archive_command to ensure that all options are correct (especially --stanza).\n"</literal>
                <literal type="string">"HINT: check the PostgreSQL server log for errors.\n"</literal>
                <literal type="string">"HINT: run the 'start' command if the stanza was previously stopped."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Remove halted backup so there's no resume</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20191016-042640F"</literal></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Set archive.info/copy to an older timestamp so we can be sure it was updated as part of backup</comment>
            <decl_stmt><decl><type><name>time_t</name></type> <name>archiveInfoOldTimestamp</name> <init>= <expr><literal type="number">967746268</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_TIME</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>, <argument><expr><name>archiveInfoOldTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_TIME</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_COPY</name></expr></argument>, <argument><expr><name>archiveInfoOldTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Get a copy of archive.info</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>archiveInfoContent</name> <init>= <expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Run backup</comment>
            <expr_stmt><expr><call><name>testBackupPqScriptP</name><argument_list>(<argument><expr><name>PG_VERSION_96</name></expr></argument>, <argument><expr><name>backupTimeStart</name></expr></argument>, <argument><expr><operator>.</operator><name>backupStandby</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>walCompressType</name> <operator>=</operator> <name>compressTypeGz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Check archive.info/copy timestamp was updated but contents were not</comment>
            <expr_stmt><expr><call><name>TEST_RESULT_INT_NE</name><argument_list>(
                <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_STR</name></expr></argument>)</argument_list></call><operator>.</operator><name>timeModified</name></expr></argument>, <argument><expr><name>archiveInfoOldTimestamp</name></expr></argument>, <argument><expr><literal type="string">"time updated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>archiveInfoContent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_INT_NE</name><argument_list>(
                <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_COPY_STR</name></expr></argument>)</argument_list></call><operator>.</operator><name>timeModified</name></expr></argument>, <argument><expr><name>archiveInfoOldTimestamp</name></expr></argument>, <argument><expr><literal type="string">"time updated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE_COPY</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>archiveInfoContent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Set log level back to detail</comment>
            <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
                <argument><expr><literal type="string">"P00   WARN: no prior backup exists, incr backup has been changed to full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
                <argument><expr><call><name>testBackupValidate</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/latest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">". {link, d=20191016-042640F}\n"</literal>
                <literal type="string">"pg_data {path}\n"</literal>
                <literal type="string">"pg_data/PG_VERSION {file, s=3}\n"</literal>
                <literal type="string">"pg_data/backup_label {file, s=17}\n"</literal>
                <literal type="string">"pg_data/base {path}\n"</literal>
                <literal type="string">"pg_data/base/1 {path}\n"</literal>
                <literal type="string">"pg_data/base/1/1 {file, s=0}\n"</literal>
                <literal type="string">"pg_data/base/1/2 {file, s=2}\n"</literal>
                <literal type="string">"pg_data/base/1/3 {file, s=3}\n"</literal>
                <literal type="string">"pg_data/global {path}\n"</literal>
                <literal type="string">"pg_data/global/pg_control {file, s=8192}\n"</literal>
                <literal type="string">"pg_data/pg_xlog {path}\n"</literal>
                <literal type="string">"pg_data/pg_xlog/0000000105DA69C000000000 {file, s=16777216}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf {file, s=11}\n"</literal>
                <literal type="string">"--------\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\""</literal> <name>TEST_PATH</name> <literal type="string">"/pg1\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/PG_VERSION={\"checksum\":\"f5b7e6d36dc0113f61b36c700817d42b96f7b037\",\"size\":3"</literal>
                    <literal type="string">",\"timestamp\":1571200000}\n"</literal>
                <literal type="string">"pg_data/backup_label={\"checksum\":\"8e6f41ac87a7514be96260d65bacbffb11be77dc\",\"size\":17"</literal>
                    <literal type="string">",\"timestamp\":1571200002}\n"</literal>
                <literal type="string">"pg_data/base/1/1={\"size\":0,\"timestamp\":1571200000}\n"</literal>
                <literal type="string">"pg_data/base/1/2={\"checksum\":\"54ceb91256e8190e474aa752a6e0650a2df5ba37\",\"size\":2,\"timestamp\":1571200000}\n"</literal>
                <literal type="string">"pg_data/base/1/3={\"checksum\":\"3c01bdbb26f358bab27f267924aa2c9a03fcfdb8\",\"size\":3,\"timestamp\":1571200000}\n"</literal>
                <literal type="string">"pg_data/global/pg_control={\"size\":8192,\"timestamp\":1571200000}\n"</literal>
                <literal type="string">"pg_data/pg_xlog/0000000105DA69C000000000={\"size\":16777216,\"timestamp\":1571200002}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"checksum\":\"e3db315c260e79211b7b52587123b7aa060f30ab\",\"size\":11"</literal>
                    <literal type="string">",\"timestamp\":1570000000}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <literal type="string">"pg_data/base={}\n"</literal>
                <literal type="string">"pg_data/base/1={}\n"</literal>
                <literal type="string">"pg_data/global={}\n"</literal>
                <literal type="string">"pg_data/pg_xlog={}\n"</literal></expr></argument>,
                <argument><expr><literal type="string">"compare file list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Remove test files</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"base/1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"online 11 full backup with tablespaces and page checksums"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>backupTimeStart</name> <operator>=</operator> <name>BACKUP_EPOCH</name> <operator>+</operator> <literal type="number">2200000</literal></expr>;</expr_stmt>

        <block>{<block_content>
            <comment type="line">// Update pg_control</comment>
            <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_11</name></expr></argument>, <argument><expr><operator>.</operator><name>pageChecksum</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>walSegmentSize</name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Update version</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><name>PG_VERSION_11_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Update wal path</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>pgWalPath</name><argument_list>(<argument><expr><name>PG_VERSION_95</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>pgWalPath</name><argument_list>(<argument><expr><name>PG_VERSION_11</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>noParentCreate</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Upgrade stanza</comment>
            <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pg1Path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdStanzaUpgrade</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>cmdStanzaUpgrade</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: stanza-upgrade for stanza 'test1' on repo1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Load options</comment>
            <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pg1Path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><name>backupTypeFull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHardlink</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptManifestSaveThreshold</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveCopy</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Move pg1-path and put a link in its place. This tests that backup works when pg1-path is a symlink yet should be</comment>
            <comment type="line">// completely invisible in the manifest and logging.</comment>
            <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"mv %s %s-data"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pg1Path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pg1Path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"ln -s %s-data %s "</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pg1Path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pg1Path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Zeroed file which passes page checksums</comment>
            <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>relation</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><name>PG_PAGE_SIZE_DEFAULT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x00</literal><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>PageHeaderData</name><operator>)</operator><block>{<expr><operator>.</operator><name>pd_upper</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/1"</literal></expr></argument>, <argument><expr><name>relation</name></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// File which will fail on alignment</comment>
            <expr_stmt><expr><name>relation</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><name>PG_PAGE_SIZE_DEFAULT</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x00</literal><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>PageHeaderData</name><operator>)</operator><block>{<expr><operator>.</operator><name>pd_upper</name> <operator>=</operator> <literal type="number">0xFE</literal></expr>}</block></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x00</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>pd_checksum</name> <operator>=</operator> <call><name>pgPageChecksum</name><argument_list>(
                <argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x00</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x01</literal><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>PageHeaderData</name><operator>)</operator><block>{<expr><operator>.</operator><name>pd_upper</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>}</block></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/2"</literal></expr></argument>, <argument><expr><name>relation</name></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rel1_2Sha1</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// File with bad page checksums</comment>
            <expr_stmt><expr><name>relation</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x00</literal><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>PageHeaderData</name><operator>)</operator><block>{<expr><operator>.</operator><name>pd_upper</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>}</block></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x01</literal><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>PageHeaderData</name><operator>)</operator><block>{<expr><operator>.</operator><name>pd_upper</name> <operator>=</operator> <literal type="number">0x00</literal></expr>}</block></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x02</literal><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>PageHeaderData</name><operator>)</operator><block>{<expr><operator>.</operator><name>pd_upper</name> <operator>=</operator> <literal type="number">0xFE</literal></expr>}</block></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x03</literal><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>PageHeaderData</name><operator>)</operator><block>{<expr><operator>.</operator><name>pd_upper</name> <operator>=</operator> <literal type="number">0xEF</literal></expr>}</block></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x04</literal><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>PageHeaderData</name><operator>)</operator><block>{<expr><operator>.</operator><name>pd_upper</name> <operator>=</operator> <literal type="number">0x00</literal></expr>}</block></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x04</literal><operator>)</operator><operator>)</operator><index>[<expr><name>PG_PAGE_SIZE_DEFAULT</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/3"</literal></expr></argument>, <argument><expr><name>relation</name></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rel1_3Sha1</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// File with bad page checksum</comment>
            <expr_stmt><expr><name>relation</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x00</literal><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>PageHeaderData</name><operator>)</operator><block>{<expr><operator>.</operator><name>pd_upper</name> <operator>=</operator> <literal type="number">0x00</literal></expr>}</block></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x01</literal><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>PageHeaderData</name><operator>)</operator><block>{<expr><operator>.</operator><name>pd_upper</name> <operator>=</operator> <literal type="number">0x08</literal></expr>}</block></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x02</literal><operator>)</operator><operator>)</operator> <operator>=</operator> <operator>(</operator><name>PageHeaderData</name><operator>)</operator><block>{<expr><operator>.</operator><name>pd_upper</name> <operator>=</operator> <literal type="number">0xFF</literal></expr>}</block></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>PageHeaderData</name> <operator>*</operator><operator>)</operator><operator>(</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x02</literal><operator>)</operator><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>pd_checksum</name> <operator>=</operator> <call><name>pgPageChecksum</name><argument_list>(
                <argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">0x02</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/4"</literal></expr></argument>, <argument><expr><name>relation</name></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rel1_4Sha1</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Add a tablespace</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_PATH_PGTBLSPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
                <argument><expr><call><name>symlink</name><argument_list>(<argument><expr><literal type="string">"../../pg1-tblspc/32768"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>PG_PATH_PGTBLSPC</name> <literal type="string">"/32768"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr></argument>,
                <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><literal type="string">"unable to create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
                <argument><expr><name>storageTest</name></expr></argument>,
                <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"pg1-tblspc/32768/%s/1/5"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>pgTablespaceId</name><argument_list>(<argument><expr><name>PG_VERSION_11</name></expr></argument>, <argument><expr><call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_11</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Disable storageFeatureSymLink so tablespace (and latest) symlinks will not be created</comment>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Storage</name> <operator>*</operator><operator>)</operator><call><name>storageRepoWrite</name><argument_list>()</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>pub</name><operator>.</operator><name>interface</name><operator>.</operator><name>feature</name></name> <operator>^=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>storageFeatureSymLink</name></expr>;</expr_stmt>

            <comment type="line">// Disable storageFeatureHardLink so hardlinks will not be created</comment>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Storage</name> <operator>*</operator><operator>)</operator><call><name>storageRepoWrite</name><argument_list>()</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>pub</name><operator>.</operator><name>interface</name><operator>.</operator><name>feature</name></name> <operator>^=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>storageFeatureHardLink</name></expr>;</expr_stmt>

            <comment type="line">// Run backup</comment>
            <expr_stmt><expr><call><name>testBackupPqScriptP</name><argument_list>(<argument><expr><name>PG_VERSION_11</name></expr></argument>, <argument><expr><name>backupTimeStart</name></expr></argument>, <argument><expr><operator>.</operator><name>walCompressType</name> <operator>=</operator> <name>compressTypeGz</name></expr></argument>, <argument><expr><operator>.</operator><name>walTotal</name> <operator>=</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Reset storage features</comment>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Storage</name> <operator>*</operator><operator>)</operator><call><name>storageRepoWrite</name><argument_list>()</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>pub</name><operator>.</operator><name>interface</name><operator>.</operator><name>feature</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>storageFeatureSymLink</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Storage</name> <operator>*</operator><operator>)</operator><call><name>storageRepoWrite</name><argument_list>()</argument_list></call><operator>)</operator><operator>-&gt;</operator><name><name>pub</name><operator>.</operator><name>interface</name><operator>.</operator><name>feature</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>storageFeatureHardLink</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
                <argument><expr><literal type="string">"P00   INFO: execute non-exclusive backup start: backup begins after the next regular checkpoint completes\n"</literal>
                <literal type="string">"P00   INFO: backup start archive = 0000000105DB5DE000000000, lsn = 5db5de0/0\n"</literal>
                <literal type="string">"P00   INFO: check archive for segment 0000000105DB5DE000000000\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/base/1/3 (40KB, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P00   WARN: invalid page checksums found in file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/base/1/3 at pages 0, 2-4\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/base/1/4 (24KB, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P00   WARN: invalid page checksum found in file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/base/1/4 at page 1\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/base/1/2 (8.5KB, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P00   WARN: page misalignment in file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/base/1/2: file size 8704 is not divisible by page size"</literal>
                    <literal type="string">" 8192\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/global/pg_control (8KB, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/base/1/1 (8KB, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/postgresql.conf (11B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/PG_VERSION (2B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/pg_tblspc/32768/PG_11_201809051/1/5 (0B, [PCT])\n"</literal>
                <literal type="string">"P00   INFO: execute non-exclusive backup stop and wait for all WAL segments to archive\n"</literal>
                <literal type="string">"P00   INFO: backup stop archive = 0000000105DB5DE000000002, lsn = 5db5de0/280000\n"</literal>
                <literal type="string">"P00 DETAIL: wrote 'backup_label' file returned from backup stop function\n"</literal>
                <literal type="string">"P00 DETAIL: wrote 'tablespace_map' file returned from backup stop function\n"</literal>
                <literal type="string">"P00   INFO: check archive for segment(s) 0000000105DB5DE000000000:0000000105DB5DE000000002\n"</literal>
                <literal type="string">"P00 DETAIL: copy segment 0000000105DB5DE000000000 to backup\n"</literal>
                <literal type="string">"P00 DETAIL: copy segment 0000000105DB5DE000000001 to backup\n"</literal>
                <literal type="string">"P00 DETAIL: copy segment 0000000105DB5DE000000002 to backup\n"</literal>
                <literal type="string">"P00   INFO: new backup label = 20191027-181320F\n"</literal>
                <literal type="string">"P00   INFO: full backup size = [SIZE], file total = 13"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
                <argument><expr><call><name>testBackupValidate</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20191027-181320F"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strNewFmt</name><argument_list>(
                    <argument><expr><literal type="string">"pg_data {path}\n"</literal>
                    <literal type="string">"pg_data/PG_VERSION.gz {file, s=2}\n"</literal>
                    <literal type="string">"pg_data/backup_label.gz {file, s=17}\n"</literal>
                    <literal type="string">"pg_data/base {path}\n"</literal>
                    <literal type="string">"pg_data/base/1 {path}\n"</literal>
                    <literal type="string">"pg_data/base/1/1.gz {file, s=8192}\n"</literal>
                    <literal type="string">"pg_data/base/1/2.gz {file, s=8704}\n"</literal>
                    <literal type="string">"pg_data/base/1/3.gz {file, s=40960}\n"</literal>
                    <literal type="string">"pg_data/base/1/4.gz {file, s=24576}\n"</literal>
                    <literal type="string">"pg_data/global {path}\n"</literal>
                    <literal type="string">"pg_data/global/pg_control.gz {file, s=8192}\n"</literal>
                    <literal type="string">"pg_data/pg_tblspc {path}\n"</literal>
                    <literal type="string">"pg_data/pg_wal {path}\n"</literal>
                    <literal type="string">"pg_data/pg_wal/0000000105DB5DE000000000.gz {file, s=1048576}\n"</literal>
                    <literal type="string">"pg_data/pg_wal/0000000105DB5DE000000001.gz {file, s=1048576}\n"</literal>
                    <literal type="string">"pg_data/pg_wal/0000000105DB5DE000000002.gz {file, s=1048576}\n"</literal>
                    <literal type="string">"pg_data/postgresql.conf.gz {file, s=11}\n"</literal>
                    <literal type="string">"pg_data/tablespace_map.gz {file, s=19}\n"</literal>
                    <literal type="string">"pg_tblspc {path}\n"</literal>
                    <literal type="string">"pg_tblspc/32768 {path}\n"</literal>
                    <literal type="string">"pg_tblspc/32768/PG_11_201809051 {path}\n"</literal>
                    <literal type="string">"pg_tblspc/32768/PG_11_201809051/1 {path}\n"</literal>
                    <literal type="string">"pg_tblspc/32768/PG_11_201809051/1/5.gz {file, s=0}\n"</literal>
                    <literal type="string">"--------\n"</literal>
                    <literal type="string">"[backup:target]\n"</literal>
                    <literal type="string">"pg_data={\"path\":\""</literal> <name>TEST_PATH</name> <literal type="string">"/pg1\",\"type\":\"path\"}\n"</literal>
                    <literal type="string">"pg_tblspc/32768={\"path\":\"../../pg1-tblspc/32768\",\"tablespace-id\":\"32768\""</literal>
                        <literal type="string">",\"tablespace-name\":\"tblspc32768\",\"type\":\"link\"}\n"</literal>
                    <literal type="string">"\n"</literal>
                    <literal type="string">"[target:file]\n"</literal>
                    <literal type="string">"pg_data/PG_VERSION={\"checksum\":\"17ba0791499db908433b80f37c5fbc89b870084b\",\"size\":2"</literal>
                        <literal type="string">",\"timestamp\":1572200000}\n"</literal>
                    <literal type="string">"pg_data/backup_label={\"checksum\":\"8e6f41ac87a7514be96260d65bacbffb11be77dc\",\"size\":17"</literal>
                        <literal type="string">",\"timestamp\":1572200002}\n"</literal>
                    <literal type="string">"pg_data/base/1/1={\"checksum\":\"0631457264ff7f8d5fb1edc2c0211992a67c73e6\",\"checksum-page\":true"</literal>
                        <literal type="string">",\"size\":8192,\"timestamp\":1572200000}\n"</literal>
                    <literal type="string">"pg_data/base/1/2={\"checksum\":\"%s\",\"checksum-page\":false,\"size\":8704,\"timestamp\":1572200000}\n"</literal>
                    <literal type="string">"pg_data/base/1/3={\"checksum\":\"%s\",\"checksum-page\":false,\"checksum-page-error\":[0,[2,4]]"</literal>
                        <literal type="string">",\"size\":40960,\"timestamp\":1572200000}\n"</literal>
                    <literal type="string">"pg_data/base/1/4={\"checksum\":\"%s\",\"checksum-page\":false,\"checksum-page-error\":[1],\"size\":24576"</literal>
                        <literal type="string">",\"timestamp\":1572200000}\n"</literal>
                    <literal type="string">"pg_data/global/pg_control={\"size\":8192,\"timestamp\":1572200000}\n"</literal>
                    <literal type="string">"pg_data/pg_wal/0000000105DB5DE000000000={\"size\":1048576,\"timestamp\":1572200002}\n"</literal>
                    <literal type="string">"pg_data/pg_wal/0000000105DB5DE000000001={\"size\":1048576,\"timestamp\":1572200002}\n"</literal>
                    <literal type="string">"pg_data/pg_wal/0000000105DB5DE000000002={\"size\":1048576,\"timestamp\":1572200002}\n"</literal>
                    <literal type="string">"pg_data/postgresql.conf={\"checksum\":\"e3db315c260e79211b7b52587123b7aa060f30ab\",\"size\":11"</literal>
                        <literal type="string">",\"timestamp\":1570000000}\n"</literal>
                    <literal type="string">"pg_data/tablespace_map={\"checksum\":\"87fe624d7976c2144e10afcb7a9a49b071f35e9c\",\"size\":19"</literal>
                        <literal type="string">",\"timestamp\":1572200002}\n"</literal>
                    <literal type="string">"pg_tblspc/32768/PG_11_201809051/1/5={\"checksum-page\":true,\"size\":0,\"timestamp\":1572200000}\n"</literal>
                    <literal type="string">"\n"</literal>
                    <literal type="string">"[target:link]\n"</literal>
                    <literal type="string">"pg_data/pg_tblspc/32768={\"destination\":\"../../pg1-tblspc/32768\"}\n"</literal>
                    <literal type="string">"\n"</literal>
                    <literal type="string">"[target:path]\n"</literal>
                    <literal type="string">"pg_data={}\n"</literal>
                    <literal type="string">"pg_data/base={}\n"</literal>
                    <literal type="string">"pg_data/base/1={}\n"</literal>
                    <literal type="string">"pg_data/global={}\n"</literal>
                    <literal type="string">"pg_data/pg_tblspc={}\n"</literal>
                    <literal type="string">"pg_data/pg_wal={}\n"</literal>
                    <literal type="string">"pg_tblspc={}\n"</literal>
                    <literal type="string">"pg_tblspc/32768={}\n"</literal>
                    <literal type="string">"pg_tblspc/32768/PG_11_201809051={}\n"</literal>
                    <literal type="string">"pg_tblspc/32768/PG_11_201809051/1={}\n"</literal></expr></argument>,
                    <argument><expr><name>rel1_2Sha1</name></expr></argument>, <argument><expr><name>rel1_3Sha1</name></expr></argument>, <argument><expr><name>rel1_4Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"compare file list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Remove test files</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"base/1/2"</literal></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"base/1/3"</literal></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"base/1/4"</literal></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when pg_control not present"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block>{<block_content>
            <comment type="line">// Load options</comment>
            <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pg1Path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><name>backupTypeIncr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHardlink</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Preserve prior timestamp on pg_control</comment>
            <expr_stmt><expr><call><name>testBackupPqScriptP</name><argument_list>(<argument><expr><name>PG_VERSION_11</name></expr></argument>, <argument><expr><name>BACKUP_EPOCH</name> <operator>+</operator> <literal type="number">2300000</literal></expr></argument>, <argument><expr><operator>.</operator><name>errorAfterStart</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_PG_CONTROL_TIME</name><argument_list>(<argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Run backup</comment>
            <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                <argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
                <argument><expr><literal type="string">"pg_control must be present in all online backups\n"</literal>
                <literal type="string">"HINT: is something wrong with the clock or filesystem timestamps?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Check log</comment>
            <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
                <argument><expr><literal type="string">"P00   INFO: last backup label = 20191027-181320F, version = "</literal> <name>PROJECT_VERSION</name> <literal type="string">"\n"</literal>
                <literal type="string">"P00   INFO: execute non-exclusive backup start: backup begins after the next regular checkpoint completes\n"</literal>
                <literal type="string">"P00   INFO: backup start archive = 0000000105DB764000000000, lsn = 5db7640/0\n"</literal>
                <literal type="string">"P00   INFO: check archive for prior segment 0000000105DB763F00000FFF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Remove partial backup so it won't be resumed (since it errored before any checksums were written)</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/20191027-181320F_20191028-220000I"</literal></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"online 11 incr backup with tablespaces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>backupTimeStart</name> <operator>=</operator> <name>BACKUP_EPOCH</name> <operator>+</operator> <literal type="number">2400000</literal></expr>;</expr_stmt>

        <block>{<block_content>
            <comment type="line">// Load options</comment>
            <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/repo-bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgKeyRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgKeyRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHardlink</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepo</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pg1Path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><name>backupTypeIncr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDelta</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHardlink</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Run backup.  Make sure that the timeline selected converts to hexdecimal that can't be interpreted as decimal.</comment>
            <expr_stmt><expr><call><name>testBackupPqScriptP</name><argument_list>(<argument><expr><name>PG_VERSION_11</name></expr></argument>, <argument><expr><name>backupTimeStart</name></expr></argument>, <argument><expr><operator>.</operator><name>timeline</name> <operator>=</operator> <literal type="number">0x2C</literal></expr></argument>, <argument><expr><operator>.</operator><name>walTotal</name> <operator>=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
                <argument><expr><literal type="string">"P00   INFO: last backup label = 20191027-181320F, version = "</literal> <name>PROJECT_VERSION</name> <literal type="string">"\n"</literal>
                <literal type="string">"P00   INFO: execute non-exclusive backup start: backup begins after the next regular checkpoint completes\n"</literal>
                <literal type="string">"P00   INFO: backup start archive = 0000002C05DB8EB000000000, lsn = 5db8eb0/0\n"</literal>
                <literal type="string">"P00   INFO: check archive for segment 0000002C05DB8EB000000000\n"</literal>
                <literal type="string">"P00   WARN: a timeline switch has occurred since the 20191027-181320F backup, enabling delta checksum\n"</literal>
                <literal type="string">"            HINT: this is normal after restoring from backup or promoting a standby.\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/global/pg_control (8KB, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: match file from prior backup "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/base/1/1 (8KB, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: match file from prior backup "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/postgresql.conf (11B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: match file from prior backup "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/PG_VERSION (2B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P00 DETAIL: hardlink pg_data/PG_VERSION to 20191027-181320F\n"</literal>
                <literal type="string">"P00 DETAIL: hardlink pg_data/base/1/1 to 20191027-181320F\n"</literal>
                <literal type="string">"P00 DETAIL: hardlink pg_data/postgresql.conf to 20191027-181320F\n"</literal>
                <literal type="string">"P00 DETAIL: hardlink pg_tblspc/32768/PG_11_201809051/1/5 to 20191027-181320F\n"</literal>
                <literal type="string">"P00   INFO: execute non-exclusive backup stop and wait for all WAL segments to archive\n"</literal>
                <literal type="string">"P00   INFO: backup stop archive = 0000002C05DB8EB000000001, lsn = 5db8eb0/180000\n"</literal>
                <literal type="string">"P00 DETAIL: wrote 'backup_label' file returned from backup stop function\n"</literal>
                <literal type="string">"P00 DETAIL: wrote 'tablespace_map' file returned from backup stop function\n"</literal>
                <literal type="string">"P00   INFO: check archive for segment(s) 0000002C05DB8EB000000000:0000002C05DB8EB000000001\n"</literal>
                <literal type="string">"P00   INFO: new backup label = 20191027-181320F_20191030-014640I\n"</literal>
                <literal type="string">"P00   INFO: incr backup size = [SIZE], file total = 7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
                <argument><expr><call><name>testBackupValidate</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/latest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">". {link, d=20191027-181320F_20191030-014640I}\n"</literal>
                <literal type="string">"pg_data {path}\n"</literal>
                <literal type="string">"pg_data/PG_VERSION.gz {file, s=2}\n"</literal>
                <literal type="string">"pg_data/backup_label.gz {file, s=17}\n"</literal>
                <literal type="string">"pg_data/base {path}\n"</literal>
                <literal type="string">"pg_data/base/1 {path}\n"</literal>
                <literal type="string">"pg_data/base/1/1.gz {file, s=8192}\n"</literal>
                <literal type="string">"pg_data/global {path}\n"</literal>
                <literal type="string">"pg_data/global/pg_control.gz {file, s=8192}\n"</literal>
                <literal type="string">"pg_data/pg_tblspc {path}\n"</literal>
                <literal type="string">"pg_data/pg_tblspc/32768 {link, d=../../pg_tblspc/32768}\n"</literal>
                <literal type="string">"pg_data/pg_wal {path}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf.gz {file, s=11}\n"</literal>
                <literal type="string">"pg_data/tablespace_map.gz {file, s=19}\n"</literal>
                <literal type="string">"pg_tblspc {path}\n"</literal>
                <literal type="string">"pg_tblspc/32768 {path}\n"</literal>
                <literal type="string">"pg_tblspc/32768/PG_11_201809051 {path}\n"</literal>
                <literal type="string">"pg_tblspc/32768/PG_11_201809051/1 {path}\n"</literal>
                <literal type="string">"pg_tblspc/32768/PG_11_201809051/1/5.gz {file, s=0}\n"</literal>
                <literal type="string">"--------\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\""</literal> <name>TEST_PATH</name> <literal type="string">"/pg1\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"pg_tblspc/32768={\"path\":\"../../pg1-tblspc/32768\",\"tablespace-id\":\"32768\""</literal>
                    <literal type="string">",\"tablespace-name\":\"tblspc32768\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/PG_VERSION={\"checksum\":\"17ba0791499db908433b80f37c5fbc89b870084b\",\"reference\":\"20191027-181320F\""</literal>
                    <literal type="string">",\"size\":2,\"timestamp\":1572200000}\n"</literal>
                <literal type="string">"pg_data/backup_label={\"checksum\":\"8e6f41ac87a7514be96260d65bacbffb11be77dc\",\"size\":17"</literal>
                    <literal type="string">",\"timestamp\":1572400002}\n"</literal>
                <literal type="string">"pg_data/base/1/1={\"checksum\":\"0631457264ff7f8d5fb1edc2c0211992a67c73e6\",\"checksum-page\":true"</literal>
                    <literal type="string">",\"reference\":\"20191027-181320F\",\"size\":8192,\"timestamp\":1572200000}\n"</literal>
                <literal type="string">"pg_data/global/pg_control={\"size\":8192,\"timestamp\":1572400000}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"checksum\":\"e3db315c260e79211b7b52587123b7aa060f30ab\""</literal>
                    <literal type="string">",\"reference\":\"20191027-181320F\",\"size\":11,\"timestamp\":1570000000}\n"</literal>
                <literal type="string">"pg_data/tablespace_map={\"checksum\":\"87fe624d7976c2144e10afcb7a9a49b071f35e9c\",\"size\":19"</literal>
                    <literal type="string">",\"timestamp\":1572400002}\n"</literal>
                <literal type="string">"pg_tblspc/32768/PG_11_201809051/1/5={\"checksum-page\":true,\"reference\":\"20191027-181320F\",\"size\":0"</literal>
                    <literal type="string">",\"timestamp\":1572200000}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:link]\n"</literal>
                <literal type="string">"pg_data/pg_tblspc/32768={\"destination\":\"../../pg1-tblspc/32768\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <literal type="string">"pg_data/base={}\n"</literal>
                <literal type="string">"pg_data/base/1={}\n"</literal>
                <literal type="string">"pg_data/global={}\n"</literal>
                <literal type="string">"pg_data/pg_tblspc={}\n"</literal>
                <literal type="string">"pg_data/pg_wal={}\n"</literal>
                <literal type="string">"pg_tblspc={}\n"</literal>
                <literal type="string">"pg_tblspc/32768={}\n"</literal>
                <literal type="string">"pg_tblspc/32768/PG_11_201809051={}\n"</literal>
                <literal type="string">"pg_tblspc/32768/PG_11_201809051/1={}\n"</literal></expr></argument>,
                <argument><expr><literal type="string">"compare file list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"online 11 full backup with tablespaces, bundles and annotations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>backupTimeStart</name> <operator>=</operator> <name>BACKUP_EPOCH</name> <operator>+</operator> <literal type="number">2400000</literal></expr>;</expr_stmt>

        <block>{<block_content>
            <comment type="line">// Load options</comment>
            <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pg1Path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><name>backupTypeFull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptManifestSaveThreshold</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveCopy</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptBufferSize</name></expr></argument>, <argument><expr><literal type="string">"16K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoBundle</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptResume</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptAnnotation</name></expr></argument>, <argument><expr><literal type="string">"extra key=this is an annotation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptAnnotation</name></expr></argument>, <argument><expr><literal type="string">"source=this is another annotation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Set to a smaller values than the defaults allow</comment>
            <expr_stmt><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptRepoBundleSize</name></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><call><name>VARINT64</name><argument_list>(<argument><expr><name>PG_PAGE_SIZE_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptRepoBundleLimit</name></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><call><name>VARINT64</name><argument_list>(<argument><expr><name>PG_PAGE_SIZE_DEFAULT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Zero-length file to be stored</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"zero"</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Zeroed file which passes page checksums</comment>
            <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>relation</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><name>PG_PAGE_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_PATH_BASE</name> <literal type="string">"/1/2"</literal></expr></argument>, <argument><expr><name>relation</name></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Old files</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"postgresql.auto.conf"</literal></expr></argument>, <argument><expr><literal type="string">"CONFIGSTUFF2"</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1500000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stuff.conf"</literal></expr></argument>, <argument><expr><literal type="string">"CONFIGSTUFF3"</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1500000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// File that will get skipped while bundling smaller files and end up a bundle by itself</comment>
            <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>bigish</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><name>PG_PAGE_SIZE_DEFAULT</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>bigish</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>bigish</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>bigish</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>bigish</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"bigish.dat"</literal></expr></argument>, <argument><expr><name>bigish</name></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1500000001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Run backup</comment>
            <expr_stmt><expr><call><name>testBackupPqScriptP</name><argument_list>(<argument><expr><name>PG_VERSION_11</name></expr></argument>, <argument><expr><name>backupTimeStart</name></expr></argument>, <argument><expr><operator>.</operator><name>walCompressType</name> <operator>=</operator> <name>compressTypeGz</name></expr></argument>, <argument><expr><operator>.</operator><name>walTotal</name> <operator>=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
                <argument><expr><literal type="string">"P00   INFO: execute non-exclusive backup start: backup begins after the next regular checkpoint completes\n"</literal>
                <literal type="string">"P00   INFO: backup start archive = 0000000105DB8EB000000000, lsn = 5db8eb0/0\n"</literal>
                <literal type="string">"P00   INFO: check archive for segment 0000000105DB8EB000000000\n"</literal>
                <literal type="string">"P00 DETAIL: store zero-length file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/zero\n"</literal>
                <literal type="string">"P00 DETAIL: store zero-length file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/pg_tblspc/32768/PG_11_201809051/1/5\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/base/1/2 (24KB, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/stuff.conf (bundle 1/0, 12B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/postgresql.auto.conf (bundle 1/32, 12B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/postgresql.conf (bundle 1/64, 11B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/PG_VERSION (bundle 1/95, 2B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/bigish.dat (bundle 2/0, 8.0KB, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/base/1/1 (bundle 3/0, 8KB, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/global/pg_control (bundle 4/0, 8KB, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P00   INFO: execute non-exclusive backup stop and wait for all WAL segments to archive\n"</literal>
                <literal type="string">"P00   INFO: backup stop archive = 0000000105DB8EB000000001, lsn = 5db8eb0/180000\n"</literal>
                <literal type="string">"P00 DETAIL: wrote 'backup_label' file returned from backup stop function\n"</literal>
                <literal type="string">"P00 DETAIL: wrote 'tablespace_map' file returned from backup stop function\n"</literal>
                <literal type="string">"P00   INFO: check archive for segment(s) 0000000105DB8EB000000000:0000000105DB8EB000000001\n"</literal>
                <literal type="string">"P00 DETAIL: copy segment 0000000105DB8EB000000000 to backup\n"</literal>
                <literal type="string">"P00 DETAIL: copy segment 0000000105DB8EB000000001 to backup\n"</literal>
                <literal type="string">"P00   INFO: new backup label = 20191030-014640F\n"</literal>
                <literal type="string">"P00   INFO: full backup size = [SIZE], file total = 14"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
                <argument><expr><call><name>testBackupValidate</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/latest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">". {link, d=20191030-014640F}\n"</literal>
                <literal type="string">"bundle {path}\n"</literal>
                <literal type="string">"bundle/1/pg_data/PG_VERSION {file, s=2}\n"</literal>
                <literal type="string">"bundle/1/pg_data/postgresql.auto.conf {file, s=12}\n"</literal>
                <literal type="string">"bundle/1/pg_data/postgresql.conf {file, s=11}\n"</literal>
                <literal type="string">"bundle/1/pg_data/stuff.conf {file, s=12}\n"</literal>
                <literal type="string">"bundle/2/pg_data/bigish.dat {file, s=8191}\n"</literal>
                <literal type="string">"bundle/3/pg_data/base/1/1 {file, s=8192}\n"</literal>
                <literal type="string">"bundle/4/pg_data/global/pg_control {file, s=8192}\n"</literal>
                <literal type="string">"pg_data {path}\n"</literal>
                <literal type="string">"pg_data/backup_label.gz {file, s=17}\n"</literal>
                <literal type="string">"pg_data/base {path}\n"</literal>
                <literal type="string">"pg_data/base/1 {path}\n"</literal>
                <literal type="string">"pg_data/base/1/2.gz {file, s=24576}\n"</literal>
                <literal type="string">"pg_data/pg_wal {path}\n"</literal>
                <literal type="string">"pg_data/pg_wal/0000000105DB8EB000000000.gz {file, s=1048576}\n"</literal>
                <literal type="string">"pg_data/pg_wal/0000000105DB8EB000000001.gz {file, s=1048576}\n"</literal>
                <literal type="string">"pg_data/tablespace_map.gz {file, s=19}\n"</literal>
                <literal type="string">"--------\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\""</literal> <name>TEST_PATH</name> <literal type="string">"/pg1\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"pg_tblspc/32768={\"path\":\"../../pg1-tblspc/32768\",\"tablespace-id\":\"32768\""</literal>
                    <literal type="string">",\"tablespace-name\":\"tblspc32768\",\"type\":\"link\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[metadata]\n"</literal>
                <literal type="string">"annotation={\"extra key\":\"this is an annotation\",\"source\":\"this is another annotation\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/PG_VERSION={\"checksum\":\"17ba0791499db908433b80f37c5fbc89b870084b\",\"size\":2"</literal>
                    <literal type="string">",\"timestamp\":1572200000}\n"</literal>
                <literal type="string">"pg_data/backup_label={\"checksum\":\"8e6f41ac87a7514be96260d65bacbffb11be77dc\",\"size\":17"</literal>
                    <literal type="string">",\"timestamp\":1572400002}\n"</literal>
                <literal type="string">"pg_data/base/1/1={\"checksum\":\"0631457264ff7f8d5fb1edc2c0211992a67c73e6\",\"checksum-page\":true,\"size\":8192"</literal>
                    <literal type="string">",\"timestamp\":1572200000}\n"</literal>
                <literal type="string">"pg_data/base/1/2={\"checksum\":\"ebdd38b69cd5b9f2d00d273c981e16960fbbb4f7\",\"checksum-page\":true,\"size\":24576"</literal>
                    <literal type="string">",\"timestamp\":1572400000}\n"</literal>
                <literal type="string">"pg_data/bigish.dat={\"checksum\":\"3e5175386be683d2f231f3fa3eab892a799082f7\",\"size\":8191"</literal>
                    <literal type="string">",\"timestamp\":1500000001}\n"</literal>
                <literal type="string">"pg_data/global/pg_control={\"size\":8192,\"timestamp\":1572400000}\n"</literal>
                <literal type="string">"pg_data/pg_wal/0000000105DB8EB000000000={\"size\":1048576,\"timestamp\":1572400002}\n"</literal>
                <literal type="string">"pg_data/pg_wal/0000000105DB8EB000000001={\"size\":1048576,\"timestamp\":1572400002}\n"</literal>
                <literal type="string">"pg_data/postgresql.auto.conf={\"checksum\":\"e873a5cb5a67e48761e7b619c531311404facdce\",\"size\":12"</literal>
                    <literal type="string">",\"timestamp\":1500000000}\n"</literal>
                <literal type="string">"pg_data/postgresql.conf={\"checksum\":\"e3db315c260e79211b7b52587123b7aa060f30ab\",\"size\":11"</literal>
                    <literal type="string">",\"timestamp\":1570000000}\n"</literal>
                <literal type="string">"pg_data/stuff.conf={\"checksum\":\"55a9d0d18b77789c7722abe72aa905e2dc85bb5d\",\"size\":12"</literal>
                    <literal type="string">",\"timestamp\":1500000000}\n"</literal>
                <literal type="string">"pg_data/tablespace_map={\"checksum\":\"87fe624d7976c2144e10afcb7a9a49b071f35e9c\",\"size\":19"</literal>
                    <literal type="string">",\"timestamp\":1572400002}\n"</literal>
                <literal type="string">"pg_data/zero={\"size\":0,\"timestamp\":1572400000}\n"</literal>
                <literal type="string">"pg_tblspc/32768/PG_11_201809051/1/5={\"checksum-page\":true,\"size\":0,\"timestamp\":1572200000}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:link]\n"</literal>
                <literal type="string">"pg_data/pg_tblspc/32768={\"destination\":\"../../pg1-tblspc/32768\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <literal type="string">"pg_data/base={}\n"</literal>
                <literal type="string">"pg_data/base/1={}\n"</literal>
                <literal type="string">"pg_data/global={}\n"</literal>
                <literal type="string">"pg_data/pg_tblspc={}\n"</literal>
                <literal type="string">"pg_data/pg_wal={}\n"</literal>
                <literal type="string">"pg_tblspc={}\n"</literal>
                <literal type="string">"pg_tblspc/32768={}\n"</literal>
                <literal type="string">"pg_tblspc/32768/PG_11_201809051={}\n"</literal>
                <literal type="string">"pg_tblspc/32768/PG_11_201809051/1={}\n"</literal></expr></argument>,
                <argument><expr><literal type="string">"compare file list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"online 11 diff backup with bundles"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>backupTimeStart</name> <operator>=</operator> <name>BACKUP_EPOCH</name> <operator>+</operator> <literal type="number">2600000</literal></expr>;</expr_stmt>

        <block>{<block_content>
            <comment type="line">// Remove old pg data</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"pg1-data"</literal></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"pg1-tblspc"</literal></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Update pg_control</comment>
            <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_11</name></expr></argument>, <argument><expr><operator>.</operator><name>pageChecksum</name> <operator>=</operator> <name>false</name></expr></argument>, <argument><expr><operator>.</operator><name>walSegmentSize</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Update version</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_FILE_PGVERSION</name></expr></argument>, <argument><expr><name>PG_VERSION_11_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Load options</comment>
            <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>pg1Path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><name>backupTypeDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoBundle</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDelta</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Zero-length file to be stored</comment>
            <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"zero"</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <name>backupTimeStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Run backup</comment>
            <expr_stmt><expr><call><name>testBackupPqScriptP</name><argument_list>(<argument><expr><name>PG_VERSION_11</name></expr></argument>, <argument><expr><name>backupTimeStart</name></expr></argument>, <argument><expr><operator>.</operator><name>walCompressType</name> <operator>=</operator> <name>compressTypeGz</name></expr></argument>, <argument><expr><operator>.</operator><name>walTotal</name> <operator>=</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnCmdBackup</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
                <argument><expr><literal type="string">"P00   INFO: last backup label = 20191030-014640F, version = "</literal> <name>PROJECT_VERSION</name> <literal type="string">"\n"</literal>
                <literal type="string">"P00   WARN: diff backup cannot alter 'checksum-page' option to 'false', reset to 'true' from 20191030-014640F\n"</literal>
                <literal type="string">"P00   INFO: execute non-exclusive backup start: backup begins after the next regular checkpoint completes\n"</literal>
                <literal type="string">"P00   INFO: backup start archive = 0000000105DBBF8000000000, lsn = 5dbbf80/0\n"</literal>
                <literal type="string">"P00   INFO: check archive for segment 0000000105DBBF8000000000\n"</literal>
                <literal type="string">"P00 DETAIL: store zero-length file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/zero\n"</literal>
                <literal type="string">"P01 DETAIL: backup file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/global/pg_control (bundle 1/0, 8KB, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P01 DETAIL: match file from prior backup "</literal> <name>TEST_PATH</name> <literal type="string">"/pg1/PG_VERSION (2B, [PCT]) checksum [SHA1]\n"</literal>
                <literal type="string">"P00 DETAIL: reference pg_data/PG_VERSION to 20191030-014640F\n"</literal>
                <literal type="string">"P00   INFO: execute non-exclusive backup stop and wait for all WAL segments to archive\n"</literal>
                <literal type="string">"P00   INFO: backup stop archive = 0000000105DBBF8000000001, lsn = 5dbbf80/300000\n"</literal>
                <literal type="string">"P00 DETAIL: wrote 'backup_label' file returned from backup stop function\n"</literal>
                <literal type="string">"P00 DETAIL: wrote 'tablespace_map' file returned from backup stop function\n"</literal>
                <literal type="string">"P00   INFO: check archive for segment(s) 0000000105DBBF8000000000:0000000105DBBF8000000001\n"</literal>
                <literal type="string">"P00   INFO: new backup label = 20191030-014640F_20191101-092000D\n"</literal>
                <literal type="string">"P00   INFO: diff backup size = [SIZE], file total = 5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
                <argument><expr><call><name>testBackupValidate</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/latest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">". {link, d=20191030-014640F_20191101-092000D}\n"</literal>
                <literal type="string">"bundle {path}\n"</literal>
                <literal type="string">"bundle/1/pg_data/global/pg_control {file, s=8192}\n"</literal>
                <literal type="string">"pg_data {path}\n"</literal>
                <literal type="string">"pg_data/backup_label.gz {file, s=17}\n"</literal>
                <literal type="string">"pg_data/tablespace_map.gz {file, s=19}\n"</literal>
                <literal type="string">"--------\n"</literal>
                <literal type="string">"[backup:target]\n"</literal>
                <literal type="string">"pg_data={\"path\":\""</literal> <name>TEST_PATH</name> <literal type="string">"/pg1\",\"type\":\"path\"}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:file]\n"</literal>
                <literal type="string">"pg_data/PG_VERSION={\"checksum\":\"17ba0791499db908433b80f37c5fbc89b870084b\",\"reference\":\"20191030-014640F\""</literal>
                    <literal type="string">",\"size\":2,\"timestamp\":1572600000}\n"</literal>
                <literal type="string">"pg_data/backup_label={\"checksum\":\"8e6f41ac87a7514be96260d65bacbffb11be77dc\",\"size\":17"</literal>
                    <literal type="string">",\"timestamp\":1572600002}\n"</literal>
                <literal type="string">"pg_data/global/pg_control={\"size\":8192,\"timestamp\":1572600000}\n"</literal>
                <literal type="string">"pg_data/tablespace_map={\"checksum\":\"87fe624d7976c2144e10afcb7a9a49b071f35e9c\",\"size\":19"</literal>
                    <literal type="string">",\"timestamp\":1572600002}\n"</literal>
                <literal type="string">"pg_data/zero={\"size\":0,\"timestamp\":1572600000}\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[target:path]\n"</literal>
                <literal type="string">"pg_data={}\n"</literal>
                <literal type="string">"pg_data/global={}\n"</literal></expr></argument>,
                <argument><expr><literal type="string">"compare file list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
