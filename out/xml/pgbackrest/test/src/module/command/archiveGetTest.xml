<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/command/archiveGetTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Archive Get Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdWrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessFork.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPostgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessProtocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessStorage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"queueNeed()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveAsync</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/unused"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptSpoolPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/spool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>queueSize</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>walSegmentSize</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>queueNeed</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"000000010000000100000001"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>queueSize</name></expr></argument>, <argument><expr><name>walSegmentSize</name></expr></argument>, <argument><expr><name>PG_VERSION_92</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>PathMissingError</name></expr></argument>, <argument><expr><literal type="string">"unable to list file info for missing path '"</literal> <name>TEST_PATH</name> <literal type="string">"/spool/archive/test1/in'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"queue size too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>queueNeed</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"000000010000000100000001"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>queueSize</name></expr></argument>, <argument><expr><name>walSegmentSize</name></expr></argument>, <argument><expr><name>PG_VERSION_92</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"000000010000000100000001\n000000010000000100000002\n"</literal></expr></argument>, <argument><expr><literal type="string">"queue size smaller than min"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"queue empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>queueSize</name> <operator>=</operator> <operator>(</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>queueNeed</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"000000010000000100000001"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>queueSize</name></expr></argument>, <argument><expr><name>walSegmentSize</name></expr></argument>, <argument><expr><name>PG_VERSION_92</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"000000010000000100000001\n000000010000000100000002\n000000010000000100000003\n"</literal></expr></argument>, <argument><expr><literal type="string">"empty queue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pg version earlier than 9.3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>walSegmentBuffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><name>walSegmentSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>walSegmentBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>walSegmentSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/0000000100000001000000FE"</literal></expr></argument>, <argument><expr><name>walSegmentBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/0000000100000001000000FF"</literal></expr></argument>, <argument><expr><name>walSegmentBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>queueNeed</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"0000000100000001000000FE"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>queueSize</name></expr></argument>, <argument><expr><name>walSegmentSize</name></expr></argument>, <argument><expr><name>PG_VERSION_92</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"000000010000000200000000\n000000010000000200000001\n"</literal></expr></argument>, <argument><expr><literal type="string">"queue has wal &lt; 9.3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>, <argument><expr><literal type="string">"0000000100000001000000FE\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check queue"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pg &gt;= 9.3 and ok/junk status files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>walSegmentSize</name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>queueSize</name> <operator>=</operator> <name>walSegmentSize</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/junk"</literal></expr></argument>, <argument><expr><literal type="string">"JUNK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Bad OK file with wrong length (just to make sure this does not cause strSubN() issues)</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/AAA.ok"</literal></expr></argument>, <argument><expr><literal type="string">"0\nWARNING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// OK file with warnings somehow left over from a prior run</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000A00000FFD.ok"</literal></expr></argument>, <argument><expr><literal type="string">"0\nWARNING"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Valid queued WAL segments (one with an OK file containing warnings)</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000A00000FFE"</literal></expr></argument>, <argument><expr><name>walSegmentBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000A00000FFF"</literal></expr></argument>, <argument><expr><name>walSegmentBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000A00000FFF.ok"</literal></expr></argument>, <argument><expr><literal type="string">"0\nWARNING2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Empty OK file indicating a WAL segment not found at the end of the queue</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000B00000000.ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>queueNeed</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"000000010000000A00000FFD"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>queueSize</name></expr></argument>, <argument><expr><name>walSegmentSize</name></expr></argument>, <argument><expr><name>PG_VERSION_11</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"000000010000000B00000000\n000000010000000B00000001\n000000010000000B00000002\n"</literal></expr></argument>, <argument><expr><literal type="string">"queue has wal &gt;= 9.3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>,
            <argument><expr><literal type="string">"000000010000000A00000FFE\n000000010000000A00000FFF\n000000010000000A00000FFF.ok\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cmdArchiveGetAsync()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Install local command handler shim</comment>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ProtocolServerHandler</name></type> <name><name>testLocalHandlerList</name><index>[]</index></name> <init>= <expr><block>{<expr><name>PROTOCOL_SERVER_HANDLER_ARCHIVE_GET_LIST</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnProtocolLocalShimInstall</name><argument_list>(<argument><expr><name>testLocalHandlerList</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>testLocalHandlerList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Arguments that must be included</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argBaseList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptSpoolPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/spool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptArchiveAsync</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"command must be run on the pg host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchiveGetAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HostInvalidError</name></expr></argument>, <argument><expr><literal type="string">"archive-get command must be run on the PostgreSQL host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/global.error"</literal></expr></argument>,
            <argument><expr><literal type="string">"72\narchive-get command must be run on the PostgreSQL host"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on no segments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchiveGetAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ParamInvalidError</name></expr></argument>, <argument><expr><literal type="string">"at least one wal segment is required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/global.error"</literal></expr></argument>, <argument><expr><literal type="string">"96\nat least one wal segment is required"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"no segments to find"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">",\"db-version\":\"10\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"000000010000000100000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchiveGetAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: get 1 WAL file(s) from archive: 000000010000000100000001\n"</literal>
            <literal type="string">"P00 DETAIL: unable to find 000000010000000100000001 in the archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000100000001.ok"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on path permission"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchiveGetAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: get 1 WAL file(s) from archive: 000000010000000100000001\n"</literal>
            <literal type="string">"P00   WARN: repo1: [PathOpenError] unable to list file info for path '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/test2/10-1"</literal>
                <literal type="string">"/0000000100000001': [13] Permission denied\n"</literal>
            <literal type="string">"P00   WARN: [RepoInvalidError] unable to find a valid repository"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000100000001.error"</literal></expr></argument>,
            <argument><expr><literal type="string">"103\n"</literal>
            <literal type="string">"unable to find a valid repository\n"</literal>
            <literal type="string">"repo1: [PathOpenError] unable to list file info for path '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/test2/10-1/0000000100000001':"</literal>
                <literal type="string">" [13] Permission denied"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_MODE</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on invalid compressed segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/000000010000000100000001-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd.gz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchiveGetAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: get 1 WAL file(s) from archive: 000000010000000100000001\n"</literal>
            <literal type="string">"P01   WARN: [FileReadError] raised from local-1 shim protocol: unable to get 000000010000000100000001:\n"</literal>
            <literal type="string">"            repo1: 10-1/0000000100000001/000000010000000100000001-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd.gz"</literal>
                <literal type="string">" [FormatError] unexpected eof in compressed data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000100000001.error"</literal></expr></argument>,
            <argument><expr><literal type="string">"42\n"</literal>
            <literal type="string">"raised from local-1 shim protocol: unable to get 000000010000000100000001:\n"</literal>
            <literal type="string">"repo1: 10-1/0000000100000001/000000010000000100000001-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd.gz [FormatError]"</literal>
                <literal type="string">" unexpected eof in compressed data"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>, <argument><expr><literal type="string">"000000010000000100000001.pgbackrest.tmp\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/000000010000000100000001-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd.gz"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"single segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/000000010000000100000001-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// There should be a temp file left over. Make sure it still exists to test that temp files are removed on retry.</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000100000001.pgbackrest.tmp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchiveGetAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"archive async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: get 1 WAL file(s) from archive: 000000010000000100000001\n"</literal>
            <literal type="string">"P01 DETAIL: found 000000010000000100000001 in the repo1: 10-1 archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000100000001"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"single segment with one invalid file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">",\"db-version\":\"10\"}\n"</literal>
            <literal type="string">"2={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">",\"db-version\":\"10\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/000000010000000100000001-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-2/000000010000000100000001-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd.gz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchiveGetAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"archive async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: get 1 WAL file(s) from archive: 000000010000000100000001\n"</literal>
            <literal type="string">"P01   WARN: repo1: 10-2/0000000100000001/000000010000000100000001-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd.gz"</literal>
                <literal type="string">" [FormatError] unexpected eof in compressed data\n"</literal>
            <literal type="string">"P01 DETAIL: found 000000010000000100000001 in the repo1: 10-1 archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000100000001.ok"</literal></expr></argument>,
            <argument><expr><literal type="string">"0\n"</literal>
            <literal type="string">"repo1: 10-2/0000000100000001/000000010000000100000001-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd.gz [FormatError]"</literal>
                <literal type="string">" unexpected eof in compressed data"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000100000001"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-2/000000010000000100000001-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd.gz"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"single segment with one invalid file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">",\"db-version\":\"10\"}\n"</literal>
            <literal type="string">"2={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">",\"db-version\":\"10\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/000000010000000100000001-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-2/000000010000000100000001-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd.gz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchiveGetAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"archive async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: get 1 WAL file(s) from archive: 000000010000000100000001\n"</literal>
            <literal type="string">"P01   WARN: repo1: 10-2/0000000100000001/000000010000000100000001-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd.gz"</literal>
                <literal type="string">" [FormatError] unexpected eof in compressed data\n"</literal>
            <literal type="string">"P01 DETAIL: found 000000010000000100000001 in the repo1: 10-1 archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000100000001.ok"</literal></expr></argument>,
            <argument><expr><literal type="string">"0\n"</literal>
            <literal type="string">"repo1: 10-2/0000000100000001/000000010000000100000001-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd.gz [FormatError]"</literal>
                <literal type="string">" unexpected eof in compressed data"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000100000001"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-2/000000010000000100000001-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd.gz"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"multiple segments where some are missing or errored and mismatched repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"0000000100000001000000FE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"0000000100000001000000FF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"000000010000000200000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_11_Z</name> <literal type="string">",\"db-version\":\"11\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/0000000100000001000000FE-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create segment duplicates</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/000000010000000200000000-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/000000010000000200000000-bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchiveGetAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"archive async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: get 3 WAL file(s) from archive: 0000000100000001000000FE...000000010000000200000000\n"</literal>
            <literal type="string">"P00   WARN: repo2: [ArchiveMismatchError] unable to retrieve the archive id for database version '10' and system-id"</literal>
                <literal type="string">" '"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">"'\n"</literal>
            <literal type="string">"P01 DETAIL: found 0000000100000001000000FE in the repo1: 10-1 archive\n"</literal>
            <literal type="string">"P00 DETAIL: unable to find 0000000100000001000000FF in the archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/0000000100000001000000FE.ok"</literal></expr></argument>,
            <argument><expr><literal type="string">"0\n"</literal>
            <literal type="string">"repo2: [ArchiveMismatchError] unable to retrieve the archive id for database version '10' and system-id"</literal>
            <literal type="string">" '"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">"'"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/0000000100000001000000FF.ok"</literal></expr></argument>,
            <argument><expr><literal type="string">"0\n"</literal>
            <literal type="string">"repo2: [ArchiveMismatchError] unable to retrieve the archive id for database version '10' and system-id"</literal>
            <literal type="string">" '"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">"'"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/0000000100000001000000FE"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on duplicates now that no segments are missing, repo with bad perms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Fix repo 2 archive info but break archive path</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">",\"db-version\":\"10\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/0000000100000001000000FF-efefefefefefefefefefefefefefefefefefefef"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchiveGetAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"archive async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: get 3 WAL file(s) from archive: 0000000100000001000000FE...000000010000000200000000\n"</literal>
            <literal type="string">"P00   WARN: repo2: [PathOpenError] unable to list file info for path '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo2/archive/test2/10-1"</literal>
                <literal type="string">"/0000000100000001': [13] Permission denied\n"</literal>
            <literal type="string">"P00   WARN: repo2: [PathOpenError] unable to list file info for path '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo2/archive/test2/10-1"</literal>
                <literal type="string">"/0000000100000002': [13] Permission denied\n"</literal>
            <literal type="string">"P01 DETAIL: found 0000000100000001000000FE in the repo1: 10-1 archive\n"</literal>
            <literal type="string">"P01 DETAIL: found 0000000100000001000000FF in the repo1: 10-1 archive\n"</literal>
            <literal type="string">"P00   WARN: [ArchiveDuplicateError] duplicates found for WAL segment 000000010000000200000000:\n"</literal>
            <literal type="string">"            repo1: 10-1/0000000100000002/000000010000000200000000-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal>
                <literal type="string">", 10-1/0000000100000002/000000010000000200000000-bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n"</literal>
            <literal type="string">"            HINT: are multiple primaries archiving to this stanza?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/0000000100000001000000FE"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/0000000100000001000000FE.ok"</literal></expr></argument>,
            <argument><expr><literal type="string">"0\n"</literal>
            <literal type="string">"repo2: [PathOpenError] unable to list file info for path '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo2/archive/test2/10-1/0000000100000001':"</literal>
                <literal type="string">" [13] Permission denied"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/0000000100000001000000FF"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/0000000100000001000000FF.ok"</literal></expr></argument>,
            <argument><expr><literal type="string">"0\n"</literal>
            <literal type="string">"repo2: [PathOpenError] unable to list file info for path '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo2/archive/test2/10-1/0000000100000001':"</literal>
                <literal type="string">" [13] Permission denied"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000200000000.error"</literal></expr></argument>,
            <argument><expr><literal type="string">"45\n"</literal>
            <literal type="string">"duplicates found for WAL segment 000000010000000200000000:\n"</literal>
            <literal type="string">"repo1: 10-1/0000000100000002/000000010000000200000000-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, 10-1/0000000100000002"</literal>
                <literal type="string">"/000000010000000200000000-bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n"</literal>
            <literal type="string">"HINT: are multiple primaries archiving to this stanza?\n"</literal>
            <literal type="string">"repo2: [PathOpenError] unable to list file info for path '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo2/archive/test2/10-1"</literal>                     \
                <literal type="string">"/0000000100000002': [13] Permission denied"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_MODE</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on duplicates"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"000000010000000200000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchiveGetAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"archive async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: get 1 WAL file(s) from archive: 000000010000000200000000\n"</literal>
            <literal type="string">"P00   WARN: [ArchiveDuplicateError] duplicates found for WAL segment 000000010000000200000000:\n"</literal>
            <literal type="string">"            repo1: 10-1/0000000100000002/000000010000000200000000-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal>
                <literal type="string">", 10-1/0000000100000002/000000010000000200000000-bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n"</literal>
            <literal type="string">"            HINT: are multiple primaries archiving to this stanza?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000200000000.error"</literal></expr></argument>,
            <argument><expr><literal type="string">"45\n"</literal>
            <literal type="string">"duplicates found for WAL segment 000000010000000200000000:\n"</literal>
            <literal type="string">"repo1: 10-1/0000000100000002/000000010000000200000000-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, 10-1/0000000100000002"</literal>
                <literal type="string">"/000000010000000200000000-bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n"</literal>
            <literal type="string">"HINT: are multiple primaries archiving to this stanza?"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/000000010000000200000000-bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/000000010000000200000000-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"warn on invalid file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"000000010000000200000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">",\"db-version\":\"11\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"10-1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/000000010000000200000000-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/000000010000000200000000-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchiveGetAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"archive async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: get 1 WAL file(s) from archive: 000000010000000200000000\n"</literal>
            <literal type="string">"P00   WARN: repo3: [ArchiveMismatchError] unable to retrieve the archive id for database version '10' and system-id"</literal>
                <literal type="string">" '"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">"'\n"</literal>
            <literal type="string">"P01   WARN: repo1: 10-1/0000000100000002/000000010000000200000000-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gz"</literal>
                <literal type="string">" [FormatError] unexpected eof in compressed data\n"</literal>
            <literal type="string">"P01 DETAIL: found 000000010000000200000000 in the repo2: 10-1 archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000200000000.ok"</literal></expr></argument>,
            <argument><expr><literal type="string">"0\n"</literal>
            <literal type="string">"repo3: [ArchiveMismatchError] unable to retrieve the archive id for database version '10' and system-id"</literal>
                <literal type="string">" '"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">"'\n"</literal>
            <literal type="string">"repo1: 10-1/0000000100000002/000000010000000200000000-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gz"</literal>
                <literal type="string">" [FormatError] unexpected eof in compressed data"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_GET_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000200000000"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/000000010000000200000000-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error with warnings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>, <argument><expr><operator>.</operator><name>jobRetry</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/000000010000000200000000-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchiveGetAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"archive async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: get 1 WAL file(s) from archive: 000000010000000200000000\n"</literal>
            <literal type="string">"P00   WARN: repo3: [ArchiveMismatchError] unable to retrieve the archive id for database version '10' and system-id"</literal>
                <literal type="string">" '"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">"'\n"</literal>
            <literal type="string">"P01   WARN: [FileReadError] raised from local-1 shim protocol: unable to get 000000010000000200000000:\n"</literal>
            <literal type="string">"            repo1: 10-1/0000000100000002/000000010000000200000000-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gz"</literal>
                <literal type="string">" [FormatError] unexpected eof in compressed data\n"</literal>
            <literal type="string">"            repo2: 10-1/0000000100000002/000000010000000200000000-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gz"</literal>
                <literal type="string">" [FormatError] unexpected eof in compressed data\n"</literal>
            <literal type="string">"            [FileReadError] on retry after 0ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000200000000.error"</literal></expr></argument>,
            <argument><expr><literal type="string">"42\n"</literal>
            <literal type="string">"raised from local-1 shim protocol: unable to get 000000010000000200000000:\n"</literal>
            <literal type="string">"repo1: 10-1/0000000100000002/000000010000000200000000-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gz"</literal>
                <literal type="string">" [FormatError] unexpected eof in compressed data\n"</literal>
            <literal type="string">"repo2: 10-1/0000000100000002/000000010000000200000000-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gz"</literal>
                <literal type="string">" [FormatError] unexpected eof in compressed data\n"</literal>
            <literal type="string">"[FileReadError] on retry after 0ms\n"</literal>
            <literal type="string">"repo3: [ArchiveMismatchError] unable to retrieve the archive id for database version '10' and system-id"</literal>
                <literal type="string">" '"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">"'"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>, <argument><expr><literal type="string">"000000010000000200000000.pgbackrest.tmp\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"global error on invalid executable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Uninstall local command handler shim</comment>
        <expr_stmt><expr><call><name>hrnProtocolLocalShimUninstall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptSpoolPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/spool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveAsync</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"0000000100000001000000FE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"0000000100000001000000FF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"000000010000000200000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>, <argument><expr><operator>.</operator><name>exeBogus</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdArchiveGetAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ExecuteError</name></expr></argument>,
            <argument><expr><literal type="string">"local-1 process terminated unexpectedly [102]: unable to execute 'pgbackrest-bogus': [2] No such file or directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: get 3 WAL file(s) from archive: 0000000100000001000000FE...000000010000000200000000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/global.error"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"102\nlocal-1 process terminated unexpectedly [102]: unable to execute 'pgbackrest-bogus': "</literal>
                <literal type="string">"[2] No such file or directory"</literal></expr></argument>,
            <argument><expr><literal type="string">"check global error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>, <argument><expr><literal type="string">"global.error\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cmdArchiveGet()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argBaseList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptArchiveTimeout</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"command must be run on the pg host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>exeBogus</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HostInvalidError</name></expr></argument>, <argument><expr><literal type="string">"archive-get command must be run on the PostgreSQL host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"segment parameter not specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>exeBogus</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ParamRequiredError</name></expr></argument>, <argument><expr><literal type="string">"WAL segment to get required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path parameter not specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"000000010000000100000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>exeBogus</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ParamRequiredError</name></expr></argument>, <argument><expr><literal type="string">"path to copy WAL segment required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"no valid repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_wal/RECOVERYXLOG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>exeBogus</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>RepoInvalidError</name></expr></argument>, <argument><expr><literal type="string">"unable to find a valid repository"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: repo1: [FileMissingError] unable to load info file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/test1/archive.info' or '"</literal>
                <name>TEST_PATH</name> <literal type="string">"/repo/archive/test1/archive.info.copy':\n"</literal>
            <literal type="string">"            FileMissingError: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/test1/archive.info' for read\n"</literal>
            <literal type="string">"            FileMissingError: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/test1/archive.info.copy' for"</literal>
                <literal type="string">" read\n"</literal>
            <literal type="string">"            HINT: archive.info cannot be opened but is required to push/get WAL segments.\n"</literal>
            <literal type="string">"            HINT: is archive_command configured correctly in postgresql.conf?\n"</literal>
            <literal type="string">"            HINT: has a stanza-create been performed?\n"</literal>
            <literal type="string">"            HINT: use --no-archive-check to disable archive checks during backup if you have an alternate archiving"</literal>
                <literal type="string">" scheme."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"no valid repo - async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveAsync</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"00000001.history"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_wal/RECOVERYHISTORY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>exeBogus</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>RepoInvalidError</name></expr></argument>, <argument><expr><literal type="string">"unable to find a valid repository"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: repo1: [FileMissingError] unable to load info file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/test1/archive.info' or '"</literal>
                <name>TEST_PATH</name> <literal type="string">"/repo/archive/test1/archive.info.copy':\n"</literal>
            <literal type="string">"            FileMissingError: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/test1/archive.info' for read\n"</literal>
            <literal type="string">"            FileMissingError: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/test1/archive.info.copy' for"</literal>
                <literal type="string">" read\n"</literal>
            <literal type="string">"            HINT: archive.info cannot be opened but is required to push/get WAL segments.\n"</literal>
            <literal type="string">"            HINT: is archive_command configured correctly in postgresql.conf?\n"</literal>
            <literal type="string">"            HINT: has a stanza-create been performed?\n"</literal>
            <literal type="string">"            HINT: use --no-archive-check to disable archive checks during backup if you have an alternate archiving"</literal>
                <literal type="string">" scheme."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"WAL not found - timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure the process times out when there is nothing to get</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptSpoolPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/spool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveAsync</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"000000010000000100000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"pg_wal/RECOVERYXLOG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>exeBogus</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>chdir</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>PathMissingError</name></expr></argument>, <argument><expr><literal type="string">"unable to chdir()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ArchiveTimeoutError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to get WAL file '000000010000000100000001' from the archive asynchronously after 1 second(s)\n"</literal>
            <literal type="string">"HINT: check '"</literal> <name>HRN_PATH</name> <literal type="string">"/test1-archive-get-async.log' for errors."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"check for missing WAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000100000001.ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ArchiveTimeoutError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to get WAL file '000000010000000100000001' from the archive asynchronously after 1 second(s)\n"</literal>
            <literal type="string">"HINT: check '"</literal> <name>HRN_PATH</name> <literal type="string">"/test1-archive-get-async.log' for errors."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000100000001.ok"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>,
            <argument><expr><literal type="string">"check OK file was removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write WAL segment for success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000100000001"</literal></expr></argument>, <argument><expr><literal type="string">"SHOULD-BE-A-REAL-WAL-FILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"successful get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: found 000000010000000100000001 in the archive asynchronously"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>, <argument><expr><literal type="string">"RECOVERYXLOG\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write WAL segments for success - queue full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveGetQueueMax</name></expr></argument>, <argument><expr><literal type="string">"48"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>exeBogus</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write more WAL segments (in this case queue should be full)</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000100000001"</literal></expr></argument>, <argument><expr><literal type="string">"SHOULD-BE-A-REAL-WAL-FILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000100000001.ok"</literal></expr></argument>, <argument><expr><literal type="string">"0\nwarning about x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000100000002"</literal></expr></argument>, <argument><expr><literal type="string">"SHOULD-BE-A-REAL-WAL-FILE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"successful get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: warning about x\n"</literal>
            <literal type="string">"P00   INFO: found 000000010000000100000001 in the archive asynchronously"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>, <argument><expr><literal type="string">"RECOVERYXLOG\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>, <argument><expr><literal type="string">"000000010000000100000002\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"unable to get lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure the process times out when it can't get a lock</comment>
        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
                    <argument><expr><call><name>lockAcquire</name><argument_list>(
                        <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptLockPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"999-dededede"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgLockType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">30000</literal></expr></argument>,
                        <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"acquire lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Notify parent that lock has been acquired</comment>
                <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_PUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Wait for parent to allow release lock</comment>
                <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_GET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>lockRelease</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Wait for child to acquire lock</comment>
                <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_GET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ArchiveTimeoutError</name></expr></argument>,
                    <argument><expr><literal type="string">"unable to get WAL file '000000010000000100000001' from the archive asynchronously after 1 second(s)\n"</literal>
                    <literal type="string">"HINT: check '"</literal> <name>HRN_PATH</name> <literal type="string">"/test1-archive-get-async.log' for errors."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Notify child to release lock</comment>
                <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_PUT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"too many parameters specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>exeBogus</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ParamInvalidError</name></expr></argument>, <argument><expr><literal type="string">"extra parameters found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pg version does not match archive.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">",\"db-version\":\"10\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argBaseList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"01ABCDEF01ABCDEF01ABCDEF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_wal/RECOVERYXLOG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>RepoInvalidError</name></expr></argument>, <argument><expr><literal type="string">"unable to find a valid repository"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: repo1: [ArchiveMismatchError] unable to retrieve the archive id for database version '11' and system-id"</literal>
                <literal type="string">" '"</literal> <name>HRN_PG_SYSTEMID_11_Z</name> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pg system id does not match archive.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_10</name></expr></argument>, <argument><expr><operator>.</operator><name>systemId</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>RepoInvalidError</name></expr></argument>, <argument><expr><literal type="string">"unable to find a valid repository"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: repo1: [ArchiveMismatchError] unable to retrieve the archive id for database version '10' and system-id"</literal>
                <literal type="string">" '"</literal> <name>HRN_PG_SYSTEMID_10_1_Z</name> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file is missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_10</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: unable to find 01ABCDEF01ABCDEF01ABCDEF in the archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get WAL segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/01ABCDEF01ABCDEF01ABCDEF-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal></expr></argument>,
            <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: found 01ABCDEF01ABCDEF01ABCDEF in the repo1: 10-1 archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_wal/RECOVERYXLOG"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>, <argument><expr><literal type="string">"RECOVERYXLOG\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on duplicate WAL segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/01ABCDEF01ABCDEF01ABCDEF-bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ArchiveDuplicateError</name></expr></argument>,
            <argument><expr><literal type="string">"duplicates found for WAL segment 01ABCDEF01ABCDEF01ABCDEF:\n"</literal>
            <literal type="string">"repo1: 10-1/01ABCDEF01ABCDEF/01ABCDEF01ABCDEF01ABCDEF-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal>
                <literal type="string">", 10-1/01ABCDEF01ABCDEF/01ABCDEF01ABCDEF01ABCDEF-bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n"</literal>
            <literal type="string">"HINT: are multiple primaries archiving to this stanza?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/01ABCDEF01ABCDEF01ABCDEF-bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get from prior db-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">",\"db-version\":\"10\"}\n"</literal>
            <literal type="string">"2={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">",\"db-version\":\"10\"}\n"</literal>
            <literal type="string">"3={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_11_Z</name> <literal type="string">",\"db-version\":\"11\"}\n"</literal>
            <literal type="string">"4={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">",\"db-version\":\"10\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: found 01ABCDEF01ABCDEF01ABCDEF in the repo1: 10-1 archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>, <argument><expr><literal type="string">"RECOVERYXLOG\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get from current db-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-4/01ABCDEF01ABCDEF01ABCDEF-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: found 01ABCDEF01ABCDEF01ABCDEF in the repo1: 10-4 archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>, <argument><expr><literal type="string">"RECOVERYXLOG\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/01ABCDEF01ABCDEF01ABCDEF-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-4/01ABCDEF01ABCDEF01ABCDEF-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get partial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-4/000000010000000100000001.partial-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal></expr></argument>,
            <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"000000010000000100000001.partial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_wal/RECOVERYXLOG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: found 000000010000000100000001.partial in the repo1: 10-4 archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>, <argument><expr><literal type="string">"RECOVERYXLOG\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-4/000000010000000100000001.partial-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get missing history"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argBaseList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"00000001.history"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_wal/RECOVERYHISTORY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: unable to find 00000001.history in the archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get history"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/00000001.history"</literal></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"HISTORY"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: found 00000001.history in the repo1: 10-1 archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_wal/RECOVERYHISTORY"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>, <argument><expr><literal type="string">"RECOVERYHISTORY\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get compressed and encrypted WAL segment with invalid repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[cipher]\n"</literal>
            <literal type="string">"cipher-pass=\""</literal> <name>TEST_CIPHER_PASS_ARCHIVE</name> <literal type="string">"\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">",\"db-version\":\"10\"}"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>cipherType</name> <operator>=</operator> <name>cipherTypeAes256Cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/01ABCDEF01ABCDEF01ABCDEF-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"</literal></expr></argument>,
            <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>.</operator><name>compressType</name> <operator>=</operator> <name>compressTypeGz</name></expr></argument>, <argument><expr><operator>.</operator><name>cipherType</name> <operator>=</operator> <name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><operator>.</operator><name>cipherPass</name> <operator>=</operator> <name>TEST_CIPHER_PASS_ARCHIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add encryption options</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo-bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_CIPHER_PASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"01ABCDEF01ABCDEF01ABCDEF"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_wal/RECOVERYXLOG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: repo1: [FileMissingError] unable to load info file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo-bogus/archive/test1/archive.info'"</literal>
                <literal type="string">" or '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo-bogus/archive/test1/archive.info.copy':\n"</literal>
            <literal type="string">"            FileMissingError: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo-bogus/archive/test1/archive.info'"</literal>
                <literal type="string">" for read\n"</literal>
            <literal type="string">"            FileMissingError: unable to open missing file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo-bogus/archive/test1/archive.info.copy'"</literal>
                <literal type="string">" for read\n"</literal>
            <literal type="string">"            HINT: archive.info cannot be opened but is required to push/get WAL segments.\n"</literal>
            <literal type="string">"            HINT: is archive_command configured correctly in postgresql.conf?\n"</literal>
            <literal type="string">"            HINT: has a stanza-create been performed?\n"</literal>
            <literal type="string">"            HINT: use --no-archive-check to disable archive checks during backup if you have an alternate"</literal>
                <literal type="string">" archiving scheme.\n"</literal>
            <literal type="string">"P00   INFO: found 01ABCDEF01ABCDEF01ABCDEF in the repo2: 10-1 archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_wal/RECOVERYXLOG"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>, <argument><expr><literal type="string">"RECOVERYXLOG\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"repo1 has info but bad permissions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=2\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"2={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">",\"db-version\":\"10\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-2"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: repo1: [PathOpenError] unable to list file info for path '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo-bogus/archive/test1/10-2"</literal>
                <literal type="string">"/01ABCDEF01ABCDEF': [13] Permission denied\n"</literal>
            <literal type="string">"P00   INFO: found 01ABCDEF01ABCDEF01ABCDEF in the repo2: 10-1 archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>, <argument><expr><literal type="string">"RECOVERYXLOG\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"all repos have info but bad permissions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_MODE</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>RepoInvalidError</name></expr></argument>, <argument><expr><literal type="string">"unable to find a valid repository"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: repo1: [PathOpenError] unable to list file info for path '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo-bogus/archive/test1/10-2"</literal>
                <literal type="string">"/01ABCDEF01ABCDEF': [13] Permission denied\n"</literal>
            <literal type="string">"P00   WARN: repo2: [PathOpenError] unable to list file info for path '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/test1/10-1"</literal>
                <literal type="string">"/01ABCDEF01ABCDEF': [13] Permission denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_MODE</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_MODE</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"unable to get from one repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-2/01ABCDEF01ABCDEF01ABCDEF-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: repo1: 10-2/01ABCDEF01ABCDEF/01ABCDEF01ABCDEF01ABCDEF-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gz"</literal>
                <literal type="string">" [FormatError] unexpected eof in compressed data\n"</literal>
            <literal type="string">"P00   INFO: found 01ABCDEF01ABCDEF01ABCDEF in the repo2: 10-1 archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"unable to get from all repos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_MODE</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/01ABCDEF01ABCDEF01ABCDEF-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gz"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>FileReadError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to get 01ABCDEF01ABCDEF01ABCDEF:\n"</literal>
            <literal type="string">"repo1: 10-2/01ABCDEF01ABCDEF/01ABCDEF01ABCDEF01ABCDEF-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gz [FormatError]"</literal>
                <literal type="string">" unexpected eof in compressed data\n"</literal>
            <literal type="string">"repo2: 10-1/01ABCDEF01ABCDEF/01ABCDEF01ABCDEF01ABCDEF-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gz [FileOpenError]"</literal>
                <literal type="string">" unable to open file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo/archive/test1/10-1/01ABCDEF01ABCDEF/01ABCDEF01ABCDEF01ABCDEF"</literal>
                    <literal type="string">"-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gz' for read: [13] Permission denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_MODE</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-1/01ABCDEF01ABCDEF01ABCDEF-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.gz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"repo is specified so invalid repo is skipped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepo</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_CIPHER_PASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: found 01ABCDEF01ABCDEF01ABCDEF in the repo2: 10-1 archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"no segments to find with existing ok file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveTimeout</name></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptSpoolPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/spool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveAsync</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"000000010000000100000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"pg_wal/RECOVERYXLOG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=2\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"2={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">",\"db-version\":\"10\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Put a warning in the file to show that it was read and later overwritten</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000100000001.ok"</literal></expr></argument>, <argument><expr><literal type="string">"0\nshould not be output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: unable to find 000000010000000100000001 in the archive asynchronously"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check that the ok file is missing since it should have been removed on the first loop and removed again on a subsequent</comment>
        <comment type="line">// loop once the async process discovered that the file was missing and wrote the ok file again.</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"do not retry missing segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveTimeout</name></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptSpoolPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/spool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveAsync</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveMissingRetry</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"000000010000000100000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"pg_wal/RECOVERYXLOG"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure that a WAL segment is found when the ok file is missing</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(
            <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/10-2/000000010000000100000001-abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: found 000000010000000100000001 in the archive asynchronously"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove the ok file created by the async process</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>, <argument><expr><literal type="string">"000000010000000100000002.ok\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write an ok file</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/000000010000000100000001.ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Missing should be returned since archive-missing-retry=n</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: unable to find 000000010000000100000001 in the archive asynchronously"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check that the ok file was removed</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
