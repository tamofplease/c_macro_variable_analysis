<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/command/serverTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Server Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/exit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/remote/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessFork.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessServer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessStorage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cmdServer()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>(<argument>.timeout = <literal type="number">15000</literal></argument>)</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"client repo"</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/BOGUS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostConfig</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pgbackrest.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostType</name></expr></argument>, <argument><expr><literal type="string">"tls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TEST_IN_CONTAINER</name></expr></cpp:if>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostCaFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_CA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostCertFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_CLIENT_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostKeyFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_CLIENT_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostPort</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Client 1</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storageRemote</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>storageRemote</name></expr></argument>,
                    <argument><expr><call><name>storageRemoteNew</name><argument_list>(
                        <argument><expr><name>STORAGE_MODE_FILE_DEFAULT</name></expr></argument>, <argument><expr><name>STORAGE_MODE_PATH_DEFAULT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><call><name>protocolRemoteGet</name><argument_list>(<argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionUInt</name><argument_list>(<argument><expr><name>cfgOptCompressLevelNetwork</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"new storage 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><name>storageRemote</name></expr></argument>, <argument><expr><literal type="string">"client1.txt"</literal></expr></argument>, <argument><expr><literal type="string">"CLIENT1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolRemoteFree</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free client 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Client 2</comment>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>storageRemote</name></expr></argument>,
                    <argument><expr><call><name>storageRemoteNew</name><argument_list>(
                        <argument><expr><name>STORAGE_MODE_FILE_DEFAULT</name></expr></argument>, <argument><expr><name>STORAGE_MODE_PATH_DEFAULT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><call><name>protocolRemoteGet</name><argument_list>(<argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionUInt</name><argument_list>(<argument><expr><name>cfgOptCompressLevelNetwork</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"new storage 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><name>storageRemote</name></expr></argument>, <argument><expr><literal type="string">"client2.txt"</literal></expr></argument>, <argument><expr><literal type="string">"CLIENT2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolRemoteFree</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free client 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Notify parent on exit</comment>
                <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_PUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"client pg"</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/BOGUS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHostType</name></expr></argument>, <argument><expr><literal type="string">"tls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>TEST_IN_CONTAINER</name></expr></cpp:if>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHostCaFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_CA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHostCertFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_CLIENT_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHostKeyFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_CLIENT_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHostPort</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcess</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleLocal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Client 3</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storageRemote</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>storageRemote</name></expr></argument>,
                    <argument><expr><call><name>storageRemoteNew</name><argument_list>(
                        <argument><expr><name>STORAGE_MODE_FILE_DEFAULT</name></expr></argument>, <argument><expr><name>STORAGE_MODE_PATH_DEFAULT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                        <argument><expr><call><name>protocolRemoteGet</name><argument_list>(<argument><expr><name>protocolStorageTypePg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionUInt</name><argument_list>(<argument><expr><name>cfgOptCompressLevelNetwork</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"new storage 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><name>storageRemote</name></expr></argument>, <argument><expr><literal type="string">"client3.txt"</literal></expr></argument>, <argument><expr><literal type="string">"CLIENT3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolRemoteFree</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free client 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Notify parent on exit</comment>
                <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_PUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"client control"</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <macro><name>HRN_FORK_BEGIN</name><argument_list>(<argument>.timeout = <literal type="number">15000</literal></argument>)</argument_list></macro>
                <block>{<block_content>
                    <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"server"</literal></argument>)</argument_list></macro>
                    <block>{<block_content>
                        <comment type="line">// Write a config file to demonstrate that options are loaded and reloaded</comment>
                        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
                            <argument><expr><name>storageTest</name></expr></argument>,
                            <argument><expr><literal type="string">"pgbackrest.conf"</literal></expr></argument>,
                            <argument><expr><literal type="string">"[global]\n"</literal>
                            <name>CFGOPT_TLS_SERVER_CA_FILE</name> <literal type="string">"="</literal> <name>HRN_SERVER_CA</name> <literal type="string">"\n"</literal>
                            <name>CFGOPT_TLS_SERVER_CERT_FILE</name> <literal type="string">"="</literal> <name>HRN_SERVER_CERT</name> <literal type="string">"\n"</literal>
                            <name>CFGOPT_TLS_SERVER_KEY_FILE</name> <literal type="string">"="</literal> <name>HRN_SERVER_KEY</name> <literal type="string">"\n"</literal>
                            <name>CFGOPT_TLS_SERVER_AUTH</name> <literal type="string">"=pgbackrest-client=db\n"</literal>
                            <literal type="string">"repo1-path="</literal> <name>TEST_PATH</name> <literal type="string">"/repo\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfig</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pgbackrest.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTlsServerPort</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLogLevelStderr</name></expr></argument>, <argument><expr><name>CFGOPTVAL_ARCHIVE_MODE_OFF_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdServer</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Init exit signal handlers</comment>
                        <expr_stmt><expr><call><name>exitInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// No log testing needed</comment>
                        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Add a fake pid to ensure SIGTERM is sent to unterminated children</comment>
                        <expr_stmt><expr><call><name>cmdServerInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <decl_stmt><decl><type><name>int</name></type> <name>fakePid</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>serverLocal</name><operator>.</operator><name>processList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fakePid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Get pid of this process to identify child process later</comment>
                        <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <comment type="line">// Add parameters to arg list required for a reload</comment>
                        <expr_stmt><expr><call><name>strLstInsert</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>cfgExe</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>CFGCMD_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdServer</name><argument_list>(<argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// If this is a child process then exit immediately</comment>
                        <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_PUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"server control"</literal></argument>)</argument_list></macro>
                    <block>{<block_content>
                        <comment type="line">// Wait for forked server processes to exit</comment>
                        <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_GET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>HRN_FORK_PROCESS_ID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SIGHUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_GET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_GET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Send term to server processes</comment>
                        <expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>HRN_FORK_PROCESS_ID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Wait for both child processes to exit</comment>
                <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_GET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_GET</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Check that files written by child processes are present</comment>
                <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo/client1.txt"</literal></expr></argument>, <argument><expr><literal type="string">"CLIENT1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo/client2.txt"</literal></expr></argument>, <argument><expr><literal type="string">"CLIENT2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"pg/client3.txt"</literal></expr></argument>, <argument><expr><literal type="string">"CLIENT3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cmdServerPing()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on extra parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdServerPing</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdServerPing</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ParamInvalidError</name></expr></argument>, <argument><expr><literal type="string">"extra parameters found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>(<argument>.timeout = <literal type="number">15000</literal></argument>)</argument_list></macro>
        <block>{<block_content>

            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"client"</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"ping localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTlsServerPort</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdServerPing</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdServerPing</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"ping 12.0.0.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTlsServerPort</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdServerPing</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdServerPing</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ping"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Notify parent on exit</comment>
                <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_PUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"client control"</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <macro><name>HRN_FORK_BEGIN</name><argument_list>(<argument>.timeout = <literal type="number">15000</literal></argument>)</argument_list></macro>
                <block>{<block_content>
                    <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"server"</literal></argument>)</argument_list></macro>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTlsServerCaFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_CA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTlsServerCertFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTlsServerKeyFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTlsServerAuth</name></expr></argument>, <argument><expr><literal type="string">"bogus=*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTlsServerPort</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdServer</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Init exit signal handlers</comment>
                        <expr_stmt><expr><call><name>exitInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// No log testing needed</comment>
                        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Get pid of this process to identify child process later</comment>
                        <decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdServer</name><argument_list>(<argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// If this is a child process then exit immediately</comment>
                        <if_stmt><if>if <condition>(<expr><name>pid</name> <operator>!=</operator> <call><name>getpid</name><argument_list>()</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_PUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"server control"</literal></argument>)</argument_list></macro>
                    <block>{<block_content>
                        <comment type="line">// Wait for forked child processes to exit</comment>
                        <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_GET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_GET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Send term to child processes</comment>
                        <expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><call><name>HRN_FORK_PROCESS_ID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Wait for child process to exit</comment>
                <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_GET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
