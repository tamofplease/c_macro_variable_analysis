<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/command/archivePushTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Archive Push Command
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessFork.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessInfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPostgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessProtocol.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create default storage object for testing</comment>
    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"archivePushReadyList(), archivePushProcessList(), and archivePushDrop()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptSpoolPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/spool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveAsync</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal/archive_status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"spool/archive/db/out"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create ok files to indicate WAL that has already been archived</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name> <literal type="string">"/000000010000000100000001.ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name> <literal type="string">"/000000010000000100000003.ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name> <literal type="string">"/000000010000000100000004.ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name> <literal type="string">"/000000010000000100000005.error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name> <literal type="string">"/000000010000000100000006.error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name> <literal type="string">"/global.error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create ready files for wal that still needs to be archived</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal/archive_status/000000010000000100000002.ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal/archive_status/000000010000000100000003.ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal/archive_status/000000010000000100000005.ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal/archive_status/000000010000000100000006.ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"ready list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>archivePushProcessList</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/db/pg_wal"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"000000010000000100000002\n000000010000000100000005\n000000010000000100000006\n"</literal></expr></argument>, <argument><expr><literal type="string">"ready list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name></expr></argument>, <argument><expr><literal type="string">"000000010000000100000003.ok\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"remaining status list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"WAL drop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argListDrop</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argListDrop</name></expr></argument>, <argument><expr><name>cfgOptArchivePushQueueMax</name></expr></argument>, <argument><expr><literal type="string">"%zu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argListDrop</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write the files that we claim are in pg_wal</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>walBuffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(<argument>(PgWal){.version = PG_VERSION_10}</argument>, <argument>walBuffer</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal/000000010000000100000002"</literal></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal/000000010000000100000003"</literal></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal/000000010000000100000005"</literal></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal/000000010000000100000006"</literal></expr></argument>, <argument><expr><name>walBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Queue max is high enough that no WAL will be dropped</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>archivePushDrop</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_wal"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>archivePushProcessList</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/db/pg_wal"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"wal is not dropped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Now set queue max low enough that WAL will be dropped</comment>
        <expr_stmt><expr><name>argListDrop</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argListDrop</name></expr></argument>, <argument><expr><name>cfgOptArchivePushQueueMax</name></expr></argument>, <argument><expr><literal type="string">"%zu"</literal></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argListDrop</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>archivePushDrop</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg_wal"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>archivePushProcessList</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/db/pg_wal"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"wal is dropped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"archivePushCheck()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"mismatched pg_control and archive.info - pg version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create incorrect archive info</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":5555555555555555555,\"db-version\":\"9.4\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>archivePushCheck</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RepoInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to find a valid repository:\n"</literal>
            <literal type="string">"repo1: [ArchiveMismatchError] PostgreSQL version 9.6, system-id "</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">" do not match repo1 stanza"</literal>
                <literal type="string">" version 9.4, system-id 5555555555555555555"</literal>
                <literal type="string">"\nHINT: are you archiving to the correct stanza?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"mismatched pg_control and archive.info - system-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Fix the version</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":5555555555555555555,\"db-version\":\"9.6\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>archivePushCheck</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RepoInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to find a valid repository:\n"</literal>
            <literal type="string">"repo1: [ArchiveMismatchError] PostgreSQL version 9.6, system-id "</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">" do not match repo1 stanza"</literal>
                <literal type="string">" version 9.6, system-id 5555555555555555555"</literal>
                <literal type="string">"\nHINT: are you archiving to the correct stanza?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pg_control and archive.info match"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Fix archive info</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">",\"db-version\":\"9.6\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ArchivePushCheckResult</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>archivePushCheck</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get archive check result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pgVersion</name></name></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>, <argument><expr><literal type="string">"check pg version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pgSystemId</name></name></expr></argument>, <argument><expr><name>HRN_PG_SYSTEMID_96</name></expr></argument>, <argument><expr><literal type="string">"check pg system id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ArchivePushFileRepoData</name> <modifier>*</modifier></type><name>repoData</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>repoList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>repoIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check repo idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>archiveId</name></name></expr></argument>, <argument><expr><literal type="string">"9.6-1"</literal></expr></argument>, <argument><expr><literal type="string">"check archive id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>cipherType</name></name></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><literal type="string">"check cipher type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>cipherPass</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check cipher pass (not set in this test)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"mismatched repos when pg-path not present"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// repo2 has correct info</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">",\"db-version\":\"9.6\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// repo4 has incorrect info</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":5555555555555555555,\"db-version\":\"9.4\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>archivePushCheck</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get archive check result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pgVersion</name></name></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>, <argument><expr><literal type="string">"check pg version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pgSystemId</name></name></expr></argument>, <argument><expr><name>HRN_PG_SYSTEMID_96</name></expr></argument>, <argument><expr><literal type="string">"check pg system id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><name><name>result</name><operator>.</operator><name>errorList</name></name></expr></argument>,
            <argument><expr><literal type="string">"repo4: [ArchiveMismatchError] repo2 stanza version 9.6, system-id "</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">" do not match repo4 stanza"</literal>
                <literal type="string">" version 9.4, system-id 5555555555555555555\n"</literal>
            <literal type="string">"HINT: are you archiving to the correct stanza?\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check error list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>repoData</name> <operator>=</operator> <call><name>lstGet</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>repoList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>repoIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check repo idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>archiveId</name></name></expr></argument>, <argument><expr><literal type="string">"9.6-1"</literal></expr></argument>, <argument><expr><literal type="string">"check archive id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>cipherType</name></name></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><literal type="string">"check cipher type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>cipherPass</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check cipher pass (not set in this test)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"matched repos when pg-path not present"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// repo4 has correct info</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=2\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":5555555555555555555,\"db-version\":\"9.4\"}\n"</literal>
            <literal type="string">"2={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_96_Z</name> <literal type="string">",\"db-version\":\"9.6\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>archivePushCheck</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get archive check result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pgVersion</name></name></expr></argument>, <argument><expr><name>PG_VERSION_96</name></expr></argument>, <argument><expr><literal type="string">"check pg version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>pgSystemId</name></name></expr></argument>, <argument><expr><name>HRN_PG_SYSTEMID_96</name></expr></argument>, <argument><expr><literal type="string">"check pg system id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>repoData</name> <operator>=</operator> <call><name>lstGet</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>repoList</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>repoIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check repo idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>archiveId</name></name></expr></argument>, <argument><expr><literal type="string">"9.6-1"</literal></expr></argument>, <argument><expr><literal type="string">"check repo2 archive id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>cipherType</name></name></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><literal type="string">"check repo2 cipher pass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>cipherPass</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check repo2 cipher pass (not set in this test)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>repoData</name> <operator>=</operator> <call><name>lstGet</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>repoList</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>repoIdx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check repo idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>archiveId</name></name></expr></argument>, <argument><expr><literal type="string">"9.6-2"</literal></expr></argument>, <argument><expr><literal type="string">"check repo4 archive id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>cipherType</name></name></expr></argument>, <argument><expr><name>cipherTypeNone</name></expr></argument>, <argument><expr><literal type="string">"check repo4 cipher type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>repoData</name><operator>-&gt;</operator><name>cipherPass</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check repo4 cipher pass (not set in this test)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"Synchronous cmdArchivePush() and archivePushFile()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"command must be run on the pg host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HostInvalidError</name></expr></argument>, <argument><expr><literal type="string">"archive-push command must be run on the PostgreSQL host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"WAL segment not specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ParamRequiredError</name></expr></argument>, <argument><expr><literal type="string">"WAL segment to push required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pg-path not specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argListTemp</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><literal type="string">"pg_wal/000000010000000100000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argListTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>OptionRequiredError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'pg1-path' must be specified when relative wal paths are used"</literal>
            <literal type="string">"\nHINT: is %f passed to archive-push instead of %p?"</literal>
            <literal type="string">"\nHINT: PostgreSQL may pass relative paths even with %p depending on the environment."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"attempt to push WAL with incorrect headers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control and archive.info</comment>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argListTemp</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><literal type="string">"pg_wal/000000010000000100000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argListTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_11_Z</name> <literal type="string">",\"db-version\":\"11\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Generate WAL with incorrect headers and try to push them</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>walBuffer1</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>walBuffer1</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>walBuffer1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(<argument>(PgWal){.version = PG_VERSION_10}</argument>, <argument>walBuffer1</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal/000000010000000100000001"</literal></expr></argument>, <argument><expr><name>walBuffer1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>chdir</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>PathMissingError</name></expr></argument>, <argument><expr><literal type="string">"unable to chdir()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ArchiveMismatchError</name></expr></argument>,
            <argument><expr><literal type="string">"WAL file '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_wal/000000010000000100000001' version 10, system-id "</literal> <name>HRN_PG_SYSTEMID_10_Z</name> <literal type="string">" do not"</literal>
                <literal type="string">" match stanza version 11, system-id "</literal> <name>HRN_PG_SYSTEMID_11_Z</name> <literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>walBuffer1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(<argument>(PgWal){.version = PG_VERSION_11</argument>, <argument>.systemId = <literal type="number">1</literal>}</argument>, <argument>walBuffer1</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>walBuffer1Sha1</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><name>walBuffer1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal/000000010000000100000001"</literal></expr></argument>, <argument><expr><name>walBuffer1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ArchiveMismatchError</name></expr></argument>,
            <argument><expr><literal type="string">"WAL file '"</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pg_wal/000000010000000100000001' version 11, system-id "</literal> <name>HRN_PG_SYSTEMID_11_1_Z</name> <literal type="string">" do not"</literal>
                <literal type="string">" match stanza version 11, system-id "</literal> <name>HRN_PG_SYSTEMID_11_Z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"push by ignoring the invalid header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argListTemp</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>cfgOptArchiveHeaderCheck</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><literal type="string">"pg_wal/000000010000000100000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argListTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"push the WAL segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: pushed WAL file '000000010000000100000001' to the archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-1/000000010000000100000001-%s.gz"</literal></expr></argument>, <argument><expr><name>walBuffer1Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check repo for WAL file, then remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"generate valid WAL and push them, with parameter --no-archive-mode-check to suppress duplicate WAL warning"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argListTemp</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawNegate</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>cfgOptArchiveModeCheck</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><literal type="string">"pg_wal/000000010000000100000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argListTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>walBuffer1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(<argument>(PgWal){.version = PG_VERSION_11}</argument>, <argument>walBuffer1</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal/000000010000000100000001"</literal></expr></argument>, <argument><expr><name>walBuffer1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"push the WAL segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: pushed WAL file '000000010000000100000001' to the archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check sha1 checksum against fixed values once to make sure they are not getting munged. After this we'll calculate them</comment>
        <comment type="line">// directly from the buffers to reduce the cost of maintaining checksums.</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-1/0000000100000001"</literal></expr></argument>,
            <argument><expr><call><name>zNewFmt</name><argument_list>(
                <argument><expr><literal type="string">"000000010000000100000001-%s.gz\n"</literal></expr></argument>,
                <argument><expr><ternary><condition><expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr> ?</condition><then>
                    <expr><operator>(</operator><ternary><condition><expr><call><name>TEST_BIG_ENDIAN</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"4dc9df63290935f68f43b7d02005716a98800ce0"</literal></expr> </then><else>: <expr><literal type="string">"858a9ef24b79468eb2a61543b58140addfede0fc"</literal></expr></else></ternary><operator>)</operator></expr> </then><else>:
                    <expr><literal type="string">"044ec0576dc4e59d460aa3a8ac796ba4874ddff3"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check repo for WAL file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// No warning emitted re WAL file already existing with the same checksum due to --no-archive-mode-check</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"push the WAL segment again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: pushed WAL file '000000010000000100000001' to the archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Now create a new WAL buffer with a different checksum to test checksum errors</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>walBuffer2</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>walBuffer2</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>walBuffer2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(<argument>(PgWal){.version = PG_VERSION_11}</argument>, <argument>walBuffer2</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>walBuffer2Sha1</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><name>walBuffer2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal/000000010000000100000001"</literal></expr></argument>, <argument><expr><name>walBuffer2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ArchiveDuplicateError</name></expr></argument>,
            <argument><expr><literal type="string">"WAL file '000000010000000100000001' already exists in the repo1 archive with a different checksum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"WAL with absolute path and no pg1-path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argListTemp</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_wal/000000010000000100000002"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argListTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"pg/pg_wal/000000010000000100000002"</literal></expr></argument>, <argument><expr><name>walBuffer2</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"write WAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create tmp file to make it look like a prior push failed partway through to ensure that retries work</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>,
            <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo/archive/test/11-1/0000000100000001/000000010000000100000002-%s.gz.pgbackrest.tmp"</literal></expr></argument>, <argument><expr><name>walBuffer2Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"PARTIAL"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"write WAL tmp file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"push the WAL segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: pushed WAL file '000000010000000100000002' to the archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-1/0000000100000001/000000010000000100000002-%s.gz"</literal></expr></argument>, <argument><expr><name>walBuffer2Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check repo for WAL file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>storageExistsP</name><argument_list>(
                <argument><expr><name>storageTest</name></expr></argument>,
                <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo/archive/test/11-1/0000000100000001/000000010000000100000002-%s.gz.pgbackrest.tmp"</literal></expr></argument>, <argument><expr><name>walBuffer2Sha1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check WAL tmp file is gone"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"push a history file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argListTemp</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><literal type="string">"pg_wal/00000001.history"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argListTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal/00000001.history"</literal></expr></argument>, <argument><expr><literal type="string">"FAKEHISTORY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"push a history file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: pushed WAL file '00000001.history' to the archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><call><name>storageRepoIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/11-1/00000001.history"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check repo for history file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"check drop functionality"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal/archive_status/000000010000000100000001.ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal/archive_status/000000010000000100000002.ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argListTemp</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>cfgOptArchivePushQueueMax</name></expr></argument>, <argument><expr><literal type="string">"16m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><literal type="string">"pg_wal/000000010000000100000002"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argListTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"drop WAL file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   WARN: dropped WAL file '000000010000000100000002' because archive queue exceeded 16MB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argListTemp</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>cfgOptArchivePushQueueMax</name></expr></argument>, <argument><expr><literal type="string">"1GB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><literal type="string">"pg_wal/000000010000000100000002"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argListTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"push WAL file again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: WAL file '000000010000000100000002' already exists in the repo1 archive with the same checksum\n"</literal>
            <literal type="string">"            HINT: this is valid in some recovery scenarios but may also indicate a problem.\n"</literal>
            <literal type="string">"P00   INFO: pushed WAL file '000000010000000100000002' to the archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"multiple repos, one encrypted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove old repo</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo"</literal></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create an artificially small WAL file to save time on encryption</comment>
        <expr_stmt><expr><name>walBuffer2</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>walBuffer2</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>walBuffer2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(<argument>(PgWal){.version = PG_VERSION_11}</argument>, <argument>walBuffer2</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><name>walBuffer2Sha1</name> <operator>=</operator> <call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><name>walBuffer2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"pg/pg_wal/000000010000000100000002"</literal></expr></argument>, <argument><expr><name>walBuffer2</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"write WAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argListTemp</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawStrId</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"badpassphrase"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawNegate</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>cfgOptCompress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><literal type="string">"pg_wal/000000010000000100000002"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argListTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// repo2 is encrypted</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[cipher]\n"</literal>
            <literal type="string">"cipher-pass=\"badsubpassphrase\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_11_Z</name> <literal type="string">",\"db-version\":\"11\"}"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>cipherType</name> <operator>=</operator> <name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><operator>.</operator><name>cipherPass</name> <operator>=</operator> <literal type="string">"badpassphrase"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// repo3 is not encrypted</comment>
        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>INFO_ARCHIVE_PATH_FILE</name></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_11_Z</name> <literal type="string">",\"db-version\":\"11\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Push encrypted WAL segment</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"push the WAL segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: pushed WAL file '000000010000000100000002' to the archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo2/archive/test/11-1/0000000100000001/000000010000000100000002-%s"</literal></expr></argument>, <argument><expr><name>walBuffer2Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check repo2 for WAL file then remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo3/archive/test/11-1/0000000100000001/000000010000000100000002-%s"</literal></expr></argument>, <argument><expr><name>walBuffer2Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check repo3 for WAL file then remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write error on one repo but other repo succeeds"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_MODE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo2/archive/test/11-1/0000000100000001"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CommandError</name></expr></argument>,
            <argument><expr><literal type="string">"archive-push command encountered error(s):\n"</literal>
            <literal type="string">"repo2: [FileOpenError] unable to open file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo2/archive/test/11-1/0000000100000001"</literal>
                <literal type="string">"/000000010000000100000002-%s' for write: [13] Permission denied"</literal></expr></argument>,
            <argument><expr><name>walBuffer2Sha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST_EMPTY</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo2/archive/test/11-1/0000000100000001"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check repo2 for no WAL file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo3/archive/test/11-1/0000000100000001"</literal></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"000000010000000100000002-%s\n"</literal></expr></argument>, <argument><expr><name>walBuffer2Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check repo3 for WAL file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_MODE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo2/archive/test/11-1/0000000100000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"push WAL to one repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"push the WAL segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: WAL file '000000010000000100000002' already exists in the repo3 archive with the same checksum\n"</literal>
            <literal type="string">"            HINT: this is valid in some recovery scenarios but may also indicate a problem.\n"</literal>
            <literal type="string">"P00   INFO: pushed WAL file '000000010000000100000002' to the archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo2/archive/test/11-1/0000000100000001"</literal></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"000000010000000100000002-%s\n"</literal></expr></argument>, <argument><expr><name>walBuffer2Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check repo2 for WAL file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"WAL already exists in both repos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"push the WAL segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: WAL file '000000010000000100000002' already exists in the repo2 archive with the same checksum\n"</literal>
            <literal type="string">"            HINT: this is valid in some recovery scenarios but may also indicate a problem.\n"</literal>
            <literal type="string">"P00   WARN: WAL file '000000010000000100000002' already exists in the repo3 archive with the same checksum\n"</literal>
            <literal type="string">"            HINT: this is valid in some recovery scenarios but may also indicate a problem.\n"</literal>
            <literal type="string">"P00   INFO: pushed WAL file '000000010000000100000002' to the archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"push succeeds on one repo when other repo fails to load archive.info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo2/archive/test/11-1/0000000100000001/000000010000000100000002-%s"</literal></expr></argument>, <argument><expr><name>walBuffer2Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo3/archive/test/11-1/0000000100000001/000000010000000100000002-%s"</literal></expr></argument>, <argument><expr><name>walBuffer2Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_MODE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo2"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CommandError</name></expr></argument>,
            <argument><expr><literal type="string">"archive-push command encountered error(s):\n"</literal>
            <literal type="string">"repo2: [FileOpenError] unable to load info file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo2/archive/test/archive.info' or"</literal>
                <literal type="string">" '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo2/archive/test/archive.info.copy':\n"</literal>
            <literal type="string">"FileOpenError: unable to open file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo2/archive/test/archive.info' for read: [13] Permission denied\n"</literal>
            <literal type="string">"FileOpenError: unable to open file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo2/archive/test/archive.info.copy' for read:"</literal>
                <literal type="string">" [13] Permission denied\n"</literal>
            <literal type="string">"HINT: archive.info cannot be opened but is required to push/get WAL segments.\n"</literal>
            <literal type="string">"HINT: is archive_command configured correctly in postgresql.conf?\n"</literal>
            <literal type="string">"HINT: has a stanza-create been performed?\n"</literal>
            <literal type="string">"HINT: use --no-archive-check to disable archive checks during backup if you have an alternate archiving scheme."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure WAL got pushed to repo3</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo3/archive/test/11-1/0000000100000001/000000010000000100000002-%s"</literal></expr></argument>, <argument><expr><name>walBuffer2Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_MODE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"push succeeds on one repo when other repo fails to read path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_MODE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo2/archive/test/11-1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CommandError</name></expr></argument>,
            <argument><expr><literal type="string">"archive-push command encountered error(s):\n"</literal>
            <literal type="string">"repo2: [PathOpenError] unable to list file info for path '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo2/archive/test/11-1/0000000100000001':"</literal>
                <literal type="string">" [13] Permission denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure WAL got pushed to repo3</comment>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo3/archive/test/11-1/0000000100000001/000000010000000100000002-%s"</literal></expr></argument>, <argument><expr><name>walBuffer2Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_MODE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo2/archive/test/11-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"Asynchronous cmdArchivePush() and cmdArchivePushAsync()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Install local command handler shim</comment>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ProtocolServerHandler</name></type> <name><name>testLocalHandlerList</name><index>[]</index></name> <init>= <expr><block>{<expr><name>PROTOCOL_SERVER_HANDLER_ARCHIVE_PUSH_LIST</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnProtocolLocalShimInstall</name><argument_list>(<argument><expr><name>testLocalHandlerList</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>testLocalHandlerList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"command must be run on the pg host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--"</literal> <name>CFGOPT_SPOOL_PATH</name> <literal type="string">"=/spool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--"</literal> <name>CFGOPT_STANZA</name> <literal type="string">"=test2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--"</literal> <name>CFGOPT_ARCHIVE_ASYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HostInvalidError</name></expr></argument>, <argument><expr><literal type="string">"archive-push command must be run on the PostgreSQL host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pg1-path must be set when async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptSpoolPath</name></expr></argument>, <argument><expr><literal type="string">"/spool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveAsync</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"/000000010000000100000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>OptionRequiredError</name></expr></argument>, <argument><expr><literal type="string">"'archive-push' command in async mode requires option 'pg1-path'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"check timeout on async error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Call with a bogus exe name so the async process will error out and we can make sure timeouts work</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptSpoolPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/spool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveAsync</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveTimeout</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"pg_wal/bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>exeBogus</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>chdir</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>PathMissingError</name></expr></argument>, <argument><expr><literal type="string">"unable to chdir()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ArchiveTimeoutError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to push WAL file 'bogus' to the archive asynchronously after 1 second(s)\n"</literal>
            <literal type="string">"HINT: check '"</literal> <name>HRN_PATH</name> <literal type="string">"/test-archive-push-async.log' for errors."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create pg_control and archive.info for next set of tests</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveAsync</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptCompress</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptSpoolPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/spool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLogSubprocess</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_94</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo/archive/test/archive.info"</literal></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_94_Z</name> <literal type="string">",\"db-version\":\"9.4\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"async, ignore error file on first pass"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write out an error file that will be ignored on the first pass, then the async process will write a new one</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argListTemp</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_xlog/000000010000000100000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argListTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_xlog/archive_status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name> <literal type="string">"/000000010000000100000001.error"</literal></expr></argument>, <argument><expr><literal type="string">"25\nbogus error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"no WAL files to process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name> <literal type="string">"/global.error"</literal></expr></argument>, <argument><expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"with lock, prevent async from running"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Acquire a lock so the async process will not be able to run -- this will result in a timeout</comment>
        <expr_stmt><expr><name>argListTemp</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_xlog/000000010000000100000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>cfgOptArchiveTimeout</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argListTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>chdir</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>PathMissingError</name></expr></argument>, <argument><expr><literal type="string">"unable to chdir()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>lockAcquire</name><argument_list>(
                    <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptLockPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"555-fefefefe"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgLockType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">30000</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Notify parent that lock has been acquired</comment>
                <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_PUT</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Wait for parent to allow release lock</comment>
                <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_GET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>lockRelease</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Wait for child to acquire lock</comment>
                <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_GET</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ArchiveTimeoutError</name></expr></argument>,
                    <argument><expr><literal type="string">"unable to push WAL file '000000010000000100000001' to the archive asynchronously after 1 second(s)\n"</literal>
                    <literal type="string">"HINT: check '"</literal> <name>HRN_PATH</name> <literal type="string">"/test-archive-push-async.log' for errors."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Notify child to release lock</comment>
                <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_PUT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"async WAL push"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Actually push a WAL file</comment>
        <expr_stmt><expr><name>argListTemp</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_xlog/000000010000000100000001"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argListTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_xlog/archive_status/000000010000000100000001.ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>walBuffer1</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>walBuffer1</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>walBuffer1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(<argument>(PgWal){.version = PG_VERSION_94}</argument>, <argument>walBuffer1</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>walBuffer1Sha1</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><name>walBuffer1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"pg_xlog/000000010000000100000001"</literal></expr></argument>, <argument><expr><name>walBuffer1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"push the WAL segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: pushed WAL file '000000010000000100000001' to the archive asynchronously"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo/archive/test/9.4-1/0000000100000001/000000010000000100000001-%s"</literal></expr></argument>, <argument><expr><name>walBuffer1Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check repo for WAL file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"direct tests of the async function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptSpoolPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/spool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveAsync</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLogSubprocess</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptCompressType</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchivePushAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ParamRequiredError</name></expr></argument>, <argument><expr><literal type="string">"WAL path to push required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"async, check that global.error is created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove data from prior tests</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_xlog/archive_status"</literal></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_xlog/archive_status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_xlog"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cmdArchivePushAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"no WAL files to process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name> <literal type="string">"/global.error"</literal></expr></argument>, <argument><expr><literal type="string">"25\nno WAL files to process"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check global.error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name></expr></argument>, <argument><expr><literal type="string">"global.error\n"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check status files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"add repo, push already pushed WAL and new WAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add repo3</comment>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>, <argument><expr><operator>.</operator><name>jobRetry</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_INFO_PUT</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo3/archive/test/archive.info"</literal></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"db-id=1\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db:history]\n"</literal>
            <literal type="string">"1={\"db-id\":"</literal> <name>HRN_PG_SYSTEMID_94_Z</name> <literal type="string">",\"db-version\":\"9.4\"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Recreate ready file for WAL 1</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_xlog/archive_status/000000010000000100000001.ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo/archive/test/9.4-1/0000000100000001/000000010000000100000001-%s"</literal></expr></argument>, <argument><expr><name>walBuffer1Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check repo1 for WAL 1 file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create a ready file for WAL 2 but don't create the segment yet -- this will test the file error</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_xlog/archive_status/000000010000000100000002.ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchivePushAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"push WAL segments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG_FMT</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: push 2 WAL file(s) to archive: 000000010000000100000001...000000010000000100000002\n"</literal>
            <literal type="string">"P01   WARN: WAL file '000000010000000100000001' already exists in the repo1 archive with the same checksum\n"</literal>
            <literal type="string">"            HINT: this is valid in some recovery scenarios but may also indicate a problem.\n"</literal>
            <literal type="string">"P01 DETAIL: pushed WAL file '000000010000000100000001' to the archive\n"</literal>
            <literal type="string">"P01   WARN: could not push WAL file '000000010000000100000002' to the archive (will be retried): "</literal>
                <literal type="string">"[55] raised from local-1 shim protocol: "</literal> <name>STORAGE_ERROR_READ_MISSING</name> <literal type="string">"\n"</literal>
            <literal type="string">"            [FileMissingError] on retry after 0ms"</literal></expr></argument>,
            <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg/pg_xlog/000000010000000100000002"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo/archive/test/9.4-1/0000000100000001/000000010000000100000001-%s"</literal></expr></argument>, <argument><expr><name>walBuffer1Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check repo1 for WAL 1 file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo3/archive/test/9.4-1/0000000100000001/000000010000000100000001-%s"</literal></expr></argument>, <argument><expr><name>walBuffer1Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check repo3 for WAL 1 file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name></expr></argument>,
            <argument><expr><literal type="string">"000000010000000100000001.ok\n"</literal>
            <literal type="string">"000000010000000100000002.error\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check status files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"create and push previously missing WAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create WAL 2 segment</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>walBuffer2</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>walBuffer2</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>walBuffer2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x0C</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(<argument>(PgWal){.version = PG_VERSION_94}</argument>, <argument>walBuffer2</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>walBuffer2Sha1</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><name>walBuffer2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_xlog/000000010000000100000002"</literal></expr></argument>, <argument><expr><name>walBuffer2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argListTemp</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>cfgOptArchivePushQueueMax</name></expr></argument>, <argument><expr><literal type="string">"1gb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchivePushAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"push WAL segments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: push 1 WAL file(s) to archive: 000000010000000100000002\n"</literal>
            <literal type="string">"P01 DETAIL: pushed WAL file '000000010000000100000002' to the archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo/archive/test/9.4-1/0000000100000001/000000010000000100000002-%s"</literal></expr></argument>, <argument><expr><name>walBuffer2Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check repo1 for WAL 2 file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo3/archive/test/9.4-1/0000000100000001/000000010000000100000002-%s"</literal></expr></argument>, <argument><expr><name>walBuffer2Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check repo3 for WAL 2 file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name></expr></argument>,
            <argument><expr><literal type="string">"000000010000000100000001.ok\n"</literal>
            <literal type="string">"000000010000000100000002.ok\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check status files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"push wal 2 again to get warnings from both repos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove the OK file so the WAL gets pushed again</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name> <literal type="string">"/000000010000000100000002.ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchivePushAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"push WAL segments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: push 1 WAL file(s) to archive: 000000010000000100000002\n"</literal>
            <literal type="string">"P01   WARN: WAL file '000000010000000100000002' already exists in the repo1 archive with the same checksum\n"</literal>
            <literal type="string">"            HINT: this is valid in some recovery scenarios but may also indicate a problem.\n"</literal>
            <literal type="string">"P01   WARN: WAL file '000000010000000100000002' already exists in the repo3 archive with the same checksum\n"</literal>
            <literal type="string">"            HINT: this is valid in some recovery scenarios but may also indicate a problem.\n"</literal>
            <literal type="string">"P01 DETAIL: pushed WAL file '000000010000000100000002' to the archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"create and push WAL 3 to both repos"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create WAL 3 segment</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>walBuffer3</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>walBuffer3</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>walBuffer3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x44</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>walBuffer3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(<argument>(PgWal){.version = PG_VERSION_94}</argument>, <argument>walBuffer3</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>walBuffer3Sha1</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>, <argument><expr><name>walBuffer3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_xlog/000000010000000100000003"</literal></expr></argument>, <argument><expr><name>walBuffer3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create ready file</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_EMPTY</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_xlog/archive_status/000000010000000100000003.ready"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchivePushAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"push WAL segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: push 1 WAL file(s) to archive: 000000010000000100000003\n"</literal>
            <literal type="string">"P01 DETAIL: pushed WAL file '000000010000000100000003' to the archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo/archive/test/9.4-1/0000000100000001/000000010000000100000003-%s"</literal></expr></argument>, <argument><expr><name>walBuffer3Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check repo1 for WAL 3 file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_STORAGE_EXISTS</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo3/archive/test/9.4-1/0000000100000001/000000010000000100000003-%s"</literal></expr></argument>, <argument><expr><name>walBuffer3Sha1</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check repo3 for WAL 3 file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove the ready file to prevent WAL 3 from being considered for the next test</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_REMOVE</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_xlog/archive_status/000000010000000100000003.ready"</literal></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check that drop functionality works</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <comment type="line">// Remove status files</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_REMOVE</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_PATH_CREATE</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argListTemp</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><name>cfgOptArchivePushQueueMax</name></expr></argument>, <argument><expr><literal type="string">"16m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argListTemp</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cmdArchivePushAsync</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"push WAL segments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   INFO: push 2 WAL file(s) to archive: 000000010000000100000001...000000010000000100000002\n"</literal>
            <literal type="string">"P00   WARN: dropped WAL file '000000010000000100000001' because archive queue exceeded 16MB\n"</literal>
            <literal type="string">"P00   WARN: dropped WAL file '000000010000000100000002' because archive queue exceeded 16MB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name> <literal type="string">"/000000010000000100000001.ok"</literal></expr></argument>,
            <argument><expr><literal type="string">"0\ndropped WAL file '000000010000000100000001' because archive queue exceeded 16MB"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check WAL 1 warning"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name> <literal type="string">"/000000010000000100000002.ok"</literal></expr></argument>,
            <argument><expr><literal type="string">"0\ndropped WAL file '000000010000000100000002' because archive queue exceeded 16MB"</literal></expr></argument>, <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check WAL 2 warning"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name></expr></argument>,
            <argument><expr><literal type="string">"000000010000000100000001.ok\n"</literal>
            <literal type="string">"000000010000000100000002.ok\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>comment</name> <operator>=</operator> <literal type="string">"check status files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Uninstall local command handler shim</comment>
        <expr_stmt><expr><call><name>hrnProtocolLocalShimUninstall</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
