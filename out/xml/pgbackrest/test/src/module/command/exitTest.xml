<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/command/exitTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Exit Routines
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessFork.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"exitSignalName()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>exitSignalName</name><argument_list>(<argument><expr><name>signalTypeHup</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"HUP"</literal></expr></argument>, <argument><expr><literal type="string">"SIGHUP name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>exitSignalName</name><argument_list>(<argument><expr><name>signalTypeInt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"INT"</literal></expr></argument>, <argument><expr><literal type="string">"SIGINT name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>exitSignalName</name><argument_list>(<argument><expr><name>signalTypeTerm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TERM"</literal></expr></argument>, <argument><expr><literal type="string">"SIGTERM name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>exitSignalName</name><argument_list>(<argument><expr><name>signalTypeNone</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"no name for signal none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"exitInit() and exitOnSignal()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdHelp</name></expr></argument>, <argument><expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.expectedExitStatus = errorTypeCode(&amp;TermError)</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>exitInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>raise</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>                               <comment type="line">// {uncoverable - signal is raised in block}</comment>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"exitSafe()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdHelp</name></expr></argument>, <argument><expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cfgCommandSet</name><argument_list>(<argument><expr><name>cfgCmdNone</name></expr></argument>, <argument><expr><name>cfgCmdRoleMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>exitSafe</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>signalTypeNone</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"exit with no command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawNegate</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLogTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>exitSafe</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>signalTypeNone</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"exit with no error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: archive-push command end: completed successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>exitSafe</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>signalTypeNone</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"exit with no error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: archive-push command end: completed successfully"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>RuntimeError</name></expr></argument>, <argument><expr><literal type="string">"test error message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>exitSafe</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>signalTypeNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
                <argument><expr><literal type="string">"P00  ERROR: [122]: test error message\n"</literal>
                <literal type="string">"P00   INFO: archive-push command end: aborted with exception [122]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--"</literal> <name>CFGOPT_STANZA</name> <literal type="string">"=test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--"</literal> <name>CFGOPT_PROCESS_MAX</name> <literal type="string">"=4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleAsync</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>harnessLogLevelSet</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>hrnErrorThrowP</name><argument_list>(<argument><expr><operator>.</operator><name>errorType</name> <operator>=</operator> <operator>&amp;</operator><name>RuntimeError</name></expr></argument>, <argument><expr><operator>.</operator><name>message</name> <operator>=</operator> <literal type="string">"test debug error message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>exitSafe</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>signalTypeNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
                <argument><expr><literal type="string">"P00  DEBUG:     "</literal> <name>TEST_PGB_PATH</name> <literal type="string">"/src/command/exit::exitSafe: (result: 0, error: true, signalType: 0)\n"</literal>
                <literal type="string">"P00  ERROR: [122]: test debug error message\n"</literal>
                <literal type="string">"            --------------------------------------------------------------------\n"</literal>
                <literal type="string">"            If SUBMITTING AN ISSUE please provide the following information:\n"</literal>
                <literal type="string">"            \n"</literal>
                <literal type="string">"            version: "</literal> <name>PROJECT_VERSION</name> <literal type="string">"\n"</literal>
                <literal type="string">"            command: archive-push:async\n"</literal>
                <literal type="string">"            options: --exec-id=1-test --process-max=4 --stanza=test\n"</literal>
                <literal type="string">"            \n"</literal>
                <literal type="string">"            stack trace:\n"</literal>
                <literal type="string">"            ERR_STACK_TRACE\n"</literal>
                <literal type="string">"            --------------------------------------------------------------------\n"</literal>
                <literal type="string">"P00   INFO: archive-push:async command end: aborted with exception [122]\n"</literal>
                <literal type="string">"P00  DEBUG:     "</literal> <name>TEST_PGB_PATH</name> <literal type="string">"/src/common/lock::lockRelease: (failOnNoLock: false)\n"</literal>
                <literal type="string">"P00  DEBUG:     "</literal> <name>TEST_PGB_PATH</name> <literal type="string">"/src/common/lock::lockRelease: =&gt; false\n"</literal>
                <literal type="string">"P00  DEBUG:     "</literal> <name>TEST_PGB_PATH</name> <literal type="string">"/src/command/exit::exitSafe: =&gt; 122"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>harnessLogLevelReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>hrnErrorThrowP</name><argument_list>(<argument><expr><operator>.</operator><name>message</name> <operator>=</operator> <literal type="string">"test assert message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>exitSafe</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>signalTypeNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
                <argument><expr><literal type="string">"P00 ASSERT: [025]: test assert message\n"</literal>
                <literal type="string">"            --------------------------------------------------------------------\n"</literal>
                <literal type="string">"            If SUBMITTING AN ISSUE please provide the following information:\n"</literal>
                <literal type="string">"            \n"</literal>
                <literal type="string">"            version: "</literal> <name>PROJECT_VERSION</name> <literal type="string">"\n"</literal>
                <literal type="string">"            command: archive-push:async\n"</literal>
                <literal type="string">"            options: --exec-id=1-test --process-max=4 --stanza=test\n"</literal>
                <literal type="string">"            \n"</literal>
                <literal type="string">"            stack trace:\n"</literal>
                <literal type="string">"            ERR_STACK_TRACE\n"</literal>
                <literal type="string">"            --------------------------------------------------------------------\n"</literal>
                <literal type="string">"P00   INFO: archive-push:async command end: aborted with exception [025]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(
            <argument><expr><call><name>exitSafe</name><argument_list>(<argument><expr><call><name>errorTypeCode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TermError</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>signalTypeNone</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>errorTypeCode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TermError</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"exit on term with no signal"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: archive-push:async command end: terminated on signal from child process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(
            <argument><expr><call><name>exitSafe</name><argument_list>(<argument><expr><call><name>errorTypeCode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TermError</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>signalTypeTerm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>errorTypeCode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>TermError</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"exit on term with SIGTERM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(<argument><expr><literal type="string">"P00   INFO: archive-push:async command end: terminated on signal [SIGTERM]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
