<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/build/commonTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Build Common
***********************************************************************************************************************************/</comment>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"render"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"bldEnum()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>bldEnum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test-id/group-name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"testId/groupName"</literal></expr></argument>, <argument><expr><literal type="string">"enum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"pre"</literal></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"option-name"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"preOptionName"</literal></expr></argument>, <argument><expr><literal type="string">"enum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"bldStrId()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>bldStrId</name><argument_list>(<argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"STRID5(\"abc\", 0xc410)"</literal></expr></argument>, <argument><expr><literal type="string">"5-bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>bldStrId</name><argument_list>(<argument><expr><literal type="string">"ABC"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"STRID6(\"ABC\", 0x289e61)"</literal></expr></argument>, <argument><expr><literal type="string">"6-bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"Yaml"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"parse and error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>BUFSTRZ</name><argument_list>(
            <argument><expr><literal type="string">"test:\n"</literal>
            <literal type="string">"   main: [0, 1]\n"</literal>
            <literal type="string">"  default: text\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Yaml</name> <modifier>*</modifier></type><name>yaml</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <macro><name>TEST_ASSIGN</name><argument_list>(<argument>yaml</argument>, <argument>yamlNew(buffer)</argument>, <argument><literal type="string">"new yaml"</literal></argument>)</argument_list></macro>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeMapBegin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"map begin event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>yamlScalarCheck</name><argument_list>(<argument><expr><call><name>yamlEventPeek</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"xxx"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"expected scalar 'xxx' but got 'test' at line 1, column 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>yamlEventCheck</name><argument_list>(<argument><expr><call><name>yamlEventPeek</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>yamlEventTypeMapBegin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"expected event type 'map-begin' but got scalar 'test' at line 1, column 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>yamlScalarNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"scalar event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>yamlScalarCheck</name><argument_list>(<argument><expr><call><name>yamlEventPeek</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"expected scalar 'test' but got event  type 'map-begin' at line 2, column 4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeMapBegin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"map begin event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeScalar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"scalar event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeSeqBegin</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"seq begin event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeScalar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"scalar event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeScalar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"scalar event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeSeqEnd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"seq end event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeMapEnd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"map end event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeScalar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"yaml parse error: did not find expected key at line: 3 column: 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"boolean parse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>TEST_RESULT_BOOL</name><argument_list>(<argument>yamlBoolParse((YamlEvent){.value = STRDEF(<literal type="string">"true"</literal>)})</argument>, <argument>true</argument>, <argument><literal type="string">"true"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>TEST_RESULT_BOOL</name><argument_list>(<argument>yamlBoolParse((YamlEvent){.value = STRDEF(<literal type="string">"false"</literal>)})</argument>, <argument>false</argument>, <argument><literal type="string">"false"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <macro><name>TEST_ERROR</name><argument_list>(<argument>yamlBoolParse((YamlEvent){.value = STRDEF(<literal type="string">"ack"</literal>)})</argument>, <argument>FormatError</argument>, <argument><literal type="string">"invalid boolean 'ack'"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"type map (remaining types)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>yamlEventType</name><argument_list>(<argument><expr><name>YAML_STREAM_END_EVENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>yamlEventTypeStreamEnd</name></expr></argument>, <argument><expr><literal type="string">"stream end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>yamlEventType</name><argument_list>(<argument><expr><name>YAML_DOCUMENT_END_EVENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>yamlEventTypeDocEnd</name></expr></argument>, <argument><expr><literal type="string">"doc end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>yamlEventType</name><argument_list>(<argument><expr><name>YAML_ALIAS_EVENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>yamlEventTypeAlias</name></expr></argument>, <argument><expr><literal type="string">"alias"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>yamlEventType</name><argument_list>(<argument><expr><name>YAML_NO_EVENT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>yamlEventTypeNone</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>TEST_ERROR</name><argument_list>(
            <argument>yamlEventCheck((YamlEvent){.type = yamlEventTypeAlias}, yamlEventTypeScalar)</argument>, <argument>FormatError</argument>,
                <argument><literal type="string">"expected event type 'scalar' but got 'alias' at line 0, column 0"</literal></argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
