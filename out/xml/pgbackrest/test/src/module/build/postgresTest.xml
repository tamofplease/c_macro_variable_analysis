<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/build/postgresTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Build PostgreSQL Interface
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessStorage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create default storage object for testing</comment>
    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"bldPgParse() and bldPgRender()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"parse errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"src/postgres/interface/version.vendor.h"</literal></expr></argument>,
            <argument><expr><literal type="string">"#define CATALOG_VERSION_NO\t1\n"</literal>
            <literal type="string">"#define PG_CONTROL_VERSION  2\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"typedef int64_t int64;\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"typedef struct struct_type\n"</literal>
            <literal type="string">"{\n"</literal>
            <literal type="string">"    int field1;\n"</literal>
            <literal type="string">"    int field2;\n"</literal>
            <literal type="string">"} struct_type;\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"typedef enum\n"</literal>
            <literal type="string">"{\n"</literal>
            <literal type="string">"    enum1 = 0,\n"</literal>
            <literal type="string">"    enum2,\n"</literal>
            <literal type="string">"} enum_type;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"src/postgres/interface/version.intern.h"</literal></expr></argument>,
            <argument><expr><literal type="string">"#define  PG_INTERFACE_CONTROL_IS(version)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>bldPgParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to find define -- are there extra spaces on '#define  PG_INTERFACE_CONTROL_IS(version)'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"src/postgres/interface/version.intern.h"</literal></expr></argument>,
            <argument><expr><literal type="string">"#define PG_INTERFACE_CONTROL_IS(version)\n"</literal>
            <literal type="string">"#define PG_INTERFACE_CONTROL(version)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"src/build/postgres/postgres.yaml"</literal></expr></argument>,
            <argument><expr><literal type="string">"bogus: value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"src/build/postgres/postgres.yaml"</literal></expr></argument>,
            <argument><expr><literal type="string">"bogus: value\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>bldPgParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"unknown postgres definition 'bogus'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"src/build/postgres/postgres.yaml"</literal></expr></argument>,
            <argument><expr><literal type="string">"version:\n"</literal>
            <literal type="string">"  - 11:\n"</literal>
            <literal type="string">"      bogus: value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>bldPgParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"unknown postgres definition 'bogus'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"parse and render postgres"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"src/build/postgres/postgres.yaml"</literal></expr></argument>,
            <argument><expr><literal type="string">"version:\n"</literal>
            <literal type="string">"  - 9.0\n"</literal>
            <literal type="string">"  - 11:\n"</literal>
            <literal type="string">"      release: false\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>bldPgRender</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>bldPgParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"parse and render"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"check interface.auto.c.inc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>,
            <argument><expr><literal type="string">"src/postgres/interface.auto.c.inc"</literal></expr></argument>,
            <argument><expr><name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
            <literal type="string">"PostgreSQL Interface\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Automatically generated by 'build-code postgres' -- do not modify directly.\n"</literal>
            <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
            <literal type="string">"\n"</literal>
            <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
            <literal type="string">"PostgreSQL 11 interface\n"</literal>
            <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
            <literal type="string">"#define PG_VERSION                                                  PG_VERSION_11\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"#define enum1                                                       enum1_11\n"</literal>
            <literal type="string">"#define enum2                                                       enum2_11\n"</literal>
            <literal type="string">"#define enum_type                                                   enum_type_11\n"</literal>
            <literal type="string">"#define int64                                                       int64_11\n"</literal>
            <literal type="string">"#define struct_type                                                 struct_type_11\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"#define CATALOG_VERSION_NO_MAX\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"#include \"postgres/interface/version.intern.h\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"PG_INTERFACE_CONTROL_IS(11);\n"</literal>
            <literal type="string">"PG_INTERFACE_CONTROL(11);\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"#undef enum1\n"</literal>
            <literal type="string">"#undef enum2\n"</literal>
            <literal type="string">"#undef enum_type\n"</literal>
            <literal type="string">"#undef int64\n"</literal>
            <literal type="string">"#undef struct_type\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"#undef CATALOG_VERSION_NO\n"</literal>
            <literal type="string">"#undef CATALOG_VERSION_NO_MAX\n"</literal>
            <literal type="string">"#undef PG_CONTROL_VERSION\n"</literal>
            <literal type="string">"#undef PG_VERSION\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"#undef PG_INTERFACE_CONTROL_IS\n"</literal>
            <literal type="string">"#undef PG_INTERFACE_CONTROL\n"</literal>
            <literal type="string">"\n"</literal>
            <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
            <literal type="string">"PostgreSQL 9.0 interface\n"</literal>
            <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
            <literal type="string">"#define PG_VERSION                                                  PG_VERSION_90\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"#define enum1                                                       enum1_90\n"</literal>
            <literal type="string">"#define enum2                                                       enum2_90\n"</literal>
            <literal type="string">"#define enum_type                                                   enum_type_90\n"</literal>
            <literal type="string">"#define int64                                                       int64_90\n"</literal>
            <literal type="string">"#define struct_type                                                 struct_type_90\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"#include \"postgres/interface/version.intern.h\"\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"PG_INTERFACE_CONTROL_IS(90);\n"</literal>
            <literal type="string">"PG_INTERFACE_CONTROL(90);\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"#undef enum1\n"</literal>
            <literal type="string">"#undef enum2\n"</literal>
            <literal type="string">"#undef enum_type\n"</literal>
            <literal type="string">"#undef int64\n"</literal>
            <literal type="string">"#undef struct_type\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"#undef CATALOG_VERSION_NO\n"</literal>
            <literal type="string">"#undef CATALOG_VERSION_NO_MAX\n"</literal>
            <literal type="string">"#undef PG_CONTROL_VERSION\n"</literal>
            <literal type="string">"#undef PG_VERSION\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"#undef PG_INTERFACE_CONTROL_IS\n"</literal>
            <literal type="string">"#undef PG_INTERFACE_CONTROL\n"</literal>
            <literal type="string">"\n"</literal>
            <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
            <literal type="string">"PostgreSQL interface struct\n"</literal>
            <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
            <literal type="string">"static const PgInterface pgInterface[] =\n"</literal>
            <literal type="string">"{\n"</literal>
            <literal type="string">"    {\n"</literal>
            <literal type="string">"        .version = PG_VERSION_11,\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"        .controlIs = pgInterfaceControlIs11,\n"</literal>
            <literal type="string">"        .control = pgInterfaceControl11,\n"</literal>
            <literal type="string">"    },\n"</literal>
            <literal type="string">"    {\n"</literal>
            <literal type="string">"        .version = PG_VERSION_90,\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"        .controlIs = pgInterfaceControlIs90,\n"</literal>
            <literal type="string">"        .control = pgInterfaceControl90,\n"</literal>
            <literal type="string">"    },\n"</literal>
            <literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
