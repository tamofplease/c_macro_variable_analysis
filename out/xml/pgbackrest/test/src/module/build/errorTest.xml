<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/build/errorTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Build Error
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessStorage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create default storage object for testing</comment>
    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"bldErrParse() and bldErrRender()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"parse errors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"src/build/error/error.yaml"</literal></expr></argument>,
            <argument><expr><literal type="string">"assert: 24\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>bldErrParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"error 'assert' code must be &gt;= 25 and &lt;= 125"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"src/build/error/error.yaml"</literal></expr></argument>,
            <argument><expr><literal type="string">"assert: 126\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>bldErrParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"error 'assert' code must be &gt;= 25 and &lt;= 125"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"src/build/error/error.yaml"</literal></expr></argument>,
            <argument><expr><literal type="string">"assert:\n"</literal>
            <literal type="string">"  bogus: 25"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>bldErrParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"unknown error definition 'bogus'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"parse and render error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"src/build/error/error.yaml"</literal></expr></argument>,
            <argument><expr><literal type="string">"assert:\n"</literal>
            <literal type="string">"  code: 25\n"</literal>
            <literal type="string">"  fatal: true\n"</literal>
            <literal type="string">"option-invalid: 31\n"</literal>
            <literal type="string">"runtime: 122\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>bldErrRender</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>bldErrParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"parse and render"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"check error.auto.h"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>,
            <argument><expr><literal type="string">"src/common/error.auto.h"</literal></expr></argument>,
            <argument><expr><name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
            <literal type="string">"Error Type Definition\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Automatically generated by 'build-code error' -- do not modify directly.\n"</literal>
            <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
            <literal type="string">"#ifndef COMMON_ERROR_AUTO_H\n"</literal>
            <literal type="string">"#define COMMON_ERROR_AUTO_H\n"</literal>
            <literal type="string">"\n"</literal>
            <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
            <literal type="string">"Error type declarations\n"</literal>
            <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
            <literal type="string">"ERROR_DECLARE(AssertError);\n"</literal>
            <literal type="string">"ERROR_DECLARE(OptionInvalidError);\n"</literal>
            <literal type="string">"ERROR_DECLARE(RuntimeError);\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"#endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"check error.auto.c.inc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>,
            <argument><expr><literal type="string">"src/common/error.auto.c.inc"</literal></expr></argument>,
            <argument><expr><name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
            <literal type="string">"Error Type Definition\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"Automatically generated by 'build-code error' -- do not modify directly.\n"</literal>
            <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
            <literal type="string">"\n"</literal>
            <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
            <literal type="string">"Error type definitions\n"</literal>
            <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
            <literal type="string">"ERROR_DEFINE( 25, AssertError, true, RuntimeError);\n"</literal>
            <literal type="string">"ERROR_DEFINE( 31, OptionInvalidError, false, RuntimeError);\n"</literal>
            <literal type="string">"ERROR_DEFINE(122, RuntimeError, false, RuntimeError);\n"</literal>
            <literal type="string">"\n"</literal>
            <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
            <literal type="string">"Error type array\n"</literal>
            <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
            <literal type="string">"static const ErrorType *errorTypeList[] =\n"</literal>
            <literal type="string">"{\n"</literal>
            <literal type="string">"    &amp;AssertError,\n"</literal>
            <literal type="string">"    &amp;OptionInvalidError,\n"</literal>
            <literal type="string">"    &amp;RuntimeError,\n"</literal>
            <literal type="string">"    NULL,\n"</literal>
            <literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
