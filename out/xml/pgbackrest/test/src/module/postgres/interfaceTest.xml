<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/postgres/interfaceTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test PostgreSQL Interface
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPostgres.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"pgVersionFromStr() and pgVersionToStr()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>pgVersionFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"9.3.4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"version 9.3.4 format is invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>pgVersionFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"version abc format is invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>pgVersionFromStr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"assertion 'version != NULL' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>pgVersionFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"10"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_10</name></expr></argument>, <argument><expr><literal type="string">"valid pg version 10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>pgVersionFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"9.6"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">90600</literal></expr></argument>, <argument><expr><literal type="string">"valid pg version 9.6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgVersionToStr</name><argument_list>(<argument><expr><name>PG_VERSION_11</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"11"</literal></expr></argument>, <argument><expr><literal type="string">"infoPgVersionToString 11"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgVersionToStr</name><argument_list>(<argument><expr><name>PG_VERSION_96</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"9.6"</literal></expr></argument>, <argument><expr><literal type="string">"infoPgVersionToString 9.6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgVersionToStr</name><argument_list>(<argument><expr><literal type="number">93456</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"9.34"</literal></expr></argument>, <argument><expr><literal type="string">"infoPgVersionToString 93456"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"pgDbIs*()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pgDbIsTemplate</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"template0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"template0 is template"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pgDbIsTemplate</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"template1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"template1 is template"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pgDbIsTemplate</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"postgres"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"postgres is not template"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pgDbIsSystem</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"postgres"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"postgres is system"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pgDbIsSystem</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"template0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"template0 is system"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pgDbIsSystem</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"app"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"app is not system"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pgDbIsSystemId</name><argument_list>(<argument><expr><literal type="number">16383</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"16383 is system"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pgDbIsSystemId</name><argument_list>(<argument><expr><literal type="number">16384</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"16384 is not system"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"pgControlVersion()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>pgControlVersion</name><argument_list>(<argument><expr><literal type="number">70300</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"invalid PostgreSQL version 70300"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pgControlVersion</name><argument_list>(<argument><expr><name>PG_VERSION_90</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">903</literal></expr></argument>, <argument><expr><literal type="string">"9.0 control version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pgControlVersion</name><argument_list>(<argument><expr><name>PG_VERSION_11</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1100</literal></expr></argument>, <argument><expr><literal type="string">"11 control version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"pgControlFromBuffer() and pgControlFromFile()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Sanity test to ensure PG_VERSION_MAX has been updated</comment>
        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>pgInterface</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>version</name></expr></argument>, <argument><expr><name>PG_VERSION_MAX</name></expr></argument>, <argument><expr><literal type="string">"check max version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <comment type="line">// Create a bogus control file</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><name>HRN_PG_CONTROL_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PgControlCommon</name> <operator>*</operator><operator>)</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>PgControlCommon</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>controlVersion</name> <operator>=</operator> <literal type="number">501</literal></expr>,
            <expr><operator>.</operator><name>catalogVersion</name> <operator>=</operator> <literal type="number">19780101</literal></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>pgControlFromBuffer</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>VersionNotSupportedError</name></expr></argument>,
            <argument><expr><literal type="string">"unexpected control version = 501 and catalog version = 19780101\nHINT: is this version of PostgreSQL supported?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>PG_VERSION_11</name></expr></argument>, <argument><expr><operator>.</operator><name>systemId</name> <operator>=</operator> <literal type="number">0xFACEFACE</literal></expr></argument>, <argument><expr><operator>.</operator><name>checkpoint</name> <operator>=</operator> <literal type="number">0xEEFFEEFFAABBAABB</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeline</name> <operator>=</operator> <literal type="number">47</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>walSegmentSize</name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>PgControl</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>pgControlFromFile</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get control info v11"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>systemId</name></name></expr></argument>, <argument><expr><literal type="number">0xFACEFACE</literal></expr></argument>, <argument><expr><literal type="string">"   check system id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>PG_VERSION_11</name></expr></argument>, <argument><expr><literal type="string">"   check version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>catalogVersion</name></name></expr></argument>, <argument><expr><literal type="number">201809051</literal></expr></argument>, <argument><expr><literal type="string">"   check catalog version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>checkpoint</name></name></expr></argument>, <argument><expr><literal type="number">0xEEFFEEFFAABBAABB</literal></expr></argument>, <argument><expr><literal type="string">"check checkpoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>timeline</name></name></expr></argument>, <argument><expr><literal type="number">47</literal></expr></argument>, <argument><expr><literal type="string">"check timeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>PG_VERSION_93</name></expr></argument>, <argument><expr><operator>.</operator><name>walSegmentSize</name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>pgControlFromFile</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"wal segment size is 1048576 but must be 16777216 for PostgreSQL &lt;= 10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>PG_VERSION_95</name></expr></argument>, <argument><expr><operator>.</operator><name>pageSize</name> <operator>=</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>pgControlFromFile</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"page size is 32768 but must be 8192"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>PG_VERSION_90</name></expr></argument>, <argument><expr><operator>.</operator><name>systemId</name> <operator>=</operator> <literal type="number">0xEFEFEFEFEF</literal></expr></argument>, <argument><expr><operator>.</operator><name>catalogVersion</name> <operator>=</operator> <call><name>hrnPgCatalogVersion</name><argument_list>(<argument><expr><name>PG_VERSION_90</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><operator>.</operator><name>checkpoint</name> <operator>=</operator> <literal type="number">0xAABBAABBEEFFEEFF</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeline</name> <operator>=</operator> <literal type="number">88</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>pgControlFromFile</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get control info v90"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>systemId</name></name></expr></argument>, <argument><expr><literal type="number">0xEFEFEFEFEF</literal></expr></argument>, <argument><expr><literal type="string">"   check system id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>PG_VERSION_90</name></expr></argument>, <argument><expr><literal type="string">"   check version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>catalogVersion</name></name></expr></argument>, <argument><expr><literal type="number">201008051</literal></expr></argument>, <argument><expr><literal type="string">"   check catalog version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>checkpoint</name></name></expr></argument>, <argument><expr><literal type="number">0xAABBAABBEEFFEEFF</literal></expr></argument>, <argument><expr><literal type="string">"check checkpoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>timeline</name></name></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument>, <argument><expr><literal type="string">"check timeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"pgLsnFromStr(), pgLsnToStr(), pgLsnToWalSegment(), pg*FromWalSegment(), and pgLsnRangeToWalSegmentList()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1/1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x0000000100000001</literal></expr></argument>, <argument><expr><literal type="string">"lsn to string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"ffffffff/ffffffff"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFFFFFFFFFF</literal></expr></argument>, <argument><expr><literal type="string">"lsn to string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"ffffffff/aaaaaaaa"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFFAAAAAAAA</literal></expr></argument>, <argument><expr><literal type="string">"lsn to string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgLsnToStr</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFFAAAAAAAA</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ffffffff/aaaaaaaa"</literal></expr></argument>, <argument><expr><literal type="string">"string to lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgLsnToStr</name><argument_list>(<argument><expr><literal type="number">0x0000000000000000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"0/0"</literal></expr></argument>, <argument><expr><literal type="string">"string to lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgLsnToStr</name><argument_list>(<argument><expr><literal type="number">0x0000000100000002</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1/2"</literal></expr></argument>, <argument><expr><literal type="string">"string to lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgLsnToWalSegment</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFFAAAAAAAA</literal></expr></argument>, <argument><expr><literal type="number">0x1000000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"00000001FFFFFFFF000000AA"</literal></expr></argument>, <argument><expr><literal type="string">"lsn to wal segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgLsnToWalSegment</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFFAAAAAAAA</literal></expr></argument>, <argument><expr><literal type="number">0x40000000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"00000001FFFFFFFF00000002"</literal></expr></argument>, <argument><expr><literal type="string">"lsn to wal segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgLsnToWalSegment</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF40000000</literal></expr></argument>, <argument><expr><literal type="number">0x40000000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"00000001FFFFFFFF00000001"</literal></expr></argument>, <argument><expr><literal type="string">"lsn to wal segment"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>pgLsnFromWalSegment</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"00000001FFFFFFFF000000AA"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x1000000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFFAA000000</literal></expr></argument>, <argument><expr><literal type="string">"16M wal segment to lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>pgLsnFromWalSegment</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"00000001FFFFFFFF00000002"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x40000000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF80000000</literal></expr></argument>, <argument><expr><literal type="string">"1G wal segment to lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>pgLsnFromWalSegment</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"00000001FFFFFFFF00000001"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0x40000000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFF40000000</literal></expr></argument>, <argument><expr><literal type="string">"1G wal segment to lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pgTimelineFromWalSegment</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"00000001FFFFFFFF000000AA"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"timeline 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pgTimelineFromWalSegment</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"F000000FFFFFFFFF000000AA"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xF000000F</literal></expr></argument>, <argument><expr><literal type="string">"timeline F000000F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>pgLsnRangeToWalSegmentList</name><argument_list>(
                <argument><expr><name>PG_VERSION_92</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1/60"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1/60"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"000000010000000100000000\n"</literal></expr></argument>, <argument><expr><literal type="string">"get single"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>pgLsnRangeToWalSegmentList</name><argument_list>(
                <argument><expr><name>PG_VERSION_92</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1/FD000000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2/1000000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"0000000200000001000000FD\n0000000200000001000000FE\n000000020000000200000000\n000000020000000200000001\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"get range &lt;= 9.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>pgLsnRangeToWalSegmentList</name><argument_list>(
                <argument><expr><name>PG_VERSION_93</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1/FD000000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2/60"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"0000000200000001000000FD\n0000000200000001000000FE\n0000000200000001000000FF\n000000020000000200000000\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"get range &gt; 9.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>pgLsnRangeToWalSegmentList</name><argument_list>(
                <argument><expr><name>PG_VERSION_11</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"A/800"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"B/C0000000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"000000020000000A00000000\n000000020000000A00000001\n000000020000000A00000002\n000000020000000A00000003\n"</literal>
                <literal type="string">"000000020000000B00000000\n000000020000000B00000001\n000000020000000B00000002\n000000020000000B00000003\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"get range &gt;= 11/1GB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>pgLsnRangeToWalSegmentList</name><argument_list>(
                <argument><expr><name>PG_VERSION_11</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"7/FFEFFFFF"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"8/001AAAAA"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"000000030000000700000FFE\n000000030000000700000FFF\n000000030000000800000000\n000000030000000800000001\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"get range &gt;= 11/1MB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"pgLsnName(), pgTablespaceId(), pgWalName(), pgWalPath(), and pgXactPath()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgLsnName</name><argument_list>(<argument><expr><name>PG_VERSION_96</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"location"</literal></expr></argument>, <argument><expr><literal type="string">"check location name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgLsnName</name><argument_list>(<argument><expr><name>PG_VERSION_10</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"lsn"</literal></expr></argument>, <argument><expr><literal type="string">"check lsn name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgTablespaceId</name><argument_list>(<argument><expr><name>PG_VERSION_90</name></expr></argument>, <argument><expr><literal type="number">201008051</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"PG_9.0_201008051"</literal></expr></argument>, <argument><expr><literal type="string">"check 9.0 tablespace id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgTablespaceId</name><argument_list>(<argument><expr><name>PG_VERSION_94</name></expr></argument>, <argument><expr><literal type="number">999999999</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"PG_9.4_999999999"</literal></expr></argument>, <argument><expr><literal type="string">"check 9.4 tablespace id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgWalName</name><argument_list>(<argument><expr><name>PG_VERSION_96</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"xlog"</literal></expr></argument>, <argument><expr><literal type="string">"check xlog name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgWalName</name><argument_list>(<argument><expr><name>PG_VERSION_10</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"wal"</literal></expr></argument>, <argument><expr><literal type="string">"check wal name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgWalPath</name><argument_list>(<argument><expr><name>PG_VERSION_96</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_xlog"</literal></expr></argument>, <argument><expr><literal type="string">"check xlog path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgWalPath</name><argument_list>(<argument><expr><name>PG_VERSION_10</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_wal"</literal></expr></argument>, <argument><expr><literal type="string">"check wal path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgXactPath</name><argument_list>(<argument><expr><name>PG_VERSION_96</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_clog"</literal></expr></argument>, <argument><expr><literal type="string">"check pg_clog name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgXactPath</name><argument_list>(<argument><expr><name>PG_VERSION_10</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg_xact"</literal></expr></argument>, <argument><expr><literal type="string">"check pg_xact name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"pgPageChecksum()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>page</name><index>[<expr><name>PG_PAGE_SIZE_DEFAULT</name></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>PG_PAGE_SIZE_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pgPageChecksum</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_BIG_ENDIAN</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0xF55E</literal></expr> </then><else>: <expr><literal type="number">0x0E1C</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"check 0xFF filled page, block 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pgPageChecksum</name><argument_list>(<argument><expr><name>page</name></expr></argument>, <argument><expr><literal type="number">999</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_BIG_ENDIAN</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0xF1B9</literal></expr> </then><else>: <expr><literal type="number">0x0EC3</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"check 0xFF filled page, block 999"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"pgWalFromBuffer() and pgWalFromFile()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>walFile</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/0000000F0000000F0000000F"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Create a bogus control file, initially not in long format)</comment>
        <comment type="line">// --------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>PgWalCommon</name> <operator>*</operator><operator>)</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name>PgWalCommon</name><operator>)</operator><block>{<expr><operator>.</operator><name>magic</name> <operator>=</operator> <literal type="number">777</literal></expr>}</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>pgWalFromBuffer</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"first page header in WAL file is expected to be in long format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add the long flag so that the version will now error</comment>
        <comment type="line">// --------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>PgWalCommon</name> <operator>*</operator><operator>)</operator><call><name>bufPtr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>flag</name> <operator>=</operator> <name>PG_WAL_LONG_HEADER</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>pgWalFromBuffer</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>VersionNotSupportedError</name></expr></argument>,
            <argument><expr><literal type="string">"unexpected WAL magic 777\n"</literal>
                <literal type="string">"HINT: is this version of PostgreSQL supported?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(
            <argument>(PgWal){.version = PG_VERSION_11</argument>, <argument>.systemId = <literal type="number">0xECAFECAF</literal></argument>, <argument>.size = PG_WAL_SEGMENT_SIZE_DEFAULT * <literal type="number">2</literal>}</argument>, <argument>result</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>walFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>PgWal</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>pgWalFromFile</name><argument_list>(<argument><expr><name>walFile</name></expr></argument>, <argument><expr><name>storageTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get wal info v11"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>systemId</name></name></expr></argument>, <argument><expr><literal type="number">0xECAFECAF</literal></expr></argument>, <argument><expr><literal type="string">"   check system id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>PG_VERSION_11</name></expr></argument>, <argument><expr><literal type="string">"   check version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>PG_WAL_SEGMENT_SIZE_DEFAULT</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"   check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(
            <argument>(PgWal){.version = PG_VERSION_90</argument>, <argument>.systemId = <literal type="number">0xEAEAEAEA</literal></argument>, <argument>.size = PG_WAL_SEGMENT_SIZE_DEFAULT * <literal type="number">2</literal>}</argument>, <argument>result</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>pgWalFromBuffer</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"wal segment size is 33554432 but must be 16777216 for PostgreSQL &lt;= 10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>hrnPgWalToBuffer</name><argument_list>(<argument>(PgWal){.version = PG_VERSION_90</argument>, <argument>.systemId = <literal type="number">0xEAEAEAEA</literal></argument>, <argument>.size = PG_WAL_SEGMENT_SIZE_DEFAULT}</argument>, <argument>result</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>walFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>pgWalFromFile</name><argument_list>(<argument><expr><name>walFile</name></expr></argument>, <argument><expr><name>storageTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get wal info v9.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>systemId</name></name></expr></argument>, <argument><expr><literal type="number">0xEAEAEAEA</literal></expr></argument>, <argument><expr><literal type="string">"   check system id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>PG_VERSION_90</name></expr></argument>, <argument><expr><literal type="string">"   check version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>PG_WAL_SEGMENT_SIZE_DEFAULT</name></expr></argument>, <argument><expr><literal type="string">"   check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"pgControlToLog()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PgControl</name></type> <name>pgControl</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>PG_VERSION_11</name></expr>,
            <expr><operator>.</operator><name>systemId</name> <operator>=</operator> <literal type="number">0xEFEFEFEFEF</literal></expr>,
            <expr><operator>.</operator><name>walSegmentSize</name><operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>,
            <expr><operator>.</operator><name>pageChecksum</name> <operator>=</operator> <name>true</name></expr>
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>pgControlToLog</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgControl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{version: 110000, systemId: 1030522662895, walSegmentSize: 16777216, pageChecksum: true}"</literal></expr></argument>,
            <argument><expr><literal type="string">"check log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"pgWalToLog()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>PgWal</name></type> <name>pgWal</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>PG_VERSION_10</name></expr>,
            <expr><operator>.</operator><name>systemId</name> <operator>=</operator> <literal type="number">0xFEFEFEFEFE</literal></expr>
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pgWalToLog</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pgWal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{version: 100000, systemId: 1095199817470}"</literal></expr></argument>, <argument><expr><literal type="string">"check log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
