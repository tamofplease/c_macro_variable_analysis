<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/postgres/clientTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test PostgreSQL Client

This test can be run two ways:

1) The default uses a libpq shim to simulate a PostgreSQL connection. This will work with all VM types.

2) Optionally use a real cluster for testing (only works on Debian) add `define: -DHARNESS_PQ_REAL` to the postgres/client test in
define.yaml. THe PostgreSQL version can be adjusted by changing TEST_PG_VERSION.
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/json.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPq.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// PQfinish() is strictly checked</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
    <expr_stmt><expr><call><name>harnessPqScriptStrictSet</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"pgClient"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifdef>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"create/start test database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PG_VERSION</name></cpp:macro>                                     <cpp:value>"14"</cpp:value></cpp:define>

        <expr_stmt><expr><call><name>HRN_SYSTEM</name><argument_list>(<argument><expr><literal type="string">"sudo pg_createcluster "</literal> <name>TEST_PG_VERSION</name> <literal type="string">" test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM</name><argument_list>(<argument><expr><literal type="string">"sudo pg_ctlcluster "</literal> <name>TEST_PG_VERSION</name> <literal type="string">" test start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM</name><argument_list>(<argument><expr><literal type="string">"cd /var/lib/postgresql &amp;&amp; sudo -u postgres psql -c 'create user "</literal> <name>TEST_USER</name> <literal type="string">" superuser'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"connection error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PQ_ERROR</name></cpp:macro>                                                                                                      \
            <cpp:value>"connection to server on socket \"/var/run/postgresql/.s.PGSQL.5433\" failed: No such file or directory\n"             \
            "\tIs the server running locally and accepting connections on that socket?"</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_CONNECTDB</argument>, <argument>.param = <literal type="string">"[\"dbname='postg \\\\'\\\\\\\\res' port=5433\"]"</literal>}</argument>,
            <argument>{.function = HRNPQ_STATUS</argument>, <argument>.resultInt = CONNECTION_BAD}</argument>,
            <argument>{.function = HRNPQ_ERRORMESSAGE</argument>, <argument>.resultZ = TEST_PQ_ERROR}</argument>,
            <argument>{.function = HRNPQ_FINISH}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <decl_stmt><decl><type><name>PgClient</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>pgClientNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">5433</literal></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"postg '\\res"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pgClientMove</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pgClientMove</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move null client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>pgClientOpen</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbConnectError</name></expr></argument>, <argument><expr><literal type="string">"unable to connect to 'dbname='postg \\'\\\\res' port=5433': "</literal> <name>TEST_PQ_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pgClientFree</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_PQ_ERROR</name></cpp:undef>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"send error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PQ_ERROR</name></cpp:macro>                                       <cpp:value>"another command is already in progress"</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_QUERY</name></cpp:macro>                                          <cpp:value>"select bogus from pg_class"</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_CONNECTDB</argument>, <argument>.param = <literal type="string">"[\"dbname='postgres' port=5432\"]"</literal>}</argument>,
            <argument>{.function = HRNPQ_STATUS</argument>, <argument>.resultInt = CONNECTION_OK}</argument>,
            <argument>{.function = HRNPQ_SENDQUERY</argument>, <argument>.param = <literal type="string">"[\""</literal> TEST_QUERY <literal type="string">"\"]"</literal></argument>, <argument>.resultInt = <literal type="number">0</literal>}</argument>,
            <argument>{.function = HRNPQ_ERRORMESSAGE</argument>, <argument>.resultZ = TEST_PQ_ERROR <literal type="string">"\n"</literal>}</argument>,
            <argument>{.function = HRNPQ_FINISH}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>pgClientOpen</name><argument_list>(<argument><expr><call><name>pgClientNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">5432</literal></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"postgres"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifdef>
        <expr_stmt><expr><call><name>PQsendQuery</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>TEST_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>pgClientQuery</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_QUERY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pgClientQueryResultRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbQueryError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to send query '"</literal> <name>TEST_QUERY</name> <literal type="string">"': "</literal> <name>TEST_PQ_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pgClientFree</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_PQ_ERROR</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_QUERY</name></cpp:undef>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_CONNECTDB</argument>,
                <argument>.param = <literal type="string">"[\"dbname='postgres' port=5432 user='"</literal> TEST_USER <literal type="string">"' host='/var/run/postgresql'\"]"</literal>}</argument>,
            <argument>{.function = HRNPQ_STATUS</argument>, <argument>.resultInt = CONNECTION_OK}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>pgClientOpen</name><argument_list>(<argument><expr><call><name>pgClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/var/run/postgresql"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5432</literal></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"postgres"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_USER_STR</name></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"new client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PQ_ERROR</name></cpp:macro>                                                                                                      \
            <cpp:value>"ERROR:  column \"bogus\" does not exist\n"                                                                            \
            "LINE 1: select bogus from pg_class\n"                                                                                 \
            "               ^"</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_QUERY</name></cpp:macro>                                          <cpp:value>"select bogus from pg_class"</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_SENDQUERY</argument>, <argument>.param = <literal type="string">"[\""</literal> TEST_QUERY <literal type="string">"\"]"</literal></argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_CONSUMEINPUT}</argument>,
            <argument>{.function = HRNPQ_ISBUSY}</argument>,
            <argument>{.function = HRNPQ_GETRESULT}</argument>,
            <argument>{.function = HRNPQ_RESULTSTATUS</argument>, <argument>.resultInt = PGRES_FATAL_ERROR}</argument>,
            <argument>{.function = HRNPQ_RESULTERRORMESSAGE</argument>, <argument>.resultZ = TEST_PQ_ERROR <literal type="string">"                 \n"</literal>}</argument>,
            <argument>{.function = HRNPQ_CLEAR}</argument>,
            <argument>{.function = HRNPQ_GETRESULT</argument>, <argument>.resultNull = true}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>pgClientQuery</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_QUERY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pgClientQueryResultRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbQueryError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to execute query '"</literal> <name>TEST_QUERY</name> <literal type="string">"': "</literal> <name>TEST_PQ_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_PQ_ERROR</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_QUERY</name></cpp:undef>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"query timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_QUERY</name></cpp:macro>                                          <cpp:value>"select pg_sleep(3000)"</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_SENDQUERY</argument>, <argument>.param = <literal type="string">"[\""</literal> TEST_QUERY <literal type="string">"\"]"</literal></argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_CONSUMEINPUT</argument>, <argument>.sleep = <literal type="number">600</literal>}</argument>,
            <argument>{.function = HRNPQ_ISBUSY</argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_CONSUMEINPUT}</argument>,
            <argument>{.function = HRNPQ_ISBUSY</argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_GETCANCEL}</argument>,
            <argument>{.function = HRNPQ_CANCEL</argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_FREECANCEL}</argument>,
            <argument>{.function = HRNPQ_GETRESULT}</argument>,
            <argument>{.function = HRNPQ_CLEAR}</argument>,
            <argument>{.function = HRNPQ_GETRESULT</argument>, <argument>.resultNull = true}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>pgClientQuery</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_QUERY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pgClientQueryResultColumn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbQueryError</name></expr></argument>,
            <argument><expr><literal type="string">"query '"</literal> <name>TEST_QUERY</name> <literal type="string">"' timed out after 500ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_QUERY</name></cpp:undef>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"cancel error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PQ_ERROR</name></cpp:macro>                                       <cpp:value>"test error"</cpp:value></cpp:define>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_QUERY</name></cpp:macro>                                          <cpp:value>"select pg_sleep(3000)"</cpp:value></cpp:define>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_SENDQUERY</argument>, <argument>.param = <literal type="string">"[\""</literal> TEST_QUERY <literal type="string">"\"]"</literal></argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_CONSUMEINPUT</argument>, <argument>.sleep = <literal type="number">600</literal>}</argument>,
            <argument>{.function = HRNPQ_ISBUSY</argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_CONSUMEINPUT}</argument>,
            <argument>{.function = HRNPQ_ISBUSY</argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_GETCANCEL}</argument>,
            <argument>{.function = HRNPQ_CANCEL</argument>, <argument>.resultInt = <literal type="number">0</literal></argument>, <argument>.resultZ = TEST_PQ_ERROR}</argument>,
            <argument>{.function = HRNPQ_FREECANCEL}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>pgClientQuery</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_QUERY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pgClientQueryResultColumn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbQueryError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to cancel query '"</literal> <name>TEST_QUERY</name> <literal type="string">"': "</literal> <name>TEST_PQ_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_PQ_ERROR</name></cpp:undef>
        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_QUERY</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"PQgetCancel() returns NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_QUERY</name></cpp:macro>                                          <cpp:value>"select 1"</cpp:value></cpp:define>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_SENDQUERY</argument>, <argument>.param = <literal type="string">"[\""</literal> TEST_QUERY <literal type="string">"\"]"</literal></argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_CONSUMEINPUT</argument>, <argument>.sleep = <literal type="number">600</literal>}</argument>,
            <argument>{.function = HRNPQ_ISBUSY</argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_CONSUMEINPUT}</argument>,
            <argument>{.function = HRNPQ_ISBUSY</argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_GETCANCEL</argument>, <argument>.resultNull = true}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>pgClientQuery</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_QUERY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pgClientQueryResultColumn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbQueryError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to cancel query 'select 1': connection was lost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_QUERY</name></cpp:undef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when results expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_QUERY</name></cpp:macro>                                          <cpp:value>"set client_encoding = 'UTF8'"</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_SENDQUERY</argument>, <argument>.param = <literal type="string">"[\""</literal> TEST_QUERY <literal type="string">"\"]"</literal></argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_CONSUMEINPUT}</argument>,
            <argument>{.function = HRNPQ_ISBUSY}</argument>,
            <argument>{.function = HRNPQ_GETRESULT}</argument>,
            <argument>{.function = HRNPQ_RESULTSTATUS</argument>, <argument>.resultInt = PGRES_COMMAND_OK}</argument>,
            <argument>{.function = HRNPQ_CLEAR}</argument>,
            <argument>{.function = HRNPQ_GETRESULT</argument>, <argument>.resultNull = true}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>pgClientQuery</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_QUERY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pgClientQueryResultColumn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbQueryError</name></expr></argument>,
            <argument><expr><literal type="string">"result expected from '"</literal> <name>TEST_QUERY</name> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_QUERY</name></cpp:undef>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when no results expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_QUERY</name></cpp:macro>                                          <cpp:value>"select * from pg_class limit 1"</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_SENDQUERY</argument>, <argument>.param = <literal type="string">"[\""</literal> TEST_QUERY <literal type="string">"\"]"</literal></argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_CONSUMEINPUT}</argument>,
            <argument>{.function = HRNPQ_ISBUSY}</argument>,
            <argument>{.function = HRNPQ_GETRESULT}</argument>,
            <argument>{.function = HRNPQ_RESULTSTATUS</argument>, <argument>.resultInt = PGRES_TUPLES_OK}</argument>,
            <argument>{.function = HRNPQ_CLEAR}</argument>,
            <argument>{.function = HRNPQ_GETRESULT</argument>, <argument>.resultNull = true}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>pgClientQuery</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_QUERY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pgClientQueryResultNone</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbQueryError</name></expr></argument>,
            <argument><expr><literal type="string">"no result expected from '"</literal> <name>TEST_QUERY</name> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_QUERY</name></cpp:undef>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"set with no results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_QUERY</name></cpp:macro>                                          <cpp:value>"set client_encoding = 'UTF8'"</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_SENDQUERY</argument>, <argument>.param = <literal type="string">"[\""</literal> TEST_QUERY <literal type="string">"\"]"</literal></argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_CONSUMEINPUT}</argument>,
            <argument>{.function = HRNPQ_ISBUSY}</argument>,
            <argument>{.function = HRNPQ_GETRESULT}</argument>,
            <argument>{.function = HRNPQ_RESULTSTATUS</argument>, <argument>.resultInt = PGRES_COMMAND_OK}</argument>,
            <argument>{.function = HRNPQ_CLEAR}</argument>,
            <argument>{.function = HRNPQ_GETRESULT</argument>, <argument>.resultNull = true}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>pgClientQuery</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_QUERY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pgClientQueryResultAny</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"execute set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_QUERY</name></cpp:undef>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"execute do block and raise notice"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_QUERY</name></cpp:macro>                                          <cpp:value>"do $$ begin raise notice 'mememe'; end $$"</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_SENDQUERY</argument>, <argument>.param = <literal type="string">"[\""</literal> TEST_QUERY <literal type="string">"\"]"</literal></argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_CONSUMEINPUT}</argument>,
            <argument>{.function = HRNPQ_ISBUSY}</argument>,
            <argument>{.function = HRNPQ_GETRESULT}</argument>,
            <argument>{.function = HRNPQ_RESULTSTATUS</argument>, <argument>.resultInt = PGRES_COMMAND_OK}</argument>,
            <argument>{.function = HRNPQ_CLEAR}</argument>,
            <argument>{.function = HRNPQ_GETRESULT</argument>, <argument>.resultNull = true}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>pgClientQuery</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_QUERY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pgClientQueryResultNone</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"execute do block"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_QUERY</name></cpp:undef>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"unsupported type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_QUERY</name></cpp:macro>                                          <cpp:value>"select clock_timestamp()"</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_SENDQUERY</argument>, <argument>.param = <literal type="string">"[\""</literal> TEST_QUERY <literal type="string">"\"]"</literal></argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_CONSUMEINPUT}</argument>,
            <argument>{.function = HRNPQ_ISBUSY}</argument>,
            <argument>{.function = HRNPQ_GETRESULT}</argument>,
            <argument>{.function = HRNPQ_RESULTSTATUS</argument>, <argument>.resultInt = PGRES_TUPLES_OK}</argument>,
            <argument>{.function = HRNPQ_NTUPLES</argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_NFIELDS</argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_FTYPE</argument>, <argument>.param = <literal type="string">"[0]"</literal></argument>, <argument>.resultInt = <literal type="number">1184</literal>}</argument>,
            <argument>{.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[0,0]"</literal></argument>, <argument>.resultZ = <literal type="string">"2019-07-25 12:06:09.000282+00"</literal>}</argument>,
            <argument>{.function = HRNPQ_CLEAR}</argument>,
            <argument>{.function = HRNPQ_GETRESULT</argument>, <argument>.resultNull = true}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>pgClientQuery</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_QUERY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pgClientQueryResultAny</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to parse type 1184 in column 0 for query '"</literal> <name>TEST_QUERY</name> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_QUERY</name></cpp:undef>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"successful query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_QUERY</name></cpp:macro>                                                                                                         \
            <cpp:value>"select oid, case when relname = 'pg_class' then null::text else '' end, relname, relname = 'pg_class'"                \
            "  from pg_class where relname in ('pg_class', 'pg_proc')"                                                             \
            " order by relname"</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_SENDQUERY</argument>, <argument>.param = <literal type="string">"[\""</literal> TEST_QUERY <literal type="string">"\"]"</literal></argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_CONSUMEINPUT}</argument>,
            <argument>{.function = HRNPQ_ISBUSY}</argument>,
            <argument>{.function = HRNPQ_GETRESULT}</argument>,
            <argument>{.function = HRNPQ_RESULTSTATUS</argument>, <argument>.resultInt = PGRES_TUPLES_OK}</argument>,

            <argument>{.function = HRNPQ_NTUPLES</argument>, <argument>.resultInt = <literal type="number">2</literal>}</argument>,
            <argument>{.function = HRNPQ_NFIELDS</argument>, <argument>.resultInt = <literal type="number">4</literal>}</argument>,
            <argument>{.function = HRNPQ_FTYPE</argument>, <argument>.param = <literal type="string">"[0]"</literal></argument>, <argument>.resultInt = HRNPQ_TYPE_OID}</argument>,
            <argument>{.function = HRNPQ_FTYPE</argument>, <argument>.param = <literal type="string">"[1]"</literal></argument>, <argument>.resultInt = HRNPQ_TYPE_TEXT}</argument>,
            <argument>{.function = HRNPQ_FTYPE</argument>, <argument>.param = <literal type="string">"[2]"</literal></argument>, <argument>.resultInt = HRNPQ_TYPE_TEXT}</argument>,
            <argument>{.function = HRNPQ_FTYPE</argument>, <argument>.param = <literal type="string">"[3]"</literal></argument>, <argument>.resultInt = HRNPQ_TYPE_BOOL}</argument>,

            <argument>{.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[0,0]"</literal></argument>, <argument>.resultZ = <literal type="string">"1259"</literal>}</argument>,
            <argument>{.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[0,1]"</literal></argument>, <argument>.resultZ = <literal type="string">""</literal>}</argument>,
            <argument>{.function = HRNPQ_GETISNULL</argument>, <argument>.param = <literal type="string">"[0,1]"</literal></argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[0,2]"</literal></argument>, <argument>.resultZ = <literal type="string">"pg_class"</literal>}</argument>,
            <argument>{.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[0,3]"</literal></argument>, <argument>.resultZ = <literal type="string">"t"</literal>}</argument>,

            <argument>{.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[1,0]"</literal></argument>, <argument>.resultZ = <literal type="string">"1255"</literal>}</argument>,
            <argument>{.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[1,1]"</literal></argument>, <argument>.resultZ = <literal type="string">""</literal>}</argument>,
            <argument>{.function = HRNPQ_GETISNULL</argument>, <argument>.param = <literal type="string">"[1,1]"</literal></argument>, <argument>.resultInt = <literal type="number">0</literal>}</argument>,
            <argument>{.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[1,2]"</literal></argument>, <argument>.resultZ = <literal type="string">"pg_proc"</literal>}</argument>,
            <argument>{.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[1,3]"</literal></argument>, <argument>.resultZ = <literal type="string">"f"</literal>}</argument>,

            <argument>{.function = HRNPQ_CLEAR}</argument>,
            <argument>{.function = HRNPQ_GETRESULT</argument>, <argument>.resultNull = true}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>hrnPackToStr</name><argument_list>(<argument><expr><call><name>pgClientQuery</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_QUERY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pgClientQueryResultAny</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"1:array:[1:u32:1259, 3:str:pg_class, 4:bool:true], 2:array:[1:u32:1255, 2:str:, 3:str:pg_proc, 4:bool:false]"</literal></expr></argument>,
            <argument><expr><literal type="string">"simple query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_QUERY</name></cpp:undef>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when result is not a single row"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_QUERY</name></cpp:macro>                                          <cpp:value>"select * from pg_class limit 2"</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_SENDQUERY</argument>, <argument>.param = <literal type="string">"[\""</literal> TEST_QUERY <literal type="string">"\"]"</literal></argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_CONSUMEINPUT}</argument>,
            <argument>{.function = HRNPQ_ISBUSY}</argument>,
            <argument>{.function = HRNPQ_GETRESULT}</argument>,
            <argument>{.function = HRNPQ_RESULTSTATUS</argument>, <argument>.resultInt = PGRES_TUPLES_OK}</argument>,

            <argument>{.function = HRNPQ_NTUPLES</argument>, <argument>.resultInt = <literal type="number">2</literal>}</argument>,
            <argument>{.function = HRNPQ_NFIELDS</argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,

            <argument>{.function = HRNPQ_CLEAR}</argument>,
            <argument>{.function = HRNPQ_GETRESULT</argument>, <argument>.resultNull = true}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>pgClientQuery</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_QUERY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pgClientQueryResultRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbQueryError</name></expr></argument>,
            <argument><expr><literal type="string">"expected one row from '"</literal> <name>TEST_QUERY</name> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_QUERY</name></cpp:undef>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"single row result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_QUERY</name></cpp:macro>                                          <cpp:value>"select 1259::oid, -9223372036854775807::int8"</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_SENDQUERY</argument>, <argument>.param = <literal type="string">"[\""</literal> TEST_QUERY <literal type="string">"\"]"</literal></argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_CONSUMEINPUT}</argument>,
            <argument>{.function = HRNPQ_ISBUSY}</argument>,
            <argument>{.function = HRNPQ_GETRESULT}</argument>,
            <argument>{.function = HRNPQ_RESULTSTATUS</argument>, <argument>.resultInt = PGRES_TUPLES_OK}</argument>,

            <argument>{.function = HRNPQ_NTUPLES</argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_NFIELDS</argument>, <argument>.resultInt = <literal type="number">2</literal>}</argument>,
            <argument>{.function = HRNPQ_FTYPE</argument>, <argument>.param = <literal type="string">"[0]"</literal></argument>, <argument>.resultInt = HRNPQ_TYPE_OID}</argument>,
            <argument>{.function = HRNPQ_FTYPE</argument>, <argument>.param = <literal type="string">"[1]"</literal></argument>, <argument>.resultInt = HRNPQ_TYPE_INT8}</argument>,

            <argument>{.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[0,0]"</literal></argument>, <argument>.resultZ = <literal type="string">"1259"</literal>}</argument>,
            <argument>{.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[0,1]"</literal></argument>, <argument>.resultZ = <literal type="string">"-9223372036854775807"</literal>}</argument>,

            <argument>{.function = HRNPQ_CLEAR}</argument>,
            <argument>{.function = HRNPQ_GETRESULT</argument>, <argument>.resultNull = true}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>hrnPackToStr</name><argument_list>(<argument><expr><call><name>pgClientQuery</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_QUERY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pgClientQueryResultRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"1:u32:1259, 2:i64:-9223372036854775807"</literal></expr></argument>, <argument><expr><literal type="string">"row result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_QUERY</name></cpp:undef>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when result is not a single column"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_QUERY</name></cpp:macro>                                          <cpp:value>"select * from pg_class limit 1"</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_SENDQUERY</argument>, <argument>.param = <literal type="string">"[\""</literal> TEST_QUERY <literal type="string">"\"]"</literal></argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_CONSUMEINPUT}</argument>,
            <argument>{.function = HRNPQ_ISBUSY}</argument>,
            <argument>{.function = HRNPQ_GETRESULT}</argument>,
            <argument>{.function = HRNPQ_RESULTSTATUS</argument>, <argument>.resultInt = PGRES_TUPLES_OK}</argument>,

            <argument>{.function = HRNPQ_NTUPLES</argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_NFIELDS</argument>, <argument>.resultInt = <literal type="number">2</literal>}</argument>,

            <argument>{.function = HRNPQ_CLEAR}</argument>,
            <argument>{.function = HRNPQ_GETRESULT</argument>, <argument>.resultNull = true}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>pgClientQuery</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_QUERY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pgClientQueryResultColumn</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbQueryError</name></expr></argument>,
            <argument><expr><literal type="string">"expected one column from '"</literal> <name>TEST_QUERY</name> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_QUERY</name></cpp:undef>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"single column result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_QUERY</name></cpp:macro>                                          <cpp:value>"select -2147483647::int4"</cpp:value></cpp:define>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_SENDQUERY</argument>, <argument>.param = <literal type="string">"[\""</literal> TEST_QUERY <literal type="string">"\"]"</literal></argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_CONSUMEINPUT}</argument>,
            <argument>{.function = HRNPQ_ISBUSY}</argument>,
            <argument>{.function = HRNPQ_GETRESULT}</argument>,
            <argument>{.function = HRNPQ_RESULTSTATUS</argument>, <argument>.resultInt = PGRES_TUPLES_OK}</argument>,

            <argument>{.function = HRNPQ_NTUPLES</argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_NFIELDS</argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.function = HRNPQ_FTYPE</argument>, <argument>.param = <literal type="string">"[0]"</literal></argument>, <argument>.resultInt = HRNPQ_TYPE_INT4}</argument>,

            <argument>{.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[0,0]"</literal></argument>, <argument>.resultZ = <literal type="string">"-2147483647"</literal>}</argument>,

            <argument>{.function = HRNPQ_CLEAR}</argument>,
            <argument>{.function = HRNPQ_GETRESULT</argument>, <argument>.resultNull = true}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>hrnPackToStr</name><argument_list>(<argument><expr><call><name>pgClientQuery</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_QUERY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pgClientQueryResultColumn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1:i32:-2147483647"</literal></expr></argument>,
            <argument><expr><literal type="string">"column result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TEST_QUERY</name></cpp:undef>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"close connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HARNESS_PQ_REAL</name></cpp:ifndef>
        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_FINISH}</argument>,
            <argument>{.function = HRNPQ_GETRESULT</argument>, <argument>.resultNull = true}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pgClientClose</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pgClientClose</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close client again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
