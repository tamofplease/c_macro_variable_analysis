<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/storage/s3Test.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test S3 Storage
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessFork.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessServer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessStorage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Constants
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S3_TEST_HOST</name></cpp:macro>                                                <cpp:value>"s3.amazonaws.com"</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Helper to build test requests
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>TestRequestParam</name>
<block>{
    <expr_stmt><expr><name>VAR_PARAM_HEADER</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>accessKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>securityToken</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>range</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>kms</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ttl</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
}</block></struct></type> <name>TestRequestParam</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testRequestP</name><parameter_list>(<parameter><type><name>write</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>verb</name></type></parameter>, <parameter><type><name>path</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                                                                   \
    <cpp:value>testRequest(write, s3, verb, path, (TestRequestParam){VAR_PARAM_INIT, __VA_ARGS__})</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRequest</name><parameter_list>(<parameter><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name></decl></parameter>, <parameter><decl><type><name>Storage</name> <modifier>*</modifier></type><name>s3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>verb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>TestRequestParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Get security token from param</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>securityToken</name> <init>= <expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>securityToken</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name><name>param</name><operator>.</operator><name>securityToken</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <comment type="line">// If s3 storage is set then get the driver</comment>
    <decl_stmt><decl><type><name>StorageS3</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>s3</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>driver</name> <operator>=</operator> <operator>(</operator><name>StorageS3</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Also update the security token if it is not already set</comment>
        <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>securityToken</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>securityToken</name> <operator>=</operator> <call><name>strZNull</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>securityToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Add request</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><call><name>strCatFmt</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s %s HTTP/1.1\r\nuser-agent:"</literal> <name>PROJECT_NAME</name> <literal type="string">"/"</literal> <name>PROJECT_VERSION</name> <literal type="string">"\r\n"</literal></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add authorization header when s3 service</comment>
    <if_stmt><if>if <condition>(<expr><name>s3</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>request</name></expr></argument>,
            <argument><expr><literal type="string">"authorization:AWS4-HMAC-SHA256 Credential=%s/\?\?\?\?\?\?\?\?/us-east-1/s3/aws4_request,SignedHeaders="</literal></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>accessKey</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>accessKey</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>param</name><operator>.</operator><name>accessKey</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"content-md5;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"host;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>range</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"range;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"x-amz-content-sha256;x-amz-date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>securityToken</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">";x-amz-security-token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>kms</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">";x-amz-server-side-encryption;x-amz-server-side-encryption-aws-kms-key-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">",Signature=????????????????????????????????????????????????????????????????\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Add content-length</comment>
    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"content-length:%zu\r\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add md5</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"content-md5:%s\r\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strNewEncode</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeMd5</name></expr></argument>, <argument><expr><call><name>BUFSTRZ</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Add host</comment>
    <if_stmt><if>if <condition>(<expr><name>s3</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>driver</name><operator>-&gt;</operator><name>uriStyle</name></name> <operator>==</operator> <name>storageS3UriStyleHost</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"host:bucket."</literal> <name>S3_TEST_HOST</name> <literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"host:"</literal> <name>S3_TEST_HOST</name> <literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"host:%s\r\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="line">// Add range</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>range</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"range:bytes=%s\r\n"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Add content checksum and date if s3 service</comment>
    <if_stmt><if>if <condition>(<expr><name>s3</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Add content sha256 and date</comment>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>request</name></expr></argument>,
            <argument><expr><literal type="string">"x-amz-content-sha256:%s\r\n"</literal>
                <literal type="string">"x-amz-date:????????T??????Z"</literal> <literal type="string">"\r\n"</literal></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>HASH_TYPE_SHA256_ZERO</name></expr> </then><else>: <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha256</name></expr></argument>, <argument><expr><call><name>BUFSTRZ</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add security token</comment>
        <if_stmt><if>if <condition>(<expr><name>securityToken</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"x-amz-security-token:%s\r\n"</literal></expr></argument>, <argument><expr><name>securityToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Add kms key</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>kms</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"x-amz-server-side-encryption:aws:kms\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"x-amz-server-side-encryption-aws-kms-key-id:%s\r\n"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>kms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Add metadata token</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>token</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"x-aws-ec2-metadata-token:%s\r\n"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Add metadata token ttl</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>ttl</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"x-aws-ec2-metadata-token-ttl-seconds:%s\r\n"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>ttl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Add final \r\n</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add content</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>hrnServerScriptExpect</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Helper to build test responses
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>TestResponseParam</name>
<block>{
    <expr_stmt><expr><name>VAR_PARAM_HEADER</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>code</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>http</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>
}</block></struct></type> <name>TestResponseParam</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testResponseP</name><parameter_list>(<parameter><type><name>write</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                                                                                  \
    <cpp:value>testResponse(write, (TestResponseParam){VAR_PARAM_INIT, __VA_ARGS__})</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>testResponse</name><parameter_list>(<parameter><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name></decl></parameter>, <parameter><decl><type><name>TestResponseParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Set code to 200 if not specified</comment>
    <expr_stmt><expr><name><name>param</name><operator>.</operator><name>code</name></name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><operator>.</operator><name>code</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">200</literal></expr> </then><else>: <expr><name><name>param</name><operator>.</operator><name>code</name></name></expr></else></ternary></expr>;</expr_stmt>

    <comment type="line">// Output header and code</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>response</name> <init>= <expr><call><name>strCatFmt</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"HTTP/%s %u "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>http</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">"1.1"</literal></expr> </then><else>: <expr><name><name>param</name><operator>.</operator><name>http</name></name></expr></else></ternary></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add reason for some codes</comment>
    <switch>switch <condition>(<expr><name><name>param</name><operator>.</operator><name>code</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><literal type="number">200</literal></expr>:</case>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <comment type="line">// End header</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Headers</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>header</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><literal type="string">"%s\r\n"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Content</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>response</name></expr></argument>,
            <argument><expr><literal type="string">"content-length:%zu\r\n"</literal>
                <literal type="string">"\r\n"</literal>
                <literal type="string">"%s"</literal></expr></argument>,
            <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>hrnServerScriptReply</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Format ISO-8601 date with - and :
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>testS3DateTime</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>TIME</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
        <argument><expr><call><name>strftime</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%dT%H:%M:%SZ"</literal></expr></argument>, <argument><expr><call><name>gmtime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
        <argument><expr><literal type="string">"unable to format date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set storage helper</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StorageHelper</name></type> <name><name>storageHelperList</name><index>[]</index></name> <init>= <expr><block>{<expr><name>STORAGE_S3_HELPER</name></expr>, <expr><name>STORAGE_END_HELPER</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>storageHelperInit</name><argument_list>(<argument><expr><name>storageHelperList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test strings</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>bucket</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bucket"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>region</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"us-east-1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>endPoint</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"s3.amazonaws.com"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>port</name> <init>= <expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>authPort</name> <init>= <expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>accessKey</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"AKIAIOSFODNN7EXAMPLE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>secretAccessKey</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>securityToken</name> <init>= <expr><call><name>STRDEF</name><argument_list>(
        <argument><expr><literal type="string">"AQoDYXdzEPT//////////wEXAMPLEtc764bNrC9SAPBSM22wDOk4x4HIZ8j4FZTwdQWLWsKWHGBuFqwAeMicRXmxfpSPfIeoIYRqTflfKD8YUuwthAx7mSEI/q"</literal>
        <literal type="string">"kPpKPi/kMcGdQrmGdeehM4IC1NtBmUpp2wUE8phUZampKsburEDy0KPkyQDYwT7WZ0wq5VSXDvp75YU9HFvlRd8Tx6q6fE8YQcHNVXAkiY9q6d+xo0rKwT38xV"</literal>
        <literal type="string">"qr7ZD0u0iPPkUL64lIZbqBAz+scqKmlzm8FDrypNC9Yjc8fPOLn9FX9KSYvKTr4rvx3iSIlTJabIQwj2ICCR/oLxBA=="</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>credRole</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"credrole"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Config settings that are required for every test (without endpoint for special tests)</comment>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>commonArgWithoutEndpointList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>commonArgWithoutEndpointList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>commonArgWithoutEndpointList</name></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><literal type="string">"s3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>commonArgWithoutEndpointList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>commonArgWithoutEndpointList</name></expr></argument>, <argument><expr><name>cfgOptRepoS3Bucket</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>commonArgWithoutEndpointList</name></expr></argument>, <argument><expr><name>cfgOptRepoS3Region</name></expr></argument>, <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// TLS can only be verified in a container</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>TEST_IN_CONTAINER</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>commonArgWithoutEndpointList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageVerifyTls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Config settings that are required for every test (with endpoint)</comment>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>commonArgList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>commonArgWithoutEndpointList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>commonArgList</name></expr></argument>, <argument><expr><name>cfgOptRepoS3Endpoint</name></expr></argument>, <argument><expr><name>endPoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Secure options must be loaded into environment variables</comment>
    <expr_stmt><expr><call><name>hrnCfgEnvRaw</name><argument_list>(<argument><expr><name>cfgOptRepoS3Key</name></expr></argument>, <argument><expr><name>accessKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgEnvRaw</name><argument_list>(<argument><expr><name>cfgOptRepoS3KeySecret</name></expr></argument>, <argument><expr><name>secretAccessKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageS3DateTime() and storageS3Auth()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storageS3DateTime</name><argument_list>(<argument><expr><literal type="number">1491267845</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"20170404T010405Z"</literal></expr></argument>, <argument><expr><literal type="string">"static date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"config without token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>commonArgList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StorageS3</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><operator>(</operator><name>StorageS3</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>bucket</name></name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>, <argument><expr><literal type="string">"check bucket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>region</name></name></expr></argument>, <argument><expr><name>region</name></expr></argument>, <argument><expr><literal type="string">"check region"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>bucketEndpoint</name></name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>endPoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>accessKey</name></name></expr></argument>, <argument><expr><name>accessKey</name></expr></argument>, <argument><expr><literal type="string">"check access key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>secretAccessKey</name></name></expr></argument>, <argument><expr><name>secretAccessKey</name></expr></argument>, <argument><expr><literal type="string">"check secret access key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>securityToken</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check security token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
            <argument><expr><call><name>httpClientToLog</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>httpClient</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strNewFmt</name><argument_list>(
                <argument><expr><literal type="string">"{ioClient: {type: tls, driver: {ioClient: {type: socket, driver: {host: bucket.s3.amazonaws.com, port: 443"</literal>
                    <literal type="string">", timeoutConnect: 60000, timeoutSession: 60000}}, timeoutConnect: 60000, timeoutSession: 60000"</literal>
                    <literal type="string">", verifyPeer: %s}}, reusable: 0, timeout: 60000}"</literal></expr></argument>,
                <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name>TEST_IN_CONTAINER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"check http client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"auth with token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><call><name>httpHeaderNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HttpQuery</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>httpQueryNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"list-type"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>storageS3Auth</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"GET"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20170606T121212Z"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>HASH_TYPE_SHA256_ZERO_STR</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"generate authorization"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"authorization"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"AWS4-HMAC-SHA256 Credential=AKIAIOSFODNN7EXAMPLE/20170606/us-east-1/s3/aws4_request,"</literal>
                <literal type="string">"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"</literal>
                <literal type="string">"Signature=cb03bf1d575c1f8904dabf0e573990375340ab293ef7ad18d049fc1338fd89b3"</literal></expr></argument>,
            <argument><expr><literal type="string">"check authorization header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Test again to be sure cache signing key is used</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>lastSigningKey</name> <init>= <expr><name><name>driver</name><operator>-&gt;</operator><name>signingKey</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>storageS3Auth</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"GET"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20170606T121212Z"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>HASH_TYPE_SHA256_ZERO_STR</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"generate authorization"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"authorization"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"AWS4-HMAC-SHA256 Credential=AKIAIOSFODNN7EXAMPLE/20170606/us-east-1/s3/aws4_request,"</literal>
                <literal type="string">"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"</literal>
                <literal type="string">"Signature=cb03bf1d575c1f8904dabf0e573990375340ab293ef7ad18d049fc1338fd89b3"</literal></expr></argument>,
            <argument><expr><literal type="string">"check authorization header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>signingKey</name></name> <operator>==</operator> <name>lastSigningKey</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check signing key was reused"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"change date to generate new signing key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>storageS3Auth</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"GET"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20180814T080808Z"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>HASH_TYPE_SHA256_ZERO_STR</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"generate authorization"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"authorization"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"AWS4-HMAC-SHA256 Credential=AKIAIOSFODNN7EXAMPLE/20180814/us-east-1/s3/aws4_request,"</literal>
                <literal type="string">"SignedHeaders=host;x-amz-content-sha256;x-amz-date,"</literal>
                <literal type="string">"Signature=d0fa9c36426eb94cdbaf287a7872c7a3b6c913f523163d0d7debba0758e36f49"</literal></expr></argument>,
            <argument><expr><literal type="string">"check authorization header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>signingKey</name></name> <operator>!=</operator> <name>lastSigningKey</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check signing key was regenerated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"config with token, endpoint with custom port, and ca-file/path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>commonArgWithoutEndpointList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoS3Endpoint</name></expr></argument>, <argument><expr><literal type="string">"custom.endpoint:333"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageCaPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/cert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageCaFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_CA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRaw</name><argument_list>(<argument><expr><name>cfgOptRepoS3Token</name></expr></argument>, <argument><expr><name>securityToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>driver</name> <operator>=</operator> <operator>(</operator><name>StorageS3</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>securityToken</name></name></expr></argument>, <argument><expr><name>securityToken</name></expr></argument>, <argument><expr><literal type="string">"check security token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
            <argument><expr><call><name>httpClientToLog</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>httpClient</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strNewFmt</name><argument_list>(
                <argument><expr><literal type="string">"{ioClient: {type: tls, driver: {ioClient: {type: socket, driver: {host: bucket.custom.endpoint, port: 333"</literal>
                    <literal type="string">", timeoutConnect: 60000, timeoutSession: 60000}}, timeoutConnect: 60000, timeoutSession: 60000"</literal>
                    <literal type="string">", verifyPeer: %s}}, reusable: 0, timeout: 60000}"</literal></expr></argument>,
                <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name>TEST_IN_CONTAINER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"check http client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"auth with token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>storageS3Auth</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"GET"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20170606T121212Z"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>HASH_TYPE_SHA256_ZERO_STR</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"generate authorization"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"authorization"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"AWS4-HMAC-SHA256 Credential=AKIAIOSFODNN7EXAMPLE/20170606/us-east-1/s3/aws4_request,"</literal>
                <literal type="string">"SignedHeaders=host;x-amz-content-sha256;x-amz-date;x-amz-security-token,"</literal>
                <literal type="string">"Signature=85278841678ccbc0f137759265030d7b5e237868dd36eea658426b18344d1685"</literal></expr></argument>,
            <argument><expr><literal type="string">"check authorization header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageS3*(), StorageReadS3, and StorageWriteS3"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"s3 server"</literal></argument>, <argument>.timeout = <literal type="number">5000</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnServerRunP</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hrnServerProtocolTls</name></expr></argument>, <argument><expr><operator>.</operator><name>port</name> <operator>=</operator> <name>port</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"s3 server run"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"auth server"</literal></argument>, <argument>.timeout = <literal type="number">10000</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
                    <argument><expr><call><name>hrnServerRunP</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hrnServerProtocolSocket</name></expr></argument>, <argument><expr><operator>.</operator><name>port</name> <operator>=</operator> <name>authPort</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"auth server run"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Do not use HRN_FORK_PARENT_WRITE() here so individual names can be assigned to help with debugging</comment>
                <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>service</name> <init>= <expr><call><name>hrnServerScriptBegin</name><argument_list>(
                    <argument><expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"s3 client write"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE_FD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>auth</name> <init>= <expr><call><name>hrnServerScriptBegin</name><argument_list>(
                    <argument><expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"auth client write"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE_FD</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"config with keys, token, and host with custom port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>commonArgList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgEnvRaw</name><argument_list>(<argument><expr><name>cfgOptRepoS3Token</name></expr></argument>, <argument><expr><name>securityToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>s3</name> <init>= <expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>StorageS3</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><operator>(</operator><name>StorageS3</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>s3</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"check path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageFeature</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><name>storageFeaturePath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check path feature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>partSize</name></name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"check part size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"coverage for noop functions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathSyncP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"path sync is a noop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"ignore missing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/fi%26le.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">404</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"fi&amp;le.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"get file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on missing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">404</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
                    <argument><expr><literal type="string">"unable to open missing file '/file.txt' for read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get file with offset and limit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>range</name> <operator>=</operator> <literal type="string">"1-21"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"this is a sample file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
                    <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>offset</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>.</operator><name>limit</name> <operator>=</operator> <call><name>VARUINT64</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"this is a sample file"</literal></expr></argument>, <argument><expr><literal type="string">"get file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get zero-length file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/file0.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file0.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"get zero-length file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"switch to temp credentials"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>commonArgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoS3Role</name></expr></argument>, <argument><expr><name>credRole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoS3KeyType</name></expr></argument>, <argument><expr><name>storageS3KeyTypeAuto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoS3KmsKeyId</name></expr></argument>, <argument><expr><literal type="string">"kmskey1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>driver</name> <operator>=</operator> <operator>(</operator><name>StorageS3</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>s3</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"check path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>credRole</name></name></expr></argument>, <argument><expr><name>credRole</name></expr></argument>, <argument><expr><literal type="string">"check role"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageFeature</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><name>storageFeaturePath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check path feature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Set partSize to a small value for testing</comment>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>partSize</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

                <comment type="line">// Testing requires the auth http client to be redirected</comment>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>credHost</name></name> <operator>=</operator> <call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>credHttpClient</name></name> <operator>=</operator> <call><name>httpClientNew</name><argument_list>(<argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>authPort</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Now that we have checked the role when set explicitly, null it out to make sure it is retrieved automatically</comment>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>credRole</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when retrieving role"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/latest/api/token"</literal></expr></argument>, <argument><expr><operator>.</operator><name>ttl</name> <operator>=</operator> <literal type="string">"15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>.</operator><name>http</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"WtokenW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><name>S3_CREDENTIAL_PATH</name></expr></argument>, <argument><expr><operator>.</operator><name>token</name> <operator>=</operator> <literal type="string">"WtokenW"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>.</operator><name>http</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">301</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
                    <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"HTTP request failed with 301:\n"</literal>
                        <literal type="string">"*** Path/Query ***:\n"</literal>
                        <literal type="string">"GET /latest/meta-data/iam/security-credentials\n"</literal>
                        <literal type="string">"*** Request Headers ***:\n"</literal>
                        <literal type="string">"content-length: 0\n"</literal>
                        <literal type="string">"host: %s\n"</literal>
                        <literal type="string">"x-aws-ec2-metadata-token: WtokenW"</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"missing role and token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/latest/api/token"</literal></expr></argument>, <argument><expr><operator>.</operator><name>ttl</name> <operator>=</operator> <literal type="string">"15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>.</operator><name>http</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">301</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><name>S3_CREDENTIAL_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>.</operator><name>http</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">404</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"role to retrieve temporary credentials not found\n"</literal>
                        <literal type="string">"HINT: is a valid IAM role associated with this instance?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when retrieving temp credentials and missing token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/latest/api/token"</literal></expr></argument>, <argument><expr><operator>.</operator><name>ttl</name> <operator>=</operator> <literal type="string">"15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>.</operator><name>http</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">301</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><name>S3_CREDENTIAL_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>.</operator><name>http</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <call><name>strZ</name><argument_list>(<argument><expr><name>credRole</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>S3_CREDENTIAL_PATH</name> <literal type="string">"/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>credRole</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>.</operator><name>http</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
                    <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"HTTP request failed with 300:\n"</literal>
                        <literal type="string">"*** Path/Query ***:\n"</literal>
                        <literal type="string">"GET /latest/meta-data/iam/security-credentials/credrole\n"</literal>
                        <literal type="string">"*** Request Headers ***:\n"</literal>
                        <literal type="string">"content-length: 0\n"</literal>
                        <literal type="string">"host: %s"</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid temp credentials role and missing token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/latest/api/token"</literal></expr></argument>, <argument><expr><operator>.</operator><name>ttl</name> <operator>=</operator> <literal type="string">"15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>.</operator><name>http</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">301</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>S3_CREDENTIAL_PATH</name> <literal type="string">"/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>credRole</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>.</operator><name>http</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">404</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
                    <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"role '%s' not found\n"</literal>
                        <literal type="string">"HINT: is '%s' a valid IAM role associated with this instance?"</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>credRole</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>credRole</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid code when retrieving temp credentials"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/latest/api/token"</literal></expr></argument>, <argument><expr><operator>.</operator><name>ttl</name> <operator>=</operator> <literal type="string">"15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>.</operator><name>http</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"XtokenX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>S3_CREDENTIAL_PATH</name> <literal type="string">"/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>credRole</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>token</name> <operator>=</operator> <literal type="string">"XtokenX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>.</operator><name>http</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"{\"Code\":\"IAM role is not configured\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
                    <argument><expr><literal type="string">"unable to retrieve temporary credentials: IAM role is not configured"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"non-404 error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/latest/api/token"</literal></expr></argument>, <argument><expr><operator>.</operator><name>ttl</name> <operator>=</operator> <literal type="string">"15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>.</operator><name>http</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"YtokenY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>S3_CREDENTIAL_PATH</name> <literal type="string">"/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>credRole</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>token</name> <operator>=</operator> <literal type="string">"YtokenY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>auth</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <call><name>zNewFmt</name><argument_list>(
                        <argument><expr><literal type="string">"{\"Code\":\"Success\",\"AccessKeyId\":\"x\",\"SecretAccessKey\":\"y\",\"Token\":\"z\""</literal>
                            <literal type="string">",\"Expiration\":\"%s\"}"</literal></expr></argument>,
                        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>testS3DateTime</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>S3_CREDENTIAL_RENEW_SEC</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>accessKey</name> <operator>=</operator> <literal type="string">"x"</literal></expr></argument>, <argument><expr><operator>.</operator><name>securityToken</name> <operator>=</operator> <literal type="string">"z"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">303</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"CONTENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>StorageRead</name> <modifier>*</modifier></type><name>read</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new read file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageReadIgnoreMissing</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check ignore missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storageReadName</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>, <argument><expr><literal type="string">"check name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <macro><name>TEST_ERROR</name><argument_list>(
                    <argument>ioReadOpen(storageReadIo(read))</argument>, <argument>ProtocolError</argument>,
                    <argument><literal type="string">"HTTP request failed with 303:\n"</literal>
                    <literal type="string">"*** Path/Query ***:\n"</literal>
                    <literal type="string">"GET /file.txt\n"</literal>
                    <literal type="string">"*** Request Headers ***:\n"</literal>
                    <literal type="string">"authorization: &lt;redacted&gt;\n"</literal>
                    <literal type="string">"content-length: 0\n"</literal>
                    <literal type="string">"host: bucket."</literal> S3_TEST_HOST <literal type="string">"\n"</literal>
                    <literal type="string">"x-amz-content-sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n"</literal>
                    <literal type="string">"x-amz-date: &lt;redacted&gt;\n"</literal>
                    <literal type="string">"x-amz-security-token: &lt;redacted&gt;\n"</literal>
                    <literal type="string">"*** Response Headers ***:\n"</literal>
                    <literal type="string">"content-length: 7\n"</literal>
                    <literal type="string">"*** Response Content ***:\n"</literal>
                    <literal type="string">"CONTENT"</literal></argument>)</argument_list></macro>

                <comment type="line">// Check that temp credentials were set</comment>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>accessKey</name></name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>, <argument><expr><literal type="string">"check access key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>secretAccessKey</name></name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>, <argument><expr><literal type="string">"check secret access key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>securityToken</name></name></expr></argument>, <argument><expr><literal type="string">"z"</literal></expr></argument>, <argument><expr><literal type="string">"check security token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write file in one part"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/latest/api/token"</literal></expr></argument>, <argument><expr><operator>.</operator><name>ttl</name> <operator>=</operator> <literal type="string">"15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>.</operator><name>http</name> <operator>=</operator> <literal type="string">"1.0"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"ZtokenZ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><name>S3_CREDENTIAL_PATH</name> <literal type="string">"/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>credRole</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>token</name> <operator>=</operator> <literal type="string">"ZtokenZ"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>auth</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <call><name>zNewFmt</name><argument_list>(
                        <argument><expr><literal type="string">"{\"Code\":\"Success\",\"AccessKeyId\":\"xx\",\"SecretAccessKey\":\"yy\",\"Token\":\"zz\""</literal>
                            <literal type="string">",\"Expiration\":\"%s\"}"</literal></expr></argument>,
                        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>testS3DateTime</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>S3_CREDENTIAL_RENEW_SEC</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"ABCD"</literal></expr></argument>, <argument><expr><operator>.</operator><name>accessKey</name> <operator>=</operator> <literal type="string">"xx"</literal></expr></argument>, <argument><expr><operator>.</operator><name>securityToken</name> <operator>=</operator> <literal type="string">"zz"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>kms</name> <operator>=</operator> <literal type="string">"kmskey1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Make a copy of the signing key to verify that it gets changed when the keys are updated</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>oldSigningKey</name> <init>= <expr><call><name>bufDup</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>signingKey</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>StorageWrite</name> <modifier>*</modifier></type><name>write</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"ABCD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteAtomic</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"write is atomic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteCreatePath</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"path will be created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageWriteModeFile</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"file mode is 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageWriteModePath</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"path mode is 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storageWriteName</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>, <argument><expr><literal type="string">"check file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteSyncFile</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"file is synced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteSyncPath</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"path is synced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteTruncate</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"file will be truncated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageWriteS3Close</name><argument_list>(<argument><expr><name><name>write</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close file again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Check that temp credentials were changed</comment>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>accessKey</name></name></expr></argument>, <argument><expr><literal type="string">"xx"</literal></expr></argument>, <argument><expr><literal type="string">"check access key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>secretAccessKey</name></name></expr></argument>, <argument><expr><literal type="string">"yy"</literal></expr></argument>, <argument><expr><literal type="string">"check secret access key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>securityToken</name></name></expr></argument>, <argument><expr><literal type="string">"zz"</literal></expr></argument>, <argument><expr><literal type="string">"check security token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Check that the signing key changed</comment>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>signingKey</name></name></expr></argument>, <argument><expr><name>oldSigningKey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"signing key changed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write zero-length file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">""</literal></expr></argument>, <argument><expr><operator>.</operator><name>kms</name> <operator>=</operator> <literal type="string">"kmskey1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write file in chunks with nothing left over on close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?uploads="</literal></expr></argument>, <argument><expr><operator>.</operator><name>kms</name> <operator>=</operator> <literal type="string">"kmskey1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;InitiateMultipartUploadResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;"</literal>
                        <literal type="string">"&lt;Bucket&gt;bucket&lt;/Bucket&gt;"</literal>
                        <literal type="string">"&lt;Key&gt;file.txt&lt;/Key&gt;"</literal>
                        <literal type="string">"&lt;UploadId&gt;WxRt&lt;/UploadId&gt;"</literal>
                        <literal type="string">"&lt;/InitiateMultipartUploadResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?partNumber=1&amp;uploadId=WxRt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"1234567890123456"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <literal type="string">"etag:WxRt1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?partNumber=2&amp;uploadId=WxRt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"7890123456789012"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <literal type="string">"eTag:WxRt2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?uploadId=WxRt"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</literal>
                        <literal type="string">"&lt;CompleteMultipartUpload&gt;"</literal>
                        <literal type="string">"&lt;Part&gt;&lt;PartNumber&gt;1&lt;/PartNumber&gt;&lt;ETag&gt;WxRt1&lt;/ETag&gt;&lt;/Part&gt;"</literal>
                        <literal type="string">"&lt;Part&gt;&lt;PartNumber&gt;2&lt;/PartNumber&gt;&lt;ETag&gt;WxRt2&lt;/ETag&gt;&lt;/Part&gt;"</literal>
                        <literal type="string">"&lt;/CompleteMultipartUpload&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;CompleteMultipartUploadResult&gt;&lt;ETag&gt;XXX&lt;/ETag&gt;&lt;/CompleteMultipartUploadResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"12345678901234567890123456789012"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error in success response of multipart upload"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?uploads="</literal></expr></argument>, <argument><expr><operator>.</operator><name>kms</name> <operator>=</operator> <literal type="string">"kmskey1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;InitiateMultipartUploadResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;"</literal>
                        <literal type="string">"&lt;Bucket&gt;bucket&lt;/Bucket&gt;"</literal>
                        <literal type="string">"&lt;Key&gt;file.txt&lt;/Key&gt;"</literal>
                        <literal type="string">"&lt;UploadId&gt;WxRt&lt;/UploadId&gt;"</literal>
                        <literal type="string">"&lt;/InitiateMultipartUploadResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?partNumber=1&amp;uploadId=WxRt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"1234567890123456"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <literal type="string">"etag:WxRt1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?partNumber=2&amp;uploadId=WxRt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"7890123456789012"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <literal type="string">"eTag:WxRt2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?uploadId=WxRt"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</literal>
                        <literal type="string">"&lt;CompleteMultipartUpload&gt;"</literal>
                        <literal type="string">"&lt;Part&gt;&lt;PartNumber&gt;1&lt;/PartNumber&gt;&lt;ETag&gt;WxRt1&lt;/ETag&gt;&lt;/Part&gt;"</literal>
                        <literal type="string">"&lt;Part&gt;&lt;PartNumber&gt;2&lt;/PartNumber&gt;&lt;ETag&gt;WxRt2&lt;/ETag&gt;&lt;/Part&gt;"</literal>
                        <literal type="string">"&lt;/CompleteMultipartUpload&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;Error&gt;&lt;Code&gt;AccessDenied&lt;/Code&gt;&lt;Message&gt;Access Denied&lt;/Message&gt;&lt;/Error&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"12345678901234567890123456789012"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"HTTP request failed with 200 (OK):\n"</literal>
                    <literal type="string">"*** Path/Query ***:\n"</literal>
                    <literal type="string">"POST /file.txt?uploadId=WxRt\n"</literal>
                    <literal type="string">"*** Request Headers ***:\n"</literal>
                    <literal type="string">"authorization: &lt;redacted&gt;\n"</literal>
                    <literal type="string">"content-length: 205\n"</literal>
                    <literal type="string">"content-md5: 37smUM6Ah2/EjZbp420dPw==\n"</literal>
                    <literal type="string">"host: bucket.s3.amazonaws.com\n"</literal>
                    <literal type="string">"x-amz-content-sha256: 0838a79dfbddc2128d28fb4fa8d605e0a8e6d1355094000f39b6eb3feff4641f\n"</literal>
                    <literal type="string">"x-amz-date: &lt;redacted&gt;\n"</literal>
                    <literal type="string">"x-amz-security-token: &lt;redacted&gt;\n"</literal>
                    <literal type="string">"*** Response Headers ***:\n"</literal>
                    <literal type="string">"content-length: 110\n"</literal>
                        <literal type="string">"*** Response Content ***:\n"</literal>
                    <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;Error&gt;&lt;Code&gt;AccessDenied&lt;/Code&gt;&lt;Message&gt;Access Denied&lt;/Message&gt;&lt;/Error&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write file in chunks with something left over on close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?uploads="</literal></expr></argument>, <argument><expr><operator>.</operator><name>kms</name> <operator>=</operator> <literal type="string">"kmskey1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;InitiateMultipartUploadResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;"</literal>
                        <literal type="string">"&lt;Bucket&gt;bucket&lt;/Bucket&gt;"</literal>
                        <literal type="string">"&lt;Key&gt;file.txt&lt;/Key&gt;"</literal>
                        <literal type="string">"&lt;UploadId&gt;RR55&lt;/UploadId&gt;"</literal>
                        <literal type="string">"&lt;/InitiateMultipartUploadResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?partNumber=1&amp;uploadId=RR55"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"1234567890123456"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <literal type="string">"etag:RR551"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?partNumber=2&amp;uploadId=RR55"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"7890"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <literal type="string">"eTag:RR552"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?uploadId=RR55"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</literal>
                        <literal type="string">"&lt;CompleteMultipartUpload&gt;"</literal>
                        <literal type="string">"&lt;Part&gt;&lt;PartNumber&gt;1&lt;/PartNumber&gt;&lt;ETag&gt;RR551&lt;/ETag&gt;&lt;/Part&gt;"</literal>
                        <literal type="string">"&lt;Part&gt;&lt;PartNumber&gt;2&lt;/PartNumber&gt;&lt;ETag&gt;RR552&lt;/ETag&gt;&lt;/Part&gt;"</literal>
                        <literal type="string">"&lt;/CompleteMultipartUpload&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;CompleteMultipartUploadResult&gt;&lt;ETag&gt;XXX&lt;/ETag&gt;&lt;/CompleteMultipartUploadResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"12345678901234567890"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_HEAD</name></expr></argument>, <argument><expr><literal type="string">"/BOGUS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">404</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"BOGUS"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info for / does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"info for /"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"switch to service credentials"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_SERVICE_ROLE</name></cpp:macro>                           <cpp:value>"arn:aws:iam::123456789012:role/TestRole"</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_SERVICE_TOKEN</name></cpp:macro>                          <cpp:value>"TOKEN"</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_SERVICE_URI</name></cpp:macro>                                                                                           \
                    <cpp:value>"/?Action=AssumeRoleWithWebIdentity&amp;RoleArn=arn%3Aaws%3Aiam%3A%3A123456789012%3Arole%2FTestRole"               \
                        "&amp;RoleSessionName=pgBackRest&amp;Version=2011-06-15&amp;WebIdentityToken=" TEST_SERVICE_TOKEN</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_SERVICE_RESPONSE</name></cpp:macro>                                                                                      \
                    <cpp:value>"&lt;AssumeRoleWithWebIdentityResponse xmlns=\"https://sts.amazonaws.com/doc/2011-06-15/\"&gt;\n"                    \
                    "  &lt;AssumeRoleWithWebIdentityResult&gt;\n"                                                                        \
                    "    &lt;Credentials&gt;\n"                                                                                          \
                    "      &lt;SessionToken&gt;zz&lt;/SessionToken&gt;\n"                                                                      \
                    "      &lt;SecretAccessKey&gt;yy&lt;/SecretAccessKey&gt;\n"                                                                \
                    "      &lt;Expiration&gt;%s&lt;/Expiration&gt;\n"                                                                          \
                    "      &lt;AccessKeyId&gt;xx&lt;/AccessKeyId&gt;\n"                                                                        \
                    "    &lt;/Credentials&gt;\n"                                                                                         \
                    "  &lt;/AssumeRoleWithWebIdentityResult&gt;\n"                                                                       \
                    "&lt;/AssumeRoleWithWebIdentityResponse&gt;"</cpp:value></cpp:define>

                <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"web-id-token"</literal></expr></argument>, <argument><expr><name>TEST_SERVICE_TOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>commonArgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoS3KeyType</name></expr></argument>, <argument><expr><name>storageS3KeyTypeWebId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
                    <argument><expr><literal type="string">"option 'repo1-s3-key-type' is 'web-id' but 'AWS_ROLE_ARN' and 'AWS_WEB_IDENTITY_TOKEN_FILE' are not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"AWS_ROLE_ARN"</literal></expr></argument>, <argument><expr><name>TEST_SERVICE_ROLE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
                    <argument><expr><literal type="string">"option 'repo1-s3-key-type' is 'web-id' but 'AWS_ROLE_ARN' and 'AWS_WEB_IDENTITY_TOKEN_FILE' are not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"AWS_WEB_IDENTITY_TOKEN_FILE"</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/web-id-token"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>driver</name> <operator>=</operator> <operator>(</operator><name>StorageS3</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>credRole</name></name></expr></argument>, <argument><expr><name>TEST_SERVICE_ROLE</name></expr></argument>, <argument><expr><literal type="string">"check role"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>webIdToken</name></name></expr></argument>, <argument><expr><name>TEST_SERVICE_TOKEN</name></expr></argument>, <argument><expr><literal type="string">"check token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Set partSize to a small value for testing</comment>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>partSize</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

                <comment type="line">// Testing requires the auth http client to be redirected</comment>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>credHost</name></name> <operator>=</operator> <call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>credHttpClient</name></name> <operator>=</operator> <call><name>httpClientNew</name><argument_list>(<argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>authPort</name></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info for missing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Get service credentials</comment>
                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><name>TEST_SERVICE_URI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>auth</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <call><name>zNewFmt</name><argument_list>(<argument><expr><name>TEST_SERVICE_RESPONSE</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>testS3DateTime</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>S3_CREDENTIAL_RENEW_SEC</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// File missing</comment>
                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_HEAD</name></expr></argument>, <argument><expr><literal type="string">"/BOGUS"</literal></expr></argument>, <argument><expr><operator>.</operator><name>accessKey</name> <operator>=</operator> <literal type="string">"xx"</literal></expr></argument>, <argument><expr><operator>.</operator><name>securityToken</name> <operator>=</operator> <literal type="string">"zz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">404</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"BOGUS"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"file does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info for file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Get service credentials</comment>
                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><name>TEST_SERVICE_URI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>auth</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <call><name>zNewFmt</name><argument_list>(<argument><expr><name>TEST_SERVICE_RESPONSE</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>testS3DateTime</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>S3_CREDENTIAL_RENEW_SEC</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_HEAD</name></expr></argument>, <argument><expr><literal type="string">"/subdir/file1.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <literal type="string">"content-length:9999\r\nLast-Modified: Wed, 21 Oct 2015 07:28:00 GMT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>StorageInfo</name></type> <name>info</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"subdir/file1.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypeFile</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>timeModified</name></name></expr></argument>, <argument><expr><literal type="number">1445412480</literal></expr></argument>, <argument><expr><literal type="string">"check time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Auth service no longer needed</comment>
                <expr_stmt><expr><call><name>hrnServerScriptEnd</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write zero-length file (without kms)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info check existence only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_HEAD</name></expr></argument>, <argument><expr><literal type="string">"/subdir/file2.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <literal type="string">"content-length:777\r\nLast-Modified: Wed, 22 Oct 2015 07:28:00 GMT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"subdir/file2.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelExists</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypeFile</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>timeModified</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"errorOnMissing invalid because there are no paths"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>storageListP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
                    <argument><expr><literal type="string">"assertion '!param.errorOnMissing || storageFeature(this, storageFeaturePath)' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error without xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/?delimiter=%2F&amp;list-type=2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">344</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storageListP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"HTTP request failed with 344:\n"</literal>
                    <literal type="string">"*** Path/Query ***:\n"</literal>
                    <literal type="string">"GET /?delimiter=%2F&amp;list-type=2\n"</literal>
                    <literal type="string">"*** Request Headers ***:\n"</literal>
                    <literal type="string">"authorization: &lt;redacted&gt;\n"</literal>
                    <literal type="string">"content-length: 0\n"</literal>
                    <literal type="string">"host: bucket."</literal> <name>S3_TEST_HOST</name> <literal type="string">"\n"</literal>
                    <literal type="string">"x-amz-content-sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n"</literal>
                    <literal type="string">"x-amz-date: &lt;redacted&gt;\n"</literal>
                    <literal type="string">"x-amz-security-token: &lt;redacted&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error with xml"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/?delimiter=%2F&amp;list-type=2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">344</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;Error&gt;"</literal>
                        <literal type="string">"&lt;Code&gt;SomeOtherCode&lt;/Code&gt;"</literal>
                        <literal type="string">"&lt;/Error&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storageListP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"HTTP request failed with 344:\n"</literal>
                    <literal type="string">"*** Path/Query ***:\n"</literal>
                    <literal type="string">"GET /?delimiter=%2F&amp;list-type=2\n"</literal>
                    <literal type="string">"*** Request Headers ***:\n"</literal>
                    <literal type="string">"authorization: &lt;redacted&gt;\n"</literal>
                    <literal type="string">"content-length: 0\n"</literal>
                    <literal type="string">"host: bucket."</literal> <name>S3_TEST_HOST</name> <literal type="string">"\n"</literal>
                    <literal type="string">"x-amz-content-sha256: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n"</literal>
                    <literal type="string">"x-amz-date: &lt;redacted&gt;\n"</literal>
                    <literal type="string">"x-amz-security-token: &lt;redacted&gt;\n"</literal>
                    <literal type="string">"*** Response Headers ***:\n"</literal>
                    <literal type="string">"content-length: 79\n"</literal>
                    <literal type="string">"*** Response Content ***:\n"</literal>
                    <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;Error&gt;&lt;Code&gt;SomeOtherCode&lt;/Code&gt;&lt;/Error&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list basic level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/?delimiter=%2F&amp;list-type=2&amp;prefix=path%2Fto%2F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;"</literal>
                        <literal type="string">"    &lt;IsTruncated&gt;false&lt;/IsTruncated&gt;"</literal>
                        <literal type="string">"    &lt;Contents&gt;"</literal>
                        <literal type="string">"        &lt;Key&gt;path/to/test_file&lt;/Key&gt;"</literal>
                        <literal type="string">"        &lt;LastModified&gt;2009-10-12T17:50:30.000Z&lt;/LastModified&gt;"</literal>
                        <literal type="string">"        &lt;Size&gt;787&lt;/Size&gt;"</literal>
                        <literal type="string">"    &lt;/Contents&gt;"</literal>
                        <literal type="string">"   &lt;CommonPrefixes&gt;"</literal>
                        <literal type="string">"       &lt;Prefix&gt;path/to/test_path/&lt;/Prefix&gt;"</literal>
                        <literal type="string">"   &lt;/CommonPrefixes&gt;"</literal>
                        <literal type="string">"&lt;/ListBucketResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>storageNewItrP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
                    <argument><expr><literal type="string">"assertion '!param.errorOnMissing || storageFeature(this, storageFeaturePath)' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
                    <argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="string">"/path/to"</literal></expr></argument>,
                    <argument><expr><literal type="string">"test_file {s=787, t=1255369830}\n"</literal>
                    <literal type="string">"test_path/\n"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelBasic</name></expr></argument>, <argument><expr><operator>.</operator><name>noRecurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list exists level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/?delimiter=%2F&amp;list-type=2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;"</literal>
                        <literal type="string">"    &lt;IsTruncated&gt;false&lt;/IsTruncated&gt;"</literal>
                        <literal type="string">"    &lt;Contents&gt;"</literal>
                        <literal type="string">"        &lt;Key&gt;test1.txt&lt;/Key&gt;"</literal>
                        <literal type="string">"    &lt;/Contents&gt;"</literal>
                        <literal type="string">"   &lt;CommonPrefixes&gt;"</literal>
                        <literal type="string">"       &lt;Prefix&gt;path1/&lt;/Prefix&gt;"</literal>
                        <literal type="string">"   &lt;/CommonPrefixes&gt;"</literal>
                        <literal type="string">"&lt;/ListBucketResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
                    <argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>,
                    <argument><expr><literal type="string">"path1/\n"</literal>
                    <literal type="string">"test1.txt\n"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>noRecurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list a file in root with expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/?delimiter=%2F&amp;list-type=2&amp;prefix=test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;"</literal>
                        <literal type="string">"    &lt;IsTruncated&gt;false&lt;/IsTruncated&gt;"</literal>
                        <literal type="string">"    &lt;Contents&gt;"</literal>
                        <literal type="string">"        &lt;Key&gt;test1.txt&lt;/Key&gt;"</literal>
                        <literal type="string">"    &lt;/Contents&gt;"</literal>
                        <literal type="string">"&lt;/ListBucketResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
                    <argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>,
                    <argument><expr><literal type="string">"test1.txt\n"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>noRecurse</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>expression</name> <operator>=</operator> <literal type="string">"^test.*$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list files with continuation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/?delimiter=%2F&amp;list-type=2&amp;prefix=path%2Fto%2F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;"</literal>
                        <literal type="string">"    &lt;IsTruncated&gt;true&lt;/IsTruncated&gt;"</literal>
                        <literal type="string">"    &lt;NextContinuationToken&gt;1ueGcxLPRx1Tr/XYExHnhbYLgveDs2J/wm36Hy4vbOwM=&lt;/NextContinuationToken&gt;"</literal>
                        <literal type="string">"    &lt;Contents&gt;"</literal>
                        <literal type="string">"        &lt;Key&gt;path/to/test1.txt&lt;/Key&gt;"</literal>
                        <literal type="string">"    &lt;/Contents&gt;"</literal>
                        <literal type="string">"    &lt;Contents&gt;"</literal>
                        <literal type="string">"        &lt;Key&gt;path/to/test2.txt&lt;/Key&gt;"</literal>
                        <literal type="string">"    &lt;/Contents&gt;"</literal>
                        <literal type="string">"   &lt;CommonPrefixes&gt;"</literal>
                        <literal type="string">"       &lt;Prefix&gt;path/to/path1/&lt;/Prefix&gt;"</literal>
                        <literal type="string">"   &lt;/CommonPrefixes&gt;"</literal>
                        <literal type="string">"&lt;/ListBucketResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>,
                    <argument><expr><literal type="string">"/?continuation-token=1ueGcxLPRx1Tr%2FXYExHnhbYLgveDs2J%2Fwm36Hy4vbOwM%3D&amp;delimiter=%2F&amp;list-type=2"</literal>
                        <literal type="string">"&amp;prefix=path%2Fto%2F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;"</literal>
                        <literal type="string">"    &lt;IsTruncated&gt;false&lt;/IsTruncated&gt;"</literal>
                        <literal type="string">"    &lt;Contents&gt;"</literal>
                        <literal type="string">"        &lt;Key&gt;path/to/test3.txt&lt;/Key&gt;"</literal>
                        <literal type="string">"    &lt;/Contents&gt;"</literal>
                        <literal type="string">"   &lt;CommonPrefixes&gt;"</literal>
                        <literal type="string">"       &lt;Prefix&gt;path/to/path2/&lt;/Prefix&gt;"</literal>
                        <literal type="string">"   &lt;/CommonPrefixes&gt;"</literal>
                        <literal type="string">"&lt;/ListBucketResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
                    <argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="string">"/path/to"</literal></expr></argument>,
                    <argument><expr><literal type="string">"path1/\n"</literal>
                    <literal type="string">"path2/\n"</literal>
                    <literal type="string">"test1.txt\n"</literal>
                    <literal type="string">"test2.txt\n"</literal>
                    <literal type="string">"test3.txt\n"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>noRecurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list files with expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/?delimiter=%2F&amp;list-type=2&amp;prefix=path%2Fto%2Ftest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;"</literal>
                        <literal type="string">"    &lt;IsTruncated&gt;false&lt;/IsTruncated&gt;"</literal>
                        <literal type="string">"    &lt;Contents&gt;"</literal>
                        <literal type="string">"        &lt;Key&gt;path/to/test1.txt&lt;/Key&gt;"</literal>
                        <literal type="string">"    &lt;/Contents&gt;"</literal>
                        <literal type="string">"    &lt;Contents&gt;"</literal>
                        <literal type="string">"        &lt;Key&gt;path/to/test2.txt&lt;/Key&gt;"</literal>
                        <literal type="string">"    &lt;/Contents&gt;"</literal>
                        <literal type="string">"    &lt;Contents&gt;"</literal>
                        <literal type="string">"        &lt;Key&gt;path/to/test3.txt&lt;/Key&gt;"</literal>
                        <literal type="string">"    &lt;/Contents&gt;"</literal>
                        <literal type="string">"   &lt;CommonPrefixes&gt;"</literal>
                        <literal type="string">"       &lt;Prefix&gt;path/to/test1.path/&lt;/Prefix&gt;"</literal>
                        <literal type="string">"   &lt;/CommonPrefixes&gt;"</literal>
                        <literal type="string">"   &lt;CommonPrefixes&gt;"</literal>
                        <literal type="string">"       &lt;Prefix&gt;path/to/test2.path/&lt;/Prefix&gt;"</literal>
                        <literal type="string">"   &lt;/CommonPrefixes&gt;"</literal>
                        <literal type="string">"&lt;/ListBucketResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
                    <argument><expr><name>s3</name></expr></argument>, <argument><expr><literal type="string">"/path/to"</literal></expr></argument>,
                    <argument><expr><literal type="string">"test1.path\n"</literal>
                    <literal type="string">"test1.txt\n"</literal>
                    <literal type="string">"test3.txt\n"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelExists</name></expr></argument>, <argument><expr><operator>.</operator><name>noRecurse</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>expression</name> <operator>=</operator> <literal type="string">"^test(1|3)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"switch to path-style URIs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>commonArgList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoS3UriStyle</name></expr></argument>, <argument><expr><name>storageS3UriStylePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="string">"https://%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStoragePort</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgEnvRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptRepoS3Token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>s3</name> <operator>=</operator> <call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>driver</name> <operator>=</operator> <operator>(</operator><name>StorageS3</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Set deleteMax to a small value for testing</comment>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>deleteMax</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when no recurse because there are no paths"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
                    <argument><expr><literal type="string">"assertion 'param.recurse || storageFeature(this, storageFeaturePath)' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove files from root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/bucket/?list-type=2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;"</literal>
                        <literal type="string">"    &lt;IsTruncated&gt;false&lt;/IsTruncated&gt;"</literal>
                        <literal type="string">"    &lt;Contents&gt;"</literal>
                        <literal type="string">"        &lt;Key&gt;test1.txt&lt;/Key&gt;"</literal>
                        <literal type="string">"    &lt;/Contents&gt;"</literal>
                        <literal type="string">"    &lt;Contents&gt;"</literal>
                        <literal type="string">"        &lt;Key&gt;path1/xxx.zzz&lt;/Key&gt;"</literal>
                        <literal type="string">"    &lt;/Contents&gt;"</literal>
                        <literal type="string">"&lt;/ListBucketResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><literal type="string">"/bucket/?delete="</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</literal>
                        <literal type="string">"&lt;Delete&gt;&lt;Quiet&gt;true&lt;/Quiet&gt;"</literal>
                        <literal type="string">"&lt;Object&gt;&lt;Key&gt;test1.txt&lt;/Key&gt;&lt;/Object&gt;"</literal>
                        <literal type="string">"&lt;Object&gt;&lt;Key&gt;path1/xxx.zzz&lt;/Key&gt;&lt;/Object&gt;"</literal>
                        <literal type="string">"&lt;/Delete&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"&lt;DeleteResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;&lt;/DeleteResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove files in empty subpath (nothing to do)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/bucket/?list-type=2&amp;prefix=path%2F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;"</literal>
                        <literal type="string">"    &lt;IsTruncated&gt;false&lt;/IsTruncated&gt;"</literal>
                        <literal type="string">"&lt;/ListBucketResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove files with continuation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/bucket/?list-type=2&amp;prefix=path%2Fto%2F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;"</literal>
                        <literal type="string">"    &lt;IsTruncated&gt;true&lt;/IsTruncated&gt;"</literal>
                        <literal type="string">"    &lt;NextContinuationToken&gt;continue&lt;/NextContinuationToken&gt;"</literal>
                        <literal type="string">"   &lt;CommonPrefixes&gt;"</literal>
                        <literal type="string">"       &lt;Prefix&gt;path/to/test3/&lt;/Prefix&gt;"</literal>
                        <literal type="string">"   &lt;/CommonPrefixes&gt;"</literal>
                        <literal type="string">"    &lt;Contents&gt;"</literal>
                        <literal type="string">"        &lt;Key&gt;path/to/test1.txt&lt;/Key&gt;"</literal>
                        <literal type="string">"    &lt;/Contents&gt;"</literal>
                        <literal type="string">"&lt;/ListBucketResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/bucket/?continuation-token=continue&amp;list-type=2&amp;prefix=path%2Fto%2F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;"</literal>
                        <literal type="string">"    &lt;IsTruncated&gt;false&lt;/IsTruncated&gt;"</literal>
                        <literal type="string">"    &lt;Contents&gt;"</literal>
                        <literal type="string">"        &lt;Key&gt;path/to/test3.txt&lt;/Key&gt;"</literal>
                        <literal type="string">"    &lt;/Contents&gt;"</literal>
                        <literal type="string">"    &lt;Contents&gt;"</literal>
                        <literal type="string">"        &lt;Key&gt;path/to/test2.txt&lt;/Key&gt;"</literal>
                        <literal type="string">"    &lt;/Contents&gt;"</literal>
                        <literal type="string">"&lt;/ListBucketResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><literal type="string">"/bucket/?delete="</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</literal>
                        <literal type="string">"&lt;Delete&gt;&lt;Quiet&gt;true&lt;/Quiet&gt;"</literal>
                        <literal type="string">"&lt;Object&gt;&lt;Key&gt;path/to/test1.txt&lt;/Key&gt;&lt;/Object&gt;"</literal>
                        <literal type="string">"&lt;Object&gt;&lt;Key&gt;path/to/test3.txt&lt;/Key&gt;&lt;/Object&gt;"</literal>
                        <literal type="string">"&lt;/Delete&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><literal type="string">"/bucket/?delete="</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</literal>
                        <literal type="string">"&lt;Delete&gt;&lt;Quiet&gt;true&lt;/Quiet&gt;"</literal>
                        <literal type="string">"&lt;Object&gt;&lt;Key&gt;path/to/test2.txt&lt;/Key&gt;&lt;/Object&gt;"</literal>
                        <literal type="string">"&lt;/Delete&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path/to"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path remove error and retry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/bucket/?list-type=2&amp;prefix=path%2F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;ListBucketResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;"</literal>
                        <literal type="string">"    &lt;IsTruncated&gt;false&lt;/IsTruncated&gt;"</literal>
                        <literal type="string">"    &lt;Contents&gt;"</literal>
                        <literal type="string">"        &lt;Key&gt;path/sample.txt&lt;/Key&gt;"</literal>
                        <literal type="string">"    &lt;/Contents&gt;"</literal>
                        <literal type="string">"    &lt;Contents&gt;"</literal>
                        <literal type="string">"        &lt;Key&gt;path/sample2.txt&lt;/Key&gt;"</literal>
                        <literal type="string">"    &lt;/Contents&gt;"</literal>
                        <literal type="string">"&lt;/ListBucketResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><literal type="string">"/bucket/?delete="</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</literal>
                        <literal type="string">"&lt;Delete&gt;&lt;Quiet&gt;true&lt;/Quiet&gt;"</literal>
                        <literal type="string">"&lt;Object&gt;&lt;Key&gt;path/sample.txt&lt;/Key&gt;&lt;/Object&gt;"</literal>
                        <literal type="string">"&lt;Object&gt;&lt;Key&gt;path/sample2.txt&lt;/Key&gt;&lt;/Object&gt;"</literal>
                        <literal type="string">"&lt;/Delete&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;DeleteResult xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"&gt;"</literal>
                            <literal type="string">"&lt;Error&gt;&lt;Key&gt;path/sample2.txt&lt;/Key&gt;&lt;Code&gt;AccessDenied&lt;/Code&gt;&lt;Message&gt;Access Denied&lt;/Message&gt;&lt;/Error&gt;"</literal>
                            <literal type="string">"&lt;/DeleteResult&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE</name></expr></argument>, <argument><expr><literal type="string">"/bucket/path/sample2.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">204</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE</name></expr></argument>, <argument><expr><literal type="string">"/bucket/path/to/test.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">204</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>s3</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path/to/test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>hrnServerScriptEnd</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
