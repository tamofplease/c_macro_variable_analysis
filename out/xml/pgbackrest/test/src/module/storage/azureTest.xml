<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/storage/azureTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Azure Storage
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessFork.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessServer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessStorage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Constants
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ACCOUNT</name></cpp:macro>                                                <cpp:value>"account"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>TEST_ACCOUNT_STR</name></expr></argument>,                                 <argument><expr><name>TEST_ACCOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_CONTAINER</name></cpp:macro>                                              <cpp:value>"container"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>TEST_CONTAINER_STR</name></expr></argument>,                               <argument><expr><name>TEST_CONTAINER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_KEY_SAS</name></cpp:macro>                                                <cpp:value>"?sig=key"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>TEST_KEY_SAS_STR</name></expr></argument>,                                 <argument><expr><name>TEST_KEY_SAS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_KEY_SHARED</name></cpp:macro>                                             <cpp:value>"YXpLZXk="</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>TEST_KEY_SHARED_STR</name></expr></argument>,                              <argument><expr><name>TEST_KEY_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Helper to build test requests
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>StorageAzure</name> <modifier>*</modifier></type><name>driver</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>TestRequestParam</name>
<block>{
    <expr_stmt><expr><name>VAR_PARAM_HEADER</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>blobType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>range</name></decl>;</decl_stmt>
}</block></struct></type> <name>TestRequestParam</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testRequestP</name><parameter_list>(<parameter><type><name>write</name></type></parameter>, <parameter><type><name>verb</name></type></parameter>, <parameter><type><name>path</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                                                                       \
    <cpp:value>testRequest(write, verb, path, (TestRequestParam){VAR_PARAM_INIT, __VA_ARGS__})</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRequest</name><parameter_list>(<parameter><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>verb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>TestRequestParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><call><name>strCatFmt</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s /"</literal> <name>TEST_ACCOUNT</name> <literal type="string">"/"</literal> <name>TEST_CONTAINER</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// When SAS spit out the query and merge in the SAS key</comment>
    <if_stmt><if>if <condition>(<expr><name><name>driver</name><operator>-&gt;</operator><name>sasKey</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>HttpQuery</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>httpQueryNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>pathQuery</name> <init>= <expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>pathQuery</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>httpQueryNewStr</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>pathQuery</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>httpQueryMerge</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>driver</name><operator>-&gt;</operator><name>sasKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>pathQuery</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><call><name>httpQueryRenderP</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// Else just output path as is</comment>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="line">// Add HTTP version and user agent</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">" HTTP/1.1\r\nuser-agent:"</literal> <name>PROJECT_NAME</name> <literal type="string">"/"</literal> <name>PROJECT_VERSION</name> <literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add authorization string</comment>
    <if_stmt><if>if <condition>(<expr><name><name>driver</name><operator>-&gt;</operator><name>sharedKey</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"authorization:SharedKey account:????????????????????????????????????????????\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Add content-length</comment>
    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"content-length:%zu\r\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add md5</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"content-md5:%s\r\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strNewEncode</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeMd5</name></expr></argument>, <argument><expr><call><name>BUFSTRZ</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Add date</comment>
    <if_stmt><if>if <condition>(<expr><name><name>driver</name><operator>-&gt;</operator><name>sharedKey</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"date:???, ?? ??? ???? ??:??:?? GMT\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Add host</comment>
    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"host:%s\r\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add range</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>range</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"range:bytes=%s\r\n"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Add blob type</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>blobType</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"x-ms-blob-type:%s\r\n"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>blobType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Add version</comment>
    <if_stmt><if>if <condition>(<expr><name><name>driver</name><operator>-&gt;</operator><name>sharedKey</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"x-ms-version:2019-02-02\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Complete headers</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add content</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>hrnServerScriptExpect</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Helper to build test responses
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>TestResponseParam</name>
<block>{
    <expr_stmt><expr><name>VAR_PARAM_HEADER</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>code</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>
}</block></struct></type> <name>TestResponseParam</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testResponseP</name><parameter_list>(<parameter><type><name>write</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                                                                                  \
    <cpp:value>testResponse(write, (TestResponseParam){VAR_PARAM_INIT, __VA_ARGS__})</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>testResponse</name><parameter_list>(<parameter><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name></decl></parameter>, <parameter><decl><type><name>TestResponseParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Set code to 200 if not specified</comment>
    <expr_stmt><expr><name><name>param</name><operator>.</operator><name>code</name></name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><operator>.</operator><name>code</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">200</literal></expr> </then><else>: <expr><name><name>param</name><operator>.</operator><name>code</name></name></expr></else></ternary></expr>;</expr_stmt>

    <comment type="line">// Output header and code</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>response</name> <init>= <expr><call><name>strCatFmt</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"HTTP/1.1 %u "</literal></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add reason for some codes</comment>
    <switch>switch <condition>(<expr><name><name>param</name><operator>.</operator><name>code</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><literal type="number">200</literal></expr>:</case>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">403</literal></expr>:</case>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><literal type="string">"Forbidden"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <comment type="line">// End header</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Headers</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>header</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><literal type="string">"%s\r\n"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Content</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>response</name></expr></argument>,
            <argument><expr><literal type="string">"content-length:%zu\r\n"</literal>
                <literal type="string">"\r\n"</literal>
                <literal type="string">"%s"</literal></expr></argument>,
            <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>hrnServerScriptReply</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set storage helper</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StorageHelper</name></type> <name><name>storageHelperList</name><index>[]</index></name> <init>= <expr><block>{<expr><name>STORAGE_AZURE_HELPER</name></expr>, <expr><name>STORAGE_END_HELPER</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>storageHelperInit</name><argument_list>(<argument><expr><name>storageHelperList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageRepoGet()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Test without the host option since that can't be run in a unit test without updating dns or /etc/hosts</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storage with default options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>STORAGE_AZURE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoAzureContainer</name></expr></argument>, <argument><expr><name>TEST_CONTAINER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureAccount</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureKey</name></expr></argument>, <argument><expr><name>TEST_KEY_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get repo storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>, <argument><expr><literal type="string">"check path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>account</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT_STR</name></expr></argument>, <argument><expr><literal type="string">"check account"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>container</name></expr></argument>, <argument><expr><name>TEST_CONTAINER_STR</name></expr></argument>, <argument><expr><literal type="string">"check container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(
            <argument><expr><call><name>strNewEncode</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>sharedKey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_KEY_SHARED_STR</name></expr></argument>, <argument><expr><literal type="string">"check key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>host</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT</name> <literal type="string">".blob.core.windows.net"</literal></expr></argument>, <argument><expr><literal type="string">"check host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pathPrefix</name></expr></argument>, <argument><expr><literal type="string">"/"</literal> <name>TEST_CONTAINER</name></expr></argument>, <argument><expr><literal type="string">"check path prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>blockSize</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"check block size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageFeature</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>storageFeaturePath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check path feature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storage with host but force host-style uri"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="string">"https://test-host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoAzureUriStyle</name></expr></argument>, <argument><expr><name>storageAzureUriStyleHost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get repo storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>host</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT</name> <literal type="string">".test-host"</literal></expr></argument>, <argument><expr><literal type="string">"check host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pathPrefix</name></expr></argument>, <argument><expr><literal type="string">"/"</literal> <name>TEST_CONTAINER</name></expr></argument>, <argument><expr><literal type="string">"check path prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storage with https protocol, appended port, uristylepath"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>STORAGE_AZURE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoAzureContainer</name></expr></argument>, <argument><expr><name>TEST_CONTAINER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureAccount</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureKey</name></expr></argument>, <argument><expr><name>TEST_KEY_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="string">"https://test-host:443"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoAzureUriStyle</name></expr></argument>, <argument><expr><name>storageAzureUriStylePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get repo storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>host</name></expr></argument>, <argument><expr><literal type="string">"test-host"</literal></expr></argument>, <argument><expr><literal type="string">"check host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pathPrefix</name></expr></argument>, <argument><expr><literal type="string">"/"</literal> <name>TEST_ACCOUNT</name> <literal type="string">"/"</literal> <name>TEST_CONTAINER</name></expr></argument>, <argument><expr><literal type="string">"check path prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storage with no protocol, appended port, uristylepath"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>STORAGE_AZURE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoAzureContainer</name></expr></argument>, <argument><expr><name>TEST_CONTAINER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureAccount</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureKey</name></expr></argument>, <argument><expr><name>TEST_KEY_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="string">"test-host:443"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoAzureUriStyle</name></expr></argument>, <argument><expr><name>storageAzureUriStylePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get repo storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>host</name></expr></argument>, <argument><expr><literal type="string">"test-host"</literal></expr></argument>, <argument><expr><literal type="string">"check host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pathPrefix</name></expr></argument>, <argument><expr><literal type="string">"/"</literal> <name>TEST_ACCOUNT</name> <literal type="string">"/"</literal> <name>TEST_CONTAINER</name></expr></argument>, <argument><expr><literal type="string">"check path prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storage with https protocol, appended port, uristylehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>STORAGE_AZURE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoAzureContainer</name></expr></argument>, <argument><expr><name>TEST_CONTAINER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureAccount</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureKey</name></expr></argument>, <argument><expr><name>TEST_KEY_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="string">"https://test-host:443"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoAzureUriStyle</name></expr></argument>, <argument><expr><name>storageAzureUriStyleHost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get repo storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>host</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT</name> <literal type="string">".test-host"</literal></expr></argument>, <argument><expr><literal type="string">"check host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pathPrefix</name></expr></argument>, <argument><expr><literal type="string">"/"</literal> <name>TEST_CONTAINER</name></expr></argument>, <argument><expr><literal type="string">"check path prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storage with no protocol, appended port, uristylehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>STORAGE_AZURE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoAzureContainer</name></expr></argument>, <argument><expr><name>TEST_CONTAINER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureAccount</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureKey</name></expr></argument>, <argument><expr><name>TEST_KEY_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="string">"test-host:443"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoAzureUriStyle</name></expr></argument>, <argument><expr><name>storageAzureUriStyleHost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get repo storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>host</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT</name> <literal type="string">".test-host"</literal></expr></argument>, <argument><expr><literal type="string">"check host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pathPrefix</name></expr></argument>, <argument><expr><literal type="string">"/"</literal> <name>TEST_CONTAINER</name></expr></argument>, <argument><expr><literal type="string">"check path prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storage with no protocol, with appended port, default uristyle "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>STORAGE_AZURE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoAzureContainer</name></expr></argument>, <argument><expr><name>TEST_CONTAINER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureAccount</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureKey</name></expr></argument>, <argument><expr><name>TEST_KEY_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="string">"test-host:443"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get repo storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>host</name></expr></argument>, <argument><expr><literal type="string">"test-host"</literal></expr></argument>, <argument><expr><literal type="string">"check host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pathPrefix</name></expr></argument>, <argument><expr><literal type="string">"/"</literal> <name>TEST_ACCOUNT</name> <literal type="string">"/"</literal> <name>TEST_CONTAINER</name></expr></argument>, <argument><expr><literal type="string">"check path prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storage with no protocol, specified port, uristylehost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>STORAGE_AZURE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoAzureContainer</name></expr></argument>, <argument><expr><name>TEST_CONTAINER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureAccount</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureKey</name></expr></argument>, <argument><expr><name>TEST_KEY_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="string">"test-host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStoragePort</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>int</name><operator>)</operator> <literal type="number">443</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoAzureUriStyle</name></expr></argument>, <argument><expr><name>storageAzureUriStyleHost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get repo storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>host</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT</name> <literal type="string">".test-host"</literal></expr></argument>, <argument><expr><literal type="string">"check host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pathPrefix</name></expr></argument>, <argument><expr><literal type="string">"/"</literal> <name>TEST_CONTAINER</name></expr></argument>, <argument><expr><literal type="string">"check path prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storage with no protocol, appended port, specified port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>STORAGE_AZURE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoAzureContainer</name></expr></argument>, <argument><expr><name>TEST_CONTAINER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureAccount</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureKey</name></expr></argument>, <argument><expr><name>TEST_KEY_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="string">"test-host:8443"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStoragePort</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>int</name><operator>)</operator> <literal type="number">8443</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get repo storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>host</name></expr></argument>, <argument><expr><literal type="string">"test-host"</literal></expr></argument>, <argument><expr><literal type="string">"check host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><operator>(</operator><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>pathPrefix</name></expr></argument>, <argument><expr><literal type="string">"/"</literal> <name>TEST_ACCOUNT</name> <literal type="string">"/"</literal> <name>TEST_CONTAINER</name></expr></argument>, <argument><expr><literal type="string">"check path prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid shared key base64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>STORAGE_AZURE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoAzureContainer</name></expr></argument>, <argument><expr><name>TEST_CONTAINER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureAccount</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureKey</name></expr></argument>, <argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"invalid value for 'repo1-azure-key' option: base64 size 5 is not evenly divisible by 4\n"</literal>
            <literal type="string">"HINT: value must be valid base64 when 'repo1-azure-key-type = shared'."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageAzureAuth()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StorageAzure</name> <modifier>*</modifier></type><name>storage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>dateTime</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Sun, 21 Jun 2020 12:46:19 GMT"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>storage</name></expr></argument>,
            <argument><expr><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(
                <argument><expr><call><name>storageAzureNew</name><argument_list>(
                    <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TEST_CONTAINER_STR</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT_STR</name></expr></argument>, <argument><expr><name>storageAzureKeyTypeShared</name></expr></argument>,
                    <argument><expr><name>TEST_KEY_SHARED_STR</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"blob.core.windows.net"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>storageAzureUriStyleHost</name></expr></argument>, <argument><expr><literal type="number">443</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                    <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"new azure storage - shared key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"minimal auth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>httpHeaderAdd</name><argument_list>(<argument><expr><call><name>httpHeaderNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH_STR</name></expr></argument>, <argument><expr><name>ZERO_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageAzureAuth</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET_STR</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>dateTime</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"auth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>httpHeaderToLog</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"{authorization: 'SharedKey account:edqgT7EhsiIN3q6Al2HCZlpXr2D5cJFavr2ZCkhG9R8=', content-length: '0'"</literal>
                <literal type="string">", date: 'Sun, 21 Jun 2020 12:46:19 GMT', host: 'account.blob.core.windows.net', x-ms-version: '2019-02-02'}"</literal></expr></argument>,
            <argument><expr><literal type="string">"check headers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"auth with md5 and query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>httpHeaderAdd</name><argument_list>(<argument><expr><call><name>httpHeaderNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH_STR</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"44"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>httpHeaderAdd</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_MD5_STR</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"b64f49553d5c441652e95697a2c5949e"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>HttpQuery</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><call><name>httpQueryNewP</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageAzureAuth</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET_STR</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path/file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>dateTime</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"auth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>httpHeaderToLog</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"{authorization: 'SharedKey account:5qAnroLtbY8IWqObx8+UVwIUysXujsfWZZav7PrBON0=', content-length: '44'"</literal>
                <literal type="string">", content-md5: 'b64f49553d5c441652e95697a2c5949e', date: 'Sun, 21 Jun 2020 12:46:19 GMT'"</literal>
                <literal type="string">", host: 'account.blob.core.windows.net', x-ms-version: '2019-02-02'}"</literal></expr></argument>,
            <argument><expr><literal type="string">"check headers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"SAS auth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>storage</name></expr></argument>,
            <argument><expr><operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(
                <argument><expr><call><name>storageAzureNew</name><argument_list>(
                    <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TEST_CONTAINER_STR</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT_STR</name></expr></argument>, <argument><expr><name>storageAzureKeyTypeSas</name></expr></argument>, <argument><expr><name>TEST_KEY_SAS_STR</name></expr></argument>,
                    <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"blob.core.usgovcloudapi.net"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>storageAzureUriStyleHost</name></expr></argument>, <argument><expr><literal type="number">443</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"new azure storage - sas key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>query</name> <operator>=</operator> <call><name>httpQueryAdd</name><argument_list>(<argument><expr><call><name>httpQueryNewP</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>httpHeaderAdd</name><argument_list>(<argument><expr><call><name>httpHeaderNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH_STR</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"66"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageAzureAuth</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET_STR</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path/file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>dateTime</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"auth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>httpHeaderToLog</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{content-length: '66', host: 'account.blob.core.usgovcloudapi.net'}"</literal></expr></argument>, <argument><expr><literal type="string">"check headers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>httpQueryRenderP</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"a=b&amp;sig=key"</literal></expr></argument>, <argument><expr><literal type="string">"check query"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"StorageAzure, StorageReadAzure, and StorageWriteAzure"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"azure server"</literal></argument>, <argument>.timeout = <literal type="number">5000</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnServerRunP</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hrnServerProtocolTls</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"azure server run"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"azure client"</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>service</name> <init>= <expr><call><name>hrnServerScriptBegin</name><argument_list>(<argument><expr><call><name>HRN_FORK_PARENT_WRITE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"test against local host with path-style URIs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>STORAGE_AZURE_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoAzureContainer</name></expr></argument>, <argument><expr><name>TEST_CONTAINER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="string">"https://%s:%u"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageVerifyTls</name></expr></argument>, <argument><expr><name>TEST_IN_CONTAINER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureAccount</name></expr></argument>, <argument><expr><name>TEST_ACCOUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureKey</name></expr></argument>, <argument><expr><name>TEST_KEY_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get repo storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>driver</name> <operator>=</operator> <operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>pathPrefix</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal> <name>TEST_ACCOUNT</name> <literal type="string">"/"</literal> <name>TEST_CONTAINER</name></expr></argument>, <argument><expr><literal type="string">"check path prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>fileId</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check file id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Tests need the block size to be 16</comment>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>blockSize</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"ignore missing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/fi%26le.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">404</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(
                    <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"fi&amp;le.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"get file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on missing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">404</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
                    <argument><expr><literal type="string">"unable to open missing file '/file.txt' for read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get file with offset and limit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>range</name> <operator>=</operator> <literal type="string">"1-21"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"this is a sample file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
                    <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>offset</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>.</operator><name>limit</name> <operator>=</operator> <call><name>VARUINT64</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"this is a sample file"</literal></expr></argument>, <argument><expr><literal type="string">"get file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get zero-length file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/file0.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
                    <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file0.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"get zero-length file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"non-404 error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">303</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"CONTENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>StorageRead</name> <modifier>*</modifier></type><name>read</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new read file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageReadIgnoreMissing</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check ignore missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storageReadName</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>, <argument><expr><literal type="string">"check name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
                    <argument><expr><call><name>ioReadOpen</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"HTTP request failed with 303:\n"</literal>
                    <literal type="string">"*** Path/Query ***:\n"</literal>
                    <literal type="string">"GET /account/container/file.txt\n"</literal>
                    <literal type="string">"*** Request Headers ***:\n"</literal>
                    <literal type="string">"authorization: &lt;redacted&gt;\n"</literal>
                    <literal type="string">"content-length: 0\n"</literal>
                    <literal type="string">"date: &lt;redacted&gt;\n"</literal>
                    <literal type="string">"host: %s\n"</literal>
                    <literal type="string">"x-ms-version: 2019-02-02\n"</literal>
                    <literal type="string">"*** Response Headers ***:\n"</literal>
                    <literal type="string">"content-length: 7\n"</literal>
                    <literal type="string">"*** Response Content ***:\n"</literal>
                    <literal type="string">"CONTENT"</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>blobType</name> <operator>=</operator> <literal type="string">"BlockBlob"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"ABCD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">403</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
                    <argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"ABCD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"HTTP request failed with 403 (Forbidden):\n"</literal>
                    <literal type="string">"*** Path/Query ***:\n"</literal>
                    <literal type="string">"PUT /account/container/file.txt\n"</literal>
                    <literal type="string">"*** Request Headers ***:\n"</literal>
                    <literal type="string">"authorization: &lt;redacted&gt;\n"</literal>
                    <literal type="string">"content-length: 4\n"</literal>
                    <literal type="string">"content-md5: ywjKSnu1+Wg8GRM6hIcspw==\n"</literal>
                    <literal type="string">"date: &lt;redacted&gt;\n"</literal>
                    <literal type="string">"host: %s\n"</literal>
                    <literal type="string">"x-ms-blob-type: BlockBlob\n"</literal>
                    <literal type="string">"x-ms-version: 2019-02-02"</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write file in one part (with retry)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>blobType</name> <operator>=</operator> <literal type="string">"BlockBlob"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"ABCD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">503</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>blobType</name> <operator>=</operator> <literal type="string">"BlockBlob"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"ABCD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>StorageWrite</name> <modifier>*</modifier></type><name>write</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"ABCD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteAtomic</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"write is atomic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteCreatePath</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"path will be created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageWriteModeFile</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"file mode is 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageWriteModePath</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"path mode is 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storageWriteName</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>, <argument><expr><literal type="string">"check file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteSyncFile</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"file is synced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteSyncPath</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"path is synced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteTruncate</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"file will be truncated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageWriteAzureClose</name><argument_list>(<argument><expr><name><name>write</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close file again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write zero-length file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>blobType</name> <operator>=</operator> <literal type="string">"BlockBlob"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write file in chunks with nothing left over on close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?blockid=0AAAAAAACCCCCCCCx0000000&amp;comp=block"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"1234567890123456"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?blockid=0AAAAAAACCCCCCCCx0000001&amp;comp=block"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"7890123456789012"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?comp=blocklist"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</literal>
                        <literal type="string">"&lt;BlockList&gt;"</literal>
                        <literal type="string">"&lt;Uncommitted&gt;0AAAAAAACCCCCCCCx0000000&lt;/Uncommitted&gt;"</literal>
                        <literal type="string">"&lt;Uncommitted&gt;0AAAAAAACCCCCCCCx0000001&lt;/Uncommitted&gt;"</literal>
                        <literal type="string">"&lt;/BlockList&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Test needs a predictable file id</comment>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>fileId</name></name> <operator>=</operator> <literal type="number">0x0AAAAAAACCCCCCCC</literal></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"12345678901234567890123456789012"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write file in chunks with something left over on close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?blockid=0AAAAAAACCCCCCCDx0000000&amp;comp=block"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"1234567890123456"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?blockid=0AAAAAAACCCCCCCDx0000001&amp;comp=block"</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"7890"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><literal type="string">"/file.txt?comp=blocklist"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n"</literal>
                        <literal type="string">"&lt;BlockList&gt;"</literal>
                        <literal type="string">"&lt;Uncommitted&gt;0AAAAAAACCCCCCCDx0000000&lt;/Uncommitted&gt;"</literal>
                        <literal type="string">"&lt;Uncommitted&gt;0AAAAAAACCCCCCCDx0000001&lt;/Uncommitted&gt;"</literal>
                        <literal type="string">"&lt;/BlockList&gt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"12345678901234567890"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info for / does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"info for /"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info for missing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_HEAD</name></expr></argument>, <argument><expr><literal type="string">"/BOGUS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">404</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
                    <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"BOGUS"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"file does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info for file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_HEAD</name></expr></argument>, <argument><expr><literal type="string">"/subdir/file1.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <literal type="string">"content-length:9999\r\nLast-Modified: Wed, 21 Oct 2015 07:28:00 GMT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>StorageInfo</name></type> <name>info</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"subdir/file1.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypeFile</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>timeModified</name></name></expr></argument>, <argument><expr><literal type="number">1445412480</literal></expr></argument>, <argument><expr><literal type="string">"check time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info check existence only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_HEAD</name></expr></argument>, <argument><expr><literal type="string">"/subdir/file2.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <literal type="string">"content-length:777\r\nLast-Modified: Wed, 22 Oct 2015 07:28:00 GMT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"subdir/file2.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelExists</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypeFile</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>timeModified</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list basic level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"?comp=list&amp;delimiter=%2F&amp;prefix=path%2Fto%2F&amp;restype=container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;EnumerationResults&gt;"</literal>
                        <literal type="string">"    &lt;Blobs&gt;"</literal>
                        <literal type="string">"        &lt;Blob&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;path/to/test_file&lt;/Name&gt;"</literal>
                        <literal type="string">"            &lt;Properties&gt;"</literal>
                        <literal type="string">"                &lt;Last-Modified&gt;Mon, 12 Oct 2009 17:50:30 GMT&lt;/Last-Modified&gt;"</literal>
                        <literal type="string">"                &lt;Content-Length&gt;787&lt;/Content-Length&gt;"</literal>
                        <literal type="string">"            &lt;/Properties&gt;"</literal>
                        <literal type="string">"        &lt;/Blob&gt;"</literal>
                        <literal type="string">"        &lt;BlobPrefix&gt;"</literal>
                        <literal type="string">"           &lt;Name&gt;path/to/test_path/&lt;/Name&gt;"</literal>
                        <literal type="string">"       &lt;/BlobPrefix&gt;"</literal>
                        <literal type="string">"    &lt;/Blobs&gt;"</literal>
                        <literal type="string">"    &lt;NextMarker/&gt;"</literal>
                        <literal type="string">"&lt;/EnumerationResults&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>storageNewItrP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
                    <argument><expr><literal type="string">"assertion '!param.errorOnMissing || storageFeature(this, storageFeaturePath)' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
                    <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"/path/to"</literal></expr></argument>,
                    <argument><expr><literal type="string">"test_file {s=787, t=1255369830}\n"</literal>
                    <literal type="string">"test_path/\n"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelBasic</name></expr></argument>, <argument><expr><operator>.</operator><name>noRecurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list exists level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"?comp=list&amp;delimiter=%2F&amp;restype=container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;EnumerationResults&gt;"</literal>
                        <literal type="string">"    &lt;Blobs&gt;"</literal>
                        <literal type="string">"        &lt;Blob&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;test1.txt&lt;/Name&gt;"</literal>
                        <literal type="string">"            &lt;Properties/&gt;"</literal>
                        <literal type="string">"        &lt;/Blob&gt;"</literal>
                        <literal type="string">"        &lt;BlobPrefix&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;path1/&lt;/Name&gt;"</literal>
                        <literal type="string">"        &lt;/BlobPrefix&gt;"</literal>
                        <literal type="string">"    &lt;/Blobs&gt;"</literal>
                        <literal type="string">"    &lt;NextMarker/&gt;"</literal>
                        <literal type="string">"&lt;/EnumerationResults&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
                    <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>,
                    <argument><expr><literal type="string">"path1/\n"</literal>
                    <literal type="string">"test1.txt\n"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>noRecurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list a file in root with expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"?comp=list&amp;delimiter=%2F&amp;prefix=test&amp;restype=container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;EnumerationResults&gt;"</literal>
                        <literal type="string">"    &lt;Blobs&gt;"</literal>
                        <literal type="string">"        &lt;Blob&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;test1.txt&lt;/Name&gt;"</literal>
                        <literal type="string">"            &lt;Properties/&gt;"</literal>
                        <literal type="string">"        &lt;/Blob&gt;"</literal>
                        <literal type="string">"    &lt;/Blobs&gt;"</literal>
                        <literal type="string">"    &lt;NextMarker/&gt;"</literal>
                        <literal type="string">"&lt;/EnumerationResults&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
                    <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>,
                    <argument><expr><literal type="string">"test1.txt\n"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>noRecurse</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>expression</name> <operator>=</operator> <literal type="string">"^test.*$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list files with continuation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"?comp=list&amp;delimiter=%2F&amp;prefix=path%2Fto%2F&amp;restype=container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;EnumerationResults&gt;"</literal>
                        <literal type="string">"    &lt;Blobs&gt;"</literal>
                        <literal type="string">"        &lt;Blob&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;path/to/test1.txt&lt;/Name&gt;"</literal>
                        <literal type="string">"            &lt;Properties/&gt;"</literal>
                        <literal type="string">"        &lt;/Blob&gt;"</literal>
                        <literal type="string">"        &lt;Blob&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;path/to/test2.txt&lt;/Name&gt;"</literal>
                        <literal type="string">"            &lt;Properties/&gt;"</literal>
                        <literal type="string">"        &lt;/Blob&gt;"</literal>
                        <literal type="string">"        &lt;BlobPrefix&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;path/to/path1/&lt;/Name&gt;"</literal>
                        <literal type="string">"        &lt;/BlobPrefix&gt;"</literal>
                        <literal type="string">"    &lt;/Blobs&gt;"</literal>
                        <literal type="string">"    &lt;NextMarker&gt;ueGcxLPRx1Tr&lt;/NextMarker&gt;"</literal>
                        <literal type="string">"&lt;/EnumerationResults&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"?comp=list&amp;delimiter=%2F&amp;marker=ueGcxLPRx1Tr&amp;prefix=path%2Fto%2F&amp;restype=container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;EnumerationResults&gt;"</literal>
                        <literal type="string">"    &lt;Blobs&gt;"</literal>
                        <literal type="string">"        &lt;Blob&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;path/to/test3.txt&lt;/Name&gt;"</literal>
                        <literal type="string">"            &lt;Properties/&gt;"</literal>
                        <literal type="string">"        &lt;/Blob&gt;"</literal>
                        <literal type="string">"        &lt;BlobPrefix&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;path/to/path2/&lt;/Name&gt;"</literal>
                        <literal type="string">"        &lt;/BlobPrefix&gt;"</literal>
                        <literal type="string">"    &lt;/Blobs&gt;"</literal>
                        <literal type="string">"    &lt;NextMarker/&gt;"</literal>
                        <literal type="string">"&lt;/EnumerationResults&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
                    <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"/path/to"</literal></expr></argument>,
                    <argument><expr><literal type="string">"path1/\n"</literal>
                    <literal type="string">"path2/\n"</literal>
                    <literal type="string">"test1.txt\n"</literal>
                    <literal type="string">"test2.txt\n"</literal>
                    <literal type="string">"test3.txt\n"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>noRecurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list files with expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"?comp=list&amp;delimiter=%2F&amp;prefix=path%2Fto%2Ftest&amp;restype=container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;EnumerationResults&gt;"</literal>
                        <literal type="string">"    &lt;Blobs&gt;"</literal>
                        <literal type="string">"        &lt;Blob&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;path/to/test1.txt&lt;/Name&gt;"</literal>
                        <literal type="string">"            &lt;Properties/&gt;"</literal>
                        <literal type="string">"        &lt;/Blob&gt;"</literal>
                        <literal type="string">"        &lt;Blob&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;path/to/test2.txt&lt;/Name&gt;"</literal>
                        <literal type="string">"            &lt;Properties/&gt;"</literal>
                        <literal type="string">"        &lt;/Blob&gt;"</literal>
                        <literal type="string">"        &lt;Blob&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;path/to/test3.txt&lt;/Name&gt;"</literal>
                        <literal type="string">"            &lt;Properties/&gt;"</literal>
                        <literal type="string">"        &lt;/Blob&gt;"</literal>
                        <literal type="string">"        &lt;BlobPrefix&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;path/to/test1.path/&lt;/Name&gt;"</literal>
                        <literal type="string">"        &lt;/BlobPrefix&gt;"</literal>
                        <literal type="string">"        &lt;BlobPrefix&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;path/to/test2.path/&lt;/Name&gt;"</literal>
                        <literal type="string">"        &lt;/BlobPrefix&gt;"</literal>
                        <literal type="string">"    &lt;/Blobs&gt;"</literal>
                        <literal type="string">"    &lt;NextMarker/&gt;"</literal>
                        <literal type="string">"&lt;/EnumerationResults&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
                    <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"/path/to"</literal></expr></argument>,
                    <argument><expr><literal type="string">"test1.path\n"</literal>
                    <literal type="string">"test1.txt\n"</literal>
                    <literal type="string">"test3.txt\n"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelExists</name></expr></argument>, <argument><expr><operator>.</operator><name>noRecurse</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>expression</name> <operator>=</operator> <literal type="string">"^test(1|3)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"switch to SAS auth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoAzureKeyType</name></expr></argument>, <argument><expr><name>storageAzureKeyTypeSas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoAzureKey</name></expr></argument>, <argument><expr><name>TEST_KEY_SAS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get repo storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>driver</name> <operator>=</operator> <operator>(</operator><name>StorageAzure</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_PTR_NE</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>sasKey</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check sas key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE</name></expr></argument>, <argument><expr><literal type="string">"/path/to/test.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path/to/test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove missing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE</name></expr></argument>, <argument><expr><literal type="string">"/path/to/missing.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">404</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path/to/missing.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove files error to check redacted sig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"?comp=list&amp;restype=container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">403</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
                    <argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"HTTP request failed with 403 (Forbidden):\n"</literal>
                    <literal type="string">"*** Path/Query ***:\n"</literal>
                    <literal type="string">"GET /account/container?comp=list&amp;restype=container&amp;sig=&lt;redacted&gt;\n"</literal>
                    <literal type="string">"*** Request Headers ***:\n"</literal>
                    <literal type="string">"content-length: 0\n"</literal>
                    <literal type="string">"host: %s"</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove files from root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"?comp=list&amp;restype=container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;EnumerationResults&gt;"</literal>
                        <literal type="string">"    &lt;Blobs&gt;"</literal>
                        <literal type="string">"        &lt;Blob&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;test1.txt&lt;/Name&gt;"</literal>
                        <literal type="string">"            &lt;Properties/&gt;"</literal>
                        <literal type="string">"        &lt;/Blob&gt;"</literal>
                        <literal type="string">"        &lt;Blob&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;path1/xxx.zzz&lt;/Name&gt;"</literal>
                        <literal type="string">"            &lt;Properties/&gt;"</literal>
                        <literal type="string">"        &lt;/Blob&gt;"</literal>
                        <literal type="string">"        &lt;BlobPrefix&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;not-deleted/&lt;/Name&gt;"</literal>
                        <literal type="string">"        &lt;/BlobPrefix&gt;"</literal>
                        <literal type="string">"    &lt;/Blobs&gt;"</literal>
                        <literal type="string">"    &lt;NextMarker/&gt;"</literal>
                        <literal type="string">"&lt;/EnumerationResults&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE</name></expr></argument>, <argument><expr><literal type="string">"/test1.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE</name></expr></argument>, <argument><expr><literal type="string">"/path1/xxx.zzz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove files from path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"?comp=list&amp;prefix=path%2F&amp;restype=container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;EnumerationResults&gt;"</literal>
                        <literal type="string">"    &lt;Blobs&gt;"</literal>
                        <literal type="string">"        &lt;Blob&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;path/test1.txt&lt;/Name&gt;"</literal>
                        <literal type="string">"            &lt;Properties/&gt;"</literal>
                        <literal type="string">"        &lt;/Blob&gt;"</literal>
                        <literal type="string">"        &lt;Blob&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;path/path1/xxx.zzz&lt;/Name&gt;"</literal>
                        <literal type="string">"            &lt;Properties/&gt;"</literal>
                        <literal type="string">"        &lt;/Blob&gt;"</literal>
                        <literal type="string">"        &lt;BlobPrefix&gt;"</literal>
                        <literal type="string">"            &lt;Name&gt;path/not-deleted/&lt;/Name&gt;"</literal>
                        <literal type="string">"        &lt;/BlobPrefix&gt;"</literal>
                        <literal type="string">"    &lt;/Blobs&gt;"</literal>
                        <literal type="string">"    &lt;NextMarker/&gt;"</literal>
                        <literal type="string">"&lt;/EnumerationResults&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE</name></expr></argument>, <argument><expr><literal type="string">"/path/test1.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE</name></expr></argument>, <argument><expr><literal type="string">"/path/path1/xxx.zzz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove files in empty subpath (nothing to do)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><literal type="string">"?comp=list&amp;prefix=path%2F&amp;restype=container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</literal>
                        <literal type="string">"&lt;EnumerationResults&gt;"</literal>
                        <literal type="string">"    &lt;Blobs&gt;"</literal>
                        <literal type="string">"    &lt;/Blobs&gt;"</literal>
                        <literal type="string">"    &lt;NextMarker/&gt;"</literal>
                        <literal type="string">"&lt;/EnumerationResults&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>hrnServerScriptEnd</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
