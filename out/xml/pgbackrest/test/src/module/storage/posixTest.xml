<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/storage/posixTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Posix/CIFS Storage
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/read.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/write.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessFork.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessStorage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test function for path expression
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>storageTestPathExpression</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>expression</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"&lt;TEST&gt;"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"test%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>path</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"&lt;NULL&gt;"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"invalid expression '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Macro to create a path and file that cannot be accessed
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_CREATE_NOPERM</name><parameter_list>()</parameter_list></cpp:macro>                                                                                                       \
    <cpp:value>HRN_SYSTEM_FMT(                                                                                                                \
        "sudo mkdir -m 700 %s &amp;&amp; sudo touch %s &amp;&amp; sudo chmod 600 %s", strZ(pathNoPerm), strZ(fileNoPerm), strZ(fileNoPerm))</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Create default storage object for testing</comment>
    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTmp</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/tmp"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ioBufferSizeSet</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Directory and file that cannot be accessed to test permissions errors</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>fileNoPerm</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/noperm/noperm"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>pathNoPerm</name> <init>= <expr><call><name>strPath</name><argument_list>(<argument><expr><name>fileNoPerm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

    <comment type="line">// Write file for testing if storage is read-only</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>writeFile</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/writefile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// This test should always be first so the storage helper is uninitialized</comment>
    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageHelperDryRunInit()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"writable storage fails when dry-run is not initialized"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>WRITABLE_WHILE_DRYRUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>WRITABLE_WHILE_DRYRUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>WRITABLE_WHILE_DRYRUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"writable storage fails when dry-run is true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storageHelperDryRunInit</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>WRITABLE_WHILE_DRYRUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storageRepoIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>WRITABLE_WHILE_DRYRUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>WRITABLE_WHILE_DRYRUN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageNew()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"create new storage with defaults"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new storage (defaults)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>storageTest</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"check path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>storageTest</name><operator>-&gt;</operator><name>modeFile</name></name></expr></argument>, <argument><expr><literal type="number">0640</literal></expr></argument>, <argument><expr><literal type="string">"check file mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>storageTest</name><operator>-&gt;</operator><name>modePath</name></name></expr></argument>, <argument><expr><literal type="number">0750</literal></expr></argument>, <argument><expr><literal type="string">"check path mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>storageTest</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>storageTest</name><operator>-&gt;</operator><name>pathExpressionFunction</name></name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check expression function is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"create new storage - override defaults"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>,
            <argument><expr><call><name>storagePosixNewP</name><argument_list>(
                <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path/to"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>modePath</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>,
                <argument><expr><operator>.</operator><name>pathExpressionFunction</name> <operator>=</operator> <name>storageTestPathExpression</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"new storage (non-default)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>storageTest</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="string">"/path/to"</literal></expr></argument>, <argument><expr><literal type="string">"check path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>storageTest</name><operator>-&gt;</operator><name>modeFile</name></name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>, <argument><expr><literal type="string">"check file mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>storageTest</name><operator>-&gt;</operator><name>modePath</name></name></expr></argument>, <argument><expr><literal type="number">0700</literal></expr></argument>, <argument><expr><literal type="string">"check path mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>storageTest</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>storageTest</name><operator>-&gt;</operator><name>pathExpressionFunction</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check expression function is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>storageInterface</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>)</argument_list></call><operator>.</operator><name>info</name></expr></argument>, <argument><expr><name><name>storageTest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>interface</name><operator>.</operator><name>info</name></name></expr></argument>, <argument><expr><literal type="string">"check interface"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>storageDriver</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>storageTest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>driver</name></name></expr></argument>, <argument><expr><literal type="string">"check driver"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageType</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>storageTest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageFeature</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>storageFeaturePath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check path feature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageExists() and storagePathExists()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>TEST_CREATE_NOPERM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"missing"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"file does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"missing"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>timeout</name> <operator>=</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"file does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storagePathExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"missing"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"path does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storagePathExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"test path exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"permission denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileNoPerm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to get info for path/file '%s': [13] Permission denied"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileNoPerm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storagePathExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileNoPerm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to get info for path/file '%s': [13] Permission denied"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileNoPerm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file and path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>fileExists</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/exists"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pathExists</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/pathExists"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"touch %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileExists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"mkdir %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathExists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileExists</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathExists</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"not a file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storagePathExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileExists</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"not a path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"rm %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileExists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file after wait"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>sleepMSec</name><argument_list>(<argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"touch %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileExists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileExists</name></expr></argument>, <argument><expr><operator>.</operator><name>timeout</name> <operator>=</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"file exists after wait"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"rm %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileExists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageInfo()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>TEST_CREATE_NOPERM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileNoPerm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_INFO</name> <literal type="string">": [13] Permission denied"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileNoPerm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info for / exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"info for /"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info for / does not exist with no path feature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageRootNoPath</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>storageRootNoPath</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>interface</name><operator>.</operator><name>feature</name></name> <operator>^=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>storageFeaturePath</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageRootNoPath</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"no info for /"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"directory does not exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>fileName</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/fileinfo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_INFO_MISSING</name> <literal type="string">": [2] No such file or directory"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file does not exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StorageInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get file info (missing)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check not exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info outside of base path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/etc"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"absolute path '/etc' is not in base path '"</literal> <name>TEST_PATH</name> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/etc"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>noPathEnforce</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
            <argument><expr><literal type="string">"path not enforced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info - path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_TIME</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>, <argument><expr><literal type="number">1555160000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>TEST_PATH_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get path info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"name is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypePath</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><literal type="number">0770</literal></expr></argument>, <argument><expr><literal type="string">"check mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>timeModified</name></name></expr></argument>, <argument><expr><literal type="number">1555160000</literal></expr></argument>, <argument><expr><literal type="string">"check mod time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>linkDestination</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"no link destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>userId</name></name></expr></argument>, <argument><expr><name>TEST_USER_ID</name></expr></argument>, <argument><expr><literal type="string">"check user id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>TEST_USER_STR</name></expr></argument>, <argument><expr><literal type="string">"check user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>TEST_GROUP_ID</name></expr></argument>, <argument><expr><literal type="string">"check group id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><name>TEST_GROUP_STR</name></expr></argument>, <argument><expr><literal type="string">"check group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info basic - path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>storageTest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>interface</name><operator>.</operator><name>feature</name></name> <operator>^=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>storageFeatureInfoDetail</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>TEST_PATH_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get path info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"name is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypePath</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>timeModified</name></name></expr></argument>, <argument><expr><literal type="number">1555160000</literal></expr></argument>, <argument><expr><literal type="string">"check mod time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>linkDestination</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"no link destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>userId</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check user id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check group id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>storageTest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>interface</name><operator>.</operator><name>feature</name></name> <operator>^=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>storageFeatureInfoDetail</name></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info - file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"TESTFILE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"put test file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_TIME</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1555155555</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"sudo chown 99999:99999 %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get file info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"name is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypeFile</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><literal type="number">0640</literal></expr></argument>, <argument><expr><literal type="string">"check mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>timeModified</name></name></expr></argument>, <argument><expr><literal type="number">1555155555</literal></expr></argument>, <argument><expr><literal type="string">"check mod time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>linkDestination</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"no link destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info - link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>linkName</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/testlink"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"ln -s /tmp %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>linkName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>linkName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get link info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"name is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypeLink</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>, <argument><expr><literal type="string">"check mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>linkDestination</name></name></expr></argument>, <argument><expr><literal type="string">"/tmp"</literal></expr></argument>, <argument><expr><literal type="string">"check link destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>TEST_USER_STR</name></expr></argument>, <argument><expr><literal type="string">"check user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><name>TEST_GROUP_STR</name></expr></argument>, <argument><expr><literal type="string">"check group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>linkName</name></expr></argument>, <argument><expr><operator>.</operator><name>followLink</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get info from path pointed to by link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"name is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypePath</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>, <argument><expr><literal type="string">"check mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>linkDestination</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check link destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"check user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><literal type="string">"wheel"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"wheel"</literal></expr> </then><else>: <expr><literal type="string">"root"</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"check group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>linkName</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info - pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pipeName</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/testpipe"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"mkfifo -m 666 %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pipeName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pipeName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get info from pipe (special file)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"name is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypeSpecial</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>, <argument><expr><literal type="string">"check mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>linkDestination</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check link destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>TEST_USER_STR</name></expr></argument>, <argument><expr><literal type="string">"check user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><name>TEST_GROUP_STR</name></expr></argument>, <argument><expr><literal type="string">"check group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pipeName</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageNewItrP()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>TEST_CREATE_NOPERM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storageNewItrP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathMissingError</name></expr></argument>,
            <argument><expr><name>STORAGE_ERROR_LIST_INFO_MISSING</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/BOGUS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>storageNewItrP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>nullOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"ignore missing dir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on permission denied, regardless of errorOnMissing setting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storageNewItrP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathNoPerm</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathOpenError</name></expr></argument>,
            <argument><expr><name>STORAGE_ERROR_LIST_INFO</name> <literal type="string">": [13] Permission denied"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathNoPerm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Should still error even when ignore missing</comment>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storageNewItrP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathNoPerm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathOpenError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_LIST_INFO</name> <literal type="string">": [13] Permission denied"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathNoPerm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"helper function - storagePosixListEntry()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>storagePosixListEntry</name><argument_list>(
                <argument><expr><operator>(</operator><name>StoragePosix</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>storageLstNew</name><argument_list>(<argument><expr><name>storageInfoLevelBasic</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"missing"</literal></expr></argument>,
                <argument><expr><name>storageInfoLevelBasic</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"missing path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path with only dot"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0766</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"pg"</literal></expr></argument>,
            <argument><expr><literal type="string">"./ {u="</literal> <name>TEST_USER</name> <literal type="string">", g="</literal> <name>TEST_GROUP</name> <literal type="string">", m=0766}\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelDetail</name></expr></argument>, <argument><expr><operator>.</operator><name>includeDot</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path with file, link, pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg/.include"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM</name><argument_list>(<argument><expr><literal type="string">"sudo chown 77777:77777 "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/.include"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg/file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0660</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1656433838</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"TESTDATA"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM</name><argument_list>(<argument><expr><literal type="string">"ln -s ../file "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM</name><argument_list>(<argument><expr><literal type="string">"mkfifo -m 777 "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/pipe"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"pg"</literal></expr></argument>,
            <argument><expr><literal type="string">"./ {u="</literal> <name>TEST_USER</name> <literal type="string">", g="</literal> <name>TEST_GROUP</name> <literal type="string">", m=0766}\n"</literal>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
            <literal type="string">".include/ {u=77777, g=77777, m=0755}\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>
            <literal type="string">"file {s=8, t=1656433838, u="</literal> <name>TEST_USER</name> <literal type="string">", g="</literal> <name>TEST_GROUP</name> <literal type="string">", m=0660}\n"</literal>
            <literal type="string">"link&gt; {d=../file, u="</literal> <name>TEST_USER</name> <literal type="string">", g="</literal> <name>TEST_GROUP</name> <literal type="string">"}\n"</literal>
            <literal type="string">"pipe*\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelDetail</name></expr></argument>, <argument><expr><operator>.</operator><name>includeDot</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>HRN_SYSTEM</name><argument_list>(<argument><expr><literal type="string">"sudo rmdir "</literal> <name>TEST_PATH</name> <literal type="string">"/pg/.include"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storageItrMore() twice in a row"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StorageIterator</name> <modifier>*</modifier></type><name>storageItr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storageItr</name></expr></argument>, <argument><expr><call><name>storageNewItrP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new iterator"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageItrMore</name><argument_list>(<argument><expr><name>storageItr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check more"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageItrMore</name><argument_list>(<argument><expr><name>storageItr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check more again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path - recurse desc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg/path"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg/path/file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1656434296</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"TESTDATA"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"pg"</literal></expr></argument>,
            <argument><expr><literal type="string">"pipe*\n"</literal>
            <literal type="string">"path/file {s=8, t=1656434296}\n"</literal>
            <literal type="string">"path/\n"</literal>
            <literal type="string">"link&gt; {d=../file}\n"</literal>
            <literal type="string">"file {s=8, t=1656433838}\n"</literal>
            <literal type="string">"./\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelBasic</name></expr></argument>, <argument><expr><operator>.</operator><name>includeDot</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>sortOrder</name> <operator>=</operator> <name>sortOrderDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path - recurse asc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create a path with a subpath that will always be last to make sure lists are not freed too early in the iterator</comment>
        <expr_stmt><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg/zzz/yyy"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"pg"</literal></expr></argument>,
            <argument><expr><literal type="string">"./\n"</literal>
            <literal type="string">"file {s=8, t=1656433838}\n"</literal>
            <literal type="string">"link&gt; {d=../file}\n"</literal>
            <literal type="string">"path/\n"</literal>
            <literal type="string">"path/file {s=8, t=1656434296}\n"</literal>
            <literal type="string">"pipe*\n"</literal>
            <literal type="string">"zzz/\n"</literal>
            <literal type="string">"zzz/yyy/\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelBasic</name></expr></argument>, <argument><expr><operator>.</operator><name>includeDot</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path basic info - recurse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>storageTest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>interface</name><operator>.</operator><name>feature</name></name> <operator>^=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>storageFeatureInfoDetail</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"pg"</literal></expr></argument>,
            <argument><expr><literal type="string">"zzz/yyy/\n"</literal>
            <literal type="string">"zzz/\n"</literal>
            <literal type="string">"pipe*\n"</literal>
            <literal type="string">"path/file {s=8, t=1656434296}\n"</literal>
            <literal type="string">"path/\n"</literal>
            <literal type="string">"link&gt; {d=../file}\n"</literal>
            <literal type="string">"file {s=8, t=1656433838}\n"</literal>
            <literal type="string">"./\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>levelForce</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>includeDot</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>sortOrder</name> <operator>=</operator> <name>sortOrderDesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>storageTest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>interface</name><operator>.</operator><name>feature</name></name> <operator>^=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>storageFeatureInfoDetail</name></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"empty path - filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg/empty"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"pg"</literal></expr></argument>,
            <argument><expr><literal type="string">"empty/\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelType</name></expr></argument>, <argument><expr><operator>.</operator><name>expression</name> <operator>=</operator> <literal type="string">"^empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"filter in subpath during recursion"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"pg"</literal></expr></argument>,
            <argument><expr><literal type="string">"path/file {s=8, t=1656434296}\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelBasic</name></expr></argument>, <argument><expr><operator>.</operator><name>expression</name> <operator>=</operator> <literal type="string">"\\/file$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageList()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>TEST_CREATE_NOPERM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storageListP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathMissingError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_LIST_INFO_MISSING</name></expr></argument>,
            <argument><expr><name>TEST_PATH</name> <literal type="string">"/BOGUS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>storageListP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>nullOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"null for missing dir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><call><name>storageListP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"empty list for missing dir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on permission denied, regardless of errorOnMissing setting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storageListP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathNoPerm</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathOpenError</name></expr></argument>,
            <argument><expr><name>STORAGE_ERROR_LIST_INFO</name> <literal type="string">": [13] Permission denied"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathNoPerm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Should still error even when ignore missing</comment>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storageListP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathNoPerm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathOpenError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_LIST_INFO</name> <literal type="string">": [13] Permission denied"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathNoPerm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list - path with files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">".aaa.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"aaa"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write aaa.text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(<argument><expr><call><name>strLstSort</name><argument_list>(<argument><expr><call><name>storageListP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">".aaa.txt\n"</literal>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
            <literal type="string">"noperm\n"</literal></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>
            , <argument><expr><literal type="string">"dir list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bbb.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"bbb"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write bbb.text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(<argument><expr><call><name>storageListP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>.</operator><name>expression</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"^bbb"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"bbb.txt\n"</literal></expr></argument>, <argument><expr><literal type="string">"dir list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageCopy()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>sourceFile</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/source.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>destinationFile</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/destination.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>StorageRead</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StorageWrite</name> <modifier>*</modifier></type><name>destination</name> <init>= <expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"copy - missing source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(<argument><expr><call><name>storageCopyP</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_READ_MISSING</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"copy - ignore missing source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>sourceFile</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageCopyP</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"copy and ignore missing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"copy - success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>expectedBuffer</name> <init>= <expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"TESTFILE\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>expectedBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write source file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageCopyP</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"copy file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name>expectedBuffer</name></expr></argument>, <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>sourceFile</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageMove()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>TEST_CREATE_NOPERM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>sourceFile</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/source.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>destinationFile</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/sub/destination.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"move - missing source"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StorageRead</name> <modifier>*</modifier></type><name>source</name> <init>= <expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StorageWrite</name> <modifier>*</modifier></type><name>destination</name> <init>= <expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storageMoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to move missing source '%s': [2] No such file or directory"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"move - source file permission denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileNoPerm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storageMoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileMoveError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to move '%s' to '%s': [13] Permission denied"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileNoPerm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>destinationFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"move - missing destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"TESTFILE"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>destination</name> <operator>=</operator> <call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>, <argument><expr><operator>.</operator><name>noCreatePath</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storageMoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathMissingError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to move '%s' to missing path '%s': [2] No such file or directory"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strPath</name><argument_list>(<argument><expr><name>destinationFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"move - success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>destination</name> <operator>=</operator> <call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageMoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move file to subpath"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check source file not exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check destination file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TESTFILE"</literal></expr></argument>, <argument><expr><literal type="string">"check destination contents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"move - same path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>sourceFile</name> <operator>=</operator> <name>destinationFile</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>destinationFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/sub/destination2.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>destination</name> <operator>=</operator> <call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageMoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move file to same path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"move - parent path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>sourceFile</name> <operator>=</operator> <name>destinationFile</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>destinationFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/source.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>destination</name> <operator>=</operator> <call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>, <argument><expr><operator>.</operator><name>noSyncPath</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageMoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move file to parent path (no sync)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"move - across filesystems"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>sourceFile</name> <operator>=</operator> <name>destinationFile</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>destinationFile</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"/tmp/destination.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>destination</name> <operator>=</operator> <call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTmp</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageMoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move file to another filesystem"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check source file not exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTmp</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check destination file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"move across filesystems without syncing the paths"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>sourceFile</name> <operator>=</operator> <name>destinationFile</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>source</name> <operator>=</operator> <call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTmp</name></expr></argument>, <argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>destinationFile</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/source.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>destination</name> <operator>=</operator> <call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>, <argument><expr><operator>.</operator><name>noSyncPath</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageMoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move file to another filesystem without path sync"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTmp</name></expr></argument>, <argument><expr><name>sourceFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check source file not exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check destination file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>destinationFile</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storagePath()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path - root path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new storage /"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"root dir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"same as root dir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"subdir"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/subdir"</literal></expr></argument>, <argument><expr><literal type="string">"simple subdir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path - expressions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"&lt;TEST&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"expression '&lt;TEST&gt;' not valid without callback function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path/to"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>pathExpressionFunction</name> <operator>=</operator> <name>storageTestPathExpression</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"new storage /path/to with expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/path/to"</literal></expr></argument>, <argument><expr><literal type="string">"root dir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path/to"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/path/to"</literal></expr></argument>, <argument><expr><literal type="string">"absolute root dir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"is/a/subdir"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/path/to/is/a/subdir"</literal></expr></argument>, <argument><expr><literal type="string">"subdir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/bogus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"absolute path '/bogus' is not in base path '/path/to'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path/toot"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"absolute path '/path/toot' is not in base path '/path/to'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Path enforcement disabled for a single call</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/bogus"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>noEnforce</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/bogus"</literal></expr></argument>, <argument><expr><literal type="string">"path enforce disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"&lt;TEST"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"end &gt; not found in path expression '&lt;TEST'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"&lt;TEST&gt;"</literal> <name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"'/' should separate expression and path '&lt;TEST&gt;BOGUS'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"&lt;TEST&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/path/to/test"</literal></expr></argument>, <argument><expr><literal type="string">"expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"&lt;TEST&gt;/"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"path '&lt;TEST&gt;/' should not end in '/'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"&lt;TEST&gt;/something"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/path/to/test/something"</literal></expr></argument>, <argument><expr><literal type="string">"expression with path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"&lt;NULL&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"evaluated path '&lt;NULL&gt;' cannot be null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"&lt;WHATEVS&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"invalid expression '&lt;WHATEVS&gt;'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storagePathCreate()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"sub1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create sub1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"sub1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>mode</name></expr></argument>, <argument><expr><literal type="number">0750</literal></expr></argument>, <argument><expr><literal type="string">"check sub1 dir mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"sub1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create sub1 again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"sub1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>errorOnExists</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathCreateError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to create path '"</literal> <name>TEST_PATH</name> <literal type="string">"/sub1': [17] File exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"sub2"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0777</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create sub2 with custom mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"sub2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>mode</name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>, <argument><expr><literal type="string">"check sub2 dir mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"sub3/sub4"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>noParentCreate</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathCreateError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to create path '"</literal> <name>TEST_PATH</name> <literal type="string">"/sub3/sub4': [2] No such file or directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"sub3/sub4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create sub3/sub4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM</name><argument_list>(<argument><expr><literal type="string">"rm -rf "</literal> <name>TEST_PATH</name> <literal type="string">"/sub*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storagePathRemove()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path remove - missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pathRemove1</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/remove1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathRemove1</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathRemoveError</name></expr></argument>,
            <argument><expr><name>STORAGE_ERROR_PATH_REMOVE_MISSING</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathRemove1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathRemove1</name></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ignore missing path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>pathRemove2</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/remove2"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathRemove1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path remove - parent/subpath permission denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"sudo mkdir -p -m 700 %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathRemove2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathRemove2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathRemoveError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_PATH_REMOVE</name> <literal type="string">": [13] Permission denied"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathRemove2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathRemove2</name></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathOpenError</name></expr></argument>,
            <argument><expr><name>STORAGE_ERROR_LIST_INFO</name> <literal type="string">": [13] Permission denied"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathRemove2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path remove - subpath permission denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"sudo chmod 777 %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathRemove1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathRemove2</name></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathOpenError</name></expr></argument>,
            <argument><expr><name>STORAGE_ERROR_LIST_INFO</name> <literal type="string">": [13] Permission denied"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathRemove2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path remove - file in subpath, permission denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>fileRemove</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/remove.txt"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathRemove2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(
            <argument><expr><literal type="string">"sudo chmod 755 %s &amp;&amp; sudo touch %s &amp;&amp; sudo chmod 777 %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathRemove2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileRemove</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileRemove</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathRemove1</name></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathRemoveError</name></expr></argument>,
            <argument><expr><name>STORAGE_ERROR_PATH_REMOVE_FILE</name> <literal type="string">": [13] Permission denied"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileRemove</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path remove - path with subpath and file removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"sudo chmod 777 %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathRemove2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathRemove1</name></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathRemove1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"path is removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path remove - path with subpath removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"mkdir -p %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathRemove2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathRemove1</name></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathRemove1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"path is removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storagePathSync()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>TEST_CREATE_NOPERM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storagePathSyncP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileNoPerm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathOpenError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_PATH_SYNC_OPEN</name> <literal type="string">": [13] Permission denied"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileNoPerm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path sync - error on missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pathName</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/testpath"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storagePathSyncP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathMissingError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_PATH_SYNC_MISSING</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path sync - error on invalid absolute path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storagePathSyncP</name><argument_list>(<argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/proc"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>PathSyncError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_PATH_SYNC</name> <literal type="string">": [22] Invalid argument"</literal></expr></argument>, <argument><expr><literal type="string">"/proc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path sync - success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create path to sync"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathSyncP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>pathName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sync path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageLinkCreate()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StorageInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>backupLabel</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20181119-152138F"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>latestLabel</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"latest"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>invalidLinkType</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"create soft link to BACKUPLABEL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>backupLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create path to link to"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageLinkCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>backupLabel</name></expr></argument>, <argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>latestLabel</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get link info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>linkDestination</name></name></expr></argument>, <argument><expr><name>backupLabel</name></expr></argument>, <argument><expr><literal type="string">"match link destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageLinkCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>backupLabel</name></expr></argument>, <argument><expr><name>latestLabel</name></expr></argument>, <argument><expr><operator>.</operator><name>linkType</name> <operator>=</operator> <name>storageLinkSym</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>latestLabel</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get link info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>linkDestination</name></name></expr></argument>, <argument><expr><name>backupLabel</name></expr></argument>, <argument><expr><literal type="string">"match link destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"hardlink success/fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>emptyFile</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/test.empty"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>emptyFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"put empty file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>storageLinkCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>emptyFile</name></expr></argument>, <argument><expr><name>latestLabel</name></expr></argument>, <argument><expr><operator>.</operator><name>linkType</name> <operator>=</operator> <name>storageLinkHard</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"hardlink to empty file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>emptyFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove empty file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove latest label"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storageLinkCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>backupLabel</name></expr></argument>, <argument><expr><name>latestLabel</name></expr></argument>, <argument><expr><operator>.</operator><name>linkType</name> <operator>=</operator> <name>storageLinkHard</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to create hardlink \'latest\' to \'20181119-152138F\': [1] Operation not permitted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>latestLabel</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get link info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>linkDestination</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"no link destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>backupLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove backup path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storageLinkCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>backupLabel</name></expr></argument>, <argument><expr><name>latestLabel</name></expr></argument>, <argument><expr><operator>.</operator><name>linkType</name> <operator>=</operator> <name>invalidLinkType</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"assertion '(param.linkType == storageLinkSym &amp;&amp; storageFeature(this, storageFeatureSymLink)) ||"</literal>
            <literal type="string">" (param.linkType == storageLinkHard &amp;&amp; storageFeature(this, storageFeatureHardLink))' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageNewRead()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StorageRead</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>fileName</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/readtest.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"read missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new read file (defaults)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(<argument><expr><call><name>ioReadOpen</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_READ_MISSING</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"read success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"touch %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioReadOpen</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"open file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>ioReadFd</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>StorageReadPosix</name> <operator>*</operator><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><literal type="string">"check read fd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioReadClose</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageNewWrite()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>fileName</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/sub1/testfile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StorageWrite</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"permission denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_CREATE_NOPERM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileNoPerm</name></expr></argument>, <argument><expr><operator>.</operator><name>noAtomic</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write file (defaults)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_WRITE_OPEN</name> <literal type="string">": [13] Permission denied"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileNoPerm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write file - defaults"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>file</name></expr></argument>,
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>.</operator><name>user</name> <operator>=</operator> <name>TEST_USER_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>group</name> <operator>=</operator> <name>TEST_GROUP_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"new write file (defaults)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>ioWriteFd</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>StorageWritePosix</name> <operator>*</operator><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name>fd</name></expr></argument>, <argument><expr><literal type="string">"check write fd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strPath</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>mode</name></expr></argument>, <argument><expr><literal type="number">0750</literal></expr></argument>, <argument><expr><literal type="string">"check path mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><name>mode</name></expr></argument>, <argument><expr><literal type="number">0640</literal></expr></argument>, <argument><expr><literal type="string">"check file mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><name>timeModified</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check file modified times"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"test that a premature free (from error or otherwise) does not rename the file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileName</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/sub1/testfile-abort"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>fileNameTmp</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s."</literal> <name>STORAGE_FILE_TEMP_EXT</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>.</operator><name>user</name> <operator>=</operator> <name>TEST_USER_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write file (defaults)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWrite</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"TESTDATA"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"flush data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteFree</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"destination file does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileNameTmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"destination tmp file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileNameTmp</name></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"check temp file size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write file - set mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileName</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/sub2/testfile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>.</operator><name>modePath</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>group</name> <operator>=</operator> <name>TEST_GROUP_STR</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"new write file (set mode)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageWritePosixClose</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close file again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strPath</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>mode</name></expr></argument>, <argument><expr><literal type="number">0700</literal></expr></argument>, <argument><expr><literal type="string">"check path mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><name>mode</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>, <argument><expr><literal type="string">"check file mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storagePut() and storageGet()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get error - attempt to get directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>TEST_PATH_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileReadError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to read '"</literal> <name>TEST_PATH</name> <literal type="string">"': [21] Is a directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"put - empty file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>emptyFile</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/test.empty"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>emptyFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"put empty file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>emptyFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check empty file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"put - file with contents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"TESTFILE\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"put test file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get - ignore missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(
            <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/"</literal> <name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><literal type="string">"get missing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get - empty file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/test.empty"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"size is 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get - file with contents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>bufPtrConst</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TESTFILE\n"</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get - exact size smaller"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>exactSize</name> <operator>=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get exact"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>bufPtrConst</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TEST"</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get - exact size larger"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>exactSize</name> <operator>=</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileReadError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to read 64 byte(s) from '"</literal> <name>TEST_PATH</name> <literal type="string">"/test.txt'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get - smaller buffer size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioBufferSizeSet</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>bufPtrConst</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TESTFILE\n"</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on invalid read offset bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>offset</name> <operator>=</operator> <name>UINT64_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to seek to 18446744073709551615 in file '"</literal> <name>TEST_PATH</name> <literal type="string">"/test.txt': [22] Invalid argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"read limited bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>limit</name> <operator>=</operator> <call><name>VARUINT64</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>bufPtrConst</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TESTFIL"</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"read offset bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>offset</name> <operator>=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>bufPtrConst</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FILE\n"</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"read offset/limited bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>buffer</name></expr></argument>, <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>offset</name> <operator>=</operator> <literal type="number">4</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>limit</name> <operator>=</operator> <call><name>VARUINT64</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>memcmp</name><argument_list>(<argument><expr><call><name>bufPtrConst</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"FILE"</literal></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageRemove()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>TEST_CREATE_NOPERM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove - file missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"missing"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove missing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"missing"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileRemoveError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to remove '"</literal> <name>TEST_PATH</name> <literal type="string">"/missing': [2] No such file or directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove - file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>fileExists</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/exists"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"touch %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileExists</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileExists</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove exists file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove - permission denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileNoPerm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileRemoveError</name></expr></argument>, <argument><expr><literal type="string">"unable to remove '%s': [13] Permission denied"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileNoPerm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"StorageRead"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StorageRead</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"ignore missing - file with no permission to read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_CREATE_NOPERM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileNoPerm</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new read file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageReadIgnoreMissing</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check ignore missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>storageReadName</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fileNoPerm</name></expr></argument>, <argument><expr><literal type="string">"check name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"permission denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileNoPerm</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new no perm read file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>ioReadOpen</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_READ_OPEN</name> <literal type="string">": [13] Permission denied"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileNoPerm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>fileName</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/test.file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new missing read file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(<argument><expr><call><name>ioReadOpen</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_READ_MISSING</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"ignore missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new missing read file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioReadOpen</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"missing file ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"bad file descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>outBuffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>expectedBuffer</name> <init>= <expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"TESTFILE\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>expectedBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write test file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new read file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioReadOpen</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"open file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Close the file descriptor so operations will fail</comment>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageReadPosix</name> <operator>*</operator><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileReadError</name></expr></argument>, <argument><expr><literal type="string">"unable to read '%s': [9] Bad file descriptor"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set file descriptor to -1 so the close on free will not fail</comment>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>StorageReadPosix</name> <operator>*</operator><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"incremental load"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                <argument><expr><name>file</name></expr></argument>,
                <argument><expr><call><name>storageReadMove</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>.</operator><name>limit</name> <operator>=</operator> <call><name>VARUINT64</name><argument_list>(<argument><expr><literal type="number">44</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"new read file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioReadOpen</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"open file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>storageReadName</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"check file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageReadType</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_POSIX_TYPE</name></expr></argument>, <argument><expr><literal type="string">"check file type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageReadOffset</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check offset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>varUInt64</name><argument_list>(<argument><expr><call><name>storageReadLimit</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument>, <argument><expr><literal type="string">"check limit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"load data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufCat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"load data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufCat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"load data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufCat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"load data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufCat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>expectedBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check file contents (not all loaded yet)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"load data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufCat</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"no data to load"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"buffer is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageReadPosix</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><name>outBuffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"no data to load from driver either"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>outBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"buffer is empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>expectedBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check file contents (all loaded)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioReadEof</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioReadEof</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"still eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioReadClose</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageReadFree</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageReadMove</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move null file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"StorageWrite"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StorageWrite</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"check getters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_CREATE_NOPERM</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>file</name></expr></argument>,
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(
                <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileNoPerm</name></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0444</literal></expr></argument>, <argument><expr><operator>.</operator><name>modePath</name> <operator>=</operator> <literal type="number">0555</literal></expr></argument>, <argument><expr><operator>.</operator><name>noCreatePath</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>noSyncFile</name> <operator>=</operator> <name>true</name></expr></argument>,
                <argument><expr><operator>.</operator><name>noSyncPath</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>noAtomic</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"new write file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteAtomic</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check atomic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteCreatePath</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check create path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>storageWriteModeFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0444</literal></expr></argument>, <argument><expr><literal type="string">"check mode file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>storageWriteModePath</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0555</literal></expr></argument>, <argument><expr><literal type="string">"check mode path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>storageWriteName</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fileNoPerm</name></expr></argument>, <argument><expr><literal type="string">"check name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteSyncPath</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check sync path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteSyncFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check sync file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteTruncate</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"file will be truncated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"permission denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileNoPerm</name></expr></argument>, <argument><expr><operator>.</operator><name>noAtomic</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_WRITE_OPEN</name> <literal type="string">": [13] Permission denied"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileNoPerm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>fileName</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/sub1/test.file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>.</operator><name>noCreatePath</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>noAtomic</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(<argument><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_WRITE_MISSING</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"bad file descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>fileTmp</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s.pgbackrest.tmp"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ioBufferSizeSet</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"TESTFILE\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>storageWriteName</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"check file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Close the file descriptor so operations will fail</comment>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageWritePosix</name> <operator>*</operator><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileTmp</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storageWritePosix</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileWriteError</name></expr></argument>, <argument><expr><literal type="string">"unable to write '%s.pgbackrest.tmp': [9] Bad file descriptor"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storageWritePosixClose</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileSyncError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_WRITE_SYNC</name> <literal type="string">": [9] Bad file descriptor"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileTmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Disable file sync so close() can be reached</comment>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>StorageWritePosix</name> <operator>*</operator><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name><name>interface</name><operator>.</operator><name>syncFile</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>storageWritePosixClose</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileCloseError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_WRITE_CLOSE</name> <literal type="string">": [9] Bad file descriptor"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileTmp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set file descriptor to -1 so the close on free with not fail</comment>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>StorageWritePosix</name> <operator>*</operator><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"fail rename in close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>storageWriteName</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="string">"check file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageWriteType</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_POSIX_TYPE</name></expr></argument>, <argument><expr><literal type="string">"check file type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Rename the file back to original name from tmp -- this will cause the rename in close to fail</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>rename</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileTmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"rename tmp file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileMoveError</name></expr></argument>, <argument><expr><literal type="string">"unable to move '%s' to '%s': [2] No such file or directory"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileTmp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set file descriptor to -1 so the close on free with not fail</comment>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>StorageWritePosix</name> <operator>*</operator><operator>)</operator><name><name>file</name><operator>-&gt;</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write file success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>storageWriteMove</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWrite</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write null buffer to file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWrite</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write zero buffer to file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWrite</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write to file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageWriteFree</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageWriteMove</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move null file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>expectedBuffer</name> <init>= <expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>expectedBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check file contents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strPath</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>mode</name></expr></argument>, <argument><expr><literal type="number">0750</literal></expr></argument>, <argument><expr><literal type="string">"check path mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><name>mode</name></expr></argument>, <argument><expr><literal type="number">0640</literal></expr></argument>, <argument><expr><literal type="string">"check file mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write subpath and file success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>fileName</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/sub2/test.file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>file</name></expr></argument>,
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(
                <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>.</operator><name>modePath</name> <operator>=</operator> <literal type="number">0700</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>, <argument><expr><operator>.</operator><name>noSyncPath</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>noSyncFile</name> <operator>=</operator> <name>true</name></expr></argument>,
                <argument><expr><operator>.</operator><name>noAtomic</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"new write file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWrite</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write to file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>expectedBuffer</name> <operator>=</operator> <call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>expectedBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check file contents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strPath</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>mode</name></expr></argument>, <argument><expr><literal type="number">0700</literal></expr></argument>, <argument><expr><literal type="string">"check path mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call><operator>.</operator><name>mode</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>, <argument><expr><literal type="string">"check file mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"no truncate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"no-truncate"</literal></expr></argument>, <argument><expr><literal type="string">"ABC"</literal></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0600</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"no-truncate"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>modeFile</name> <operator>=</operator> <literal type="number">0660</literal></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">77777</literal></expr></argument>, <argument><expr><operator>.</operator><name>noAtomic</name> <operator>=</operator> <name>true</name></expr></argument>,
            <argument><expr><operator>.</operator><name>noTruncate</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteTruncate</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"file will not be truncated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_GET</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"no-truncate"</literal></expr></argument>, <argument><expr><literal type="string">"ABC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"no-truncate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>mode</name></expr></argument>, <argument><expr><literal type="number">0600</literal></expr></argument>, <argument><expr><literal type="string">"check mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"no-truncate"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>timeModified</name></expr></argument>, <argument><expr><literal type="number">77777</literal></expr></argument>, <argument><expr><literal type="string">"check time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageLocal() and storageLocalWrite()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storageLocal()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>storageHelper</name><operator>.</operator><name>storageLocal</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"local storage not cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageLocal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>storageHelper</name><operator>.</operator><name>storageLocal</name></name></expr></argument>, <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"local storage cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>storageLocal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"get cached storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"check base path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>writeFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"assertion 'this-&gt;write' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storageLocalWrite()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>storageHelper</name><operator>.</operator><name>storageLocalWrite</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"local storage not cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageLocalWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>storageHelper</name><operator>.</operator><name>storageLocalWrite</name></name></expr></argument>, <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"local storage cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>storageLocalWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"get cached storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"check base path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>writeFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"writes are allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageRepo*()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Load configuration to set repo-path and stanza</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storageRepo() - cached/not cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>storageHelper</name><operator>.</operator><name>storageRepo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"repo storage not cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>storageHelper</name><operator>.</operator><name>storageRepo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"repo storage cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"get cached storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storageRepo() - confirm settings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"&lt;BOGUS&gt;/path"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"invalid expression '&lt;BOGUS&gt;'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>writeFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"assertion 'this-&gt;write' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>, <argument><expr><literal type="string">"check base path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/archive/db"</literal></expr></argument>, <argument><expr><literal type="string">"check archive path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/simple"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/archive/db/simple"</literal></expr></argument>,
            <argument><expr><literal type="string">"check simple path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/9.4-1/700000007000000070000000"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>TEST_PATH</name> <literal type="string">"/archive/db/9.4-1/7000000070000000/700000007000000070000000"</literal></expr></argument>, <argument><expr><literal type="string">"check segment path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/9.4-1/00000008.history"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>TEST_PATH</name> <literal type="string">"/archive/db/9.4-1/00000008.history"</literal></expr></argument>, <argument><expr><literal type="string">"check history path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/9.4-1/000000010000014C0000001A.00000028.backup"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>TEST_PATH</name> <literal type="string">"/archive/db/9.4-1/000000010000014C/000000010000014C0000001A.00000028.backup"</literal></expr></argument>,
            <argument><expr><literal type="string">"check archive backup path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/backup/db"</literal></expr></argument>, <argument><expr><literal type="string">"check backup path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storageRepo() - helper does not fail when stanza option not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Change the stanza to NULL with the stanzaInit flag still true, make sure helper does not fail when stanza option not set</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdInfo</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new repo storage no stanza"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>storageHelper</name><operator>.</operator><name>stanza</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"stanza NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>STORAGE_REPO_ARCHIVE_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/archive"</literal></expr></argument>, <argument><expr><literal type="string">"check archive path - NULL stanza"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_ARCHIVE</name> <literal type="string">"/simple"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/archive/simple"</literal></expr></argument>,
            <argument><expr><literal type="string">"check simple archive path - NULL stanza"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>STORAGE_REPO_BACKUP_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/backup"</literal></expr></argument>, <argument><expr><literal type="string">"check backup path - NULL stanza"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_REPO_BACKUP</name> <literal type="string">"/simple"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/backup/simple"</literal></expr></argument>,
            <argument><expr><literal type="string">"check simple backup path - NULL stanza"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storageRepoWrite() - confirm write enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>storageHelper</name><operator>.</operator><name>storageRepoWrite</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"repo write storage not cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>storageHelper</name><operator>.</operator><name>storageRepoWrite</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"repo write storage cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>storageRepoWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"get cached storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"get write enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageSpool(), storageSpoolWrite() and storagePg*()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Load configuration to set spool-path and stanza</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchiveAsync</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptSpoolPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/db2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storageSpool() - cached/not cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>storageHelper</name><operator>.</operator><name>storageSpool</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"storage not cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>storageHelper</name><operator>.</operator><name>storageSpool</name></name></expr></argument>, <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"storage cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"get cached storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"STORAGE_SPOOL_ARCHIVE expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_SPOOL_ARCHIVE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/archive/db"</literal></expr></argument>, <argument><expr><literal type="string">"check spool path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE</name></expr></argument>, <argument><expr><literal type="string">"file.ext"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/archive/db/file.ext"</literal></expr></argument>,
            <argument><expr><literal type="string">"check spool file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storageSpool() - confirm settings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>, <argument><expr><literal type="string">"check base path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/archive/db/out"</literal></expr></argument>, <argument><expr><literal type="string">"check spool out path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_SPOOL_ARCHIVE_OUT</name> <literal type="string">"/file.ext"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/archive/db/out/file.ext"</literal></expr></argument>,
            <argument><expr><literal type="string">"check spool out file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/archive/db/in"</literal></expr></argument>, <argument><expr><literal type="string">"check spool in path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>STORAGE_SPOOL_ARCHIVE_IN</name> <literal type="string">"/file.ext"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/archive/db/in/file.ext"</literal></expr></argument>,
            <argument><expr><literal type="string">"check spool in file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"&lt;"</literal> <name>BOGUS_STR</name> <literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"invalid expression '&lt;BOGUS&gt;'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>writeFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"assertion 'this-&gt;write' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storageSpoolWrite() - confirm write enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>storageHelper</name><operator>.</operator><name>storageSpoolWrite</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"storage not cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>storageHelper</name><operator>.</operator><name>storageSpoolWrite</name></name></expr></argument>, <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"storage cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"get cached storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>writeFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"writes are allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storagePg() - confirm settings for read, write and index functions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>storageHelper</name><operator>.</operator><name>storagePg</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg storage not cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new pg storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>storageHelper</name><operator>.</operator><name>storagePg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"pg storage cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>storagePg</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"get cached pg storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/db"</literal></expr></argument>, <argument><expr><literal type="string">"check pg storage path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check pg storage write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePgIdx</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/db2"</literal></expr></argument>, <argument><expr><literal type="string">"check pg 2 storage path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>storageHelper</name><operator>.</operator><name>storagePgWrite</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg write storage not cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new pg write storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>storageHelper</name><operator>.</operator><name>storagePgWrite</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"pg write storage cached"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>storagePgWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"get cached pg write storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>path</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/db2"</literal></expr></argument>, <argument><expr><literal type="string">"check pg 2 write storage path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/db"</literal></expr></argument>, <argument><expr><literal type="string">"check pg write storage path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check pg write storage write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storageSpool - helper fails because stanza is required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Change the stanza to NULL, stanzaInit flag to false and make sure helper fails because stanza is required</comment>
        <expr_stmt><expr><name><name>storageHelper</name><operator>.</operator><name>storageSpool</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>storageHelper</name><operator>.</operator><name>storageSpoolWrite</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>storageHelper</name><operator>.</operator><name>stanzaInit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>storageHelper</name><operator>.</operator><name>stanza</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdInfo</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storageSpool</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"stanza cannot be NULL for this storage object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storageSpoolWrite</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"stanza cannot be NULL for this storage object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageRepoGet() and StorageDriverCifs"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Load configuration</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><literal type="string">"cifs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on invalid storage type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StorageHelper</name></type> <name><name>storageHelperListError</name><index>[]</index></name> <init>= <expr><block>{<expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>STORAGE_POSIX_TYPE</name></expr>}</block></expr>, <expr><name>STORAGE_END_HELPER</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>storageHelperInit</name><argument_list>(<argument><expr><name>storageHelperListError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"invalid storage type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storage configuration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set storage helper</comment>
        <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StorageHelper</name></type> <name><name>storageHelperList</name><index>[]</index></name> <init>= <expr><block>{<expr><name>STORAGE_CIFS_HELPER</name></expr>, <expr><name>STORAGE_END_HELPER</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>storageHelperInit</name><argument_list>(<argument><expr><name>storageHelperList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier></type><name>storage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get cifs repo storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageType</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_CIFS_TYPE</name></expr></argument>, <argument><expr><literal type="string">"check storage type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageFeature</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>storageFeaturePath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check path feature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write object path sync false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create a FileWrite object with path sync enabled and ensure that path sync is false in the write object</comment>
        <decl_stmt><decl><type><name>StorageWrite</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"somefile"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>noSyncPath</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new file write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteSyncPath</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"path sync is disabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path sync result is noop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Test the path sync function -- pass a bogus path to ensure that this is a noop</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathSyncP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"path sync is a noop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
