<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/storage/remoteTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Remote Storage
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/backup/pageChecksum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/cipherBlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/filter/sink.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/filter/size.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/interface.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessProtocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessStorage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Install remote command handler shim</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ProtocolServerHandler</name></type> <name><name>testRemoteHandlerList</name><index>[]</index></name> <init>=
    <expr><block>{
        <expr><name>PROTOCOL_SERVER_HANDLER_OPTION_LIST</name>
        <name>PROTOCOL_SERVER_HANDLER_STORAGE_REMOTE_LIST</name></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>hrnProtocolRemoteShimInstall</name><argument_list>(<argument><expr><name>testRemoteHandlerList</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>testRemoteHandlerList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set filter handlers</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StorageRemoteFilterHandler</name></type> <name><name>storageRemoteFilterHandlerList</name><index>[]</index></name> <init>=
    <expr><block>{
        <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CIPHER_BLOCK_FILTER_TYPE</name></expr>, <expr><operator>.</operator><name>handlerParam</name> <operator>=</operator> <name>cipherBlockNewPack</name></expr>}</block></expr>,
        <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>CRYPTO_HASH_FILTER_TYPE</name></expr>, <expr><operator>.</operator><name>handlerParam</name> <operator>=</operator> <name>cryptoHashNewPack</name></expr>}</block></expr>,
        <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>SINK_FILTER_TYPE</name></expr>, <expr><operator>.</operator><name>handlerNoParam</name> <operator>=</operator> <name>ioSinkNew</name></expr>}</block></expr>,
        <expr><block>{<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>SIZE_FILTER_TYPE</name></expr>, <expr><operator>.</operator><name>handlerNoParam</name> <operator>=</operator> <name>ioSizeNew</name></expr>}</block></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>storageRemoteFilterHandlerSet</name><argument_list>(<argument><expr><name>storageRemoteFilterHandlerList</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>storageRemoteFilterHandlerList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Test storage</comment>
    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Load configuration and get pg remote storage. This must be done before starting the repo storage below to set the max remotes</comment>
    <comment type="line">// allowed to 2. The protocol helper expects all remotes to have the same type so we are cheating here a bit, but without this</comment>
    <comment type="line">// ordering the second remote will never be sent an explicit exit and may not save coverage data.</comment>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>, <argument><expr><literal type="string">"20"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptBufferSize</name></expr></argument>, <argument><expr><literal type="string">"16384"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHostUser</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>TEST_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storagePgWrite</name> <init>= <expr><call><name>storagePgGet</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Load configuration and get repo remote storage</comment>
    <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>, <argument><expr><literal type="string">"20"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptBufferSize</name></expr></argument>, <argument><expr><literal type="string">"%zu"</literal></expr></argument>, <argument><expr><call><name>ioBufferSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostUser</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>TEST_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo128"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepo</name></expr></argument>, <argument><expr><literal type="string">"128"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleLocal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageRepoWrite</name> <init>= <expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageRepo</name> <init>= <expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Create a file larger than the remote buffer size</comment>
    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>contentBuf</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><call><name>ioBufferSize</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>contentIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>contentIdx</name> <operator>&lt;</operator> <call><name>bufSize</name><argument_list>(<argument><expr><name>contentBuf</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>contentIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>contentBuf</name></expr></argument>)</argument_list></call><index>[<expr><name>contentIdx</name></expr>]</index> <operator>=</operator> <ternary><condition><expr><name>contentIdx</name> <operator>%</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="char">'A'</literal></expr> </then><else>: <expr><literal type="char">'B'</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>contentBuf</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>contentBuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageInterface(), storageFeature, and storagePathP()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageInterface</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>)</argument_list></call><operator>.</operator><name>feature</name></expr></argument>, <argument><expr><call><name>storageInterface</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>)</argument_list></call><operator>.</operator><name>feature</name></expr></argument>, <argument><expr><literal type="string">"check features"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageFeature</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>storageFeaturePath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check path feature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo128"</literal></expr></argument>, <argument><expr><literal type="string">"check repo path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo128"</literal></expr></argument>, <argument><expr><literal type="string">"check repo write path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg256"</literal></expr></argument>, <argument><expr><literal type="string">"check pg write path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageInfo()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"missing file/path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileOpenError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to get info for missing path/file '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo128/BOGUS'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"missing file/path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"repo128"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_STORAGE_TIME</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><literal type="string">"repo128"</literal></expr></argument>, <argument><expr><literal type="number">1555160000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StorageInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><operator>.</operator><name>exists</name> <operator>=</operator> <name>false</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"valid path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"name is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypePath</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><literal type="number">0750</literal></expr></argument>, <argument><expr><literal type="string">"check mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>timeModified</name></name></expr></argument>, <argument><expr><literal type="number">1555160000</literal></expr></argument>, <argument><expr><literal type="string">"check mod time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>linkDestination</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"no link destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>userId</name></name></expr></argument>, <argument><expr><name>TEST_USER_ID</name></expr></argument>, <argument><expr><literal type="string">"check user id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>TEST_USER_STR</name></expr></argument>, <argument><expr><literal type="string">"check user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>TEST_GROUP_ID</name></expr></argument>, <argument><expr><literal type="string">"check group id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><name>TEST_GROUP_STR</name></expr></argument>, <argument><expr><literal type="string">"check group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1555160001</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"TESTME"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"valid file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"name is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypeFile</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><literal type="number">0640</literal></expr></argument>, <argument><expr><literal type="string">"check mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>timeModified</name></name></expr></argument>, <argument><expr><literal type="number">1555160001</literal></expr></argument>, <argument><expr><literal type="string">"check mod time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>linkDestination</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"no link destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>userId</name></name></expr></argument>, <argument><expr><name>TEST_USER_ID</name></expr></argument>, <argument><expr><literal type="string">"check user id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>TEST_USER_STR</name></expr></argument>, <argument><expr><literal type="string">"check user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>TEST_GROUP_ID</name></expr></argument>, <argument><expr><literal type="string">"check group id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><name>TEST_GROUP_STR</name></expr></argument>, <argument><expr><literal type="string">"check group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file info (basic level)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelBasic</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file basic info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"name is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypeFile</name></expr></argument>, <argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>timeModified</name></name></expr></argument>, <argument><expr><literal type="number">1555160001</literal></expr></argument>, <argument><expr><literal type="string">"mod time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"user not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"special info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM</name><argument_list>(<argument><expr><literal type="string">"mkfifo -m 666 "</literal> <name>TEST_PATH</name> <literal type="string">"/repo128/fifo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"fifo"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"valid fifo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"name is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypeSpecial</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><literal type="number">0666</literal></expr></argument>, <argument><expr><literal type="string">"check mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>linkDestination</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"no link destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>userId</name></name></expr></argument>, <argument><expr><name>TEST_USER_ID</name></expr></argument>, <argument><expr><literal type="string">"check user id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>TEST_USER_STR</name></expr></argument>, <argument><expr><literal type="string">"check user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>TEST_GROUP_ID</name></expr></argument>, <argument><expr><literal type="string">"check group id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><name>TEST_GROUP_STR</name></expr></argument>, <argument><expr><literal type="string">"check group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"link info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM</name><argument_list>(<argument><expr><literal type="string">"ln -s ../repo128/test "</literal> <name>TEST_PATH</name> <literal type="string">"/repo128/link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"valid link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"name is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypeLink</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><literal type="number">0777</literal></expr></argument>, <argument><expr><literal type="string">"check mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>linkDestination</name></name></expr></argument>, <argument><expr><literal type="string">"../repo128/test"</literal></expr></argument>, <argument><expr><literal type="string">"check link destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>userId</name></name></expr></argument>, <argument><expr><name>TEST_USER_ID</name></expr></argument>, <argument><expr><literal type="string">"check user id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>TEST_USER_STR</name></expr></argument>, <argument><expr><literal type="string">"check user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>TEST_GROUP_ID</name></expr></argument>, <argument><expr><literal type="string">"check group id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><name>TEST_GROUP_STR</name></expr></argument>, <argument><expr><literal type="string">"check group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"link info follow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>followLink</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"valid link follow"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"name is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypeFile</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"check size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><literal type="number">0640</literal></expr></argument>, <argument><expr><literal type="string">"check mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>linkDestination</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"no link destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>userId</name></name></expr></argument>, <argument><expr><name>TEST_USER_ID</name></expr></argument>, <argument><expr><literal type="string">"check user id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>user</name></name></expr></argument>, <argument><expr><name>TEST_USER_STR</name></expr></argument>, <argument><expr><literal type="string">"check user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>TEST_GROUP_ID</name></expr></argument>, <argument><expr><literal type="string">"check group id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>group</name></name></expr></argument>, <argument><expr><name>TEST_GROUP_STR</name></expr></argument>, <argument><expr><literal type="string">"check group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageNewItrP()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"path not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>storageNewItrP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>nullOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"path missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list path and file (no user/group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1555160001</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"TESTME"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"noname"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>timeModified</name> <operator>=</operator> <literal type="number">1555160002</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"NONAME"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"sudo chown 99999:99999 %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"noname"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <comment type="line">// Path timestamp must be set after file is created since file creation updates it</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_TIME</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1555160000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
            <argument><expr><literal type="string">"./ {u="</literal> <name>TEST_USER</name> <literal type="string">", g="</literal> <name>TEST_GROUP</name> <literal type="string">", m=0750}\n"</literal>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
            <literal type="string">"noname {s=6, t=1555160002, u=99999, g=99999, m=0640}\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>
            <literal type="string">"test {s=6, t=1555160001, u="</literal> <name>TEST_USER</name> <literal type="string">", g="</literal> <name>TEST_GROUP</name> <literal type="string">", m=0640}\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelDetail</name></expr></argument>, <argument><expr><operator>.</operator><name>includeDot</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list path and file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"sudo chown "</literal> <name>TEST_USER</name> <literal type="string">":"</literal> <name>TEST_GROUP</name> <literal type="string">" %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"noname"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>

        <comment type="line">// Path timestamp must be set after file is updated</comment>
        <expr_stmt><expr><call><name>HRN_STORAGE_TIME</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1555160000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_CONTAINER_REQUIRED</name></cpp:ifdef>
            <argument><expr><literal type="string">"noname {s=6, t=1555160002, u="</literal> <name>TEST_USER</name> <literal type="string">", g="</literal> <name>TEST_GROUP</name> <literal type="string">", m=0640}\n"</literal>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// TEST_CONTAINER_REQUIRED</comment>
            <literal type="string">"test {s=6, t=1555160001, u="</literal> <name>TEST_USER</name> <literal type="string">", g="</literal> <name>TEST_GROUP</name> <literal type="string">", m=0640}\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelDetail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageNewRead()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storagePgWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
            <argument><expr><literal type="string">"raised from remote-0 shim protocol: "</literal> <name>STORAGE_ERROR_READ_MISSING</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg256/test.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"read file without compression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo128/test.txt"</literal></expr></argument>, <argument><expr><name>contentBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Disable protocol compression in the storage object</comment>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>StorageRemote</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>compressLevel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StorageRead</name> <modifier>*</modifier></type><name>fileRead</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>, <argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>contentBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"get file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageReadIgnoreMissing</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check ignore missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storageReadName</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo128/test.txt"</literal></expr></argument>, <argument><expr><literal type="string">"check name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageReadRemote</name><argument_list>(<argument><expr><name><name>fileRead</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"nothing more to read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageReadRemote</name> <operator>*</operator><operator>)</operator><name><name>fileRead</name><operator>-&gt;</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name>protocolReadBytes</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>contentBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check read size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Enable protocol compression in the storage object</comment>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>StorageRemote</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>compressLevel</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"read file with limit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>, <argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>limit</name> <operator>=</operator> <call><name>VARUINT64</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"BABABABABAB"</literal></expr></argument>, <argument><expr><literal type="string">"check contents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageReadRemote</name> <operator>*</operator><operator>)</operator><name><name>fileRead</name><operator>-&gt;</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name>protocolReadBytes</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"check read size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"read partial file then close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>bufferOld</name> <init>= <expr><call><name>ioBufferSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ioBufferSizeSet</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>, <argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>limit</name> <operator>=</operator> <call><name>VARUINT64</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioReadOpen</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"open read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"partial read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"BABABABABAB"</literal></expr></argument>, <argument><expr><literal type="string">"check contents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioReadEof</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"no eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioReadClose</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioBufferSizeSet</name><argument_list>(<argument><expr><name>bufferOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"read partial file then free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>, <argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioReadOpen</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"open read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>ioRead</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"partial read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"BABABA"</literal></expr></argument>, <argument><expr><literal type="string">"check contents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>ioReadEof</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"no eof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageReadFree</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"read file with compression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>fileRead</name></expr></argument>, <argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>compressible</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get file (protocol compress)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>contentBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check contents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// We don't know how much protocol compression there will be exactly, but make sure this is some</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><operator>(</operator><operator>(</operator><name>StorageReadRemote</name> <operator>*</operator><operator>)</operator><name><name>fileRead</name><operator>-&gt;</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name>protocolReadBytes</name> <operator>&lt;</operator> <call><name>bufSize</name><argument_list>(<argument><expr><name>contentBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check compressed read size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"file missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"missing.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"read with filters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo128/test.txt"</literal></expr></argument>, <argument><expr><literal type="string">"TESTDATA!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>fileRead</name></expr></argument>, <argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/repo128/test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>limit</name> <operator>=</operator> <call><name>VARUINT64</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>IoFilterGroup</name> <modifier>*</modifier></type><name>filterGroup</name> <init>= <expr><call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><name>filterGroup</name></expr></argument>, <argument><expr><call><name>ioSizeNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><name>filterGroup</name></expr></argument>, <argument><expr><call><name>cryptoHashNew</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><name>filterGroup</name></expr></argument>, <argument><expr><call><name>cipherBlockNewP</name><argument_list>(<argument><expr><name>cipherModeEncrypt</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><call><name>BUFSTRZ</name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><name>filterGroup</name></expr></argument>, <argument><expr><call><name>cipherBlockNewP</name><argument_list>(<argument><expr><name>cipherModeDecrypt</name></expr></argument>, <argument><expr><name>cipherTypeAes256Cbc</name></expr></argument>, <argument><expr><call><name>BUFSTRZ</name><argument_list>(<argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><name>filterGroup</name></expr></argument>, <argument><expr><call><name>compressFilter</name><argument_list>(<argument><expr><name>compressTypeGz</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><name>filterGroup</name></expr></argument>, <argument><expr><call><name>decompressFilter</name><argument_list>(<argument><expr><name>compressTypeGz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"TESTDATA"</literal></expr></argument>, <argument><expr><literal type="string">"check contents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>hrnPackToStr</name><argument_list>(<argument><expr><call><name>ioFilterGroupResultAll</name><argument_list>(<argument><expr><name>filterGroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"1:strid:size, 2:pack:&lt;1:u64:8&gt;, 3:strid:hash, 4:pack:&lt;1:bin:bbbcf2c59433f68f22376cd2439d6cd309378df6&gt;,"</literal>
                <literal type="string">" 5:strid:cipher-blk, 7:strid:cipher-blk, 9:strid:gz-cmp, 11:strid:gz-dcmp, 13:strid:buffer"</literal></expr></argument>,
            <argument><expr><literal type="string">"filter results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check protocol function directly (file exists but all data goes to sink)</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"read into sink (no data returned)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT_Z</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo128/test.txt"</literal></expr></argument>, <argument><expr><literal type="string">"TESTDATA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>fileRead</name></expr></argument>, <argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/repo128/test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>limit</name> <operator>=</operator> <call><name>VARUINT64</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>filterGroup</name> <operator>=</operator> <call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><name>filterGroup</name></expr></argument>, <argument><expr><call><name>ioSizeNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><name>filterGroup</name></expr></argument>, <argument><expr><call><name>cryptoHashNew</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><name>filterGroup</name></expr></argument>, <argument><expr><call><name>ioSinkNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><name>fileRead</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"no content"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>hrnPackToStr</name><argument_list>(<argument><expr><call><name>ioFilterGroupResultAll</name><argument_list>(<argument><expr><name>filterGroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"1:strid:size, 2:pack:&lt;1:u64:8&gt;, 3:strid:hash, 4:pack:&lt;1:bin:bbbcf2c59433f68f22376cd2439d6cd309378df6&gt;, 5:strid:sink,"</literal>
                <literal type="string">" 7:strid:buffer"</literal></expr></argument>,
            <argument><expr><literal type="string">"filter results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on invalid filter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier></type><name>filterWrite</name> <init>= <expr><call><name>pckWriteNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>pckWriteStrIdP</name><argument_list>(<argument><expr><name>filterWrite</name></expr></argument>, <argument><expr><call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>, <argument><expr><literal type="number">0x13a9de20</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteEndP</name><argument_list>(<argument><expr><name>filterWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storageRemoteFilterGroup</name><argument_list>(<argument><expr><call><name>ioFilterGroupNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><name>filterWrite</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"unable to add filter 'bogus'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageNewWrite()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write with smaller buffer size than remote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioBufferSizeSet</name><argument_list>(<argument><expr><literal type="number">9999</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Disable protocol compression in the storage object to test no compression</comment>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>StorageRemote</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>compressLevel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StorageWrite</name> <modifier>*</modifier></type><name>write</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteAtomic</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"write is atomic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteCreatePath</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"path will be created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageWriteModeFile</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_MODE_FILE_DEFAULT</name></expr></argument>, <argument><expr><literal type="string">"file mode is default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageWriteModePath</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>STORAGE_MODE_PATH_DEFAULT</name></expr></argument>, <argument><expr><literal type="string">"path mode is default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storageWriteName</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo128/test.txt"</literal></expr></argument>, <argument><expr><literal type="string">"check file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteSyncFile</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"file is synced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteSyncPath</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"path is synced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteTruncate</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"file will be truncated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>contentBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageWriteRemote</name> <operator>*</operator><operator>)</operator><name><name>write</name><operator>-&gt;</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name>protocolWriteBytes</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>contentBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check write size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageWriteRemoteClose</name><argument_list>(<argument><expr><name><name>write</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close file again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageWriteFree</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make sure the file was written correctly</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>contentBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write with larger buffer than remote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioBufferSizeSet</name><argument_list>(<argument><expr><call><name>ioBufferSize</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>contentBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>contentBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Enable protocol compression in the storage object</comment>
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>StorageRemote</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>compressLevel</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write file, free before close, make sure the .tmp file remains"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test2.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>ioWrite</name><argument_list>(<argument><expr><call><name>storageWriteIo</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>contentBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageWriteFree</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(
            <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"repo128/test2.txt.pgbackrest.tmp"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><name>size</name></expr></argument>, <argument><expr><literal type="number">16384</literal></expr></argument>, <argument><expr><literal type="string">"file exists and is partial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write the file again with protocol compression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test2.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>compressible</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write file (compress)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>contentBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><operator>(</operator><operator>(</operator><name>StorageWriteRemote</name> <operator>*</operator><operator>)</operator><name><name>write</name><operator>-&gt;</operator><name>driver</name></name><operator>)</operator><operator>-&gt;</operator><name>protocolWriteBytes</name> <operator>&lt;</operator> <call><name>bufSize</name><argument_list>(<argument><expr><name>contentBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check compressed write size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storagePathCreate()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"testpath"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"create path via the remote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check the repo via the local test storage to ensure the remote created it.</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>StorageInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get path info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"path exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>mode</name></name></expr></argument>, <argument><expr><name>STORAGE_MODE_PATH_DEFAULT</name></expr></argument>, <argument><expr><literal type="string">"mode is default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on existing path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"testpath"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>errorOnExists</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathCreateError</name></expr></argument>,
            <argument><expr><literal type="string">"raised from remote-0 shim protocol: unable to create path '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo128/testpath': [17] File exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on missing parent path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"parent/testpath"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>noParentCreate</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PathCreateError</name></expr></argument>,
            <argument><expr><literal type="string">"raised from remote-0 shim protocol: unable to create path '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo128/parent/testpath': [2] No such"</literal>
                <literal type="string">" file or directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"create parent/path with non-default mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"parent/testpath"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>mode</name> <operator>=</operator> <literal type="number">0777</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"path create"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
            <argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/repo128/parent"</literal></expr></argument>,
            <argument><expr><literal type="string">"./ {u="</literal> <name>TEST_USER</name> <literal type="string">", g="</literal> <name>TEST_GROUP</name> <literal type="string">", m=0777}\n"</literal>
            <literal type="string">"testpath/ {u="</literal> <name>TEST_USER</name> <literal type="string">", g="</literal> <name>TEST_GROUP</name> <literal type="string">", m=0777}\n"</literal></expr></argument>,
            <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelDetail</name></expr></argument>, <argument><expr><operator>.</operator><name>includeDot</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storagePathRemove()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"testpath"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"repo128"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remote remove path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check the repo via the local test storage to ensure the remote wrote it, then remove via the remote and confirm removed</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storagePathExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"path exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remote remove path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storagePathExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"path removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove recursive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/file.txt"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"TEST"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"new path and file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"testpath"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove missing path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storagePathExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"recurse path removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageRemove()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"repo128"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remote remove path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Write the file to the repo via the remote so owner is pgbackrest</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"TEST"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check the repo via the local test storage to ensure the remote wrote it, then remove via the remote and confirm removed</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remote remove file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageExistsP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"file removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on missing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileRemoveError</name></expr></argument>,
            <argument><expr><literal type="string">"raised from remote-0 shim protocol: unable to remove '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo128/file.txt': [2] No such file or directory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"ignore missing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storagePathSync()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"repo128"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"testpath"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathSyncP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sync path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageLinkCreate()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StorageInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"20181119-152138F"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>latestLabel</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"latest"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>testFile</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"test.file"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"create/remove symlink to path and to file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create the path and symlink via the remote</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathCreateP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remote create path to link to"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>storageLinkCreateP</name><argument_list>(
                <argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"remote create path symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check the repo via the local test storage to ensure the remote wrote to it, then remove via remote and confirm removed</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"path exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>storageInfoP</name><argument_list>(
                <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
            <argument><expr><literal type="string">"symlink to path exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Verify link mapping via the local test storage</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>info</name></expr></argument>,
            <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get symlink info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>linkDestination</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"match link destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypeLink</name></expr></argument>, <argument><expr><literal type="string">"check type is link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remote remove symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>storageInfoP</name><argument_list>(
                <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
            <argument><expr><literal type="string">"symlink to path removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create a file and sym link to it via the remote,</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>testFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"TESTME"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"put test file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>storageLinkCreateP</name><argument_list>(
                <argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>testFile</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"remote create file symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check the repo via the local test storage to ensure the remote wrote to it, then remove via remote and confirm removed</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/test.file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"test file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>storageInfoP</name><argument_list>(
                <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
            <argument><expr><literal type="string">"symlink to file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Verify link mapping via the local test storage</comment>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>info</name></expr></argument>,
            <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get symlink info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>linkDestination</name></name></expr></argument>, <argument><expr><name>testFile</name></expr></argument>, <argument><expr><literal type="string">"match link destination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypeLink</name></expr></argument>, <argument><expr><literal type="string">"check type is link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Verify file and link contents match</comment>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>testFileBuffer</name> <init>= <expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"repo128/test.file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>symLinkBuffer</name> <init>= <expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name>testFileBuffer</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"TESTME"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"file contents match test buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name>testFileBuffer</name></expr></argument>, <argument><expr><name>symLinkBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"symlink and file contents match each other"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>testFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remote remove test file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"repo128/test.file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"test file removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remote remove symlink"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>storageInfoP</name><argument_list>(
                <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
            <argument><expr><literal type="string">"symlink to file removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"hardlink success/fail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create a file and hard link to it via the remote,</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>testFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"TESTME"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"put test file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>storageLinkCreateP</name><argument_list>(
                <argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>testFile</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><operator>.</operator><name>linkType</name> <operator>=</operator> <name>storageLinkHard</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"hardlink to test file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check the repo via the local test storage to ensure the remote wrote to it, check that files and link match, then remove</comment>
        <comment type="line">// via remote and confirm removed</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"repo128/test.file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"test file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>storageInfoP</name><argument_list>(
                <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"hard link exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>info</name></expr></argument>,
            <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get hard link info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypeFile</name></expr></argument>, <argument><expr><literal type="string">"check type is file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Verify file and link contents match</comment>
        <expr_stmt><expr><name>testFileBuffer</name> <operator>=</operator> <call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"repo128/test.file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>hardLinkBuffer</name> <init>= <expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name>testFileBuffer</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"TESTME"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"file contents match test buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>bufEq</name><argument_list>(<argument><expr><name>testFileBuffer</name></expr></argument>, <argument><expr><name>hardLinkBuffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"hard link and file contents match each other"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>testFile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove test file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storageRepoWrite</name></expr></argument>, <argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove hard link"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"repo128/test.file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"test file removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>storageInfoP</name><argument_list>(
                <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"repo128/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"hard link removed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Hard link to directory not permitted</comment>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>storageLinkCreateP</name><argument_list>(
                <argument><expr><name>storageRepoWrite</name></expr></argument>,
                <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storagePathP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>latestLabel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>linkType</name> <operator>=</operator> <name>storageLinkHard</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>FileOpenError</name></expr></argument>,
            <argument><expr><literal type="string">"raised from remote-0 shim protocol: unable to create hardlink '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo128/latest' to"</literal>
                <literal type="string">" '"</literal> <name>TEST_PATH</name> <literal type="string">"/repo128/20181119-152138F': [1] Operation not permitted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="line">// When clients are freed by protocolClientFree() they do not wait for a response. We need to wait for a response here to be</comment>
    <comment type="line">// sure coverage data has been written by the remote. We also need to make sure that the mem context callback is cleared so that</comment>
    <comment type="line">// protocolClientFreeResource() will not be called and send another exit. protocolFree() is still required to free the client</comment>
    <comment type="line">// objects.</comment>
    <expr_stmt><expr><call><name>memContextCallbackClear</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><call><name>protocolRemoteGet</name><argument_list>(<argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>protocolClientExecute</name><argument_list>(<argument><expr><call><name>protocolRemoteGet</name><argument_list>(<argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>protocolCommandNew</name><argument_list>(<argument><expr><name>PROTOCOL_COMMAND_EXIT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memContextCallbackClear</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><call><name>protocolRemoteGet</name><argument_list>(<argument><expr><name>protocolStorageTypePg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>protocolClientExecute</name><argument_list>(<argument><expr><call><name>protocolRemoteGet</name><argument_list>(<argument><expr><name>protocolStorageTypePg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>protocolCommandNew</name><argument_list>(<argument><expr><name>PROTOCOL_COMMAND_EXIT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>protocolFree</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
