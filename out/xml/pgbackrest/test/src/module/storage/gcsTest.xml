<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/storage/gcsTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test GCS Storage
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessFork.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessServer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessStorage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Constants
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_ENDPOINT</name></cpp:macro>                                               <cpp:value>"storage.googleapis.com"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>TEST_ENDPOINT_STR</name></expr></argument>,                                <argument><expr><name>TEST_ENDPOINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PORT</name></cpp:macro>                                                   <cpp:value>((unsigned int)443)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_TIMEOUT</name></cpp:macro>                                                <cpp:value>5000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_CHUNK_SIZE</name></cpp:macro>                                             <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BUCKET</name></cpp:macro>                                                 <cpp:value>"bucket"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>TEST_BUCKET_STR</name></expr></argument>,                                  <argument><expr><name>TEST_BUCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_KEY_FILE</name></cpp:macro>                                               <cpp:value>TEST_PATH "/key.json"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>TEST_KEY_FILE_STR</name></expr></argument>,                                <argument><expr><name>TEST_KEY_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_TOKEN</name></cpp:macro>                                                  <cpp:value>"X X"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>TEST_TOKEN_STR</name></expr></argument>,                                   <argument><expr><name>TEST_TOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_KEY</name></cpp:macro>                                                                                                                   \
    <cpp:value>"{\n"                                                                                                                          \
    "\"type\": \"service_account\",\n"                                                                                             \
    "\"project_id\": \"project\",\n"                                                                                               \
    "\"private_key\": "                                                                                                            \
        "\"-----BEGIN RSA PRIVATE KEY-----\\n"                                                                                     \
        "MIIEoQIBAAKCAQBV5Mryv79tXBKXfUWeSRHWmm+i5pGNgkMMRWiENGfqsrQxBFmR\\n"                                                      \
        "rPfVBcqfr5f7kKvOoUe772aAhJTiZNmeEPpN27Zn+0PsbDzXAS2BrEZUyynKaTDa\\n"                                                      \
        "kuw5MirBWVYWgIyjI0Y9airX3sSp9oxqrW0fpCxaApyYRAizzwQgcfw4ynhEp6Tn\\n"                                                      \
        "cBhVqkt3+lPB3I2Hhr/er+QmTll+xzKiqzZ2K8EXfiWprYMjttknL/+dgLWYF3I4\\n"                                                      \
        "weT5LxEohrzTgf3DyW3WIFulsqEGnNFRPGfwnPjZ0p//8zQ9vIvkCd/y7Tlz1Gvp\\n"                                                      \
        "BIPybgOgq/Xtac+HlvgRMWbDf5GmWHpKfG2zAgMBAAECggEAP/U9qcReJnCI54TA\\n"                                                      \
        "cjy2q7YTqplFiLmWc2y7hrX/KyQmSNmUWIUThevqFT4LTadMR3CQmcCJ8ujGdE3k\\n"                                                      \
        "PW8m8xLHoGXZDhMKuo6F9CjztfASDkaFujvs6ioQ7Cg5kkfmcROzGcgUXuniRyzv\\n"                                                      \
        "IgBBYW4+GEgZksgWMs3TpNU7mo1MaTFfvs69N6kZLvkTffNOQWPGnBLxwP/SFbn6\\n"                                                      \
        "4Z28s4xWXLyWuAvOUQtasAewgqdVpvh4ICpj5gTQiuFZ8pXKfzVj7OZEa5YkPawa\\n"                                                      \
        "cFxuHlr9VJmkimy3uepQFFlzEvq9hwjkv3gAWypOK8U5wXplkq2/nN08AdrqXh+O\\n"                                                      \
        "xr4yAQKBgQCVYOvdcnM0nFAwQHgO8PIwlKNEr2dGMDW+kVJ9+OHFn4dE3A0c4/9D\\n"                                                      \
        "LYlAZ4BdzikI1PDL6WaCODosanI8BQ2FQSb2eue7MZhvKa3cnCiPxLLeX5/Dxsy2\\n"                                                      \
        "sd5b8cfDbWH6xPzBium79a+CTI99W2iQG4JR4KfRn4RSsvu5mdGJSQKBgQCTM6aU\\n"                                                      \
        "rPrlXoB1vV9W0zrgSBJGToqEVzMyO3Ocg2I102fVJ7OTfdHN/sXKzEOFjb+gQ9UR\\n"                                                      \
        "89rx3BsMnOqCt1/WkxYchvtDh0SVIy9KgcHusX2D0TO8TowKL4eDuEsjK9RZXWRy\\n"                                                      \
        "FnERE9qofnrzwDsgIUcU7WgL1B+b/IsETuZbGwKBgEqZ/vG3aOXLcxjF+a+skafF\\n"                                                      \
        "c8yntPIOvaiQtxwGoeqqg0nWhA37p84K/dLWXft7LG8muaN8yx8ZqaPo/WgQNfJo\\n"                                                      \
        "2WabdwO7/x71N8lHi9JRL+ty4j1KGY7cQeq1U0i8ZgRxQLIACD9Asghm5/p5Hj1q\\n"                                                      \
        "H6l4gxdjjRgoHyNQOJ9RAoGAJytkVUWeUbCO4EWu++yjSxECg+DcbRDDF8fIIMq5\\n"                                                      \
        "NHd3trmkyEd/r5/uw+MMyJoKdrv2E5vfE+Ks8/NBV90xzGhBRwAIFlUFQ+Yj7GCQ\\n"                                                      \
        "2VIzgwMFEEOacg9psPw2Sjqce9clJlKgbZnp4lIdp4TsdsVEI+Z0fElKy/gsic3w\\n"                                                      \
        "8CcCgYB8cslQm0hr8hkNQoa2B1h/N6VnjegKRzz2xgS51t703ki3u9R3c5SjhW8j\\n"                                                      \
        "TuMS9w277P2ZBz38orc6lKbWg2GMrmsJfC9jgXkFi7NiZRdKl+DYcIMvNSZTR6j7\\n"                                                      \
        "DIo7CEz9TZW8QMM+VAt4pJTWo4Sy7iM2n0ZTFSGbBHboXHXnXQ==\\n"                                                                  \
        "-----END RSA PRIVATE KEY-----\\n\",\n"                                                                                    \
    "\"client_email\": \"service@project.iam.gserviceaccount.com\",\n"                                                             \
    "\"token_uri\": \"https://%s:%u/token\"\n"                                                                                     \
    "}\n"</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Helper to build test requests
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>TestRequestParam</name>
<block>{
    <expr_stmt><expr><name>VAR_PARAM_HEADER</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>noBucket</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>upload</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>noAuth</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>object</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>contentRange</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>range</name></decl>;</decl_stmt>
}</block></struct></type> <name>TestRequestParam</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testRequestP</name><parameter_list>(<parameter><type><name>write</name></type></parameter>, <parameter><type><name>verb</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                                                                             \
    <cpp:value>testRequest(write, verb, (TestRequestParam){VAR_PARAM_INIT, __VA_ARGS__})</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRequest</name><parameter_list>(<parameter><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>verb</name></decl></parameter>, <parameter><decl><type><name>TestRequestParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><call><name>strCatFmt</name><argument_list>(
        <argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s %s/storage/v1/b%s"</literal></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>upload</name></name></expr> ?</condition><then> <expr><literal type="string">"/upload"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>noBucket</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"/bucket/o"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add object</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>object</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpUriEncode</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>object</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Add query</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>query</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"?%s"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Add HTTP version and user agent</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">" HTTP/1.1\r\nuser-agent:"</literal> <name>PROJECT_NAME</name> <literal type="string">"/"</literal> <name>PROJECT_VERSION</name> <literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add authorization string</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>param</name><operator>.</operator><name>noAuth</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"authorization:X X\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Add content-length</comment>
    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"content-length:%zu\r\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add content-range</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>contentRange</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"content-range:bytes %s\r\n"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>contentRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Add host</comment>
    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"host:%s\r\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add range</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>range</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"range:bytes=%s\r\n"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Complete headers</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Add content</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>hrnServerScriptExpect</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Helper to build test responses
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>TestResponseParam</name>
<block>{
    <expr_stmt><expr><name>VAR_PARAM_HEADER</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>code</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>content</name></decl>;</decl_stmt>
}</block></struct></type> <name>TestResponseParam</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testResponseP</name><parameter_list>(<parameter><type><name>write</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                                                                                                  \
    <cpp:value>testResponse(write, (TestResponseParam){VAR_PARAM_INIT, __VA_ARGS__})</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>testResponse</name><parameter_list>(<parameter><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name></decl></parameter>, <parameter><decl><type><name>TestResponseParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Set code to 200 if not specified</comment>
    <expr_stmt><expr><name><name>param</name><operator>.</operator><name>code</name></name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><operator>.</operator><name>code</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">200</literal></expr> </then><else>: <expr><name><name>param</name><operator>.</operator><name>code</name></name></expr></else></ternary></expr>;</expr_stmt>

    <comment type="line">// Output header and code</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>response</name> <init>= <expr><call><name>strCatFmt</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"HTTP/1.1 %u "</literal></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>code</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add reason for some codes</comment>
    <switch>switch <condition>(<expr><name><name>param</name><operator>.</operator><name>code</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><literal type="number">200</literal></expr>:</case>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><literal type="string">"OK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">403</literal></expr>:</case>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><literal type="string">"Forbidden"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <comment type="line">// End header</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Headers</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>header</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><literal type="string">"%s\r\n"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Content</comment>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>response</name></expr></argument>,
            <argument><expr><literal type="string">"content-length:%zu\r\n"</literal>
                <literal type="string">"\r\n"</literal>
                <literal type="string">"%s"</literal></expr></argument>,
            <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>response</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>hrnServerScriptReply</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set storage helper</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StorageHelper</name></type> <name><name>storageHelperList</name><index>[]</index></name> <init>= <expr><block>{<expr><name>STORAGE_GCS_HELPER</name></expr>, <expr><name>STORAGE_END_HELPER</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>storageHelperInit</name><argument_list>(<argument><expr><name>storageHelperList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Get test host and ports</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>testHost</name> <init>= <expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>testPort</name> <init>= <expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>testPortAuth</name> <init>= <expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>testPortMeta</name> <init>= <expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageRepoGet()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"storage with default options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>STORAGE_GCS_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoGcsBucket</name></expr></argument>, <argument><expr><name>TEST_BUCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoGcsKeyType</name></expr></argument>, <argument><expr><name>storageGcsKeyTypeToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoGcsKey</name></expr></argument>, <argument><expr><name>TEST_TOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get repo storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>, <argument><expr><literal type="string">"check path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageGcs</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>bucket</name></expr></argument>, <argument><expr><name>TEST_BUCKET_STR</name></expr></argument>, <argument><expr><literal type="string">"check bucket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageGcs</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>endpoint</name></expr></argument>, <argument><expr><literal type="string">"storage.googleapis.com"</literal></expr></argument>, <argument><expr><literal type="string">"check endpoint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageGcs</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>chunkSize</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"check chunk size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageGcs</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>token</name></expr></argument>, <argument><expr><name>TEST_TOKEN_STR</name></expr></argument>, <argument><expr><literal type="string">"check token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageFeature</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>storageFeaturePath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check path feature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"storageGcsAuth*()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StorageGcs</name> <modifier>*</modifier></type><name>storage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"jwt read-only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>TEST_KEY_FILE</name></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>TEST_KEY</name></expr></argument>, <argument><expr><literal type="string">"test.com"</literal></expr></argument>, <argument><expr><name>TEST_PORT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>storage</name></expr></argument>,
            <argument><expr><operator>(</operator><name>StorageGcs</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(
                <argument><expr><call><name>storageGcsNew</name><argument_list>(
                    <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TEST_BUCKET_STR</name></expr></argument>, <argument><expr><name>storageGcsKeyTypeService</name></expr></argument>, <argument><expr><name>TEST_KEY_FILE_STR</name></expr></argument>, <argument><expr><name>TEST_CHUNK_SIZE</name></expr></argument>,
                    <argument><expr><name>TEST_ENDPOINT_STR</name></expr></argument>, <argument><expr><name>TEST_TIMEOUT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"read-only gcs storage - service key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>httpUrlHost</name><argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>authUrl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"test.com"</literal></expr></argument>, <argument><expr><literal type="string">"check host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>httpUrlPath</name><argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>authUrl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/token"</literal></expr></argument>, <argument><expr><literal type="string">"check path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>httpUrlPort</name><argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>authUrl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PORT</name></expr></argument>, <argument><expr><literal type="string">"check port"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>httpUrlProtocolType</name><argument_list>(<argument><expr><name><name>storage</name><operator>-&gt;</operator><name>authUrl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>httpProtocolTypeHttps</name></expr></argument>, <argument><expr><literal type="string">"check protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>storageGcsAuthJwt</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="number">1613138142</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzZXJ2aWNlQHByb2plY3QuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJzY29wZSI6Imh0d"</literal>
            <literal type="string">"HBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvZGV2c3RvcmFnZS5yZWFkX29ubHkiLCJhdWQiOiJodHRwczovL3Rlc3QuY29tOjQ0My90b2tlbiIsImV"</literal>
            <literal type="string">"4cCI6MTYxMzE0MTc0MiwiaWF0IjoxNjEzMTM4MTQyfQ.IPfwPV_Qcd4_desFHlOc2wAdWQYUe7rTWG722J_lWNSu4vZH0YVE-9N5gjLZ6z_k8cnIOaenTc"</literal>
            <literal type="string">"g-RX_vXmj0wZ4QyBF3t2mTVMM8jwDZtej2pPvyUslUJpcwyV6KNOOAO_TSxYN1OfE3hzMlhepC2GJRAft7oHKqaDV8DDXd4OulCM48OML0Y1ZPA-P1A-Ag"</literal>
            <literal type="string">"5Sfkt1aq58teZurwY3ZtwKB5jbYnb8DHJHRJwSLZCXKDrfQrwlCIsXaWXSOxxge-L3B4yaywFtTyshhGj-e8takqxinOvrPpnhjdJzGJ7IvXky_MNbTey_"</literal>
            <literal type="string">"RnpnhT0hjbftiJXEX6GyagwalzQRYdag"</literal></expr></argument>,
            <argument><expr><literal type="string">"jwt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"jwt read/write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
            <argument><expr><name>storage</name></expr></argument>,
            <argument><expr><operator>(</operator><name>StorageGcs</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(
                <argument><expr><call><name>storageGcsNew</name><argument_list>(
                    <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>TEST_BUCKET_STR</name></expr></argument>, <argument><expr><name>storageGcsKeyTypeService</name></expr></argument>, <argument><expr><name>TEST_KEY_FILE_STR</name></expr></argument>, <argument><expr><name>TEST_CHUNK_SIZE</name></expr></argument>,
                    <argument><expr><name>TEST_ENDPOINT_STR</name></expr></argument>, <argument><expr><name>TEST_TIMEOUT</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"read/write gcs storage - service key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>storageGcsAuthJwt</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="number">1613138142</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzZXJ2aWNlQHByb2plY3QuaWFtLmdzZXJ2aWNlYWNjb3VudC5jb20iLCJzY29wZSI6Imh0d"</literal>
            <literal type="string">"HBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2F1dGgvZGV2c3RvcmFnZS5yZWFkX3dyaXRlIiwiYXVkIjoiaHR0cHM6Ly90ZXN0LmNvbTo0NDMvdG9rZW4iLCJ"</literal>
            <literal type="string">"leHAiOjE2MTMxNDE3NDIsImlhdCI6MTYxMzEzODE0Mn0.RKyHLuaIS7Ut6aud9cK7E8SxmZBT8hlOLsXd3z5mC5Ieupkzm26LE6bMik0QCww-dPbkwJKnq"</literal>
            <literal type="string">"Cb2cIO8GD2JdpXG4XkZhtCvbfZDZPkzioOlDwNA-Q7--btrgpFKL8C9FcZhJ1Tz24OGmIYdnZeeSf2hkBMuuIzrrve1BkRLaXfXUIWE519_tYaG4EpJ9nX"</literal>
            <literal type="string">"N_ouEex5CJC-YnpyhqPeSG-DX7CalHdiOERIbzKGxdcEY3VcloQbWbgAqFMAUYBg6sHoNZbdHbwHQ62khvEeF4CI0MnYBYva3darYqmEEyaTfnzGEyyg62"</literal>
            <literal type="string">"ocn6xBg6A6T4agO3xVT05EY-JWvq8Ockw"</literal></expr></argument>,
            <argument><expr><literal type="string">"jwt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"StorageGcs, StorageReadGcs, and StorageWriteGcs"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>HRN_STORAGE_PUT</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>TEST_KEY_FILE</name></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>TEST_KEY</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>testHost</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>testPortAuth</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"gcs server"</literal></argument>, <argument>.timeout = <literal type="number">5000</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>hrnServerRunP</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hrnServerProtocolTls</name></expr></argument>, <argument><expr><operator>.</operator><name>port</name> <operator>=</operator> <name>testPort</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"gcs server run"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"auth server"</literal></argument>, <argument>.timeout = <literal type="number">5000</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
                    <argument><expr><call><name>hrnServerRunP</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hrnServerProtocolTls</name></expr></argument>, <argument><expr><operator>.</operator><name>port</name> <operator>=</operator> <name>testPortAuth</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"auth server run"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"meta server"</literal></argument>, <argument>.timeout = <literal type="number">15000</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
                    <argument><expr><call><name>hrnServerRunP</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>hrnServerProtocolSocket</name></expr></argument>, <argument><expr><operator>.</operator><name>port</name> <operator>=</operator> <name>testPortMeta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"meta server run"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Do not use HRN_FORK_PARENT_WRITE() here so individual names can be assigned to help with debugging</comment>
                <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>service</name> <init>= <expr><call><name>hrnServerScriptBegin</name><argument_list>(
                    <argument><expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"gcs client write"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE_FD</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>auth</name> <init>= <expr><call><name>hrnServerScriptBegin</name><argument_list>(
                    <argument><expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"auth client write"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE_FD</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><call><name>hrnServerScriptBegin</name><argument_list>(
                    <argument><expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"meta client write"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE_FD</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"test service auth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>STORAGE_GCS_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoGcsBucket</name></expr></argument>, <argument><expr><name>TEST_BUCKET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoGcsEndpoint</name></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>testPort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoStorageVerifyTls</name></expr></argument>, <argument><expr><name>TEST_IN_CONTAINER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoGcsKey</name></expr></argument>, <argument><expr><name>TEST_KEY_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgEnvRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptRepoGcsKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get repo storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Generate the auth request. The JWT part will need to be ? since it can vary in content and size.</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>preamble</name> <init>= <expr><literal type="string">"grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer&amp;assertion="</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>jwt</name> <init>= <expr><call><name>storageGcsAuthJwt</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>StorageGcs</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>authRequest</name> <init>= <expr><call><name>strCatFmt</name><argument_list>(
                    <argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"POST /token HTTP/1.1\r\n"</literal>
                    <literal type="string">"user-agent:"</literal> <name>PROJECT_NAME</name> <literal type="string">"/"</literal> <name>PROJECT_VERSION</name> <literal type="string">"\r\n"</literal>
                    <literal type="string">"content-length:%zu\r\n"</literal>
                    <literal type="string">"content-type:application/x-www-form-urlencoded\r\n"</literal>
                    <literal type="string">"host:%s\r\n"</literal>
                    <literal type="string">"\r\n"</literal>
                    <literal type="string">"%s"</literal></expr></argument>,
                    <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>jwt</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>preamble</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>preamble</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>jwtIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>jwtIdx</name> <operator>&lt;</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>jwt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>jwtIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>authRequest</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"create bucket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptExpect</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>authRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"{\"access_token\":\"X\",\"token_type\":\"X\",\"expires_in\":120}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><operator>.</operator><name>noBucket</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"{\"name\":\"bucket\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>storageGcsRequestP</name><argument_list>(
                    <argument><expr><operator>(</operator><name>StorageGcs</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HTTP_VERB_POST_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>noBucket</name> <operator>=</operator> <name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <call><name>BUFSTR</name><argument_list>(
                        <argument><expr><call><name>jsonWriteResult</name><argument_list>(
                            <argument><expr><call><name>jsonWriteObjectEnd</name><argument_list>(
                                <argument><expr><call><name>jsonWriteStr</name><argument_list>(
                                    <argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><call><name>jsonWriteObjectBegin</name><argument_list>(<argument><expr><call><name>jsonWriteNewP</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>GCS_JSON_NAME</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bucket"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"auth error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Authenticate again since the prior token timed out</comment>
                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptExpect</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>authRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"{\"error\":\"error\",\"error_description\":\"description\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"fi&amp;le.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"unable to get authentication token: [error] description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"ignore missing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Authenticate again since the prior token errored out</comment>
                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptExpect</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><name>authRequest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>auth</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"{\"access_token\":\"X\",\"token_type\":\"X\",\"expires_in\":7200}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Auth service no longer needed</comment>
                <expr_stmt><expr><call><name>hrnServerScriptEnd</name><argument_list>(<argument><expr><name>auth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <literal type="string">"fi&amp;le.txt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"alt=media"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">404</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(
                    <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"fi&amp;le.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"get file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on missing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <literal type="string">"file.txt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"alt=media"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">404</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FileMissingError</name></expr></argument>,
                    <argument><expr><literal type="string">"unable to open missing file '/file.txt' for read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get file with offset and limit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <literal type="string">"file.txt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"alt=media"</literal></expr></argument>, <argument><expr><operator>.</operator><name>range</name> <operator>=</operator> <literal type="string">"1-21"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"this is a sample file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
                    <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>offset</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>.</operator><name>limit</name> <operator>=</operator> <call><name>VARUINT64</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"this is a sample file"</literal></expr></argument>, <argument><expr><literal type="string">"get file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"switch to auto auth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argListAuto</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argListAuto</name></expr></argument>, <argument><expr><name>cfgOptRepoGcsKeyType</name></expr></argument>, <argument><expr><name>storageGcsKeyTypeAuto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argListAuto</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get repo storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Replace the default authClient with one that points locally. The default host and url will still be used so they</comment>
                <comment type="line">// can be verified when testing auth.</comment>
                <expr_stmt><expr><operator>(</operator><operator>(</operator><name>StorageGcs</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>authClient</name> <operator>=</operator> <call><name>httpClientNew</name><argument_list>(
                    <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>testPortMeta</name></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Tests need the chunk size to be 16</comment>
                <expr_stmt><expr><operator>(</operator><operator>(</operator><name>StorageGcs</name> <operator>*</operator><operator>)</operator><call><name>storageDriver</name><argument_list>(<argument><expr><name>storage</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>chunkSize</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"get zero-length file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Get token automatically from metadata</comment>
                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptExpectZ</name><argument_list>(
                    <argument><expr><name>meta</name></expr></argument>,
                    <argument><expr><literal type="string">"GET /computeMetadata/v1/instance/service-accounts/default/token HTTP/1.1\r\n"</literal>
                    <literal type="string">"user-agent:"</literal> <name>PROJECT_NAME</name> <literal type="string">"/"</literal> <name>PROJECT_VERSION</name> <literal type="string">"\r\n"</literal>
                    <literal type="string">"content-length:0\r\n"</literal>
                    <literal type="string">"host:metadata.google.internal\r\n"</literal>
                    <literal type="string">"metadata-flavor:Google\r\n"</literal>
                    <literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"{\"access_token\":\"X\",\"token_type\":\"X\",\"expires_in\":3600}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Meta service no longer needed</comment>
                <expr_stmt><expr><call><name>hrnServerScriptEnd</name><argument_list>(<argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <literal type="string">"file0.txt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"alt=media"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
                    <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file0.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"get zero-length file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"non-404 error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <literal type="string">"file.txt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"alt=media"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">303</literal></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"CONTENT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>StorageRead</name> <modifier>*</modifier></type><name>read</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new read file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageReadIgnoreMissing</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check ignore missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storageReadName</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>, <argument><expr><literal type="string">"check name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
                    <argument><expr><call><name>ioReadOpen</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"HTTP request failed with 303:\n"</literal>
                    <literal type="string">"*** Path/Query ***:\n"</literal>
                    <literal type="string">"GET /storage/v1/b/bucket/o/file.txt?alt=media\n"</literal>
                    <literal type="string">"*** Request Headers ***:\n"</literal>
                    <literal type="string">"authorization: &lt;redacted&gt;\n"</literal>
                    <literal type="string">"content-length: 0\n"</literal>
                    <literal type="string">"host: %s\n"</literal>
                    <literal type="string">"*** Response Headers ***:\n"</literal>
                    <literal type="string">"content-length: 7\n"</literal>
                    <literal type="string">"*** Response Content ***:\n"</literal>
                    <literal type="string">"CONTENT"</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"fields=md5Hash%2Csize&amp;name=file.txt&amp;uploadType=media"</literal></expr></argument>, <argument><expr><operator>.</operator><name>upload</name> <operator>=</operator> <name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"ABCD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">403</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
                    <argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"ABCD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"HTTP request failed with 403 (Forbidden):\n"</literal>
                    <literal type="string">"*** Path/Query ***:\n"</literal>
                    <literal type="string">"POST /upload/storage/v1/b/bucket/o?fields=md5Hash%%2Csize&amp;name=file.txt&amp;uploadType=media\n"</literal>
                    <literal type="string">"*** Request Headers ***:\n"</literal>
                    <literal type="string">"authorization: &lt;redacted&gt;\n"</literal>
                    <literal type="string">"content-length: 4\n"</literal>
                    <literal type="string">"host: %s"</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write file in one part (with retry)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"fields=md5Hash%2Csize&amp;name=file.txt&amp;uploadType=media"</literal></expr></argument>, <argument><expr><operator>.</operator><name>upload</name> <operator>=</operator> <name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"ABCD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">503</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"fields=md5Hash%2Csize&amp;name=file.txt&amp;uploadType=media"</literal></expr></argument>, <argument><expr><operator>.</operator><name>upload</name> <operator>=</operator> <name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"ABCD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"{\"md5Hash\":\"ywjKSnu1+Wg8GRM6hIcspw==\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>StorageWrite</name> <modifier>*</modifier></type><name>write</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"ABCD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteAtomic</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"write is atomic"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteCreatePath</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"path will be created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageWriteModeFile</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"file mode is 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>storageWriteModePath</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"path mode is 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>storageWriteName</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/file.txt"</literal></expr></argument>, <argument><expr><literal type="string">"check file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteSyncFile</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"file is synced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteSyncPath</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"path is synced"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageWriteTruncate</name><argument_list>(<argument><expr><name>write</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"file will be truncated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageWriteGcsClose</name><argument_list>(<argument><expr><name><name>write</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"close file again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write zero-length file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"fields=md5Hash%2Csize&amp;name=file.txt&amp;uploadType=media"</literal></expr></argument>, <argument><expr><operator>.</operator><name>upload</name> <operator>=</operator> <name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"{\"md5Hash\":\"1B2M2Y8AsgTpgAmY7PhCfg==\",\"size\":\"0\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid md5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"fields=md5Hash%2Csize&amp;name=file.txt&amp;uploadType=media"</literal></expr></argument>, <argument><expr><operator>.</operator><name>upload</name> <operator>=</operator> <name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"{\"md5Hash\":\"ywjK\",\"size\":\"0\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
                    <argument><expr><literal type="string">"expected md5 'd41d8cd98f00b204e9800998ecf8427e' for '/file.txt' but actual is 'cb08ca'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"fields=md5Hash%2Csize&amp;name=file.txt&amp;uploadType=media"</literal></expr></argument>, <argument><expr><operator>.</operator><name>upload</name> <operator>=</operator> <name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"{\"md5Hash\":\"1B2M2Y8AsgTpgAmY7PhCfg==\",\"size\":\"55\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"expected size 55 for '/file.txt' but actual is 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write file in chunks with nothing left over on close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><operator>.</operator><name>upload</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"name=file.txt&amp;uploadType=resumable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <literal type="string">"x-guploader-uploadid:ulid1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><operator>.</operator><name>upload</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>noAuth</name> <operator>=</operator> <name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"name=file.txt&amp;uploadType=resumable&amp;upload_id=ulid1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>contentRange</name> <operator>=</operator> <literal type="string">"0-15/*"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"1234567890123456"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">308</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><operator>.</operator><name>upload</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>noAuth</name> <operator>=</operator> <name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"fields=md5Hash%2Csize&amp;name=file.txt&amp;uploadType=resumable&amp;upload_id=ulid1"</literal></expr></argument>, <argument><expr><operator>.</operator><name>contentRange</name> <operator>=</operator> <literal type="string">"16-31/32"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"7890123456789012"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"{\"md5Hash\":\"dnF5x6K/8ZZRzpfSlMMM+w==\",\"size\":\"32\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"12345678901234567890123456789012"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"write file in chunks with something left over on close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><operator>.</operator><name>upload</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"name=file.txt&amp;uploadType=resumable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <literal type="string">"x-guploader-uploadid:ulid2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><operator>.</operator><name>upload</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>noAuth</name> <operator>=</operator> <name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"name=file.txt&amp;uploadType=resumable&amp;upload_id=ulid2"</literal></expr></argument>, <argument><expr><operator>.</operator><name>contentRange</name> <operator>=</operator> <literal type="string">"0-15/*"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"1234567890123456"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">503</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><operator>.</operator><name>upload</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>noAuth</name> <operator>=</operator> <name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"name=file.txt&amp;uploadType=resumable&amp;upload_id=ulid2"</literal></expr></argument>, <argument><expr><operator>.</operator><name>contentRange</name> <operator>=</operator> <literal type="string">"0-15/*"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"1234567890123456"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">308</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><operator>.</operator><name>upload</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>noAuth</name> <operator>=</operator> <name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"fields=md5Hash%2Csize&amp;name=file.txt&amp;uploadType=resumable&amp;upload_id=ulid2"</literal></expr></argument>, <argument><expr><operator>.</operator><name>contentRange</name> <operator>=</operator> <literal type="string">"16-19/20"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"7890"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"{\"md5Hash\":\"/YXmLZvrRUKHcexohBiycQ==\",\"size\":\"20\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"12345678901234567890"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on resumable upload (upload_id is redacted)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST</name></expr></argument>, <argument><expr><operator>.</operator><name>upload</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"name=file.txt&amp;uploadType=resumable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <literal type="string">"x-guploader-uploadid:ulid3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT</name></expr></argument>, <argument><expr><operator>.</operator><name>upload</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>noAuth</name> <operator>=</operator> <name>true</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"name=file.txt&amp;uploadType=resumable&amp;upload_id=ulid3"</literal></expr></argument>, <argument><expr><operator>.</operator><name>contentRange</name> <operator>=</operator> <literal type="string">"0-15/*"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"1234567890123456"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">403</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>write</name></expr></argument>, <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
                    <argument><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"12345678901234567"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"HTTP request failed with 403 (Forbidden):\n"</literal>
                    <literal type="string">"*** Path/Query ***:\n"</literal>
                    <literal type="string">"PUT /upload/storage/v1/b/bucket/o?name=file.txt&amp;uploadType=resumable&amp;upload_id=&lt;redacted&gt;\n"</literal>
                    <literal type="string">"*** Request Headers ***:\n"</literal>
                    <literal type="string">"content-length: 16\n"</literal>
                    <literal type="string">"content-range: bytes 0-15/*\n"</literal>
                    <literal type="string">"host: %s"</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info for / does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"info for /"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info for missing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <literal type="string">"BOGUS"</literal></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"fields=size%2Cupdated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">404</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
                    <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"BOGUS"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"file does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info for file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <literal type="string">"subdir/file1.txt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"fields=size%2Cupdated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"{\"size\":\"9999\",\"updated\":\"2015-10-21T07:28:00.000Z\"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>StorageInfo</name></type> <name>info</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"subdir/file1.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypeFile</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>timeModified</name></name></expr></argument>, <argument><expr><literal type="number">1445412480</literal></expr></argument>, <argument><expr><literal type="string">"check time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info check existence only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <literal type="string">"subdir/file2.txt"</literal></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"fields="</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"{}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>info</name></expr></argument>, <argument><expr><call><name>storageInfoP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"subdir/file2.txt"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelExists</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"file exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>exists</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>storageTypeFile</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check exists"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>timeModified</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list basic level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>query</name> <operator>=</operator>
                        <literal type="string">"delimiter=%2F&amp;fields=nextPageToken%2Cprefixes%2Citems%28name%2Csize%2Cupdated%29&amp;prefix=path%2Fto%2F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"{"</literal>
                        <literal type="string">"  \"prefixes\": ["</literal>
                        <literal type="string">"     \"path/to/test_path/\""</literal>
                        <literal type="string">"  ],"</literal>
                        <literal type="string">"  \"items\": ["</literal>
                        <literal type="string">"    {"</literal>
                        <literal type="string">"      \"name\": \"path/to/test_file\","</literal>
                        <literal type="string">"      \"size\": \"787\","</literal>
                        <literal type="string">"      \"updated\": \"2009-10-12T17:50:30.123Z\""</literal>
                        <literal type="string">"    }"</literal>
                        <literal type="string">"  ]"</literal>
                        <literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>storageNewItrP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>errorOnMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
                    <argument><expr><literal type="string">"assertion '!param.errorOnMissing || storageFeature(this, storageFeaturePath)' failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
                    <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"/path/to"</literal></expr></argument>,
                    <argument><expr><literal type="string">"test_file {s=787, t=1255369830}\n"</literal>
                    <literal type="string">"test_path/\n"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelBasic</name></expr></argument>, <argument><expr><operator>.</operator><name>noRecurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list exists level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"delimiter=%2F&amp;fields=nextPageToken%2Cprefixes%2Citems%28name%29"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"{"</literal>
                        <literal type="string">"  \"prefixes\": ["</literal>
                        <literal type="string">"     \"path1/\""</literal>
                        <literal type="string">"  ],"</literal>
                        <literal type="string">"  \"items\": ["</literal>
                        <literal type="string">"    {"</literal>
                        <literal type="string">"      \"name\": \"test1.txt\""</literal>
                        <literal type="string">"    }"</literal>
                        <literal type="string">"  ]"</literal>
                        <literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
                    <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>,
                    <argument><expr><literal type="string">"path1/\n"</literal>
                    <literal type="string">"test1.txt\n"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>noRecurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list a file in root with expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"delimiter=%2F&amp;fields=nextPageToken%2Cprefixes%2Citems%28name%29&amp;prefix=test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"{"</literal>
                        <literal type="string">"  \"items\": ["</literal>
                        <literal type="string">"    {"</literal>
                        <literal type="string">"      \"name\": \"test1.txt\""</literal>
                        <literal type="string">"    }"</literal>
                        <literal type="string">"  ]"</literal>
                        <literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
                    <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>,
                    <argument><expr><literal type="string">"test1.txt\n"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>noRecurse</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>expression</name> <operator>=</operator> <literal type="string">"^test.*$"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list files with continuation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"delimiter=%2F&amp;fields=nextPageToken%2Cprefixes%2Citems%28name%29&amp;prefix=path%2Fto%2F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"{"</literal>
                        <literal type="string">"  \"nextPageToken\": \"ueGx\","</literal>
                        <literal type="string">"  \"prefixes\": ["</literal>
                        <literal type="string">"     \"path/to/path1/\""</literal>
                        <literal type="string">"  ],"</literal>
                        <literal type="string">"  \"items\": ["</literal>
                        <literal type="string">"    {"</literal>
                        <literal type="string">"      \"name\": \"path/to/test1.txt\""</literal>
                        <literal type="string">"    },"</literal>
                        <literal type="string">"    {"</literal>
                        <literal type="string">"      \"name\": \"path/to/test2.txt\""</literal>
                        <literal type="string">"    }"</literal>
                        <literal type="string">"  ]"</literal>
                        <literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"delimiter=%2F&amp;fields=nextPageToken%2Cprefixes%2Citems%28name%29&amp;pageToken=ueGx&amp;prefix=path%2Fto%2F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"{"</literal>
                        <literal type="string">"  \"prefixes\": ["</literal>
                        <literal type="string">"     \"path/to/path2/\""</literal>
                        <literal type="string">"  ],"</literal>
                        <literal type="string">"  \"items\": ["</literal>
                        <literal type="string">"    {"</literal>
                        <literal type="string">"      \"name\": \"path/to/test3.txt\""</literal>
                        <literal type="string">"    }"</literal>
                        <literal type="string">"  ]"</literal>
                        <literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
                    <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"/path/to"</literal></expr></argument>,
                    <argument><expr><literal type="string">"path1/\n"</literal>
                    <literal type="string">"path2/\n"</literal>
                    <literal type="string">"test1.txt\n"</literal>
                    <literal type="string">"test2.txt\n"</literal>
                    <literal type="string">"test3.txt\n"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>noRecurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"list files with expression"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"delimiter=%2F&amp;fields=nextPageToken%2Cprefixes%2Citems%28name%29&amp;prefix=path%2Fto%2Ftest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"{"</literal>
                        <literal type="string">"  \"prefixes\": ["</literal>
                        <literal type="string">"     \"path/to/test1.path/\","</literal>
                        <literal type="string">"     \"path/to/test2.path/\""</literal>
                        <literal type="string">"  ],"</literal>
                        <literal type="string">"  \"items\": ["</literal>
                        <literal type="string">"    {"</literal>
                        <literal type="string">"      \"name\": \"path/to/test1.txt\""</literal>
                        <literal type="string">"    },"</literal>
                        <literal type="string">"    {"</literal>
                        <literal type="string">"      \"name\": \"path/to/test2.txt\""</literal>
                        <literal type="string">"    },"</literal>
                        <literal type="string">"    {"</literal>
                        <literal type="string">"      \"name\": \"path/to/test3.txt\""</literal>
                        <literal type="string">"    }"</literal>
                        <literal type="string">"  ]"</literal>
                        <literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_STORAGE_LIST</name><argument_list>(
                    <argument><expr><name>storage</name></expr></argument>, <argument><expr><literal type="string">"/path/to"</literal></expr></argument>,
                    <argument><expr><literal type="string">"test1.path\n"</literal>
                    <literal type="string">"test1.txt\n"</literal>
                    <literal type="string">"test3.txt\n"</literal></expr></argument>,
                    <argument><expr><operator>.</operator><name>level</name> <operator>=</operator> <name>storageInfoLevelExists</name></expr></argument>, <argument><expr><operator>.</operator><name>noRecurse</name> <operator>=</operator> <name>true</name></expr></argument>, <argument><expr><operator>.</operator><name>expression</name> <operator>=</operator> <literal type="string">"^test(1|3)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"switch to token auth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptClose</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoGcsKeyType</name></expr></argument>, <argument><expr><literal type="string">"token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoGcsKey</name></expr></argument>, <argument><expr><name>TEST_TOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchivePush</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>storageRepoGet</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get repo storage"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>hrnServerScriptAccept</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE</name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <literal type="string">"path/to/test.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path/to/test.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove missing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE</name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <literal type="string">"path/to/missing.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>code</name> <operator>=</operator> <literal type="number">404</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storageRemoveP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path/to/missing.txt"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove files from root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"fields=nextPageToken%2Cprefixes%2Citems%28name%29"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"{"</literal>
                        <literal type="string">"  \"prefixes\": ["</literal>
                        <literal type="string">"     \"not-deleted/\""</literal>
                        <literal type="string">"  ],"</literal>
                        <literal type="string">"  \"items\": ["</literal>
                        <literal type="string">"    {"</literal>
                        <literal type="string">"      \"name\": \"path/to/test1.txt\""</literal>
                        <literal type="string">"    },"</literal>
                        <literal type="string">"    {"</literal>
                        <literal type="string">"      \"name\": \"path1/xxx.zzz\""</literal>
                        <literal type="string">"    }"</literal>
                        <literal type="string">"  ]"</literal>
                        <literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE</name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <literal type="string">"path/to/test1.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE</name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <literal type="string">"path1/xxx.zzz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove files from path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"fields=nextPageToken%2Cprefixes%2Citems%28name%29&amp;prefix=path%2F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(
                    <argument><expr><name>service</name></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator>
                        <literal type="string">"{"</literal>
                        <literal type="string">"  \"prefixes\": ["</literal>
                        <literal type="string">"     \"path/not-deleted/\""</literal>
                        <literal type="string">"  ],"</literal>
                        <literal type="string">"  \"items\": ["</literal>
                        <literal type="string">"    {"</literal>
                        <literal type="string">"      \"name\": \"path/test1.txt\""</literal>
                        <literal type="string">"    },"</literal>
                        <literal type="string">"    {"</literal>
                        <literal type="string">"      \"name\": \"path/path1/xxx.zzz\""</literal>
                        <literal type="string">"    }"</literal>
                        <literal type="string">"  ]"</literal>
                        <literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE</name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <literal type="string">"path/test1.txt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE</name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <literal type="string">"path/path1/xxx.zzz"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remove files in empty subpath (nothing to do)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>testRequestP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <literal type="string">"fields=nextPageToken%2Cprefixes%2Citems%28name%29&amp;prefix=path%2F"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>testResponseP</name><argument_list>(<argument><expr><name>service</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <literal type="string">"{}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>storagePathRemoveP</name><argument_list>(<argument><expr><name>storage</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/path"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remove"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>hrnServerScriptEnd</name><argument_list>(<argument><expr><name>service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
