<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/config/parseTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Configuration Parse
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_BACKREST_EXE</name></cpp:macro>                                           <cpp:value>"pgbackrest"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_COMMAND_ARCHIVE_GET</name></cpp:macro>                                    <cpp:value>"archive-get"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_COMMAND_BACKUP</name></cpp:macro>                                         <cpp:value>"backup"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_COMMAND_HELP</name></cpp:macro>                                           <cpp:value>"help"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_COMMAND_RESTORE</name></cpp:macro>                                        <cpp:value>"restore"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_COMMAND_VERSION</name></cpp:macro>                                        <cpp:value>"version"</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Option find test -- this is done a lot in the deprecated tests
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testOptionFind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optionName</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>optionKeyIdx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>negate</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>reset</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>deprecated</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>CfgParseOptionResult</name></type> <name>option</name> <init>= <expr><call><name>cfgParseOptionP</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>optionName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>option</name><operator>.</operator><name>found</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"check %s found"</literal></expr></argument>, <argument><expr><name>optionName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>option</name><operator>.</operator><name>id</name></name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"check %s id %u"</literal></expr></argument>, <argument><expr><name>optionName</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>option</name><operator>.</operator><name>keyIdx</name></name></expr></argument>, <argument><expr><name>optionKeyIdx</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"check %s key idx %u"</literal></expr></argument>, <argument><expr><name>optionName</name></expr></argument>, <argument><expr><name>optionKeyIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>option</name><operator>.</operator><name>negate</name></name></expr></argument>, <argument><expr><name>negate</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"check %s negate %d"</literal></expr></argument>, <argument><expr><name>optionName</name></expr></argument>, <argument><expr><name>negate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>option</name><operator>.</operator><name>reset</name></name></expr></argument>, <argument><expr><name>reset</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"check %s reset %d"</literal></expr></argument>, <argument><expr><name>optionName</name></expr></argument>, <argument><expr><name>reset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>option</name><operator>.</operator><name>deprecated</name></name></expr></argument>, <argument><expr><name>deprecated</name></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"check %s deprecated %d"</literal></expr></argument>, <argument><expr><name>optionName</name></expr></argument>, <argument><expr><name>deprecated</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTestWrite</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"size"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"check size of parse structures"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ParseRuleOption</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">40</literal></expr> </then><else>: <expr><literal type="number">28</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"ParseRuleOption size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ParseRuleOptionDeprecate</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><ternary><condition><expr><call><name>TEST_64BIT</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="string">"ParseRuleOptionDeprecate size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Each pack must be &lt;= 127 bytes because only one varint byte is used for the size. The compiler will catch packs larger</comment>
        <comment type="line">// than 127 bytes and in that case PARSE_RULE_PACK_SIZE must be increased. There would be little cost to increasing this as</comment>
        <comment type="line">// a preventative measure but a check would still be required, so may as well be as efficient as possible.</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"gather pack size statistics"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>packTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>packMaxSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>packMaxName</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>packTotalSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optIdx</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr>;</condition> <incr><expr><name>optIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><name>packTotal</name> <operator>+=</operator> <name><name>parseRuleOption</name><index>[<expr><name>optIdx</name></expr>]</index></name><operator>.</operator><name>pack</name> <operator>!=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>packTotalSize</name> <operator>+=</operator> <name><name>parseRuleOption</name><index>[<expr><name>optIdx</name></expr>]</index></name><operator>.</operator><name>packSize</name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>parseRuleOption</name><index>[<expr><name>optIdx</name></expr>]</index></name><operator>.</operator><name>packSize</name> <operator>&gt;</operator> <name>packMaxSize</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>packMaxName</name> <operator>=</operator> <name><name>parseRuleOption</name><index>[<expr><name>optIdx</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>packMaxSize</name> <operator>=</operator> <name><name>parseRuleOption</name><index>[<expr><name>optIdx</name></expr>]</index></name><operator>.</operator><name>packSize</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>TEST_LOG_FMT</name><argument_list>(<argument><expr><literal type="string">"total size of option packs is %zu bytes"</literal></expr></argument>, <argument><expr><name>packTotalSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_LOG_FMT</name><argument_list>(<argument><expr><literal type="string">"avg option pack size is %0.2f bytes"</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>packTotalSize</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>packTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_LOG_FMT</name><argument_list>(<argument><expr><literal type="string">"max option pack size is '%s' at %zu bytes"</literal></expr></argument>, <argument><expr><name>packMaxName</name></expr></argument>, <argument><expr><name>packMaxSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_LOG_FMT</name><argument_list>(<argument><expr><literal type="string">"total options with packs is %u (out of %d options) "</literal></expr></argument>, <argument><expr><name>packTotal</name></expr></argument>, <argument><expr><name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Config functions that are not tested with parse</comment>
    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cfg*()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"config command defaults to none before cfgInit()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgCommand</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfgCmdNone</name></expr></argument>, <argument><expr><literal type="string">"command is none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// config and config-include-path options</comment>
    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"cfgFileLoad()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>configFile</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/test.config"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>configIncludePath</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/conf.d"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"mkdir -m 750 %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"check old config file constants"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><name>PGBACKREST_CONFIG_ORIG_PATH_FILE</name></expr></argument>, <argument><expr><literal type="string">"/etc/pgbackrest.conf"</literal></expr></argument>, <argument><expr><literal type="string">"check old config path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name>PGBACKREST_CONFIG_ORIG_PATH_FILE_STR</name></expr></argument>, <argument><expr><literal type="string">"/etc/pgbackrest.conf"</literal></expr></argument>, <argument><expr><literal type="string">"check old config path str"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"confirm same behavior with multiple config include files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfig</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfigIncludePath</name></expr></argument>, <argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawNegate</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawReset</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawReset</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptBackupStandby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePut</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTestWrite</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(
                <argument><expr><literal type="string">"[global]\n"</literal>
                <literal type="string">"compress-level=3\n"</literal>
                <literal type="string">"spool-path=/path/to/spool\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePut</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTestWrite</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/global-backup.conf"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(
                <argument><expr><literal type="string">"[global:backup]\n"</literal>
                <literal type="string">"repo1-hardlink=y\n"</literal>
                <literal type="string">"bogus=bogus\n"</literal>
                <literal type="string">"no-delta=y\n"</literal>
                <literal type="string">"reset-delta=y\n"</literal>
                <literal type="string">"archive-copy=y\n"</literal>
                <literal type="string">"online=y\n"</literal>
                <literal type="string">"pg1-path=/not/path/to/db\n"</literal>
                <literal type="string">"backup-standby=y\n"</literal>
                <literal type="string">"buffer-size=65536\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePut</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTestWrite</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/db-backup.conf"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(
                <argument><expr><literal type="string">"[db:backup]\n"</literal>
                <literal type="string">"delta=n\n"</literal>
                <literal type="string">"recovery-option=a=b\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePut</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTestWrite</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/stanza.db.conf"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(
                <argument><expr><literal type="string">"[db]\n"</literal>
                <literal type="string">"pg1-host=db\n"</literal>
                <literal type="string">"pg1-path=/path/to/db\n"</literal>
                <literal type="string">"recovery-option=c=d\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>TEST_COMMAND_BACKUP</name> <literal type="string">" command with config-include"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: configuration file contains option 'recovery-option' invalid for section 'db:backup'\n"</literal>
            <literal type="string">"P00   WARN: configuration file contains invalid option 'bogus'\n"</literal>
            <literal type="string">"P00   WARN: configuration file contains negate option 'no-delta'\n"</literal>
            <literal type="string">"P00   WARN: configuration file contains reset option 'reset-delta'\n"</literal>
            <literal type="string">"P00   WARN: configuration file contains command-line only option 'online'\n"</literal>
            <literal type="string">"P00   WARN: configuration file contains stanza-only option 'pg1-path' in global section 'global:backup'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionTest</name><argument_list>(<argument><expr><name>cfgOptPgHost</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"pg1-host is not set (command line reset override)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>, <argument><expr><literal type="string">"pg1-path is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceConfig</name></expr></argument>, <argument><expr><literal type="string">"pg1-path is source config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptDelta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"delta not is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptDelta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceConfig</name></expr></argument>, <argument><expr><literal type="string">"delta is source config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptArchiveCheck</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"archive-check is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptArchiveCopy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"archive-copy is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptRepoHardlink</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"repo-hardlink is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptRepoHardlink</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceConfig</name></expr></argument>, <argument><expr><literal type="string">"repo-hardlink is source config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionInt</name><argument_list>(<argument><expr><name>cfgOptCompressLevel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"compress-level is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptCompressLevel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceConfig</name></expr></argument>, <argument><expr><literal type="string">"compress-level is source config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptBackupStandby</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"backup-standby not is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptBackupStandby</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceDefault</name></expr></argument>, <argument><expr><literal type="string">"backup-standby is source default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionInt64</name><argument_list>(<argument><expr><name>cfgOptBufferSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">65536</literal></expr></argument>, <argument><expr><literal type="string">"buffer-size is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptBufferSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceConfig</name></expr></argument>, <argument><expr><literal type="string">"backup-standby is source config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"rename conf files - ensure read of conf extension only is attempted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"mv %s/db-backup.conf %s/db-backup.conf.save"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"mv %s/global-backup.conf %s/global-backup.confsave"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set up defaults</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>backupCmdDefConfigValue</name> <init>=
            <expr><operator>(</operator><specifier>const</specifier> <name>String</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>parseRuleValueStr</name><index>[<expr><name>parseRuleValStrCFGOPTDEF_CONFIG_PATH_SP_QT_FS_QT_SP_PROJECT_CONFIG_FILE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>backupCmdDefConfigInclPathValue</name> <init>=
            <expr><operator>(</operator><specifier>const</specifier> <name>String</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>parseRuleValueStr</name><index>[<expr><name>parseRuleValStrCFGOPTDEF_CONFIG_PATH_SP_QT_FS_QT_SP_PROJECT_CONFIG_INCLUDE_PATH</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>oldConfigDefault</name> <init>= <macro><name>STRDEF</name><argument_list>(<argument>TEST_PATH PGBACKREST_CONFIG_ORIG_PATH_FILE</argument>)</argument_list></macro></init></decl>;</decl_stmt>

        <comment type="line">// Create the option structure and initialize with 0</comment>
        <decl_stmt><decl><type><name>ParseOption</name></type> <name><name>parseOptionList</name><index>[<expr><name>CFG_OPTION_TOTAL</name></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name>indexListTotal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name>indexList</name> <operator>=</operator> <call><name>memNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ParseOptionValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ParseOptionValue</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>found</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceParam</name></expr>,
            <expr><operator>.</operator><name>valueList</name> <operator>=</operator> <name>value</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name>indexListTotal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name>indexList</name> <operator>=</operator> <call><name>memNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ParseOptionValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ParseOptionValue</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>found</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceParam</name></expr>,
            <expr><operator>.</operator><name>valueList</name> <operator>=</operator> <name>value</name></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cfgFileLoadPart</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check null part"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>backupCmdDefConfigValue</name></expr></argument>, <argument><expr><name>backupCmdDefConfigInclPathValue</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"[global]\n"</literal>
            <literal type="string">"compress-level=3\n"</literal>
            <literal type="string">"spool-path=/path/to/spool\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db]\n"</literal>
            <literal type="string">"pg1-host=db\n"</literal>
            <literal type="string">"pg1-path=/path/to/db\n"</literal>
            <literal type="string">"recovery-option=c=d\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"config-include-path with .conf files and non-.conf files"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pass invalid values"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// --config valid, --config-include-path invalid (does not exist)</comment>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valueList</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>backupCmdDefConfigValue</name></expr></argument>, <argument><expr><name>backupCmdDefConfigInclPathValue</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>PathMissingError</name></expr></argument>, <argument><expr><literal type="string">"unable to list file info for missing path '/BOGUS'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// --config-include-path valid, --config invalid (does not exist)</comment>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valueList</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/"</literal> <name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valueList</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>backupCmdDefConfigValue</name></expr></argument>, <argument><expr><name>backupCmdDefConfigInclPathValue</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>FileMissingError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_READ_MISSING</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/BOGUS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strLstFree</name><argument_list>(<argument><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valueList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstFree</name><argument_list>(<argument><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valueList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"neither config nor config-include-path passed as parameter (defaults but none exist)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceDefault</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceDefault</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>backupCmdDefConfigValue</name></expr></argument>, <argument><expr><name>backupCmdDefConfigInclPathValue</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"config default, config-include-path default but nothing to read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"config not passed as parameter (config does not exist), config-include-path passed - only include read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceDefault</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceParam</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valueList</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>backupCmdDefConfigValue</name></expr></argument>, <argument><expr><name>backupCmdDefConfigInclPathValue</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"pg1-host=db\n"</literal>
            <literal type="string">"pg1-path=/path/to/db\n"</literal>
            <literal type="string">"recovery-option=c=d\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"config default and doesn't exist, config-include-path passed read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"config and config-include-path are 'default' with files existing - old location ignored"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// config file exists in both current default and old default location - old location ignored.</comment>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceDefault</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceDefault</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"mkdir -m 750 %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strPath</name><argument_list>(<argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>storagePut</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTestWrite</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(
                <argument><expr><literal type="string">"[global:backup]\n"</literal>
                <literal type="string">"buffer-size=65536\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Pass actual location of config files as "default" - not setting valueList above, so these are the only possible values</comment>
        <comment type="line">// to choose.</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>, <argument><expr><name>configIncludePath</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"[global]\n"</literal>
            <literal type="string">"compress-level=3\n"</literal>
            <literal type="string">"spool-path=/path/to/spool\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db]\n"</literal>
            <literal type="string">"pg1-host=db\n"</literal>
            <literal type="string">"pg1-path=/path/to/db\n"</literal>
            <literal type="string">"recovery-option=c=d\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"config and config-include-path default, files appended, original config not read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"config not passed (only old default exists), config-include-path passed - old default and include read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Config not passed as parameter - config does not exist in new default but does exist in old default. config-include-path</comment>
        <comment type="line">// passed as parameter - both include and old default read</comment>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceDefault</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceParam</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valueList</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>backupCmdDefConfigValue</name></expr></argument>, <argument><expr><name>backupCmdDefConfigInclPathValue</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"[global:backup]\n"</literal>
            <literal type="string">"buffer-size=65536\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db]\n"</literal>
            <literal type="string">"pg1-host=db\n"</literal>
            <literal type="string">"pg1-path=/path/to/db\n"</literal>
            <literal type="string">"recovery-option=c=d\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"config old default read, config-include-path passed read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"files read only from include path and not current or old config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// --no-config and config-include-path passed as parameter (files read only from include path and not current or old config)</comment>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceParam</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>negate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceParam</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valueList</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>backupCmdDefConfigValue</name></expr></argument>, <argument><expr><name>backupCmdDefConfigInclPathValue</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"pg1-host=db\n"</literal>
            <literal type="string">"pg1-path=/path/to/db\n"</literal>
            <literal type="string">"recovery-option=c=d\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"--no-config, only config-include-path read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"--no-config and config-include-path default exists with files - nothing to read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceParam</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>negate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceDefault</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>backupCmdDefConfigValue</name></expr></argument>, <argument><expr><name>configIncludePath</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"--no-config, config-include-path default, nothing read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"config passed and config-include-path default exists with files - only config read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceParam</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>negate</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valueList</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceDefault</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>backupCmdDefConfigValue</name></expr></argument>, <argument><expr><name>configIncludePath</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"[global]\n"</literal>
            <literal type="string">"compress-level=3\n"</literal>
            <literal type="string">"spool-path=/path/to/spool\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"config param specified, config-include-path default, only config read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"config-include-path and new config default read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// config new default and config-include-path passed - both exists with files. config-include-path &amp; new config default read</comment>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceDefault</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceParam</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valueList</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>, <argument><expr><name>backupCmdDefConfigInclPathValue</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"[global]\n"</literal>
            <literal type="string">"compress-level=3\n"</literal>
            <literal type="string">"spool-path=/path/to/spool\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db]\n"</literal>
            <literal type="string">"pg1-host=db\n"</literal>
            <literal type="string">"pg1-path=/path/to/db\n"</literal>
            <literal type="string">"recovery-option=c=d\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"config new default exists with files, config-include-path passed, default config and config-include-path read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"config-path overrides - config and config-include-path are 'default'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceDefault</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceDefault</name></expr>;</expr_stmt>

        <comment type="line">// File exists in old default config location but not in current default.</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>backupCmdDefConfigValue</name></expr></argument>, <argument><expr><name>configIncludePath</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"[global:backup]\n"</literal>
            <literal type="string">"buffer-size=65536\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db]\n"</literal>
            <literal type="string">"pg1-host=db\n"</literal>
            <literal type="string">"pg1-path=/path/to/db\n"</literal>
            <literal type="string">"recovery-option=c=d\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"config-path override - config-include-path files and old config default read since no config in current path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Pass --config-path</comment>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigPath</name></expr>]</index></name><operator>.</operator><name>indexListTotal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigPath</name></expr>]</index></name><operator>.</operator><name>indexList</name> <operator>=</operator> <call><name>memNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ParseOptionValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigPath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ParseOptionValue</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>found</name> <operator>=</operator> <name>true</name></expr>,
            <expr><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceParam</name></expr>,
            <expr><operator>.</operator><name>valueList</name> <operator>=</operator> <name>value</name></expr>,
        }</block></expr>;</expr_stmt>

        <comment type="line">// Override default paths for config and config-include-path - but no pgbackrest.conf file in override path only in old</comment>
        <comment type="line">// default so ignored</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>backupCmdDefConfigValue</name></expr></argument>, <argument><expr><name>backupCmdDefConfigInclPathValue</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"[db]\n"</literal>
            <literal type="string">"pg1-host=db\n"</literal>
            <literal type="string">"pg1-path=/path/to/db\n"</literal>
            <literal type="string">"recovery-option=c=d\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"config-path override: config-include-path files read but config not read - does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Pass --config</comment>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceParam</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>negate</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valueList</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

        <comment type="line">// Passing --config and --config-path - default config-include-path overwritten and config is required and is loaded and</comment>
        <comment type="line">// config-include-path files will attempt to be loaded but not required</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>backupCmdDefConfigValue</name></expr></argument>, <argument><expr><name>backupCmdDefConfigInclPathValue</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"[global]\n"</literal>
            <literal type="string">"compress-level=3\n"</literal>
            <literal type="string">"spool-path=/path/to/spool\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db]\n"</literal>
            <literal type="string">"pg1-host=db\n"</literal>
            <literal type="string">"pg1-path=/path/to/db\n"</literal>
            <literal type="string">"recovery-option=c=d\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"config-path changed config-include-path default - files exist, config and config includes read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigPath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valueList</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

        <comment type="line">// Passing --config and bogus --config-path - default config-include-path overwritten, config is required and is loaded and</comment>
        <comment type="line">// config-include-path files will attempt to be loaded but doesn't exist - no error since not required</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>backupCmdDefConfigValue</name></expr></argument>, <argument><expr><name>backupCmdDefConfigInclPathValue</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"[global]\n"</literal>
            <literal type="string">"compress-level=3\n"</literal>
            <literal type="string">"spool-path=/path/to/spool\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"config-path changed config-include-path default but directory does not exist - only config read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Copy the configFile to pgbackrest.conf (default is /etc/pgbackrest/pgbackrest.conf and new value is testPath so copy the</comment>
        <comment type="line">// config file (that was not read in the previous test) to pgbackrest.conf so it will be read by the override</comment>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"cp %s "</literal> <name>TEST_PATH</name> <literal type="string">"/pgbackrest.conf"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceDefault</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>negate</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceDefault</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigPath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valueList</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

        <comment type="line">// Override default paths for config and config-include-path with --config-path</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>backupCmdDefConfigValue</name></expr></argument>, <argument><expr><name>backupCmdDefConfigInclPathValue</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"[global]\n"</literal>
            <literal type="string">"compress-level=3\n"</literal>
            <literal type="string">"spool-path=/path/to/spool\n"</literal>
            <literal type="string">"\n"</literal>
            <literal type="string">"[db]\n"</literal>
            <literal type="string">"pg1-host=db\n"</literal>
            <literal type="string">"pg1-path=/path/to/db\n"</literal>
            <literal type="string">"recovery-option=c=d\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"config-path override: config-include-path and config file read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Clear config-path</comment>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigPath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigPath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceDefault</name></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"config default and config-include-path passed, no config files in the include path - only in the default path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// rm command is split here because code counter is confused by what looks like a comment</comment>
        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"rm -rf %s/"</literal> <literal type="string">"*"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceDefault</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceParam</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valueList</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>, <argument><expr><name>backupCmdDefConfigInclPathValue</name></expr></argument>, <argument><expr><name>oldConfigDefault</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"[global]\n"</literal>
            <literal type="string">"compress-level=3\n"</literal>
            <literal type="string">"spool-path=/path/to/spool\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"config default exists with files but config-include-path path passed is empty - only config read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">//--------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"config default and config-include-path passed, only empty file in include path, nothing in config defaults"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_SYSTEM_FMT</name><argument_list>(<argument><expr><literal type="string">"touch %s/empty.conf"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>configIncludePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfig</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceDefault</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>source</name> <operator>=</operator> <name>cfgSourceParam</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parseOptionList</name><index>[<expr><name>cfgOptConfigIncludePath</name></expr>]</index></name><operator>.</operator><name><name>indexList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>valueList</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgFileLoad</name><argument_list>(
                <argument><expr><name>storageTest</name></expr></argument>, <argument><expr><name>parseOptionList</name></expr></argument>, <argument><expr><name>backupCmdDefConfigValue</name></expr></argument>, <argument><expr><name>backupCmdDefConfigInclPathValue</name></expr></argument>, <argument><expr><name>backupCmdDefConfigValue</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"config default does not exist, config-include-path passed but only empty conf file - nothing read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"convertToByte()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cfgParseSizeQualifier</name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"'w' is not a valid size qualifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgParseSize</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"10B"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="string">"10B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgParseSize</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1k"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"1k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgParseSize</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1KiB"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"1KiB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgParseSize</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"5G"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">5</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"5G"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgParseSize</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"3Tb"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">3</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"3Tb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgParseSize</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"11"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="string">"11 - no qualifier, default bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgParseSize</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"4pB"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4503599627370496</literal></expr></argument>, <argument><expr><literal type="string">"4pB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgParseSize</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"15MB"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">15</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="string">"15MB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"configParse()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>configFile</name> <init>= <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>TEST_PATH</name> <literal type="string">"/test.config"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"option resolve list contains an entry for every option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(
            <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>optionResolveOrder</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CFG_OPTION_TOTAL</name></expr></argument>,
            <argument><expr><literal type="string">"check that the option resolve list contains an entry for every option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on single - option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"-bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option '-bogus' must begin with --"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when option argument is invalid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"boolean option '--online' argument must be 'y' or 'n'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"boolean option with negation argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptNeutralUmask</name></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>CFGCMD_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionRequiredError</name></expr></argument>,
            <argument><expr><literal type="string">"backup command requires option: stanza"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"boolean option with affirmative argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptNeutralUmask</name></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>CFGCMD_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionRequiredError</name></expr></argument>,
            <argument><expr><literal type="string">"backup command requires option: stanza"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when negated boolean option with negative argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--no-neutral-umask=n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>CFGCMD_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'no-neutral-umask' does not allow an argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when negated boolean option with affirmative argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--no-online=y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>CFGCMD_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'no-online' does not allow an argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when argumentless option is passed with an argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--reset-pg1-host=xxx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>CFGCMD_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'reset-pg1-host' does not allow an argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CommandInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"invalid command 'BOGUS'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"valid command and role but invalid command/role combination"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>CFGCMD_BACKUP</name> <literal type="string">":"</literal> <name>CONFIG_COMMAND_ROLE_ASYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CommandInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"invalid command/role combination 'backup:async'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid command and role"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>BOGUS_STR</name> <literal type="string">":"</literal> <name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CommandInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"invalid command 'BOGUS:BOGUS'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on ambiguous partial option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>, <argument><expr><literal type="string">"invalid option '--c'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on ambiguous deprecated partial option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--retention"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"invalid option '--retention'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on spaces in option name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">" --config=/path/to"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CommandInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"invalid command ' --config=/path/to'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--config =/path/to"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"invalid option '--config =/path/to'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--"</literal> <name>BOGUS_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"invalid option '--BOGUS'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error if option exceeds maximum size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>char</name></type> <name><name>optionMax</name><index>[<expr><name>OPTION_NAME_SIZE_MAX</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optionMaxIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optionMaxIdx</name> <operator>&lt;</operator> <name>OPTION_NAME_SIZE_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>optionMaxIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>optionMax</name><index>[<expr><name>optionMaxIdx</name></expr>]</index></name> <operator>=</operator> <literal type="char">'X'</literal></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><name><name>optionMax</name><index>[<expr><name>OPTION_NAME_SIZE_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--%s"</literal></expr></argument>, <argument><expr><name>optionMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option '%s' exceeds maximum size of 64"</literal></expr></argument>, <argument><expr><name>optionMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error if option cannot be negated or reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--no-force"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'no-force' cannot be negated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--reset-force"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'reset-force' cannot be reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error if option exceeds key max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--pg257-path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'pg257-path' key exceeds maximum of 256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error if option begins with a number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--257-path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option '257-path' cannot begin with a number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error if option begins with a dash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"---pg1-path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option '-pg1-path' cannot begin with a dash"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error if unindexed option cannot have an index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--compress77-type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'compress77-type' cannot have an index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--retention128-full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"deprecated option 'retention128-full' cannot have an index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error if indexed option does not have an index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--repo-storage-ca-file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'repo-storage-ca-file' requires an index\n"</literal>
            <literal type="string">"HINT: add the required index, e.g. repo1-storage-ca-file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--repo-azure-ca-path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"deprecated option 'repo-azure-ca-path' requires an index\n"</literal>
            <literal type="string">"HINT: add the required index, e.g. repo1-azure-ca-path.\n"</literal>
            <literal type="string">"HINT: consider using the non-deprecated name, e.g. repo1-storage-ca-path."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"allow option parse without an index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgParseOptionP</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"repo-storage-ca-file"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissingIndex</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>found</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
            <argument><expr><call><name>cfgParseOptionP</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"repo-azure-ca-path"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>ignoreMissingIndex</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call><operator>.</operator><name>found</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"deprecated option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--pg1-host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option '--pg1-host' requires an argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"parameters passed for command that does not allow parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"param1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ParamInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"command does not allow parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"help ignores parameters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"param1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ignore params when help command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"duplicate negation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawNegate</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawNegate</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'online' is negated multiple times"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"duplicate reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawReset</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawReset</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'pg1-host' is reset multiple times"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"option set and negated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawNegate</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfig</name></expr></argument>, <argument><expr><literal type="string">"/etc/config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'config' cannot be set and negated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"option set and reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawReset</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLogPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLogPath</name></expr></argument>, <argument><expr><literal type="string">"/var/log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'log-path' cannot be set and reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"option negated and reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawNegate</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawReset</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'delta' cannot be negated and reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// reverse the option order</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawReset</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawNegate</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'delta' cannot be negated and reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"duplicate options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDelta</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDelta</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'delta' cannot be set multiple times"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptCompressLevel</name></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptCompressLevel</name></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'compress-level' cannot be set multiple times"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"command missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CommandRequiredError</name></expr></argument>, <argument><expr><literal type="string">"no command found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid values"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptManifestSaveThreshold</name></expr></argument>, <argument><expr><literal type="string">"123Q"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"'123Q' is not valid for 'manifest-save-threshold' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptManifestSaveThreshold</name></expr></argument>, <argument><expr><literal type="string">"999999999999999999p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"'999999999999999999p' is not valid for 'manifest-save-threshold' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptManifestSaveThreshold</name></expr></argument>, <argument><expr><literal type="string">"999t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"'999t' is out of range for 'manifest-save-threshold' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"value missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"'' must be &gt;= 1 character for 'pg1-path' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid path values"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"'bogus' must begin with / for 'pg1-path' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--stanz=db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                          <comment type="line">// Partial option to test matching</comment>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/path1//path2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"'/path1//path2' cannot contain // for 'pg1-path' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/path1/path2//"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"'/path1/path2//' cannot contain // for 'pg1-path' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"non-default roles should not modify log levels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPg</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/path/to/1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"/path/to/2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcess</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRemoteType</name></expr></argument>, <argument><expr><name>protocolStorageTypeRepo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLogLevelStderr</name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>CFGCMD_BACKUP</name> <literal type="string">":"</literal> <name>CONFIG_COMMAND_ROLE_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnLogLevelStdOutSet</name><argument_list>(<argument><expr><name>logLevelError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnLogLevelStdErrSet</name><argument_list>(<argument><expr><name>logLevelError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"load local config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/path/to/2"</literal></expr></argument>, <argument><expr><literal type="string">"default pg-path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgCommandRole</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfgCmdRoleLocal</name></expr></argument>, <argument><expr><literal type="string">"command role is local"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgLockRequired</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"backup:local command does not require lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgCommandRoleName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup:local"</literal></expr></argument>, <argument><expr><literal type="string">"command/role name is backup:local"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>hrnLogLevelStdOut</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>logLevelError</name></expr></argument>, <argument><expr><literal type="string">"console logging is error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>hrnLogLevelStdErr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>logLevelError</name></expr></argument>, <argument><expr><literal type="string">"stderr logging is error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcess</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRemoteType</name></expr></argument>, <argument><expr><name>protocolStorageTypeRepo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLogLevelStderr</name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>CFGCMD_BACKUP</name> <literal type="string">":"</literal> <name>CONFIG_COMMAND_ROLE_REMOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnLogLevelStdOutSet</name><argument_list>(<argument><expr><name>logLevelError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnLogLevelStdErrSet</name><argument_list>(<argument><expr><name>logLevelError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"load remote config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgCommandRole</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfgCmdRoleRemote</name></expr></argument>, <argument><expr><literal type="string">"command role is remote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgParseCommandRoleStr</name><argument_list>(<argument><expr><name>cfgCmdRoleRemote</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"remote"</literal></expr></argument>, <argument><expr><literal type="string">"remote role name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>hrnLogLevelStdOut</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>logLevelError</name></expr></argument>, <argument><expr><literal type="string">"console logging is error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>hrnLogLevelStdErr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>logLevelError</name></expr></argument>, <argument><expr><literal type="string">"stderr logging is error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLogLevelStderr</name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>CFGCMD_ARCHIVE_GET</name> <literal type="string">":"</literal> <name>CONFIG_COMMAND_ROLE_ASYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnLogLevelStdOutSet</name><argument_list>(<argument><expr><name>logLevelError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnLogLevelStdErrSet</name><argument_list>(<argument><expr><name>logLevelError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"load async config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgCommandRole</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfgCmdRoleAsync</name></expr></argument>, <argument><expr><literal type="string">"command role is async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>hrnLogLevelStdOut</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>logLevelError</name></expr></argument>, <argument><expr><literal type="string">"console logging is error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>hrnLogLevelStdErr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>logLevelError</name></expr></argument>, <argument><expr><literal type="string">"stderr logging is error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>harnessLogLevelReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"required options missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionRequiredError</name></expr></argument>,
            <argument><expr><literal type="string">"backup command requires option: pg1-path\nHINT: does this stanza exist?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionRequiredError</name></expr></argument>,
            <argument><expr><literal type="string">"backup command requires option: stanza"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"command-line option not allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"s3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoS3Key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"xxx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoS3Bucket</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"xxx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoS3Endpoint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"xxx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'repo1-s3-key' is not allowed on the command-line\n"</literal>
            <literal type="string">"HINT: this option could expose secrets in the process list.\n"</literal>
            <literal type="string">"HINT: specify the option in a configuration file or an environment variable instead."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"dependent option missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawNegate</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoS3Bucket</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"xxx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'repo1-s3-bucket' not valid without option 'repo1-type' = 's3'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostUser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"xxx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'repo1-host-user' not valid without option 'repo1-host'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptForce</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'force' not valid without option 'no-online'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptSpoolPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/spool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_ARCHIVE_GET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'spool-path' not valid without option 'archive-async'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTargetExclusive</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'target-exclusive' not valid without option 'type' in ('lsn', 'time', 'xid')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"option invalid for command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRecoveryOption</name></expr></argument>, <argument><expr><literal type="string">"a=b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'recovery-option' not valid for command 'backup'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"option value invalid (string)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"^bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"'^bogus' is not allowed for 'type' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"option value invalid (size)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptBufferSize</name></expr></argument>, <argument><expr><literal type="string">"777"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"'777' is not allowed for 'buffer-size' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"option value not in allowed list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"'bogus' is not allowed for 'type' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"lower and upper bounds for integer ranges"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcessMax</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"'0' is out of range for 'process-max' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcessMax</name></expr></argument>, <argument><expr><literal type="string">"65536"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"'65536' is out of range for 'process-max' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"character value when integer expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcessMax</name></expr></argument>, <argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"'bogus' is not valid for 'process-max' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid time values"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>, <argument><expr><literal type="string">".01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"'.01' is out of range for 'protocol-timeout' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>, <argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"'bogus' is not valid for 'protocol-timeout' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"option as environment variables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"environment variable 'protocol-timeout' must have a value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgEnvRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptDelta</name></expr></argument>, <argument><expr><literal type="string">"x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"environment boolean option 'delta' must be 'y' or 'n'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgEnvRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptDelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"config file - invalid values"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfig</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTestWrite</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(
                <argument><expr><literal type="string">"[global]\n"</literal>
                <literal type="string">"delta=bogus\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"boolean option 'delta' must be 'y' or 'n'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfig</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTestWrite</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(
                <argument><expr><literal type="string">"[global]\n"</literal>
                <literal type="string">"delta=\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"section 'global', key 'delta' must have a value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"config file - duplicate deprecated/new option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfig</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTestWrite</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(
                <argument><expr><literal type="string">"[db]\n"</literal>
                <literal type="string">"pg1-path=/path/to/db\n"</literal>
                <literal type="string">"db-path=/also/path/to/db\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"configuration file contains duplicate options ('db-path', 'pg1-path') in section '[db]'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"config file - option set multiple times"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfig</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTestWrite</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(
                <argument><expr><literal type="string">"[db]\n"</literal>
                <literal type="string">"pg1-path=/path/to/db\n"</literal>
                <literal type="string">"pg1-path=/also/path/to/db\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'pg1-path' cannot be set multiple times"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Also test with a boolean option since this gets converted immediately and will blow up if it is multi</comment>
        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTestWrite</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(
                <argument><expr><literal type="string">"[db]\n"</literal>
                <literal type="string">"start-fast=y\n"</literal>
                <literal type="string">"start-fast=n\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'start-fast' cannot be set multiple times"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"test that log levels are set correctly when reset is enabled, then set them back to harness defaults"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnLogLevelStdOutSet</name><argument_list>(<argument><expr><name>logLevelOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnLogLevelStdErrSet</name><argument_list>(<argument><expr><name>logLevelOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"no command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgCommandHelp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"help is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgCommand</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfgCmdNone</name></expr></argument>, <argument><expr><literal type="string">"command is none"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>hrnLogLevelStdOut</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>logLevelWarn</name></expr></argument>, <argument><expr><literal type="string">"console logging is warn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>hrnLogLevelStdErr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>logLevelWarn</name></expr></argument>, <argument><expr><literal type="string">"stderr logging is warn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>harnessLogLevelReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"help command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"help command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgCommandHelp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"help is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgCommand</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfgCmdHelp</name></expr></argument>, <argument><expr><literal type="string">"command is help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>cfgCommandName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>, <argument><expr><literal type="string">"command name is help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"help for version command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgCommandHelp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"help is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgCommand</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfgCmdVersion</name></expr></argument>, <argument><expr><literal type="string">"command is version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"help command - should not fail on missing options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"help for backup command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgCommandHelp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"help is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgCommand</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><literal type="string">"command is backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"pg1-path is valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>cfgOptionVar</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg1-path is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"command argument valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_ARCHIVE_GET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"000000010000000200000003"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"/path/to/wal/RECOVERYWAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"command arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>cfgCommandParam</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"000000010000000200000003\n/path/to/wal/RECOVERYWAL\n"</literal></expr></argument>, <argument><expr><literal type="string">"check command arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"various configuration settings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawNegate</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawNegate</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--repo1-type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"s3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                  <comment type="line">// Argument for the option above</comment>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoS3Bucket</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">" test "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoS3Endpoint</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoS3Region</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoS3Key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"xxx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRawZ</name><argument_list>(<argument><expr><name>cfgOptRepoS3KeySecret</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"xxx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name> <literal type="string">" command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgCommand</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><literal type="string">"command is "</literal> <name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgLockRequired</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"backup command requires lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgLockType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>lockTypeBackup</name></expr></argument>, <argument><expr><literal type="string">"backup command requires backup lock type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgLogLevelDefault</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>logLevelInfo</name></expr></argument>, <argument><expr><literal type="string">"backup defaults to log level warn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgLogFile</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"backup command does file logging"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgLockRemoteRequired</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"backup command requires remote lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(<argument><expr><call><name>cfgCommandParam</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check command arguments"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgParseCommandRoleEnum</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgCmdRoleMain</name></expr></argument>, <argument><expr><literal type="string">"command role main enum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cfgParseCommandRoleEnum</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>CommandInvalidError</name></expr></argument>, <argument><expr><literal type="string">"invalid command role 'bogus'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgCommandRole</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cfgCmdRoleMain</name></expr></argument>, <argument><expr><literal type="string">"command role is main"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgCommandRoleName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>, <argument><expr><literal type="string">"command/role name is backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgParseCommandRoleStr</name><argument_list>(<argument><expr><name>cfgCmdRoleMain</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"main role name is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgExe</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>, <argument><expr><literal type="string">"exe is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionTest</name><argument_list>(<argument><expr><name>cfgOptConfig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"config is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptConfig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><literal type="string">"config is source param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionNegate</name><argument_list>(<argument><expr><name>cfgOptConfig</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"config is negated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><literal type="string">"stanza is source param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>, <argument><expr><literal type="string">"stanza is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><literal type="string">"stanza is source param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>, <argument><expr><literal type="string">"pg1-path is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><literal type="string">"pg1-path is source param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"s3"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"repo-type is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptRepoS3Bucket</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">" test "</literal></expr></argument>, <argument><expr><literal type="string">"repo1-s3-bucket is set and preserves spaces"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptRepoS3KeySecret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"xxx"</literal></expr></argument>, <argument><expr><literal type="string">"repo1-s3-secret is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptRepoS3KeySecret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceConfig</name></expr></argument>, <argument><expr><literal type="string">"repo1-s3-secret is source env"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptOnline</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"online is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptOnline</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><literal type="string">"online is source default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionIdxInt</name><argument_list>(<argument><expr><name>cfgOptBufferSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1048576</literal></expr></argument>, <argument><expr><literal type="string">"buffer-size is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptBufferSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceDefault</name></expr></argument>, <argument><expr><literal type="string">"buffer-size is source default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>cfgOptionName</name><argument_list>(<argument><expr><name>cfgOptBufferSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"buffer-size"</literal></expr></argument>, <argument><expr><literal type="string">"buffer-size name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgEnvKeyRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptRepoS3Key</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptRepoS3KeySecret</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"global is a valid stanza prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTestWrite</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(
                <argument><expr><literal type="string">"[global_stanza]\n"</literal>
                <literal type="string">"pg1-path=/path/to/global/stanza\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"global_stanza"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfig</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"parse config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/path/to/global/stanza"</literal></expr></argument>, <argument><expr><literal type="string">"default pg-path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"warnings for environment variables, command-line and config file options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfig</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawNegate</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptOnline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgLocal</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawReset</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawReset</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawReset</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptBackupStandby</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"--retention-ful=55"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                  <comment type="line">// Partial match for deprecated option</comment>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKRESTXXX_NOTHING"</literal></expr></argument>, <argument><expr><literal type="string">"xxx"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKREST_BOGUS"</literal></expr></argument>, <argument><expr><literal type="string">"xxx"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKREST_ONLIN"</literal></expr></argument>, <argument><expr><literal type="string">"xxx"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    <comment type="line">// Option prefix matching not allowed in environment</comment>
        <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKREST_NO_DELTA"</literal></expr></argument>, <argument><expr><literal type="string">"xxx"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKREST_RESET_REPO1_HOST"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKREST_TARGET"</literal></expr></argument>, <argument><expr><literal type="string">"xxx"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKREST_ONLINE"</literal></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKREST_DELTA"</literal></expr></argument>, <argument><expr><literal type="string">"y"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKREST_START_FAST"</literal></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKREST_PG1_SOCKET_PATH"</literal></expr></argument>, <argument><expr><literal type="string">"/path/to/socket"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTestWrite</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTR</name><argument_list>(
                <argument><expr><call><name>strNewFmt</name><argument_list>(
                    <argument><expr><literal type="string">"[global]\n"</literal>
                    <literal type="string">"compress-level=3\n"</literal>
                    <literal type="string">"spool-path=/path/to/spool\n"</literal>
                    <literal type="string">"lock-path=/\n"</literal>
                    <literal type="string">"pg1-path=/not/path/to/db\n"</literal>
                    <literal type="string">"\n"</literal>
                    <literal type="string">"[global:backup]\n"</literal>
                    <literal type="string">"repo1-hardlink=y\n"</literal>
                    <literal type="string">"bogus=bogus\n"</literal>
                    <literal type="string">"no-delta=y\n"</literal>
                    <literal type="string">"reset-delta=y\n"</literal>
                    <literal type="string">"archive-copy=y\n"</literal>
                    <literal type="string">"start-fast=y\n"</literal>
                    <literal type="string">"online=y\n"</literal>
                    <literal type="string">"pg1-path=/not/path/to/db\n"</literal>
                    <literal type="string">"backup-standby=y\n"</literal>
                    <literal type="string">"backup-standb=y\n"</literal>                             <comment type="line">// Option prefix matching not allowed in config files</comment>
                    <literal type="string">"buffer-size=65536\n"</literal>
                    <literal type="string">"protocol-timeout=3600\n"</literal>
                    <name>CFGOPT_JOB_RETRY</name> <literal type="string">"=3\n"</literal>
                    <name>CFGOPT_JOB_RETRY_INTERVAL</name> <literal type="string">"=33\n"</literal>
                    <literal type="string">"\n"</literal>
                    <literal type="string">"[db:backup]\n"</literal>
                    <literal type="string">"delta=n\n"</literal>
                    <literal type="string">"recovery-option=a=b\n"</literal>
                    <literal type="string">"\n"</literal>
                    <literal type="string">"[db]\n"</literal>
                    <literal type="string">"pg1-host=db\n"</literal>
                    <literal type="string">"pg1-path=/path/to/db\n"</literal>
                    <literal type="string">"pg256-path=/path/to/db256\n"</literal>
                    <literal type="string">"%s=ignore\n"</literal>
                    <literal type="string">"%s=/path/to/db2\n"</literal>
                    <literal type="string">"pg3-host=ignore\n"</literal>
                    <literal type="string">"recovery-option=c=d\n"</literal></expr></argument>,
                    <argument><expr><call><name>cfgParseOptionKeyIdxName</name><argument_list>(<argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgParseOptionKeyIdxName</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name> <literal type="string">" command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: environment contains invalid option 'bogus'\n"</literal>
            <literal type="string">"P00   WARN: environment contains invalid option 'onlin'\n"</literal>
            <literal type="string">"P00   WARN: environment contains invalid negate option 'no-delta'\n"</literal>
            <literal type="string">"P00   WARN: environment contains invalid reset option 'reset-repo1-host'\n"</literal>
            <literal type="string">"P00   WARN: configuration file contains option 'recovery-option' invalid for section 'db:backup'\n"</literal>
            <literal type="string">"P00   WARN: configuration file contains invalid option 'bogus'\n"</literal>
            <literal type="string">"P00   WARN: configuration file contains negate option 'no-delta'\n"</literal>
            <literal type="string">"P00   WARN: configuration file contains reset option 'reset-delta'\n"</literal>
            <literal type="string">"P00   WARN: configuration file contains command-line only option 'online'\n"</literal>
            <literal type="string">"P00   WARN: configuration file contains stanza-only option 'pg1-path' in global section 'global:backup'\n"</literal>
            <literal type="string">"P00   WARN: configuration file contains invalid option 'backup-standb'\n"</literal>
            <literal type="string">"P00   WARN: configuration file contains stanza-only option 'pg1-path' in global section 'global'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>varNewVarLst</name><argument_list>(<argument><expr><call><name>cfgCommandJobRetry</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"[0,33000,33000]"</literal></expr></argument>, <argument><expr><literal type="string">"custom job retries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionIdxTest</name><argument_list>(<argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"pg1-host is not set (command line reset override)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionIdxReset</name><argument_list>(<argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"pg1-host was reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgOptionGroupIdxDefault</name><argument_list>(<argument><expr><name>cfgOptGrpPg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"pg1 is default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgOptionGroupIdxToKey</name><argument_list>(<argument><expr><name>cfgOptGrpPg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"pg2 is index 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg1-path"</literal></expr></argument>, <argument><expr><literal type="string">"pg1-path option name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg2-path"</literal></expr></argument>, <argument><expr><literal type="string">"pg2-path option name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpPg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg2"</literal></expr></argument>, <argument><expr><literal type="string">"pg2 group display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpPg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pg1"</literal></expr></argument>, <argument><expr><literal type="string">"pg1 group display (cached)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>, <argument><expr><literal type="string">"default pg-path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>cfgOptionVar</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>, <argument><expr><literal type="string">"default pg-path as variant"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionGroupValid</name><argument_list>(<argument><expr><name>cfgOptGrpPg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"pg group is valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpPg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"pg1, pg2, and pg256 are set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionIdxBool</name><argument_list>(<argument><expr><name>cfgOptPgLocal</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"pg2-local is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionIdxTest</name><argument_list>(<argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"pg2-host is not set (pg2-local override)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><call><name>cfgOptionKeyToIdx</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/path/to/db2"</literal></expr></argument>, <argument><expr><literal type="string">"pg2-path is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceConfig</name></expr></argument>, <argument><expr><literal type="string">"pg1-path is source config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><call><name>cfgOptionKeyToIdx</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/path/to/db256"</literal></expr></argument>, <argument><expr><literal type="string">"pg256-path is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>varUInt64</name><argument_list>(<argument><expr><call><name>cfgOptionVar</name><argument_list>(<argument><expr><name>cfgOptType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"incr"</literal></expr></argument>, <argument><expr><literal type="number">0x90dc90</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
            <argument><expr><call><name>cfgOptionDisplayVar</name><argument_list>(<argument><expr><call><name>VARUINT64</name><argument_list>(<argument><expr><call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"incr"</literal></expr></argument>, <argument><expr><literal type="number">0x90dc90</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgOptTypeStringId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"incr"</literal></expr></argument>, <argument><expr><literal type="string">"check type display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptLockPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="string">"lock-path is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptLockPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceConfig</name></expr></argument>, <argument><expr><literal type="string">"lock-path is source config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptPgSocketPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/path/to/socket"</literal></expr></argument>, <argument><expr><literal type="string">"pg1-socket-path is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionIdxSource</name><argument_list>(<argument><expr><name>cfgOptPgSocketPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceConfig</name></expr></argument>, <argument><expr><literal type="string">"pg1-socket-path is config param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptOnline</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"online not is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptOnline</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>, <argument><expr><literal type="string">"online display is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptOnline</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><literal type="string">"online is source param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptStartFast</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"start-fast not is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptStartFast</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceConfig</name></expr></argument>, <argument><expr><literal type="string">"start-fast is config param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgOptionIdxTotal</name><argument_list>(<argument><expr><name>cfgOptDelta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"delta not indexed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptDelta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"delta not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>varBool</name><argument_list>(<argument><expr><call><name>cfgOptionVar</name><argument_list>(<argument><expr><name>cfgOptDelta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"delta as variant"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptDelta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceConfig</name></expr></argument>, <argument><expr><literal type="string">"delta is source config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptArchiveCheck</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"archive-check is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptArchiveCopy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"archive-copy is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptRepoHardlink</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"repo-hardlink is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptRepoHardlink</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><literal type="string">"repo-hardlink display is true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptRepoHardlink</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceConfig</name></expr></argument>, <argument><expr><literal type="string">"repo-hardlink is source config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgOptionUInt</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>, <argument><expr><literal type="string">"repo-retention-full is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>varInt64</name><argument_list>(<argument><expr><call><name>cfgOptionVar</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument>, <argument><expr><literal type="string">"repo-retention-full as variant"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionInt</name><argument_list>(<argument><expr><name>cfgOptCompressLevel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"compress-level is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptCompressLevel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceConfig</name></expr></argument>, <argument><expr><literal type="string">"compress-level is source config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptBackupStandby</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"backup-standby not is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptBackupStandby</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceDefault</name></expr></argument>, <argument><expr><literal type="string">"backup-standby is source default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionReset</name><argument_list>(<argument><expr><name>cfgOptBackupStandby</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"backup-standby was reset"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptDelta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"delta is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptDelta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceConfig</name></expr></argument>, <argument><expr><literal type="string">"delta is source config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionInt64</name><argument_list>(<argument><expr><name>cfgOptBufferSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">65536</literal></expr></argument>, <argument><expr><literal type="string">"buffer-size is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptBufferSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceConfig</name></expr></argument>, <argument><expr><literal type="string">"backup-standby is source config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptDbTimeout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1800000</literal></expr></argument>, <argument><expr><literal type="string">"db-timeout is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptDbTimeout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1800"</literal></expr></argument>, <argument><expr><literal type="string">"db-timeout display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">3600000</literal></expr></argument>, <argument><expr><literal type="string">"protocol-timeout is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgOptionIdxUInt</name><argument_list>(<argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5432</literal></expr></argument>, <argument><expr><literal type="string">"pg2-port is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgOptionIdxUInt64</name><argument_list>(<argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5432</literal></expr></argument>, <argument><expr><literal type="string">"pg2-port is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg2-host is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR</name><argument_list>(<argument><expr><call><name>cfgOptionStrNull</name><argument_list>(<argument><expr><name>cfgOptPgHost</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg2-host is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"option 'pg2-host' is null but non-null was requested"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptIoTimeout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">60000</literal></expr></argument>, <argument><expr><literal type="string">"io-timeout is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgParseOptionRequired</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"pg-host is not required for backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgParseOptionRequired</name><argument_list>(<argument><expr><name>cfgCmdInfo</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"stanza is not required for info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionDefault</name><argument_list>(<argument><expr><name>cfgOptBackupStandby</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>, <argument><expr><literal type="string">"backup-standby default is false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionDefault</name><argument_list>(<argument><expr><name>cfgOptBackupStandby</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"n"</literal></expr></argument>, <argument><expr><literal type="string">"backup-standby default is false (again)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>cfgOptionDefault</name><argument_list>(<argument><expr><name>cfgOptPgHost</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"pg-host default is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionDefault</name><argument_list>(<argument><expr><name>cfgOptLogLevelConsole</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"warn"</literal></expr></argument>, <argument><expr><literal type="string">"log-level-console default is warn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionDefault</name><argument_list>(<argument><expr><name>cfgOptPgPort</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"5432"</literal></expr></argument>, <argument><expr><literal type="string">"pg-port default is 5432"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptPgPort</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"5432"</literal></expr></argument>, <argument><expr><literal type="string">"pg-port display is 5432"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionDefault</name><argument_list>(<argument><expr><name>cfgOptDbTimeout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1800"</literal></expr></argument>, <argument><expr><literal type="string">"db-timeout default is 1800"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cfgOptionDefaultSet</name><argument_list>(<argument><expr><name>cfgOptPgSocketPath</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"/default"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set pg-socket-path default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptPgSocketPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/path/to/socket"</literal></expr></argument>, <argument><expr><literal type="string">"pg1-socket-path unchanged"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptPgSocketPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/default"</literal></expr></argument>, <argument><expr><literal type="string">"pg2-socket-path is new default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionIdxDisplay</name><argument_list>(<argument><expr><name>cfgOptPgSocketPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/default"</literal></expr></argument>, <argument><expr><literal type="string">"pg2-socket-path display"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptTarget</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"option 'target' is not valid for the current command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cfgOptionLst</name><argument_list>(<argument><expr><name>cfgOptDbInclude</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"option 'db-include' is not valid for the current command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cfgOptionKv</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"option 'pg1-path' is type 4 but 1 was requested"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cfgOptionInvalidate</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"invalidate pg-path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"pg-path no longer valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgOptionKeyToIdx</name><argument_list>(<argument><expr><name>cfgOptArchiveTimeout</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check archive-timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cfgOptionKeyToIdx</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"key '4' is not valid for 'pg-path' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>unsetenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKREST_BOGUS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unsetenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKREST_ONLIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unsetenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKREST_NO_DELTA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unsetenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKREST_RESET_REPO1_HOST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unsetenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKREST_TARGET"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unsetenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKREST_ONLINE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unsetenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKREST_START_FAST"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>unsetenv</name><argument_list>(<argument><expr><literal type="string">"PGBACKREST_PG1_SOCKET_PATH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"set command to expire"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cfgCommandSet</name><argument_list>(<argument><expr><name>cfgCmdExpire</name></expr></argument>, <argument><expr><call><name>cfgParseCommandRoleEnum</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"async"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgCommandRoleName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"expire:async"</literal></expr></argument>, <argument><expr><literal type="string">"command/role name is expire:async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"archive-push command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfig</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptArchivePushQueueMax</name></expr></argument>, <argument><expr><literal type="string">"4503599627370496"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptBufferSize</name></expr></argument>, <argument><expr><literal type="string">"2MB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"archive-push:async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTestWrite</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(
                <argument><expr><literal type="string">"[global]\n"</literal>
                <literal type="string">"spool-path=/path/to/spool\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"archive-push command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>varNewVarLst</name><argument_list>(<argument><expr><call><name>cfgCommandJobRetry</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"[0]"</literal></expr></argument>, <argument><expr><literal type="string">"default job retry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgLockRequired</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"archive-push:async command requires lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgLogFile</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"archive-push:async command does file logging"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionInt64</name><argument_list>(<argument><expr><name>cfgOptArchivePushQueueMax</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4503599627370496</literal></expr></argument>, <argument><expr><literal type="string">"archive-push-queue-max is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptArchivePushQueueMax</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4503599627370496</literal></expr></argument>, <argument><expr><literal type="string">"archive-push-queue-max is set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptArchivePushQueueMax</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><literal type="string">"archive-push-queue-max is source config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionIdxInt64</name><argument_list>(<argument><expr><name>cfgOptBufferSize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2097152</literal></expr></argument>, <argument><expr><literal type="string">"buffer-size is set to bytes from MB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptBufferSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"2MB"</literal></expr></argument>, <argument><expr><literal type="string">"buffer-size display is 2MB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptBufferSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><literal type="string">"buffer-size is source config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>cfgOptionVar</name><argument_list>(<argument><expr><name>cfgOptSpoolPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"spool-path is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptSpoolPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgSourceDefault</name></expr></argument>, <argument><expr><literal type="string">"spool-path is source default"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid key/value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRecoveryOption</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"key/value 'a' not valid for 'recovery-option' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"option cmd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/path/to/1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"load local config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgExe</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pgbackrest"</literal></expr></argument>, <argument><expr><literal type="string">"--cmd not provided; cfgExe() returns "</literal> <name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/path/to/1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptCmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PROJECT_EXE</name></expr></argument> , <argument><expr><literal type="string">"--cmd not provided; cmd is defaulted to "</literal> <name>TEST_PROJECT_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_BACKUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/path/to/1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptCmd</name></expr></argument>, <argument><expr><literal type="string">"pgbackrest_wrapper.sh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"load local config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptCmd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"pgbackrest_wrapper.sh"</literal></expr></argument>, <argument><expr><literal type="string">"--cmd provided; cmd is returned as pgbackrest_wrapper.sh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"default job retry and valid duplicate options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbInclude</name></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbInclude</name></expr></argument>, <argument><expr><literal type="string">"def"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name> <literal type="string">" command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>varNewVarLst</name><argument_list>(<argument><expr><call><name>cfgCommandJobRetry</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"[0,15000]"</literal></expr></argument>, <argument><expr><literal type="string">"default job retry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>VariantList</name> <modifier>*</modifier></type><name>includeList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>includeList</name></expr></argument>, <argument><expr><call><name>varVarLst</name><argument_list>(<argument><expr><call><name>cfgOptionVar</name><argument_list>(<argument><expr><name>cfgOptDbInclude</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get db include options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><name>includeList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument>, <argument><expr><literal type="string">"check db include option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><name>includeList</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"def"</literal></expr></argument>, <argument><expr><literal type="string">"check db include option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"recovery options, no job retry, command-line options only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRecoveryOption</name></expr></argument>, <argument><expr><literal type="string">"a=b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRecoveryOption</name></expr></argument>, <argument><expr><literal type="string">"c=de=fg hi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptJobRetry</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name> <literal type="string">" command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>cfgCommandJobRetry</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"no job retries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>KeyValue</name> <modifier>*</modifier></type><name>recoveryKv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>cfgOptionKvNull</name><argument_list>(<argument><expr><name>cfgOptLinkMap</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"link map is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>cfgOptionIdxKvNull</name><argument_list>(<argument><expr><name>cfgOptLinkMap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"link map is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>recoveryKv</name></expr></argument>, <argument><expr><call><name>cfgOptionKv</name><argument_list>(<argument><expr><name>cfgOptRecoveryOption</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get recovery options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>recoveryKv</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><literal type="string">"check recovery option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>recoveryKv</name></expr></argument>, <argument><expr><call><name>varKv</name><argument_list>(<argument><expr><call><name>cfgOptionIdxVar</name><argument_list>(<argument><expr><name>cfgOptRecoveryOption</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get recovery options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>recoveryKv</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"de=fg hi"</literal></expr></argument>, <argument><expr><literal type="string">"check recovery option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgLockRequired</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"restore command does not require lock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"recovery options, config file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfig</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTestWrite</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(
                <argument><expr><literal type="string">"[global:restore]\n"</literal>
                <literal type="string">"recovery-option=f=g\n"</literal>
                <literal type="string">"recovery-option=hijk=l\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[db]\n"</literal>
                <literal type="string">"pg1-path=/path/to/db\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name> <literal type="string">" command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>recoveryKv</name></expr></argument>, <argument><expr><call><name>cfgOptionKv</name><argument_list>(<argument><expr><name>cfgOptRecoveryOption</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get recovery options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>recoveryKv</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"g"</literal></expr></argument>, <argument><expr><literal type="string">"check recovery option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>recoveryKv</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"hijk"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"l"</literal></expr></argument>, <argument><expr><literal type="string">"check recovery option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>varLstSize</name><argument_list>(<argument><expr><call><name>cfgOptionLst</name><argument_list>(<argument><expr><name>cfgOptDbInclude</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check db include option size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"recovery options, environment variables only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRawZ</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/path/to/db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptRecoveryOption</name></expr></argument>, <argument><expr><literal type="string">"f=g:hijk=l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRawZ</name><argument_list>(<argument><expr><name>cfgOptDbInclude</name></expr></argument>, <argument><expr><literal type="string">"77"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_COMMAND_RESTORE</name> <literal type="string">" command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>recoveryKv</name></expr></argument>, <argument><expr><call><name>cfgOptionKv</name><argument_list>(<argument><expr><name>cfgOptRecoveryOption</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get recovery options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>recoveryKv</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"f"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"g"</literal></expr></argument>, <argument><expr><literal type="string">"check recovery option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>recoveryKv</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"hijk"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"l"</literal></expr></argument>, <argument><expr><literal type="string">"check recovery option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><call><name>cfgOptionLst</name><argument_list>(<argument><expr><name>cfgOptDbInclude</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"77"</literal></expr></argument>, <argument><expr><literal type="string">"check db include option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>varLstSize</name><argument_list>(<argument><expr><call><name>cfgOptionLst</name><argument_list>(<argument><expr><name>cfgOptDbInclude</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check db include option size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnCfgEnvRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvKeyRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptRecoveryOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgEnvRemoveRaw</name><argument_list>(<argument><expr><name>cfgOptDbInclude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"cfgOptionSet() and cfgOptionIdxSet()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptForce</name></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><call><name>VARBOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set boolean"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptForce</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check boolean"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><call><name>VARINT64</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set protocol-timeout to 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="string">"check protocol-timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><call><name>VARINT64</name><argument_list>(<argument><expr><literal type="number">2200</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set protocol-timeout to 2.2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2200</literal></expr></argument>, <argument><expr><literal type="string">"check protocol-timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptProcessMax</name></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><call><name>VARINT64</name><argument_list>(<argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set process-max to 51"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>cfgOptionInt</name><argument_list>(<argument><expr><name>cfgOptProcessMax</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>, <argument><expr><literal type="string">"check process-max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptDbInclude</name></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><call><name>VARINT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"set not available for option data type 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>cfgOptionIdxSet</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><call><name>VARINT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"option 'pg1-path' must be set with String variant"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cfgOptionIdxSet</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"/new"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set pg1-path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/new"</literal></expr></argument>, <argument><expr><literal type="string">"check pg1-path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cfgOptionIdxSet</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set pg1-path to NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check pg1-path"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cfgOptionIdxSet</name><argument_list>(<argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><call><name>VARUINT64</name><argument_list>(<argument><expr><call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"preserve"</literal></expr></argument>, <argument><expr><literal type="number">0x2da45996500</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"preserve"</literal></expr></argument>, <argument><expr><literal type="number">0x2da45996500</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>cfgOptionIdxSet</name><argument_list>(<argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"standby"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"set type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRID5</name><argument_list>(<argument><expr><literal type="string">"standby"</literal></expr></argument>, <argument><expr><literal type="number">0x6444706930</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"stanza options should not be loaded for commands that don't take a stanza"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>TEST_BACKREST_EXE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfig</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><literal type="string">"info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTestWrite</name></expr></argument>, <argument><expr><name>configFile</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(
                <argument><expr><literal type="string">"[global]\n"</literal>
                <literal type="string">"repo1-path=/path/to/repo\n"</literal>
                <literal type="string">"\n"</literal>
                <literal type="string">"[db]\n"</literal>
                <literal type="string">"repo1-path=/not/the/path\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>configParse</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstPtr</name><argument_list>(<argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"info command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgLogFile</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"info command does not do file logging"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptRepoPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"/path/to/repo"</literal></expr></argument>, <argument><expr><literal type="string">"check repo1-path option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"info command can be forced to do file logging"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLogLevelFile</name></expr></argument>, <argument><expr><literal type="string">"detail"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdInfo</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgLogFile</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check logging"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"version command does not do file logging"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdVersion</name></expr></argument>, <argument><expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>cfgLogFile</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check logging"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <comment type="line">// TEST_TITLE("option key 1 is not required");</comment>
        <comment type="line">//</comment>
        <comment type="line">// argList = strLstNew();</comment>
        <comment type="line">// hrnCfgArgRawZ(argList, cfgOptStanza, "test");</comment>
        <comment type="line">// hrnCfgArgKeyRawZ(argList, cfgOptPgPath, 2, "/pg2");</comment>
        <comment type="line">// hrnCfgArgKeyRawZ(argList, cfgOptPgPath, 8, "/pg8");</comment>
        <comment type="line">// HRN_CFG_LOAD(cfgCmdCheck, argList);</comment>
        <comment type="line">//</comment>
        <comment type="line">// TEST_RESULT_STR_Z(cfgOptionIdxStr(cfgOptPgPath, 0), "/pg2", "check pg1-path");</comment>
        <comment type="line">// TEST_RESULT_STR_Z(cfgOptionIdxStr(cfgOptPgPath, cfgOptionKeyToIdx(cfgOptPgPath, 8)), "/pg8", "check pg8-path");</comment>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid pg option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="string">"/pg128"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPg</name></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>hrnCfgLoadP</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleLocal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
            <argument><expr><literal type="string">"key '4' is not valid for 'pg' option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"deprecated option names"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"repository options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"hardlink"</literal></expr></argument>, <argument><expr><name>cfgOptRepoHardlink</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"no-hardlink"</literal></expr></argument>, <argument><expr><name>cfgOptRepoHardlink</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"archive-queue-max"</literal></expr></argument>, <argument><expr><name>cfgOptArchivePushQueueMax</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"reset-archive-queue-max"</literal></expr></argument>, <argument><expr><name>cfgOptArchivePushQueueMax</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"backup-cmd"</literal></expr></argument>, <argument><expr><name>cfgOptRepoHostCmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"backup-config"</literal></expr></argument>, <argument><expr><name>cfgOptRepoHostConfig</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"backup-host"</literal></expr></argument>, <argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"backup-ssh-port"</literal></expr></argument>, <argument><expr><name>cfgOptRepoHostPort</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"backup-user"</literal></expr></argument>, <argument><expr><name>cfgOptRepoHostUser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo1-azure-ca-file"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageCaFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"reset-repo1-azure-ca-file"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageCaFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo1-azure-ca-path"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageCaPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"reset-repo1-azure-ca-path"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageCaPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo1-azure-host"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"reset-repo1-azure-host"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo1-azure-port"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStoragePort</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"reset-repo1-azure-port"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStoragePort</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo1-azure-verify-tls"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageVerifyTls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"no-repo1-azure-verify-tls"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageVerifyTls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"reset-repo1-azure-verify-tls"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageVerifyTls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo-cipher-pass"</literal></expr></argument>, <argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo-cipher-type"</literal></expr></argument>, <argument><expr><name>cfgOptRepoCipherType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo-path"</literal></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo-type"</literal></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo-s3-bucket"</literal></expr></argument>, <argument><expr><name>cfgOptRepoS3Bucket</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo-s3-ca-file"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageCaFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo1-s3-ca-file"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageCaFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"reset-repo1-s3-ca-file"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageCaFile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo-s3-ca-path"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageCaPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo1-s3-ca-path"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageCaPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"reset-repo1-s3-ca-path"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageCaPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo-s3-endpoint"</literal></expr></argument>, <argument><expr><name>cfgOptRepoS3Endpoint</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo-s3-host"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo1-s3-host"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"reset-repo1-s3-host"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo-s3-key"</literal></expr></argument>, <argument><expr><name>cfgOptRepoS3Key</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo-s3-key-secret"</literal></expr></argument>, <argument><expr><name>cfgOptRepoS3KeySecret</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo1-s3-port"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStoragePort</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"reset-repo1-s3-port"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStoragePort</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo-s3-region"</literal></expr></argument>, <argument><expr><name>cfgOptRepoS3Region</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo-s3-verify-ssl"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageVerifyTls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo1-s3-verify-ssl"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageVerifyTls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"no-repo-s3-verify-ssl"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageVerifyTls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"repo1-s3-verify-tls"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageVerifyTls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"no-repo1-s3-verify-tls"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageVerifyTls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"reset-repo1-s3-verify-tls"</literal></expr></argument>, <argument><expr><name>cfgOptRepoStorageVerifyTls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"postreSQL options"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"db-cmd"</literal></expr></argument>, <argument><expr><name>cfgOptPgHostCmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"db-config"</literal></expr></argument>, <argument><expr><name>cfgOptPgHostConfig</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"db-host"</literal></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"db-path"</literal></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"db-port"</literal></expr></argument>, <argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"db-socket-path"</literal></expr></argument>, <argument><expr><name>cfgOptPgSocketPath</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"db-ssh-port"</literal></expr></argument>, <argument><expr><name>cfgOptPgHostPort</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><literal type="string">"db-user"</literal></expr></argument>, <argument><expr><name>cfgOptPgHostUser</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>cfgParseOptionP</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><literal type="string">"no-db-user"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidError</name></expr></argument>, <argument><expr><literal type="string">"option 'no-db-user' cannot be negated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Only check 1-8 since 8 was the max index when these option names were deprecated</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optionIdx</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>optionIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"db%u-cmd"</literal></expr></argument>, <argument><expr><name>optionIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgOptPgHostCmd</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"db%u-config"</literal></expr></argument>, <argument><expr><name>optionIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgOptPgHostConfig</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"db%u-host"</literal></expr></argument>, <argument><expr><name>optionIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"db%u-path"</literal></expr></argument>, <argument><expr><name>optionIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"db%u-port"</literal></expr></argument>, <argument><expr><name>optionIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"db%u-socket-path"</literal></expr></argument>, <argument><expr><name>optionIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgOptPgSocketPath</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"db%u-ssh-port"</literal></expr></argument>, <argument><expr><name>optionIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgOptPgHostPort</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>testOptionFind</name><argument_list>(<argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"db%u-user"</literal></expr></argument>, <argument><expr><name>optionIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cfgOptPgHostUser</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
