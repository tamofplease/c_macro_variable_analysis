<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/protocol/protocolTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Protocol
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/regExp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessError.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessFork.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessServer.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test protocol server command handlers
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PROTOCOL_COMMAND_ASSERT</name></cpp:macro>                                <cpp:value>STRID5("assert", 0x2922ce610)</cpp:value></cpp:define>

<macro><name>__attribute__</name><argument_list>(<argument>(__noreturn__)</argument>)</argument_list></macro> <function><type><specifier>static</specifier> <name>void</name></type>
<name>testCommandAssertProtocol</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>ProtocolServer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>server</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>PROTOCOL_SERVER</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>param</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>server</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>hrnErrorThrowP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// No FUNCTION_HARNESS_RETURN_VOID() because the function does not return</comment>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PROTOCOL_COMMAND_ERROR</name></cpp:macro>                                 <cpp:value>STRID5("error", 0x127ca450)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>testCommandErrorProtocolTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<macro><name>__attribute__</name><argument_list>(<argument>(__noreturn__)</argument>)</argument_list></macro> <function><type><specifier>static</specifier> <name>void</name></type>
<name>testCommandErrorProtocol</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>ProtocolServer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>server</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>PROTOCOL_SERVER</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>param</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>server</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>testCommandErrorProtocolTotal</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>hrnErrorThrowP</name><argument_list>(<argument><expr><operator>.</operator><name>errorType</name> <operator>=</operator> <operator>&amp;</operator><name>FormatError</name></expr></argument>, <argument><expr><operator>.</operator><name>message</name> <operator>=</operator> <ternary><condition><expr><name>testCommandErrorProtocolTotal</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><literal type="string">"ERR_MESSAGE_RETRY"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// No FUNCTION_HARNESS_RETURN_VOID() because the function does not return</comment>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PROTOCOL_COMMAND_SIMPLE</name></cpp:macro>                                <cpp:value>STRID5("c-simple", 0x2b20d4cf630)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>testCommandRequestSimpleProtocol</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>ProtocolServer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>server</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>PROTOCOL_SERVER</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>param</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>server</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>protocolServerDataPut</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><call><name>protocolPackNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"output"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>protocolServerDataEndPut</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PROTOCOL_COMMAND_COMPLEX</name></cpp:macro>                               <cpp:value>STRID5("c-complex", 0x182b20d78f630)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>testCommandRequestComplexProtocol</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>ProtocolServer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>server</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>PROTOCOL_SERVER</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>param</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>server</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadU32P</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">87</literal></expr></argument>, <argument><expr><literal type="string">"param check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><literal type="string">"param check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolServerDataPut</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sync"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pckReadBoolP</name><argument_list>(<argument><expr><call><name>protocolServerDataGet</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"data get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadModeP</name><argument_list>(<argument><expr><call><name>protocolServerDataGet</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>, <argument><expr><literal type="string">"data get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>protocolServerDataGet</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"data end get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolServerDataPut</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>pckWriteBoolP</name><argument_list>(<argument><expr><call><name>protocolPackNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"data put"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolServerDataPut</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>pckWriteI32P</name><argument_list>(<argument><expr><call><name>protocolPackNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"data put"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolServerDataEndPut</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"data end put"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PROTOCOL_COMMAND_RETRY</name></cpp:macro>                                 <cpp:value>STRID5("retry", 0x19950b20)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>testCommandRetryTotal</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>testCommandRetryProtocol</name><parameter_list>(<parameter><decl><type><name>PackRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>ProtocolServer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>server</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>PACK_READ</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_HARNESS_PARAM</name><argument_list>(<argument><expr><name>PROTOCOL_SERVER</name></expr></argument>, <argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>param</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>server</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>testCommandRetryTotal</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>testCommandRetryTotal</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"error-until-0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>protocolServerDataPut</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>pckWriteBoolP</name><argument_list>(<argument><expr><call><name>protocolPackNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>protocolServerDataEndPut</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_PROTOCOL_SERVER_HANDLER_LIST</name></cpp:macro>                                                                                          \
    <cpp:value>{.command = TEST_PROTOCOL_COMMAND_ASSERT, .handler = testCommandAssertProtocol},                                               \
    {.command = TEST_PROTOCOL_COMMAND_ERROR, .handler = testCommandErrorProtocol},                                                 \
    {.command = TEST_PROTOCOL_COMMAND_SIMPLE, .handler = testCommandRequestSimpleProtocol},                                        \
    {.command = TEST_PROTOCOL_COMMAND_COMPLEX, .handler = testCommandRequestComplexProtocol},                                      \
    {.command = TEST_PROTOCOL_COMMAND_RETRY, .handler = testCommandRetryProtocol},</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test ParallelJobCallback
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>TestParallelJobCallback</name>
<block>{
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>jobList</name></decl>;</decl_stmt>                                                  <comment type="line">// List of jobs to process</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>jobIdx</name></decl>;</decl_stmt>                                            <comment type="line">// Current index in the list to be processed</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>clientSeen</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>                                             <comment type="line">// Make sure the client idx was seen</comment>
}</block></struct></type> <name>TestParallelJobCallback</name>;</typedef>

<function><type><specifier>static</specifier> <name>ProtocolParallelJob</name> <modifier>*</modifier></type><name>testParallelJobCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>clientIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>clientIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>TestParallelJobCallback</name> <modifier>*</modifier></type><name>listData</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Mark the client idx as seen</comment>
    <expr_stmt><expr><name><name>listData</name><operator>-&gt;</operator><name>clientSeen</name><index>[<expr><name>clientIdx</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <comment type="line">// Get a new job if there are any left</comment>
    <if_stmt><if>if <condition>(<expr><name><name>listData</name><operator>-&gt;</operator><name>jobIdx</name></name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>listData</name><operator>-&gt;</operator><name>jobList</name></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>ProtocolParallelJob</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><operator>*</operator><operator>(</operator><name>ProtocolParallelJob</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name><name>listData</name><operator>-&gt;</operator><name>jobList</name></name></expr></argument>, <argument><expr><name><name>listData</name><operator>-&gt;</operator><name>jobIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>listData</name><operator>-&gt;</operator><name>jobIdx</name></name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PROTOCOL_PARALLEL_JOB</name></expr></argument>, <argument><expr><call><name>protocolParallelJobMove</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>PROTOCOL_PARALLEL_JOB</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>storageTest</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>TEST_PATH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"repoIsLocal() and pgIsLocal()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"multi-repo - command valid on local repo but not on remote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/repo-local"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"/remote-host-new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"remote-host-new"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepo</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>repoIsLocal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"repo is local"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>repoIsLocalVerify</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"local verified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>repoIsLocalVerifyIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"local by index verified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>repoIsLocalVerifyIdx</name><argument_list>(<argument><expr><call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HostInvalidError</name></expr></argument>,
            <argument><expr><literal type="string">"archive-get command must be run on the repository host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"single-repo - command invalid on remote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"remote-host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>repoIsLocal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"repo is remote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>repoIsLocalVerify</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HostInvalidError</name></expr></argument>, <argument><expr><literal type="string">"archive-get command must be run on the repository host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pg1 is local"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pgIsLocal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"pg is local"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pgIsLocalVerify</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"verify pg is local"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pg1 is not local"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdRestore</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pgIsLocal</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"pg1 is remote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>pgIsLocalVerify</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>HostInvalidError</name></expr></argument>, <argument><expr><literal type="string">"restore command must be run on the PostgreSQL host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"pg7 is not local"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/path/to/bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"/path/to"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPg</name></expr></argument>, <argument><expr><literal type="string">"7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRemoteType</name></expr></argument>, <argument><expr><name>protocolStorageTypePg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcess</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleLocal</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pgIsLocal</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"pg7 is remote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"protocolHelperClientFree()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"free with errors output as warnings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create bogus client and exec to generate errors</comment>
        <decl_stmt><decl><type><name>ProtocolHelperClient</name></type> <name>protocolHelperClient</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name> <init>= <expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>ProtocolClient</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.callbackQty = <literal type="number">1</literal></argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name><name>protocolHelperClient</name><operator>.</operator><name>client</name></name> <operator>=</operator> <call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name><name>protocolHelperClient</name><operator>.</operator><name>client</name></name> <operator>=</operator> <operator>(</operator><name>ProtocolClient</name><operator>)</operator><block>{
                <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>state</name> <operator>=</operator> <name>protocolClientStateIdle</name></expr>, <expr><operator>.</operator><name>write</name> <operator>=</operator> <name>write</name></expr>}</block></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memContextCallbackSet</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>protocolClientFreeResource</name></expr></argument>, <argument><expr><name><name>protocolHelperClient</name><operator>.</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Exec</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.callbackQty = <literal type="number">1</literal></argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name><name>protocolHelperClient</name><operator>.</operator><name>exec</name></name> <operator>=</operator> <call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name><name>protocolHelperClient</name><operator>.</operator><name>exec</name></name> <operator>=</operator> <operator>(</operator><name>Exec</name><operator>)</operator><block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>command</name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>processId</name> <operator>=</operator> <name>INT_MAX</name></expr>}</block></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memContextCallbackSet</name><argument_list>(<argument><expr><call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>execFreeResource</name></expr></argument>, <argument><expr><name><name>protocolHelperClient</name><operator>.</operator><name>exec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolHelperClientFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name>protocolHelperClient</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: unable to write to invalid: [9] Bad file descriptor\n"</literal>
            <literal type="string">"P00   WARN: unable to wait on child process: [10] No child processes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"protocolLocalParam()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"check local repo params"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>protocolLocalParam</name><argument_list>(<argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"--exec-id=1-test\n--log-level-console=off\n--log-level-file=off\n--log-level-stderr=error\n--pg1-path=/path/to/pg\n"</literal>
                <literal type="string">"--process=0\n--remote-type=repo\n--stanza=test1\narchive-get:local\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"check local pg params"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLogSubprocess</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>protocolLocalParam</name><argument_list>(<argument><expr><name>protocolStorageTypePg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"--exec-id=1-test\n--log-level-console=off\n--log-level-file=info\n--log-level-stderr=error\n--log-subprocess\n--pg=1\n"</literal>
                <literal type="string">"--pg1-path=/pg\n--process=1\n--remote-type=pg\n--stanza=test1\nbackup:local\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"protocolRemoteParam() and protocolRemoteParamSsh()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>storagePutP</name><argument_list>(<argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pgbackrest.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufNew</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"local config params not passed to remote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"repo-host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostUser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"repo-host-user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// Local config settings should never be passed to the remote</comment>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfig</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pgbackrest.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfigIncludePath</name></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfigPath</name></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>protocolRemoteParamSsh</name><argument_list>(<argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"-o\nLogLevel=error\n-o\nCompression=no\n-o\nPasswordAuthentication=no\nrepo-host-user@repo-host\n"</literal>
                <name>TEST_PROJECT_EXE</name> <literal type="string">" --exec-id=1-test --log-level-console=off --log-level-file=off --log-level-stderr=error"</literal>
                <literal type="string">" --pg1-path=/path/to/pg --process=0 --remote-type=repo --repo=1 --stanza=test1 archive-get:remote\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"replace and exclude certain params for repo remote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawBool</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptLogSubprocess</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/unused"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>            <comment type="line">// Will be passed to remote (required)</comment>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><literal type="string">"777"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                <comment type="line">// Not passed to remote (required but has default)</comment>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><literal type="string">"repo-host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostPort</name></expr></argument>, <argument><expr><literal type="string">"444"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostConfig</name></expr></argument>, <argument><expr><literal type="string">"/path/pgbackrest.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostConfigIncludePath</name></expr></argument>, <argument><expr><literal type="string">"/path/include"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostConfigPath</name></expr></argument>, <argument><expr><literal type="string">"/path/config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostUser</name></expr></argument>, <argument><expr><literal type="string">"repo-host-user"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"posix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="line">// Not passed to the remote because only the repo options</comment>
                                                                    <comment type="line">// required by the remote are passed, in this case repo1,</comment>
                                                                    <comment type="line">// because there might be validation errors</comment>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdCheck</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>protocolRemoteParamSsh</name><argument_list>(<argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"-o\nLogLevel=error\n-o\nCompression=no\n-o\nPasswordAuthentication=no\n-p\n444\nrepo-host-user@repo-host\n"</literal>
                <name>TEST_PROJECT_EXE</name> <literal type="string">" --config=/path/pgbackrest.conf --config-include-path=/path/include --config-path=/path/config"</literal>
                <literal type="string">" --exec-id=1-test --log-level-console=off --log-level-file=info --log-level-stderr=error --log-subprocess"</literal>
                <literal type="string">" --pg1-path=/unused --process=0 --remote-type=repo --repo=1 --stanza=test1 check:remote\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remote repo protocol params for archive-get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcess</name></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepo</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRemoteType</name></expr></argument>, <argument><expr><name>protocolStorageTypeRepo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"repo-host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleLocal</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>protocolRemoteParamSsh</name><argument_list>(<argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"-o\nLogLevel=error\n-o\nCompression=no\n-o\nPasswordAuthentication=no\npgbackrest@repo-host\n"</literal>
                <name>TEST_PROJECT_EXE</name> <literal type="string">" --exec-id=1-test --log-level-console=off --log-level-file=off --log-level-stderr=error"</literal>
                <literal type="string">" --pg1-path=/path/to/pg --process=3 --remote-type=repo --repo=1 --stanza=test1 archive-get:remote\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remote pg server, backup params for remote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="string">"pg1-host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>protocolRemoteParamSsh</name><argument_list>(<argument><expr><name>protocolStorageTypePg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"-o\nLogLevel=error\n-o\nCompression=no\n-o\nPasswordAuthentication=no\npostgres@pg1-host\n"</literal>
                <name>TEST_PROJECT_EXE</name> <literal type="string">" --exec-id=1-test --log-level-console=off --log-level-file=off --log-level-stderr=error"</literal>
                <literal type="string">" --pg1-path=/path/to/1 --process=0 --remote-type=pg --stanza=test1 backup:remote\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"local and remote pg servers, params for remote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcess</name></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPg</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/path/to/1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgSocketPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/socket3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1111"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"/path/to/2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"pg2-host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRemoteType</name></expr></argument>, <argument><expr><name>protocolStorageTypePg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleLocal</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>protocolRemoteParamSsh</name><argument_list>(<argument><expr><name>protocolStorageTypePg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"-o\nLogLevel=error\n-o\nCompression=no\n-o\nPasswordAuthentication=no\npostgres@pg2-host\n"</literal>
                <name>TEST_PROJECT_EXE</name> <literal type="string">" --exec-id=1-test --log-level-console=off --log-level-file=off --log-level-stderr=error"</literal>
                <literal type="string">" --pg1-path=/path/to/2 --process=4 --remote-type=pg --stanza=test1 backup:remote\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"local and remote pg servers, params for remote including additional params"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcess</name></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPg</name></expr></argument>, <argument><expr><literal type="string">"3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"/path/to/1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"/path/to/3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"pg3-host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgSocketPath</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"/socket3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"3333"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRemoteType</name></expr></argument>, <argument><expr><name>protocolStorageTypePg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleLocal</name></expr></argument>, <argument><expr><operator>.</operator><name>noStd</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STRLST_Z</name><argument_list>(
            <argument><expr><call><name>protocolRemoteParamSsh</name><argument_list>(<argument><expr><name>protocolStorageTypePg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><literal type="string">"-o\nLogLevel=error\n-o\nCompression=no\n-o\nPasswordAuthentication=no\npostgres@pg3-host\n"</literal>
                <name>TEST_PROJECT_EXE</name> <literal type="string">" --exec-id=1-test --log-level-console=off --log-level-file=off --log-level-stderr=error"</literal>
                <literal type="string">" --pg1-path=/path/to/3 --pg1-port=3333 --pg1-socket-path=/socket3 --process=4 --remote-type=pg --stanza=test1"</literal>
                <literal type="string">" backup:remote\n"</literal></expr></argument>,
            <argument><expr><literal type="string">"check config"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"ProtocolClient, ProtocolCommand, and ProtocolServer"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"bogus greetings - child process"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>ioWriteStrLine</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"bogus greeting"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioWriteStrLine</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"{\"name\":999}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioWriteStrLine</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"{\"name\":null}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioWriteStrLine</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"{}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioWriteStrLine</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"{\"name\":\"bogus\"}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioWriteStrLine</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"{\"name\":\"pgBackRest\",\"service\":\"bogus\"}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioWriteStrLine</name><argument_list>(
                    <argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"{\"name\":\"pgBackRest\",\"service\":\"test\",\"version\":\"bogus\"}"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ioWriteFlush</name><argument_list>(<argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"server with error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>ProtocolServer</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                        <argument><expr><name>server</name></expr></argument>,
                        <argument><expr><call><name>protocolServerMove</name><argument_list>(
                            <argument><expr><call><name>protocolServerNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test server"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><literal type="string">"new server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolServerMove</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move null server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>const</specifier> <name>ProtocolServerHandler</name></type> <name><name>commandHandler</name><index>[]</index></name> <init>= <expr><block>{<expr><name>TEST_PROTOCOL_SERVER_HANDLER_LIST</name></expr>}</block></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>protocolServerProcess</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>commandHandler</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>commandHandler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"invalid command 'BOGUS' (0x38eacd271)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"server restart and assert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// This does not run in a TEST* macro because tests are run by the command handlers</comment>
                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>protocolServerProcess</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>commandHandler</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>commandHandler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"ERR_MESSAGE"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"server restart"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// This does not run in a TEST* macro because tests are run by the command handlers</comment>
                <expr_stmt><expr><call><name>protocolServerProcess</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>commandHandler</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>commandHandler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"server with retries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>VariantList</name> <modifier>*</modifier></type><name>retryList</name> <init>= <expr><call><name>varLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>varLstAdd</name><argument_list>(<argument><expr><name>retryList</name></expr></argument>, <argument><expr><call><name>varNewUInt64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>varLstAdd</name><argument_list>(<argument><expr><name>retryList</name></expr></argument>, <argument><expr><call><name>varNewUInt64</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>protocolServerNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test server"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"new server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// This does not run in a TEST* macro because tests are run by the command handlers</comment>
                <expr_stmt><expr><call><name>protocolServerProcess</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>retryList</name></expr></argument>, <argument><expr><name>commandHandler</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>commandHandler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"bogus greetings - client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>protocolClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test client"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_READ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>JsonFormatError</name></expr></argument>, <argument><expr><literal type="string">"invalid type at: bogus greeting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>protocolClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test client"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_READ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>ProtocolError</name></expr></argument>, <argument><expr><literal type="string">"greeting key 'name' must be string type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>protocolClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test client"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_READ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>ProtocolError</name></expr></argument>, <argument><expr><literal type="string">"greeting key 'name' must be string type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>protocolClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test client"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_READ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>ProtocolError</name></expr></argument>, <argument><expr><literal type="string">"unable to find greeting key 'name'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>protocolClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test client"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_READ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"expected value 'pgBackRest' for greeting key 'name' but got 'bogus'\n"</literal>
                    <literal type="string">"HINT: is the same version of "</literal> <name>PROJECT_NAME</name> <literal type="string">" installed on the local and remote host?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>protocolClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test client"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_READ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"expected value 'test' for greeting key 'service' but got 'bogus'\n"</literal>
                    <literal type="string">"HINT: is the same version of "</literal> <name>PROJECT_NAME</name> <literal type="string">" installed on the local and remote host?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>protocolClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test client"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_READ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"expected value '"</literal> <name>PROJECT_VERSION</name> <literal type="string">"' for greeting key 'version' but got 'bogus'\n"</literal>
                    <literal type="string">"HINT: is the same version of "</literal> <name>PROJECT_NAME</name> <literal type="string">" installed on the local and remote host?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"new client with successful handshake"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>ProtocolClient</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                        <argument><expr><name>client</name></expr></argument>,
                        <argument><expr><call><name>protocolClientMove</name><argument_list>(
                            <argument><expr><call><name>protocolClientNew</name><argument_list>(
                                <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test client"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_READ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><literal type="string">"new client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolClientMove</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"move null client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>protocolClientIoReadFd</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ioReadFd</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>read</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get read fd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>protocolClientExecute</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>protocolCommandNew</name><argument_list>(<argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"BOGUS"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"raised from test client: invalid command 'BOGUS' (0x38eacd271)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"command throws assert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>protocolClientExecute</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>protocolCommandNew</name><argument_list>(<argument><expr><name>TEST_PROTOCOL_COMMAND_ASSERT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>TestError</name></expr></argument>, <argument><expr><literal type="string">"error was expected"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>errorType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"check type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>errorFileName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>TEST_PGB_PATH</name> <literal type="string">"/src/protocol/client.c"</literal></expr></argument>, <argument><expr><literal type="string">"check file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>errorFunctionName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"protocolClientError"</literal></expr></argument>, <argument><expr><literal type="string">"check function"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>errorFileLine</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check file line &gt; 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"raised from test client: ERR_MESSAGE"</literal></expr></argument>, <argument><expr><literal type="string">"check message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>TEST_RESULT_Z</name><argument_list>(<argument><expr><call><name>errorStackTrace</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ERR_STACK_TRACE"</literal></expr></argument>, <argument><expr><literal type="string">"check stack trace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"noop command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolClientNoOp</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"noop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"simple command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
                    <argument><expr><call><name>pckReadStrP</name><argument_list>(<argument><expr><call><name>protocolClientExecute</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>protocolCommandNew</name><argument_list>(<argument><expr><name>TEST_PROTOCOL_COMMAND_SIMPLE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"output"</literal></expr></argument>,
                    <argument><expr><literal type="string">"execute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"complex command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Put the command to the server</comment>
                <decl_stmt><decl><type><name>ProtocolCommand</name> <modifier>*</modifier></type><name>command</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><call><name>protocolCommandNew</name><argument_list>(<argument><expr><name>TEST_PROTOCOL_COMMAND_COMPLEX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"command"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><call><name>protocolCommandParam</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">87</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><call><name>protocolCommandParam</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"data"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolClientCommandPut</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"command put"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>protocolClientStateExpect</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>protocolClientStateIdle</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"client state is 'cmd-data-get' but expected 'idle'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Read null data to indicate that the server has started the command and is read to receive data</comment>
                <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>protocolClientDataGet</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"command started and ready for data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Write data to the server</comment>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolClientDataPut</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>pckWriteBoolP</name><argument_list>(<argument><expr><call><name>protocolPackNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"data put"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolClientDataPut</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>pckWriteModeP</name><argument_list>(<argument><expr><call><name>protocolPackNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"data put"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolClientDataPut</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"data end put"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Get data from the server</comment>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>pckReadBoolP</name><argument_list>(<argument><expr><call><name>protocolClientDataGet</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"data get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>pckReadI32P</name><argument_list>(<argument><expr><call><name>protocolClientDataGet</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"data get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolClientDataEndGet</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"data end get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"free client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolClientFree</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"new client with server retries"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>client</name></expr></argument>,
                    <argument><expr><call><name>protocolClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test client"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_READ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"new client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"command with retry"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
                    <argument><expr><call><name>pckReadBoolP</name><argument_list>(<argument><expr><call><name>protocolClientExecute</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>protocolCommandNew</name><argument_list>(<argument><expr><name>TEST_PROTOCOL_COMMAND_RETRY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                    <argument><expr><literal type="string">"execute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"command throws assert with retry messages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
                    <argument><expr><call><name>protocolClientExecute</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>protocolCommandNew</name><argument_list>(<argument><expr><name>TEST_PROTOCOL_COMMAND_ERROR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>,
                    <argument><expr><literal type="string">"raised from test client: ERR_MESSAGE\n"</literal>
                    <literal type="string">"[FormatError] on retry after 0ms\n"</literal>
                    <literal type="string">"[FormatError] on retry after 500ms: ERR_MESSAGE_RETRY"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"free client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolClientFree</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"protocolRemoteExec() and protocolServer()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"invalid allow list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>protocolServerAuthorize</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>OptionInvalidValueError</name></expr></argument>, <argument><expr><literal type="string">"'tls-server-auth' option must have a value"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"ping server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Connect to server without any verification</comment>
                <decl_stmt><decl><type><name>IoClient</name> <modifier>*</modifier></type><name>tlsClient</name> <init>= <expr><call><name>tlsClientNewP</name><argument_list>(
                    <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>IoSession</name> <modifier>*</modifier></type><name>tlsSession</name> <init>= <expr><call><name>ioClientOpen</name><argument_list>(<argument><expr><name>tlsClient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Send ping</comment>
                <decl_stmt><decl><type><name>ProtocolClient</name> <modifier>*</modifier></type><name>protocolClient</name> <init>= <expr><call><name>protocolClientNew</name><argument_list>(
                    <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>, <argument><expr><call><name>ioSessionIoReadP</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>ioSessionIoWrite</name><argument_list>(<argument><expr><name>tlsSession</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>protocolClientNoExit</name><argument_list>(<argument><expr><name>protocolClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>protocolClientNoOp</name><argument_list>(<argument><expr><name>protocolClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>protocolClientFree</name><argument_list>(<argument><expr><name>protocolClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"connect to repo server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostType</name></expr></argument>, <argument><expr><literal type="string">"tls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostCertFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_CLIENT_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostKeyFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_CLIENT_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostPort</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>ProtocolHelperClient</name></type> <name>helper</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolRemoteExec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>helper</name></expr></argument>, <argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get remote protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolClientFree</name><argument_list>(<argument><expr><name><name>helper</name><operator>.</operator><name>client</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free remote protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"access denied connecting to repo server (invalid stanza)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
                    <argument><expr><call><name>protocolRemoteExec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>helper</name></expr></argument>, <argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AccessError</name></expr></argument>,
                    <argument><expr><literal type="string">"raised from remote-0 tls protocol on '%s': access denied"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"access denied connecting to repo server (invalid client)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
                    <argument><expr><call><name>protocolRemoteExec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>helper</name></expr></argument>, <argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AccessError</name></expr></argument>,
                    <argument><expr><literal type="string">"raised from remote-0 tls protocol on '%s': access denied"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"access denied connecting to repo server without a stanza"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostType</name></expr></argument>, <argument><expr><literal type="string">"tls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostCertFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_CLIENT_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostKeyFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_CLIENT_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostPort</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdInfo</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR_FMT</name><argument_list>(
                    <argument><expr><call><name>protocolRemoteExec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>helper</name></expr></argument>, <argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AccessError</name></expr></argument>,
                    <argument><expr><literal type="string">"raised from remote-0 tls protocol on '%s': access denied"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"connect to pg server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="string">"/repo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRaw</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><call><name>hrnServerHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHostType</name></expr></argument>, <argument><expr><literal type="string">"tls"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHostCertFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_CLIENT_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHostKeyFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_CLIENT_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawFmt</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHostPort</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcess</name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleLocal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>helper</name> <operator>=</operator> <operator>(</operator><name>ProtocolHelperClient</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolRemoteExec</name><argument_list>(<argument><expr><operator>&amp;</operator><name>helper</name></expr></argument>, <argument><expr><name>protocolStorageTypePg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get remote protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolClientFree</name><argument_list>(<argument><expr><name><name>helper</name><operator>.</operator><name>client</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free remote protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>IoServer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tlsServer</name> <init>= <expr><call><name>tlsServerNew</name><argument_list>(
                    <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CA</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_KEY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>HRN_SERVER_CERT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>IoServer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>socketServer</name> <init>= <expr><call><name>sckServerNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>hrnServerPort</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ProtocolServer</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <comment type="line">// Server ping</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <decl_stmt><decl><type><name>IoSession</name> <modifier>*</modifier></type><name>socketSession</name> <init>= <expr><call><name>ioServerAccept</name><argument_list>(<argument><expr><name>socketServer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>protocolServer</name><argument_list>(<argument><expr><name>tlsServer</name></expr></argument>, <argument><expr><name>socketSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"server start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"server is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Repo server (archive-get)</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>argListBase</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>, <argument><expr><name>cfgOptTlsServerCaFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_CA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>, <argument><expr><name>cfgOptTlsServerCertFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_CERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>, <argument><expr><name>cfgOptTlsServerKeyFile</name></expr></argument>, <argument><expr><name>HRN_SERVER_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTlsServerAuth</name></expr></argument>, <argument><expr><literal type="string">"pgbackrest-client=db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdServer</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>socketSession</name> <operator>=</operator> <call><name>ioServerAccept</name><argument_list>(<argument><expr><name>socketServer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>protocolServer</name><argument_list>(<argument><expr><name>tlsServer</name></expr></argument>, <argument><expr><name>socketSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"server start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_PTR_NE</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"server is not null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>protocolServerCommandGet</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></argument>, <argument><expr><name>PROTOCOL_COMMAND_EXIT</name></expr></argument>, <argument><expr><literal type="string">"server exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Repo server access denied (archive-get) invalid stanza</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTlsServerAuth</name></expr></argument>, <argument><expr><literal type="string">"pgbackrest-client=bogus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdServer</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>socketSession</name> <operator>=</operator> <call><name>ioServerAccept</name><argument_list>(<argument><expr><name>socketServer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>protocolServer</name><argument_list>(<argument><expr><name>tlsServer</name></expr></argument>, <argument><expr><name>socketSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AccessError</name></expr></argument>, <argument><expr><literal type="string">"access denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Repo server access denied (archive-get) invalid client</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTlsServerAuth</name></expr></argument>, <argument><expr><literal type="string">"bogus=*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdServer</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>socketSession</name> <operator>=</operator> <call><name>ioServerAccept</name><argument_list>(<argument><expr><name>socketServer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>protocolServer</name><argument_list>(<argument><expr><name>tlsServer</name></expr></argument>, <argument><expr><name>socketSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AccessError</name></expr></argument>, <argument><expr><literal type="string">"access denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Repo server access denied (info)</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTlsServerAuth</name></expr></argument>, <argument><expr><literal type="string">"pgbackrest-client=db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdServer</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>socketSession</name> <operator>=</operator> <call><name>ioServerAccept</name><argument_list>(<argument><expr><name>socketServer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>protocolServer</name><argument_list>(<argument><expr><name>tlsServer</name></expr></argument>, <argument><expr><name>socketSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AccessError</name></expr></argument>, <argument><expr><literal type="string">"access denied"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Pg server (backup)</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstDup</name><argument_list>(<argument><expr><name>argListBase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptTlsServerAuth</name></expr></argument>, <argument><expr><literal type="string">"pgbackrest-client=*"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdServer</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>socketSession</name> <operator>=</operator> <call><name>ioServerAccept</name><argument_list>(<argument><expr><name>socketServer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>protocolServer</name><argument_list>(<argument><expr><name>tlsServer</name></expr></argument>, <argument><expr><name>socketSession</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"server start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_PTR_NE</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"server is not null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>protocolServerCommandGet</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></argument>, <argument><expr><name>PROTOCOL_COMMAND_EXIT</name></expr></argument>, <argument><expr><literal type="string">"server exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"ProtocolParallel and ProtocolParallelJob"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"job state transitions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ProtocolParallelJob</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                <argument><expr><name>job</name></expr></argument>,
                <argument><expr><call><name>protocolParallelJobNew</name><argument_list>(<argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>protocolCommandNew</name><argument_list>(<argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"c"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"new job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>protocolParallelJobMove</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>job</name></expr></argument>, <argument><expr><literal type="string">"move job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>protocolParallelJobMove</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"move null job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>protocolParallelJobStateSet</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>protocolParallelJobStateDone</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"invalid state transition from 'pending' to 'done'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolParallelJobStateSet</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>protocolParallelJobStateRunning</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"transition to running"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>protocolParallelJobStateSet</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><name>protocolParallelJobStatePending</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
            <argument><expr><literal type="string">"invalid state transition from 'running' to 'pending'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Free job</comment>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolParallelJobFree</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"client/server setup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>HRN_FORK_BEGIN</name><argument_list>(<argument>.timeout = <literal type="number">5000</literal></argument>)</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Local 1</comment>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"local server"</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ProtocolServer</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>server</name></expr></argument>,
                    <argument><expr><call><name>protocolServerNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"local server 1"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"local server 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Command with output</comment>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>protocolServerCommandGet</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></argument>, <argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"c-one"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"c-one command get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Wait for notify from parent</comment>
                <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_GET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolServerDataPut</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><call><name>protocolPackNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"data end put"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolServerDataEndPut</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"data end put"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Wait for exit</comment>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>protocolServerCommandGet</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></argument>, <argument><expr><name>PROTOCOL_COMMAND_EXIT</name></expr></argument>, <argument><expr><literal type="string">"noop command get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Local 2</comment>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"local server"</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>ProtocolServer</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>server</name></expr></argument>,
                    <argument><expr><call><name>protocolServerNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"local server 2"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"local server 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Command with output</comment>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>protocolServerCommandGet</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></argument>, <argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"c2"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"c2 command get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Wait for notify from parent</comment>
                <expr_stmt><expr><call><name>HRN_FORK_CHILD_NOTIFY_GET</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolServerDataPut</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><call><name>pckWriteU32P</name><argument_list>(<argument><expr><call><name>protocolPackNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"data end put"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolServerDataEndPut</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"data end put"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Command with error</comment>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>protocolServerCommandGet</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></argument>, <argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"c-three"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"c-three command get"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolServerError</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"very serious error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"stack"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"error put"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Wait for exit</comment>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>protocolServerCommandGet</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call><operator>.</operator><name>id</name></expr></argument>, <argument><expr><name>PROTOCOL_COMMAND_EXIT</name></expr></argument>, <argument><expr><literal type="string">"wait for exit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>(<argument>.prefix = <literal type="string">"local client"</literal></argument>)</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>TestParallelJobCallback</name></type> <name>data</name> <init>= <expr><block>{<expr><operator>.</operator><name>jobList</name> <operator>=</operator> <macro><name>lstNewP</name><argument_list>(<argument>sizeof(ProtocolParallelJob *)</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ProtocolParallel</name> <modifier>*</modifier></type><name>parallel</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>, <argument><expr><call><name>protocolParallelNew</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><name>testParallelJobCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create parallel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>protocolParallelToLog</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"{state: pending, clientTotal: 0, jobTotal: 0}"</literal></expr></argument>, <argument><expr><literal type="string">"check log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Add client</comment>
                <decl_stmt><decl><type><name>ProtocolClient</name> <modifier>*</modifier></type><name><name>client</name><index>[<expr><name>HRN_FORK_CHILD_MAX</name></expr>]</index></name></decl>;</decl_stmt>

                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>clientIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientIdx</name> <operator>&lt;</operator> <call><name>HRN_FORK_PROCESS_TOTAL</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>clientIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                        <argument><expr><name><name>client</name><index>[<expr><name>clientIdx</name></expr>]</index></name></expr></argument>,
                        <argument><expr><call><name>protocolClientNew</name><argument_list>(
                            <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"local client %u"</literal></expr></argument>, <argument><expr><name>clientIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_READ</name><argument_list>(<argument><expr><name>clientIdx</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>HRN_FORK_PARENT_WRITE</name><argument_list>(<argument><expr><name>clientIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"local client %u new"</literal></expr></argument>, <argument><expr><name>clientIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
                        <argument><expr><call><name>protocolParallelClientAdd</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>, <argument><expr><name><name>client</name><index>[<expr><name>clientIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"local client %u add"</literal></expr></argument>, <argument><expr><name>clientIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error on add without an fd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Fake a client without a read fd</comment>
                <decl_stmt><decl><type><name>ProtocolClient</name></type> <name>clientError</name> <init>=
                <expr><block>{
                    <expr><operator>.</operator><name>pub</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>read</name> <operator>=</operator> <macro><name>ioBufferReadNew</name><argument_list>(<argument>bufNew(<literal type="number">0</literal>)</argument>)</argument_list></macro></expr>}</block></expr>,
                    <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>,
                    <expr><operator>.</operator><name>state</name> <operator>=</operator> <name>protocolClientStateIdle</name></expr>,
                }</block></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>protocolParallelClientAdd</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>clientError</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"client with read fd is required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"add jobs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>ProtocolCommand</name> <modifier>*</modifier></type><name>command</name> <init>= <expr><call><name>protocolCommandNew</name><argument_list>(<argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"c-one"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><call><name>protocolCommandParam</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"param1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><call><name>protocolCommandParam</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"param2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>ProtocolParallelJob</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><call><name>protocolParallelJobNew</name><argument_list>(<argument><expr><call><name>varNewStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"job1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>jobList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>job</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"add job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>command</name> <operator>=</operator> <call><name>protocolCommandNew</name><argument_list>(<argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"c2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><call><name>protocolCommandParam</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"param1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>job</name> <operator>=</operator> <call><name>protocolParallelJobNew</name><argument_list>(<argument><expr><call><name>varNewStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"job2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>jobList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>job</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"add job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>command</name> <operator>=</operator> <call><name>protocolCommandNew</name><argument_list>(<argument><expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><literal type="string">"c-three"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><call><name>protocolCommandParam</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"param1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>job</name> <operator>=</operator> <call><name>protocolParallelJobNew</name><argument_list>(<argument><expr><call><name>varNewStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"job3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>jobList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>job</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"add job"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"process jobs with no result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>protocolParallelProcess</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"process jobs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>protocolParallelResult</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check no result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"result for job 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Notify child to complete command</comment>
                <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_PUT</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>protocolParallelProcess</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"process jobs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>protocolParallelResult</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>protocolParallelJobKey</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"job2"</literal></expr></argument>, <argument><expr><literal type="string">"check key is job2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(
                    <argument><expr><call><name>protocolParallelJobProcessId</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>protocolParallelJobProcessId</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                    <argument><expr><literal type="string">"check process id is valid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadU32P</name><argument_list>(<argument><expr><call><name>protocolParallelJobResult</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"check result is 2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>protocolParallelResult</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check no more results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error for job 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>protocolParallelProcess</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"process jobs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>protocolParallelResult</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>protocolParallelJobKey</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"job3"</literal></expr></argument>, <argument><expr><literal type="string">"check key is job3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>protocolParallelJobErrorCode</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">39</literal></expr></argument>, <argument><expr><literal type="string">"check error code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(
                    <argument><expr><call><name>protocolParallelJobErrorMessage</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"raised from local client 1: very serious error"</literal></expr></argument>,
                    <argument><expr><literal type="string">"check error message"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>protocolParallelJobResult</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check result is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>protocolParallelResult</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check no more results"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"process jobs with no result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>protocolParallelProcess</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"process jobs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>protocolParallelResult</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check no result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>protocolParallelDone</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="string">"check not done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"result for job 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Notify child to complete command</comment>
                <expr_stmt><expr><call><name>HRN_FORK_PARENT_NOTIFY_PUT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>protocolParallelProcess</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"process jobs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><call><name>protocolParallelResult</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get result"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>protocolParallelJobKey</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"job1"</literal></expr></argument>, <argument><expr><literal type="string">"check key is job1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>pckReadU32P</name><argument_list>(<argument><expr><call><name>protocolParallelJobResult</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check result is 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>protocolParallelDone</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>protocolParallelDone</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check still done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolParallelFree</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free parallel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"process zero jobs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>TestParallelJobCallback</name><operator>)</operator><block>{<expr><operator>.</operator><name>jobList</name> <operator>=</operator> <macro><name>lstNewP</name><argument_list>(<argument>sizeof(ProtocolParallelJob *)</argument>)</argument_list></macro></expr>}</block></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>, <argument><expr><call><name>protocolParallelNew</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><name>testParallelJobCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create parallel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolParallelClientAdd</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>, <argument><expr><name><name>client</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"add client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>protocolParallelProcess</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"process zero jobs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><call><name>protocolParallelDone</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check done"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolParallelFree</name><argument_list>(<argument><expr><name>parallel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free parallel"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"free clients"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>clientIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>clientIdx</name> <operator>&lt;</operator> <call><name>HRN_FORK_PROCESS_TOTAL</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>clientIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolClientFree</name><argument_list>(<argument><expr><name><name>client</name><index>[<expr><name>clientIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"free client %u"</literal></expr></argument>, <argument><expr><name>clientIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"protocolGet()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"call remote free before any remotes exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolRemoteFree</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free remote (non exist)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"free local that does not exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolLocalFree</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"call keep alive free before any remotes exist"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolKeepAlive</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"keep alive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"simple protocol start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostUser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdInfo</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ProtocolClient</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolFree</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free protocol objects before anything has been created"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>protocolRemoteGet</name><argument_list>(<argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get remote protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>protocolRemoteGet</name><argument_list>(<argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="string">"get remote cached protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>protocolHelper</name><operator>.</operator><name>clientRemote</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>client</name></expr></argument>, <argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="string">"check position in cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolKeepAlive</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"keep alive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolFree</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free remote protocol objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolFree</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free remote protocol objects again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"start protocol with local encryption settings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePut</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pgbackrest.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(
                <argument><expr><literal type="string">"[global]\n"</literal>
                <literal type="string">"repo1-cipher-type=aes-256-cbc\n"</literal>
                <literal type="string">"repo1-cipher-pass=acbd\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptConfig</name></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pgbackrest.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostUser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcess</name></expr></argument>, <argument><expr><literal type="string">"999"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRemoteType</name></expr></argument>, <argument><expr><name>protocolStorageTypePg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleLocal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"acbd"</literal></expr></argument>, <argument><expr><literal type="string">"check cipher pass before"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>protocolRemoteGet</name><argument_list>(<argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get remote protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>protocolHelper</name><operator>.</operator><name>clientRemote</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>client</name></expr></argument>, <argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="string">"check position in cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"acbd"</literal></expr></argument>, <argument><expr><literal type="string">"check cipher pass after"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolFree</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free remote protocol objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"start protocol with remote encryption settings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storagePut</name><argument_list>(
            <argument><expr><call><name>storageNewWriteP</name><argument_list>(<argument><expr><name>storageTest</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pgbackrest.conf"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>BUFSTRDEF</name><argument_list>(
                <argument><expr><literal type="string">"[global]\n"</literal>
                <literal type="string">"repo1-cipher-type=aes-256-cbc\n"</literal>
                <literal type="string">"repo1-cipher-pass=dcba\n"</literal>
                <literal type="string">"repo2-cipher-type=aes-256-cbc\n"</literal>
                <literal type="string">"repo2-cipher-pass=xxxx\n"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostConfig</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pgbackrest.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostUser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostConfig</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pgbackrest.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoHostUser</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdCheck</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check repo1 cipher pass before"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>protocolRemoteGet</name><argument_list>(<argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get repo1 remote protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"dcba"</literal></expr></argument>, <argument><expr><literal type="string">"check repo1 cipher pass after"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check repo2 cipher pass before"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolRemoteGet</name><argument_list>(<argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get repo2 remote protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptRepoCipherPass</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"xxxx"</literal></expr></argument>, <argument><expr><literal type="string">"check repo2 cipher pass after"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolFree</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free remote protocol objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"start remote protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHostUser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>protocolRemoteGet</name><argument_list>(<argument><expr><name>protocolStorageTypePg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get remote protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolFree</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free local and remote protocol objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Start local protocol</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="string">"/path/to/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>, <argument><expr><literal type="string">"10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcessMax</name></expr></argument>, <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdArchiveGet</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>protocolLocalGet</name><argument_list>(<argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get local protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><call><name>protocolLocalGet</name><argument_list>(<argument><expr><name>protocolStorageTypeRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="string">"get local cached protocol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>protocolHelper</name><operator>.</operator><name>clientLocal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>client</name></expr></argument>, <argument><expr><name>client</name></expr></argument>, <argument><expr><literal type="string">"check location in cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolFree</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free local and remote protocol objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
