<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/module/db/dbTest.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Database
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/remote/protocol.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessConfig.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessFork.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessLog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPack.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPostgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/harnessPq.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Macro to check that replay is making progress -- this does not seem useful enough to be included in the pq harness header
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HRNPQ_MACRO_REPLAY_TARGET_REACHED_PROGRESS</name><parameter_list>(                                                                                \
    <parameter><type><name>sessionParam</name></type></parameter>, <parameter><type><name>walNameParam</name></type></parameter>, <parameter><type><name>lsnNameParam</name></type></parameter>, <parameter><type><name>targetLsnParam</name></type></parameter>, <parameter><type><name>targetReachedParam</name></type></parameter>, <parameter><type><name>replayLsnParam</name></type></parameter>, <parameter><type><name>replayLastLsnParam</name></type></parameter>,              \
    <parameter><type><name>replayProgressParam</name></type></parameter>, <parameter><type><name>sleepParam</name></type></parameter>)</parameter_list></cpp:macro>                                                                                               \
    <cpp:value>{.session = sessionParam,                                                                                                      \
        .function = HRNPQ_SENDQUERY,                                                                                               \
        .param =                                                                                                                   \
            "[\"select replayLsn::text,\\n"                                                                                        \
            "       (replayLsn &gt; '" targetLsnParam "')::bool as targetReached,\\n"                                                 \
            "       (replayLsn &gt; '" replayLastLsnParam "')::bool as replayProgress\\n"                                             \
            "  from pg_catalog.pg_last_" walNameParam "_replay_" lsnNameParam "() as replayLsn\"]",                                \
        .resultInt = 1, .sleep = sleepParam},                                                                                      \
    {.session = sessionParam, .function = HRNPQ_CONSUMEINPUT},                                                                     \
    {.session = sessionParam, .function = HRNPQ_ISBUSY},                                                                           \
    {.session = sessionParam, .function = HRNPQ_GETRESULT},                                                                        \
    {.session = sessionParam, .function = HRNPQ_RESULTSTATUS, .resultInt = PGRES_TUPLES_OK},                                       \
    {.session = sessionParam, .function = HRNPQ_NTUPLES, .resultInt = 1},                                                          \
    {.session = sessionParam, .function = HRNPQ_NFIELDS, .resultInt = 3},                                                          \
    {.session = sessionParam, .function = HRNPQ_FTYPE, .param = "[0]", .resultInt = HRNPQ_TYPE_TEXT},                              \
    {.session = sessionParam, .function = HRNPQ_FTYPE, .param = "[1]", .resultInt = HRNPQ_TYPE_BOOL},                              \
    {.session = sessionParam, .function = HRNPQ_FTYPE, .param = "[2]", .resultInt = HRNPQ_TYPE_BOOL},                              \
    {.session = sessionParam, .function = HRNPQ_GETVALUE, .param = "[0,0]", .resultZ = replayLsnParam},                            \
    {.session = sessionParam, .function = HRNPQ_GETVALUE, .param = "[0,1]", .resultZ = cvtBoolToConstZ(targetReachedParam)},       \
    {.session = sessionParam, .function = HRNPQ_GETVALUE, .param = "[0,2]", .resultZ = cvtBoolToConstZ(replayProgressParam)},      \
    {.session = sessionParam, .function = HRNPQ_CLEAR},                                                                            \
    {.session = sessionParam, .function = HRNPQ_GETRESULT, .resultNull = true}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HRNPQ_MACRO_REPLAY_TARGET_REACHED_PROGRESS_GE_10</name><parameter_list>(                                                                          \
    <parameter><type><name>sessionParam</name></type></parameter>, <parameter><type><name>targetLsnParam</name></type></parameter>, <parameter><type><name>targetReachedParam</name></type></parameter>, <parameter><type><name>replayLsnParam</name></type></parameter>, <parameter><type><name>replayLastLsnParam</name></type></parameter>, <parameter><type><name>replayProgressParam</name></type></parameter>, <parameter><type><name>sleepParam</name></type></parameter>)</parameter_list></cpp:macro>         \
    <cpp:value>HRNPQ_MACRO_REPLAY_TARGET_REACHED_PROGRESS(                                                                                    \
        sessionParam, "wal", "lsn", targetLsnParam, targetReachedParam, replayLsnParam, replayLastLsnParam, replayProgressParam,   \
        sleepParam)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Test Run
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>testRun</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_HARNESS_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// PQfinish() is strictly checked</comment>
    <expr_stmt><expr><call><name>harnessPqScriptStrictSet</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"Db and dbProtocol()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>HRN_FORK_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <macro><name>HRN_FORK_CHILD_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Set options</comment>
                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgDatabase</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"testdb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawStrId</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRemoteType</name></expr></argument>, <argument><expr><name>protocolStorageTypePg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptProcess</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbTimeout</name></expr></argument>, <argument><expr><literal type="string">"777"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><operator>.</operator><name>role</name> <operator>=</operator> <name>cfgCmdRoleRemote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Set script</comment>
                <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
                {
                    HRNPQ_MACRO_OPEN(<literal type="number">1</literal>, <literal type="string">"dbname='testdb' port=5432"</literal>)</argument>,
                    <argument>HRNPQ_MACRO_SET_SEARCH_PATH(<literal type="number">1</literal>)</argument>,
                    <argument>HRNPQ_MACRO_SET_CLIENT_ENCODING(<literal type="number">1</literal>)</argument>,
                    <argument>HRNPQ_MACRO_VALIDATE_QUERY(<literal type="number">1</literal>, PG_VERSION_90, TEST_PATH <literal type="string">"/pg"</literal>, NULL, NULL)</argument>,
                    <argument>HRNPQ_MACRO_SET_APPLICATION_NAME(<literal type="number">1</literal>)</argument>,
                    <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,

                    <argument>HRNPQ_MACRO_OPEN(<literal type="number">1</literal>, <literal type="string">"dbname='testdb' port=5432"</literal>)</argument>,
                    <argument>HRNPQ_MACRO_SET_SEARCH_PATH(<literal type="number">1</literal>)</argument>,
                    <argument>HRNPQ_MACRO_SET_CLIENT_ENCODING(<literal type="number">1</literal>)</argument>,
                    <argument>HRNPQ_MACRO_VALIDATE_QUERY(<literal type="number">1</literal>, PG_VERSION_90, TEST_PATH <literal type="string">"/pg"</literal>, NULL, NULL)</argument>,
                    <argument>HRNPQ_MACRO_SET_APPLICATION_NAME(<literal type="number">1</literal>)</argument>,
                    <argument>HRNPQ_MACRO_WAL_SWITCH(<literal type="number">1</literal>, <literal type="string">"xlog"</literal>, <literal type="string">"000000030000000200000003"</literal>)</argument>,
                    <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,

                    <argument>HRNPQ_MACRO_DONE()
                }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

                <comment type="line">// Create server</comment>
                <decl_stmt><decl><type><name>ProtocolServer</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>server</name></expr></argument>,
                    <argument><expr><call><name>protocolServerNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"db test server"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_READ</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_CHILD_WRITE</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"create server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ProtocolServerHandler</name></type> <name><name>commandHandler</name><index>[]</index></name> <init>=
                <expr><block>{
                    <expr><name>PROTOCOL_SERVER_HANDLER_DB_LIST</name>
                    <name>PROTOCOL_SERVER_HANDLER_OPTION_LIST</name>
                    <name>PROTOCOL_SERVER_HANDLER_STORAGE_REMOTE_LIST</name></expr>
                }</block></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(
                    <argument><expr><call><name>protocolServerProcess</name><argument_list>(<argument><expr><name>server</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>commandHandler</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>commandHandler</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"run process loop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>protocolServerFree</name><argument_list>(<argument><expr><name>server</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free server"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_CHILD_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <macro><name>HRN_FORK_PARENT_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Set options</comment>
                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgDatabase</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"testdb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Create control file</comment>
                <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_93</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Create client</comment>
                <decl_stmt><decl><type><name>ProtocolClient</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Db</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(
                    <argument><expr><name>client</name></expr></argument>,
                    <argument><expr><call><name>protocolClientNew</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"db test client"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_READ</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>HRN_FORK_PARENT_WRITE</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"create client"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <comment type="line">// -------------------------------------------------------------------------------------------------------------</comment>
                    <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"open and free database"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>dbNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>storagePgIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>PROJECT_NAME</name> <literal type="string">" ["</literal> <name>CFGCMD_BACKUP</name> <literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbOpen</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>remoteIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check remote idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>db</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    </block_content>}</block>
                    <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
                    <block>{<block_content>
                        <comment type="line">// Free on error</comment>
                        <expr_stmt><expr><call><name>dbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// -------------------------------------------------------------------------------------------------------------</comment>
                    <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"remote commands"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>dbNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>client</name></expr></argument>, <argument><expr><call><name>storagePgIdx</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>PROJECT_NAME</name> <literal type="string">" ["</literal> <name>CFGCMD_BACKUP</name> <literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbOpen</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"open db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>remoteIdx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>dbWalSwitch</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"000000030000000200000003"</literal></expr></argument>, <argument><expr><literal type="string">"wal switch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>dbDbTimeout</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">777000</literal></expr></argument>, <argument><expr><literal type="string">"check timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>memContextCallbackClear</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>memContext</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"clear context so close is not called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <macro><name>FINALLY</name><argument_list>()</argument_list></macro>
                    <block>{<block_content>
                        <comment type="line">// Clear the context callback so the server frees the db on exit</comment>
                        <expr_stmt><expr><call><name>memContextCallbackClear</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>memContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <macro><name>FINALLY</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <comment type="line">// Free on error</comment>
                    <expr_stmt><expr><call><name>protocolClientFree</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>HRN_FORK_PARENT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>HRN_FORK_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"dbBackupStart(), dbBackupStop(), dbTime(), dbList(), dbTablespaceList(), and dbReplayWait()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgDatabase</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"backupdb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbTimeout</name></expr></argument>, <argument><expr><literal type="string">"888"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create control file</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_93</name></expr></argument>, <argument><expr><operator>.</operator><name>checkpoint</name> <operator>=</operator> <call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"1/1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error when unable to select any pg_settings"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            <comment type="line">// Connect to primary</comment>
            HRNPQ_MACRO_OPEN(<literal type="number">1</literal>, <literal type="string">"dbname='backupdb' port=5432"</literal>)</argument>,
            <argument>HRNPQ_MACRO_SET_SEARCH_PATH(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_SET_CLIENT_ENCODING(<literal type="number">1</literal>)</argument>,

            <comment type="line">// Return NULL for a row in pg_settings</comment>
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_SENDQUERY</argument>, <argument>.param =
                <literal type="string">"[\"select (select setting from pg_catalog.pg_settings where name = 'server_version_num')::int4,"</literal>
                    <literal type="string">" (select setting from pg_catalog.pg_settings where name = 'data_directory')::text,"</literal>
                    <literal type="string">" (select setting from pg_catalog.pg_settings where name = 'archive_mode')::text,"</literal>
                    <literal type="string">" (select setting from pg_catalog.pg_settings where name = 'archive_command')::text,"</literal>
                    <literal type="string">" (select setting from pg_catalog.pg_settings where name = 'checkpoint_timeout')::int4\"]"</literal></argument>,
                <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_CONSUMEINPUT}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_ISBUSY}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_GETRESULT}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_RESULTSTATUS</argument>, <argument>.resultInt = PGRES_TUPLES_OK}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_NTUPLES</argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_NFIELDS</argument>, <argument>.resultInt = <literal type="number">5</literal>}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_FTYPE</argument>, <argument>.param = <literal type="string">"[0]"</literal></argument>, <argument>.resultInt = HRNPQ_TYPE_INT4}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_FTYPE</argument>, <argument>.param = <literal type="string">"[1]"</literal></argument>, <argument>.resultInt = HRNPQ_TYPE_TEXT}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_FTYPE</argument>, <argument>.param = <literal type="string">"[2]"</literal></argument>, <argument>.resultInt = HRNPQ_TYPE_TEXT}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_FTYPE</argument>, <argument>.param = <literal type="string">"[3]"</literal></argument>, <argument>.resultInt = HRNPQ_TYPE_TEXT}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_FTYPE</argument>, <argument>.param = <literal type="string">"[4]"</literal></argument>, <argument>.resultInt = HRNPQ_TYPE_INT4}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[0,0]"</literal></argument>, <argument>.resultZ = <literal type="string">"0"</literal>}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[0,1]"</literal></argument>, <argument>.resultZ = <literal type="string">"value"</literal>}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[0,2]"</literal></argument>, <argument>.resultZ = <literal type="string">"value"</literal>}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[0,3]"</literal></argument>, <argument>.resultZ = <literal type="string">""</literal>}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_GETISNULL</argument>, <argument>.param = <literal type="string">"[0,3]"</literal></argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[0,4]"</literal></argument>, <argument>.resultZ = <literal type="string">"300"</literal>}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_CLEAR}</argument>,
            <argument>{.session = <literal type="number">1</literal></argument>, <argument>.function = HRNPQ_GETRESULT</argument>, <argument>.resultNull = true}</argument>,

            <comment type="line">// Close primary</comment>
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbConnectError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to find primary cluster - cannot proceed\n"</literal>
            <literal type="string">"HINT: are all available clusters in recovery?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: unable to check pg1: [DbQueryError] unable to select some rows from pg_settings\n"</literal>
            <literal type="string">"            HINT: is the backup running as the postgres user?\n"</literal>
            <literal type="string">"            HINT: is the pg_read_all_settings role assigned for PostgreSQL &gt;= 10?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"PostgreSQL 9.0 start backup with no WAL switch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            <comment type="line">// Connect to primary</comment>
            HRNPQ_MACRO_OPEN_LE_91(<literal type="number">1</literal>, <literal type="string">"dbname='backupdb' port=5432"</literal>, PG_VERSION_90, TEST_PATH <literal type="string">"/pg1"</literal>, NULL, NULL)</argument>,

            <comment type="line">// Get advisory lock</comment>
            <argument>HRNPQ_MACRO_ADVISORY_LOCK(<literal type="number">1</literal>, true)</argument>,

            <comment type="line">// Start backup with no wal switch</comment>
            <argument>HRNPQ_MACRO_CURRENT_WAL_LE_96(<literal type="number">1</literal>, <literal type="string">"000000010000000100000001"</literal>)</argument>,
            <argument>HRNPQ_MACRO_START_BACKUP_LE_95(<literal type="number">1</literal>, false, <literal type="string">"1/1"</literal>, <literal type="string">"000000010000000100000001"</literal>)</argument>,

            <comment type="line">// Close primary</comment>
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <decl_stmt><decl><type><name>DbGetResult</name></type> <name>db</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>dbDbTimeout</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">888000</literal></expr></argument>, <argument><expr><literal type="string">"check timeout"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>dbPgControl</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>timeline</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"check timeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>DbBackupStartResult</name></type> <name>backupStartResult</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>backupStartResult</name></expr></argument>, <argument><expr><call><name>dbBackupStart</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"start backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStartResult</name><operator>.</operator><name>lsn</name></name></expr></argument>, <argument><expr><literal type="string">"1/1"</literal></expr></argument>, <argument><expr><literal type="string">"start backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_PTR</name><argument_list>(<argument><expr><name><name>backupStartResult</name><operator>.</operator><name>walSegmentCheck</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"WAL segment check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbPing</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ping cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"PostgreSQL 9.5 start/stop backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_93</name></expr></argument>, <argument><expr><operator>.</operator><name>checkpoint</name> <operator>=</operator> <call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2/3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            <comment type="line">// Connect to primary</comment>
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='backupdb' port=5432"</literal>, PG_VERSION_95, TEST_PATH <literal type="string">"/pg1"</literal>, false, NULL, NULL)</argument>,

            <comment type="line">// Get start time</comment>
            <argument>HRNPQ_MACRO_TIME_QUERY(<literal type="number">1</literal>, <literal type="number">1000</literal>)</argument>,

            <comment type="line">// Start backup errors on advisory lock</comment>
            <argument>HRNPQ_MACRO_ADVISORY_LOCK(<literal type="number">1</literal>, false)</argument>,

            <comment type="line">// Start backup</comment>
            <argument>HRNPQ_MACRO_ADVISORY_LOCK(<literal type="number">1</literal>, true)</argument>,
            <argument>HRNPQ_MACRO_IS_IN_BACKUP(<literal type="number">1</literal>, false)</argument>,
            <argument>HRNPQ_MACRO_START_BACKUP_LE_95(<literal type="number">1</literal>, false, <literal type="string">"2/3"</literal>, <literal type="string">"000000010000000200000003"</literal>)</argument>,
            <argument>HRNPQ_MACRO_DATABASE_LIST_1(<literal type="number">1</literal>, <literal type="string">"test1"</literal>)</argument>,
            <argument>HRNPQ_MACRO_TABLESPACE_LIST_0(<literal type="number">1</literal>)</argument>,

            <comment type="line">// Stop backup</comment>
            <argument>HRNPQ_MACRO_STOP_BACKUP_LE_95(<literal type="number">1</literal>, <literal type="string">"2/4"</literal>, <literal type="string">"000000010000000200000004"</literal>)</argument>,

            <comment type="line">// Close primary</comment>
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>dbTimeMSec</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="string">"check time"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>dbBackupStart</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>LockAcquireError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to acquire pgBackRest advisory lock\n"</literal>
            <literal type="string">"HINT: is another pgBackRest backup already running on this cluster?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>backupStartResult</name></expr></argument>, <argument><expr><call><name>dbBackupStart</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"start backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStartResult</name><operator>.</operator><name>lsn</name></name></expr></argument>, <argument><expr><literal type="string">"2/3"</literal></expr></argument>, <argument><expr><literal type="string">"check lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStartResult</name><operator>.</operator><name>walSegmentName</name></name></expr></argument>, <argument><expr><literal type="string">"000000010000000200000003"</literal></expr></argument>, <argument><expr><literal type="string">"check wal segment name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>hrnPackToStr</name><argument_list>(<argument><expr><call><name>dbList</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"1:array:[1:u32:16384, 2:str:test1, 3:u32:13777]"</literal></expr></argument>, <argument><expr><literal type="string">"check db list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>hrnPackToStr</name><argument_list>(<argument><expr><call><name>dbTablespaceList</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">"check tablespace list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>DbBackupStopResult</name></type> <name>backupStopResult</name> <init>= <expr><block>{<expr><operator>.</operator><name>lsn</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>backupStopResult</name></expr></argument>, <argument><expr><call><name>dbBackupStop</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stop backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStopResult</name><operator>.</operator><name>lsn</name></name></expr></argument>, <argument><expr><literal type="string">"2/4"</literal></expr></argument>, <argument><expr><literal type="string">"check lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStopResult</name><operator>.</operator><name>walSegmentName</name></name></expr></argument>, <argument><expr><literal type="string">"000000010000000200000004"</literal></expr></argument>, <argument><expr><literal type="string">"check wal segment name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStopResult</name><operator>.</operator><name>backupLabel</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check backup label is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStopResult</name><operator>.</operator><name>tablespaceMap</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check tablespace map is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"PostgreSQL 9.5 start/stop backup where backup is in progress"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_93</name></expr></argument>, <argument><expr><operator>.</operator><name>checkpoint</name> <operator>=</operator> <call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2/5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            <comment type="line">// Connect to primary</comment>
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='backupdb' port=5432"</literal>, PG_VERSION_95, TEST_PATH <literal type="string">"/pg1"</literal>, false, NULL, NULL)</argument>,

            <comment type="line">// Start backup when backup is in progress</comment>
            <argument>HRNPQ_MACRO_ADVISORY_LOCK(<literal type="number">1</literal>, true)</argument>,
            <argument>HRNPQ_MACRO_IS_IN_BACKUP(<literal type="number">1</literal>, true)</argument>,

            <comment type="line">// Stop old backup</comment>
            <argument>HRNPQ_MACRO_STOP_BACKUP_LE_95(<literal type="number">1</literal>, <literal type="string">"1/1"</literal>, <literal type="string">"000000010000000100000001"</literal>)</argument>,

            <comment type="line">// Start backup</comment>
            <argument>HRNPQ_MACRO_START_BACKUP_LE_95(<literal type="number">1</literal>, true, <literal type="string">"2/5"</literal>, <literal type="string">"000000010000000200000005"</literal>)</argument>,

            <comment type="line">// Stop backup</comment>
            <argument>HRNPQ_MACRO_STOP_BACKUP_LE_95(<literal type="number">1</literal>, <literal type="string">"2/6"</literal>, <literal type="string">"000000010000000200000006"</literal>)</argument>,

            <comment type="line">// Close primary</comment>
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>dbBackupStart</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>.</operator><name>lsn</name></expr></argument>, <argument><expr><literal type="string">"2/5"</literal></expr></argument>, <argument><expr><literal type="string">"start backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: the cluster is already in backup mode but no pgBackRest backup process is running."</literal>
                <literal type="string">" pg_stop_backup() will be called so a new backup can be started."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>dbBackupStop</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>lsn</name></expr></argument>, <argument><expr><literal type="string">"2/6"</literal></expr></argument>, <argument><expr><literal type="string">"stop backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"PostgreSQL 9.6 start/stop backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_93</name></expr></argument>, <argument><expr><operator>.</operator><name>checkpoint</name> <operator>=</operator> <call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"3/3"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            <comment type="line">// Connect to primary</comment>
            HRNPQ_MACRO_OPEN_GE_96(<literal type="number">1</literal>, <literal type="string">"dbname='backupdb' port=5432"</literal>, PG_VERSION_96, TEST_PATH <literal type="string">"/pg1"</literal>, false, NULL, NULL)</argument>,

            <comment type="line">// Start backup with timeline error</comment>
            <argument>HRNPQ_MACRO_ADVISORY_LOCK(<literal type="number">1</literal>, true)</argument>,
            <argument>HRNPQ_MACRO_CURRENT_WAL_LE_96(<literal type="number">1</literal>, <literal type="string">"000000020000000300000002"</literal>)</argument>,
            <argument>HRNPQ_MACRO_START_BACKUP_96(<literal type="number">1</literal>, false, <literal type="string">"3/3"</literal>, <literal type="string">"000000020000000300000003"</literal>)</argument>,

            <comment type="line">// Start backup with checkpoint error</comment>
            <argument>HRNPQ_MACRO_ADVISORY_LOCK(<literal type="number">1</literal>, true)</argument>,
            <argument>HRNPQ_MACRO_CURRENT_WAL_LE_96(<literal type="number">1</literal>, <literal type="string">"000000010000000400000003"</literal>)</argument>,
            <argument>HRNPQ_MACRO_START_BACKUP_96(<literal type="number">1</literal>, false, <literal type="string">"4/4"</literal>, <literal type="string">"000000010000000400000004"</literal>)</argument>,

            <comment type="line">// Start backup</comment>
            <argument>HRNPQ_MACRO_ADVISORY_LOCK(<literal type="number">1</literal>, true)</argument>,
            <argument>HRNPQ_MACRO_CURRENT_WAL_LE_96(<literal type="number">1</literal>, <literal type="string">"000000010000000300000002"</literal>)</argument>,
            <argument>HRNPQ_MACRO_START_BACKUP_96(<literal type="number">1</literal>, false, <literal type="string">"3/3"</literal>, <literal type="string">"000000010000000300000003"</literal>)</argument>,

            <comment type="line">// Stop backup</comment>
            <argument>HRNPQ_MACRO_STOP_BACKUP_96(<literal type="number">1</literal>, <literal type="string">"3/4"</literal>, <literal type="string">"000000010000000300000004"</literal>, false)</argument>,

            <comment type="line">// Close primary</comment>
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>dbBackupStart</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbMismatchError</name></expr></argument>, <argument><expr><literal type="string">"WAL timeline 2 does not match pg_control timeline 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>dbBackupStart</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbMismatchError</name></expr></argument>,
            <argument><expr><literal type="string">"current checkpoint '3/3' is less than backup start '4/4'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>backupStartResult</name></expr></argument>, <argument><expr><call><name>dbBackupStart</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"start backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStartResult</name><operator>.</operator><name>lsn</name></name></expr></argument>, <argument><expr><literal type="string">"3/3"</literal></expr></argument>, <argument><expr><literal type="string">"check lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStartResult</name><operator>.</operator><name>walSegmentName</name></name></expr></argument>, <argument><expr><literal type="string">"000000010000000300000003"</literal></expr></argument>, <argument><expr><literal type="string">"check wal segment name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStartResult</name><operator>.</operator><name>walSegmentCheck</name></name></expr></argument>, <argument><expr><literal type="string">"000000010000000300000002"</literal></expr></argument>, <argument><expr><literal type="string">"check wal segment check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>backupStopResult</name></expr></argument>, <argument><expr><call><name>dbBackupStop</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stop backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStopResult</name><operator>.</operator><name>lsn</name></name></expr></argument>, <argument><expr><literal type="string">"3/4"</literal></expr></argument>, <argument><expr><literal type="string">"check lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStopResult</name><operator>.</operator><name>walSegmentName</name></name></expr></argument>, <argument><expr><literal type="string">"000000010000000300000004"</literal></expr></argument>, <argument><expr><literal type="string">"check wal segment name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStopResult</name><operator>.</operator><name>backupLabel</name></name></expr></argument>, <argument><expr><literal type="string">"BACKUP_LABEL_DATA"</literal></expr></argument>, <argument><expr><literal type="string">"check backup label"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStopResult</name><operator>.</operator><name>tablespaceMap</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check tablespace map is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"PostgreSQL 9.5 start backup from standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"5433"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create control file</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_93</name></expr></argument>, <argument><expr><operator>.</operator><name>timeline</name> <operator>=</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><operator>.</operator><name>checkpoint</name> <operator>=</operator> <call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"5/4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_93</name></expr></argument>, <argument><expr><operator>.</operator><name>timeline</name> <operator>=</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><operator>.</operator><name>checkpoint</name> <operator>=</operator> <call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"5/4"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            <comment type="line">// Connect to primary</comment>
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_95, TEST_PATH <literal type="string">"/pg1"</literal>, false, NULL, NULL)</argument>,

            <comment type="line">// Connect to standby</comment>
            <argument>HRNPQ_MACRO_OPEN_GE_92(<literal type="number">2</literal>, <literal type="string">"dbname='postgres' port=5433"</literal>, PG_VERSION_95, TEST_PATH <literal type="string">"/pg2"</literal>, true, NULL, NULL)</argument>,

            <comment type="line">// Start backup</comment>
            <argument>HRNPQ_MACRO_ADVISORY_LOCK(<literal type="number">1</literal>, true)</argument>,
            <argument>HRNPQ_MACRO_START_BACKUP_LE_95(<literal type="number">1</literal>, false, <literal type="string">"5/4"</literal>, <literal type="string">"000000050000000500000004"</literal>)</argument>,

            <comment type="line">// Wait for standby to sync</comment>
            <argument>HRNPQ_MACRO_REPLAY_WAIT_LE_95(<literal type="number">2</literal>, <literal type="string">"5/4"</literal>)</argument>,

            <comment type="line">// Ping</comment>
            <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">1</literal>, true)</argument>,
            <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">1</literal>, false)</argument>,
            <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">1</literal>, false)</argument>,

            <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">2</literal>, false)</argument>,
            <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">2</literal>, true)</argument>,
            <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">2</literal>, true)</argument>,
            <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">2</literal>, true)</argument>,

            <comment type="line">// Close standby</comment>
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">2</literal>)</argument>,

            <comment type="line">// Close primary</comment>
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get primary and standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>dbBackupStart</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>.</operator><name>lsn</name></expr></argument>, <argument><expr><literal type="string">"5/4"</literal></expr></argument>, <argument><expr><literal type="string">"start backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbReplayWait</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"5/4"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dbPgControl</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>timeline</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sync standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>dbPing</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"primary has switched to recovery"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbPing</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ping primary cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbPing</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ping primary cluster (noop)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbPing</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ping primary cluster (force)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>dbPing</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbMismatchError</name></expr></argument>,
            <argument><expr><literal type="string">"standby is no longer in recovery\n"</literal>
            <literal type="string">"HINT: was the standby promoted during the backup?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbPing</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ping standby cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbPing</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ping standby cluster (noop)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbPing</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ping standby cluster (force)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>db</name><operator>.</operator><name>standby</name><operator>-&gt;</operator><name>pingTimeLast</name></name> <operator>-=</operator> <name>DB_PING_SEC</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbPing</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"ping standby cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"PostgreSQL 10 start/stop backup from standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Update control file</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_93</name></expr></argument>, <argument><expr><operator>.</operator><name>timeline</name> <operator>=</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><operator>.</operator><name>checkpoint</name> <operator>=</operator> <call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"5/5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_93</name></expr></argument>, <argument><expr><operator>.</operator><name>timeline</name> <operator>=</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><operator>.</operator><name>checkpoint</name> <operator>=</operator> <call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"5/5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            <comment type="line">// Connect to primary</comment>
            HRNPQ_MACRO_OPEN_GE_96(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_10, TEST_PATH <literal type="string">"/pg1"</literal>, false, NULL, NULL)</argument>,

            <comment type="line">// Connect to standby</comment>
            <argument>HRNPQ_MACRO_OPEN_GE_96(<literal type="number">2</literal>, <literal type="string">"dbname='postgres' port=5433"</literal>, PG_VERSION_10, TEST_PATH <literal type="string">"/pg2"</literal>, true, NULL, NULL)</argument>,

            <comment type="line">// Start backup</comment>
            <argument>HRNPQ_MACRO_ADVISORY_LOCK(<literal type="number">1</literal>, true)</argument>,
            <argument>HRNPQ_MACRO_CURRENT_WAL_GE_10(<literal type="number">1</literal>, <literal type="string">"000000050000000500000005"</literal>)</argument>,
            <argument>HRNPQ_MACRO_START_BACKUP_GE_10(<literal type="number">1</literal>, false, <literal type="string">"5/5"</literal>, <literal type="string">"000000050000000500000005"</literal>)</argument>,

            <comment type="line">// Switch WAL segment so it can be checked</comment>
            <argument>HRNPQ_MACRO_CREATE_RESTORE_POINT(<literal type="number">1</literal>, <literal type="string">"5/5"</literal>)</argument>,
            <argument>HRNPQ_MACRO_WAL_SWITCH(<literal type="number">1</literal>, <literal type="string">"wal"</literal>, <literal type="string">"000000050000000500000005"</literal>)</argument>,

            <comment type="line">// Standby returns NULL lsn</comment>
            <argument>{.session = <literal type="number">2</literal></argument>,
                <argument>.function = HRNPQ_SENDQUERY</argument>,
                <argument>.param =
                    <literal type="string">"[\"select replayLsn::text,\\n"</literal>
                    <literal type="string">"       (replayLsn &gt; '5/5')::bool as targetReached\\n"</literal>
                    <literal type="string">"  from pg_catalog.pg_last_wal_replay_lsn() as replayLsn\"]"</literal></argument>,
                <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.session = <literal type="number">2</literal></argument>, <argument>.function = HRNPQ_CONSUMEINPUT}</argument>,
            <argument>{.session = <literal type="number">2</literal></argument>, <argument>.function = HRNPQ_ISBUSY}</argument>,
            <argument>{.session = <literal type="number">2</literal></argument>, <argument>.function = HRNPQ_GETRESULT}</argument>,
            <argument>{.session = <literal type="number">2</literal></argument>, <argument>.function = HRNPQ_RESULTSTATUS</argument>, <argument>.resultInt = PGRES_TUPLES_OK}</argument>,
            <argument>{.session = <literal type="number">2</literal></argument>, <argument>.function = HRNPQ_NTUPLES</argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.session = <literal type="number">2</literal></argument>, <argument>.function = HRNPQ_NFIELDS</argument>, <argument>.resultInt = <literal type="number">2</literal>}</argument>,
            <argument>{.session = <literal type="number">2</literal></argument>, <argument>.function = HRNPQ_FTYPE</argument>, <argument>.param = <literal type="string">"[0]"</literal></argument>, <argument>.resultInt = HRNPQ_TYPE_TEXT}</argument>,
            <argument>{.session = <literal type="number">2</literal></argument>, <argument>.function = HRNPQ_FTYPE</argument>, <argument>.param = <literal type="string">"[1]"</literal></argument>, <argument>.resultInt = HRNPQ_TYPE_BOOL}</argument>,
            <argument>{.session = <literal type="number">2</literal></argument>, <argument>.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[0,0]"</literal></argument>, <argument>.resultZ = <literal type="string">""</literal>}</argument>,
            <argument>{.session = <literal type="number">2</literal></argument>, <argument>.function = HRNPQ_GETISNULL</argument>, <argument>.param = <literal type="string">"[0,0]"</literal></argument>, <argument>.resultInt = <literal type="number">1</literal>}</argument>,
            <argument>{.session = <literal type="number">2</literal></argument>, <argument>.function = HRNPQ_GETVALUE</argument>, <argument>.param = <literal type="string">"[0,1]"</literal></argument>, <argument>.resultZ = <literal type="string">"false"</literal>}</argument>,
            <argument>{.session = <literal type="number">2</literal></argument>, <argument>.function = HRNPQ_CLEAR}</argument>,
            <argument>{.session = <literal type="number">2</literal></argument>, <argument>.function = HRNPQ_GETRESULT</argument>, <argument>.resultNull = true}</argument>,

            <comment type="line">// Timeout waiting for sync</comment>
            <argument>HRNPQ_MACRO_REPLAY_TARGET_REACHED_GE_10(<literal type="number">2</literal>, <literal type="string">"5/5"</literal>, false, <literal type="string">"5/3"</literal>)</argument>,
            <argument>HRNPQ_MACRO_REPLAY_TARGET_REACHED_PROGRESS_GE_10(<literal type="number">2</literal>, <literal type="string">"5/5"</literal>, false, <literal type="string">"5/3"</literal>, <literal type="string">"5/3"</literal>, false, <literal type="number">250</literal>)</argument>,
            <argument>HRNPQ_MACRO_REPLAY_TARGET_REACHED_PROGRESS_GE_10(<literal type="number">2</literal>, <literal type="string">"5/5"</literal>, false, <literal type="string">"5/3"</literal>, <literal type="string">"5/3"</literal>, false, <literal type="number">0</literal>)</argument>,

            <comment type="line">// Checkpoint target timeout waiting for sync</comment>
            <argument>HRNPQ_MACRO_REPLAY_TARGET_REACHED_GE_10(<literal type="number">2</literal>, <literal type="string">"5/5"</literal>, true, <literal type="string">"5/5"</literal>)</argument>,
            <argument>HRNPQ_MACRO_CHECKPOINT(<literal type="number">2</literal>)</argument>,
            <argument>HRNPQ_MACRO_CHECKPOINT_TARGET_REACHED_GE_10(<literal type="number">2</literal>, <literal type="string">"5/5"</literal>, false, <literal type="string">"5/4"</literal>, <literal type="number">250</literal>)</argument>,
            <argument>HRNPQ_MACRO_CHECKPOINT_TARGET_REACHED_GE_10(<literal type="number">2</literal>, <literal type="string">"5/5"</literal>, false, <literal type="string">"5/4"</literal>, <literal type="number">0</literal>)</argument>,

            <comment type="line">// Wait for standby to sync</comment>
            <argument>HRNPQ_MACRO_REPLAY_TARGET_REACHED_GE_10(<literal type="number">2</literal>, <literal type="string">"5/5"</literal>, false, <literal type="string">"5/3"</literal>)</argument>,
            <argument>HRNPQ_MACRO_REPLAY_TARGET_REACHED_PROGRESS_GE_10(<literal type="number">2</literal>, <literal type="string">"5/5"</literal>, false, <literal type="string">"5/3"</literal>, <literal type="string">"5/3"</literal>, false, <literal type="number">0</literal>)</argument>,
            <argument>HRNPQ_MACRO_REPLAY_TARGET_REACHED_PROGRESS_GE_10(<literal type="number">2</literal>, <literal type="string">"5/5"</literal>, false, <literal type="string">"5/4"</literal>, <literal type="string">"5/3"</literal>, true, <literal type="number">0</literal>)</argument>,
            <argument>HRNPQ_MACRO_REPLAY_TARGET_REACHED_PROGRESS_GE_10(<literal type="number">2</literal>, <literal type="string">"5/5"</literal>, true, <literal type="string">"5/5"</literal>, <literal type="string">"5/4"</literal>, true, <literal type="number">0</literal>)</argument>,
            <argument>HRNPQ_MACRO_CHECKPOINT(<literal type="number">2</literal>)</argument>,
            <argument>HRNPQ_MACRO_CHECKPOINT_TARGET_REACHED_GE_10(<literal type="number">2</literal>, <literal type="string">"5/5"</literal>, true, <literal type="string">"X/X"</literal>, <literal type="number">0</literal>)</argument>,

            <comment type="line">// Fail on timeline mismatch</comment>
            <argument>HRNPQ_MACRO_REPLAY_TARGET_REACHED_GE_10(<literal type="number">2</literal>, <literal type="string">"5/5"</literal>, false, <literal type="string">"5/3"</literal>)</argument>,
            <argument>HRNPQ_MACRO_REPLAY_TARGET_REACHED_PROGRESS_GE_10(<literal type="number">2</literal>, <literal type="string">"5/5"</literal>, false, <literal type="string">"5/3"</literal>, <literal type="string">"5/3"</literal>, false, <literal type="number">0</literal>)</argument>,
            <argument>HRNPQ_MACRO_REPLAY_TARGET_REACHED_PROGRESS_GE_10(<literal type="number">2</literal>, <literal type="string">"5/5"</literal>, false, <literal type="string">"5/4"</literal>, <literal type="string">"5/3"</literal>, true, <literal type="number">0</literal>)</argument>,
            <argument>HRNPQ_MACRO_REPLAY_TARGET_REACHED_PROGRESS_GE_10(<literal type="number">2</literal>, <literal type="string">"5/5"</literal>, true, <literal type="string">"5/5"</literal>, <literal type="string">"5/4"</literal>, true, <literal type="number">0</literal>)</argument>,
            <argument>HRNPQ_MACRO_CHECKPOINT(<literal type="number">2</literal>)</argument>,
            <argument>HRNPQ_MACRO_CHECKPOINT_TARGET_REACHED_GE_10(<literal type="number">2</literal>, <literal type="string">"5/5"</literal>, true, <literal type="string">"X/X"</literal>, <literal type="number">0</literal>)</argument>,

            <comment type="line">// Close standby</comment>
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">2</literal>)</argument>,

            <comment type="line">// Stop backup</comment>
            <argument>HRNPQ_MACRO_STOP_BACKUP_GE_10(<literal type="number">1</literal>, <literal type="string">"5/6"</literal>, <literal type="string">"000000050000000500000006"</literal>, true)</argument>,

            <comment type="line">// Close primary</comment>
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get primary and standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>dbPgControl</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>timeline</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"check primary timeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_UINT</name><argument_list>(<argument><expr><call><name>dbPgControl</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>timeline</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"check standby timeline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>backupStartResult</name></expr></argument>, <argument><expr><call><name>dbBackupStart</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"start backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStartResult</name><operator>.</operator><name>lsn</name></name></expr></argument>, <argument><expr><literal type="string">"5/5"</literal></expr></argument>, <argument><expr><literal type="string">"check lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStartResult</name><operator>.</operator><name>walSegmentName</name></name></expr></argument>, <argument><expr><literal type="string">"000000050000000500000005"</literal></expr></argument>, <argument><expr><literal type="string">"check wal segment name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStartResult</name><operator>.</operator><name>walSegmentCheck</name></name></expr></argument>, <argument><expr><literal type="string">"000000050000000500000005"</literal></expr></argument>, <argument><expr><literal type="string">"check wal segment check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>dbReplayWait</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"4/4"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbMismatchError</name></expr></argument>, <argument><expr><literal type="string">"standby checkpoint '5/5' is ahead of target '4/4'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>dbReplayWait</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"5/5"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dbPgControl</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>timeline</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ArchiveTimeoutError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to query replay lsn on the standby using 'pg_catalog.pg_last_wal_replay_lsn()'\n"</literal>
            <literal type="string">"HINT: Is this a standby?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>dbReplayWait</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"5/5"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dbPgControl</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>timeline</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ArchiveTimeoutError</name></expr></argument>,
            <argument><expr><literal type="string">"timeout before standby replayed to 5/5 - only reached 5/3\n"</literal>
            <literal type="string">"HINT: is replication running and current on the standby?\n"</literal>
            <literal type="string">"HINT: disable the 'backup-standby' option to backup directly from the primary."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>dbReplayWait</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"5/5"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dbPgControl</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>timeline</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ArchiveTimeoutError</name></expr></argument>,
            <argument><expr><literal type="string">"timeout before standby checkpoint lsn reached 5/5 - only reached 5/4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbReplayWait</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"5/5"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dbPgControl</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>timeline</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sync standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Update timeline to demonstrate that it is reloaded in dbReplayWait()</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_93</name></expr></argument>, <argument><expr><operator>.</operator><name>timeline</name> <operator>=</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><operator>.</operator><name>checkpoint</name> <operator>=</operator> <call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"5/5"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>dbReplayWait</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"5/5"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">77</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbMismatchError</name></expr></argument>, <argument><expr><literal type="string">"standby is on timeline 6 but expected 77"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>standby</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>dbBackupStop</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>tablespaceMap</name></expr></argument>, <argument><expr><literal type="string">"TABLESPACE_MAP_DATA"</literal></expr></argument>, <argument><expr><literal type="string">"stop backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"PostgreSQL 14 - checkpoint timeout warning"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// With start-fast being disabled, set db-timeout smaller than checkpoint_timeout to raise a warning</comment>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptDbTimeout</name></expr></argument>, <argument><expr><literal type="string">"299"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            <comment type="line">// Connect to primary</comment>
            HRNPQ_MACRO_OPEN_GE_96(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_14, TEST_PATH <literal type="string">"/pg1"</literal>, false, NULL, NULL)</argument>,

            <comment type="line">// Start backup</comment>
            <argument>HRNPQ_MACRO_ADVISORY_LOCK(<literal type="number">1</literal>, true)</argument>,
            <argument>HRNPQ_MACRO_CURRENT_WAL_GE_10(<literal type="number">1</literal>, <literal type="string">"000000050000000500000004"</literal>)</argument>,
            <argument>HRNPQ_MACRO_START_BACKUP_GE_10(<literal type="number">1</literal>, false, <literal type="string">"5/5"</literal>, <literal type="string">"000000050000000500000005"</literal>)</argument>,

            <comment type="line">// Close primary</comment>
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>backupStartResult</name></expr></argument>, <argument><expr><call><name>dbBackupStart</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"start backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: start-fast is disabled and db-timeout (299s) is smaller than the PostgreSQL checkpoint_timeout (300s) -"</literal>
                <literal type="string">" timeout may occur before the backup starts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"PostgreSQL 15 - non-exclusive flag dropped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_15</name></expr></argument>, <argument><expr><operator>.</operator><name>timeline</name> <operator>=</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><operator>.</operator><name>checkpoint</name> <operator>=</operator> <call><name>pgLsnFromStr</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"6/6"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            <comment type="line">// Connect to primary</comment>
            HRNPQ_MACRO_OPEN_GE_96(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_15, TEST_PATH <literal type="string">"/pg1"</literal>, false, NULL, NULL)</argument>,

            <comment type="line">// Start backup</comment>
            <argument>HRNPQ_MACRO_ADVISORY_LOCK(<literal type="number">1</literal>, true)</argument>,
            <argument>HRNPQ_MACRO_CURRENT_WAL_GE_10(<literal type="number">1</literal>, <literal type="string">"000000060000000600000005"</literal>)</argument>,
            <argument>HRNPQ_MACRO_START_BACKUP_GE_15(<literal type="number">1</literal>, false, <literal type="string">"6/6"</literal>, <literal type="string">"000000060000000600000006"</literal>)</argument>,

            <comment type="line">// Stop backup</comment>
            <argument>HRNPQ_MACRO_STOP_BACKUP_GE_15(<literal type="number">1</literal>, <literal type="string">"6/7"</literal>, <literal type="string">"000000060000000600000006"</literal>, false)</argument>,

            <comment type="line">// Close primary</comment>
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>backupStartResult</name></expr></argument>, <argument><expr><call><name>dbBackupStart</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"start backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStartResult</name><operator>.</operator><name>lsn</name></name></expr></argument>, <argument><expr><literal type="string">"6/6"</literal></expr></argument>, <argument><expr><literal type="string">"check lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStartResult</name><operator>.</operator><name>walSegmentName</name></name></expr></argument>, <argument><expr><literal type="string">"000000060000000600000006"</literal></expr></argument>, <argument><expr><literal type="string">"check wal segment name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStartResult</name><operator>.</operator><name>walSegmentCheck</name></name></expr></argument>, <argument><expr><literal type="string">"000000060000000600000005"</literal></expr></argument>, <argument><expr><literal type="string">"check wal segment check"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>backupStopResult</name> <operator>=</operator> <operator>(</operator><name>DbBackupStopResult</name><operator>)</operator><block>{<expr><operator>.</operator><name>lsn</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>backupStopResult</name></expr></argument>, <argument><expr><call><name>dbBackupStop</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"stop backup"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStopResult</name><operator>.</operator><name>lsn</name></name></expr></argument>, <argument><expr><literal type="string">"6/7"</literal></expr></argument>, <argument><expr><literal type="string">"check lsn"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStopResult</name><operator>.</operator><name>walSegmentName</name></name></expr></argument>, <argument><expr><literal type="string">"000000060000000600000006"</literal></expr></argument>, <argument><expr><literal type="string">"check wal segment name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStopResult</name><operator>.</operator><name>backupLabel</name></name></expr></argument>, <argument><expr><literal type="string">"BACKUP_LABEL_DATA"</literal></expr></argument>, <argument><expr><literal type="string">"check backup label"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><name><name>backupStopResult</name><operator>.</operator><name>tablespaceMap</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"check tablespace map is not set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>db</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// *****************************************************************************************************************************</comment>
    <if_stmt><if>if <condition>(<expr><call><name>testBegin</name><argument_list>(<argument><expr><literal type="string">"dbGet()"</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>DbGetResult</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>argList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgUser</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"bob"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create control file</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_93</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"error connecting to primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            {.function = HRNPQ_CONNECTDB</argument>, <argument>.param = <literal type="string">"[\"dbname='postgres' port=5432 user='bob'\"]"</literal>}</argument>,
            <argument>{.function = HRNPQ_STATUS</argument>, <argument>.resultInt = CONNECTION_BAD}</argument>,
            <argument>{.function = HRNPQ_ERRORMESSAGE</argument>, <argument>.resultZ = <literal type="string">"error"</literal>}</argument>,
            <argument>{.function = HRNPQ_FINISH}</argument>,
            <argument>{.function = NULL}
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbConnectError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to find primary cluster - cannot proceed\n"</literal>
            <literal type="string">"HINT: are all available clusters in recovery?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: unable to check pg1: [DbConnectError] unable to connect to 'dbname='postgres' port=5432 user='bob'':"</literal>
                <literal type="string">" error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"only available cluster is a standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432 user='bob'"</literal>)</argument>,
            <argument>HRNPQ_MACRO_SET_SEARCH_PATH(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_SET_CLIENT_ENCODING(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_VALIDATE_QUERY(<literal type="number">1</literal>, PG_VERSION_94, TEST_PATH <literal type="string">"/pg"</literal>, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_SET_APPLICATION_NAME(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">1</literal>, true)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbConnectError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to find primary cluster - cannot proceed\n"</literal>
            <literal type="string">"HINT: are all available clusters in recovery?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"standby cluster required but not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432 user='bob'"</literal>)</argument>,
            <argument>HRNPQ_MACRO_SET_SEARCH_PATH(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_SET_CLIENT_ENCODING(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_VALIDATE_QUERY(<literal type="number">1</literal>, PG_VERSION_94, TEST_PATH <literal type="string">"/pg"</literal>, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_SET_APPLICATION_NAME(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_IS_STANDBY_QUERY(<literal type="number">1</literal>, false)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbConnectError</name></expr></argument>, <argument><expr><literal type="string">"unable to find standby cluster - cannot proceed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"primary cluster found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_LE_91(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432 user='bob'"</literal>, PG_VERSION_90, TEST_PATH <literal type="string">"/pg1"</literal>, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get primary only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>primaryIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check primary id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>primary</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>standbyIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check standby id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>standby</name></name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><call><name>dbPgVersion</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_90</name></expr></argument>, <argument><expr><literal type="string">"version set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>dbPgDataPath</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>, <argument><expr><literal type="string">"path set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"more than one primary found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"5433"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create control file</comment>
        <expr_stmt><expr><call><name>HRN_PG_CONTROL_PUT</name><argument_list>(<argument><expr><call><name>storagePgIdxWrite</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PG_VERSION_93</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_LE_91(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_90, TEST_PATH <literal type="string">"/pg1"</literal>, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_OPEN_LE_91(<literal type="number">8</literal>, <literal type="string">"dbname='postgres' port=5433"</literal>, PG_VERSION_90, TEST_PATH <literal type="string">"/pg8"</literal>, NULL, NULL)</argument>,

            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">8</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(<argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbConnectError</name></expr></argument>, <argument><expr><literal type="string">"more than one primary cluster found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"two standbys found but no primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg1"</literal>, true, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_OPEN_GE_92(<literal type="number">8</literal>, <literal type="string">"dbname='postgres' port=5433"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg8"</literal>, true, NULL, NULL)</argument>,

            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">8</literal>)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ERROR</name><argument_list>(
            <argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>DbConnectError</name></expr></argument>,
            <argument><expr><literal type="string">"unable to find primary cluster - cannot proceed\n"</literal>
            <literal type="string">"HINT: are all available clusters in recovery?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"two standbys and primary not required"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg1"</literal>, true, NULL, NULL)</argument>,
            <argument>HRNPQ_MACRO_OPEN_GE_92(<literal type="number">8</literal>, <literal type="string">"dbname='postgres' port=5433"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg8"</literal>, true, NULL, NULL)</argument>,

            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">8</literal>)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get standbys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>primaryIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check primary id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>primary</name></name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>standbyIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check standby id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>standby</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>standby</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>TEST_TITLE</name><argument_list>(<argument><expr><literal type="string">"primary and standby found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>argList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptStanza</name></expr></argument>, <argument><expr><literal type="string">"test1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"5433"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgHostUser</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>TEST_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPath</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>TEST_PATH</name> <literal type="string">"/pg8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>hrnCfgArgKeyRawZ</name><argument_list>(<argument><expr><name>argList</name></expr></argument>, <argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"5434"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>HRN_CFG_LOAD</name><argument_list>(<argument><expr><name>cfgCmdBackup</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>harnessPqScriptSet</name><argument_list>(<argument>(HarnessPq [])
        {
            HRNPQ_MACRO_OPEN_GE_92(<literal type="number">1</literal>, <literal type="string">"dbname='postgres' port=5432"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg1"</literal>, true, NULL, NULL)</argument>,

            <comment type="line">// pg4 error</comment>
            <argument>{.session = <literal type="number">4</literal></argument>, <argument>.function = HRNPQ_CONNECTDB</argument>, <argument>.param = <literal type="string">"[\"dbname='postgres' port=5433\"]"</literal>}</argument>,
            <argument>{.session = <literal type="number">4</literal></argument>, <argument>.function = HRNPQ_STATUS</argument>, <argument>.resultInt = CONNECTION_BAD}</argument>,
            <argument>{.session = <literal type="number">4</literal></argument>, <argument>.function = HRNPQ_ERRORMESSAGE</argument>, <argument>.resultZ = <literal type="string">"error"</literal>}</argument>,
            <argument>{.session = <literal type="number">4</literal></argument>, <argument>.function = HRNPQ_FINISH}</argument>,

            <argument>HRNPQ_MACRO_OPEN_GE_92(<literal type="number">8</literal>, <literal type="string">"dbname='postgres' port=5434"</literal>, PG_VERSION_92, TEST_PATH <literal type="string">"/pg8"</literal>, false, NULL, NULL)</argument>,

            <argument>HRNPQ_MACRO_CREATE_RESTORE_POINT(<literal type="number">8</literal>, <literal type="string">"2/3"</literal>)</argument>,
            <argument>HRNPQ_MACRO_WAL_SWITCH(<literal type="number">8</literal>, <literal type="string">"xlog"</literal>, <literal type="string">"000000010000000200000003"</literal>)</argument>,

            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">8</literal>)</argument>,
            <argument>HRNPQ_MACRO_CLOSE(<literal type="number">1</literal>)</argument>,

            <argument>HRNPQ_MACRO_DONE()
        }</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

        <expr_stmt><expr><call><name>TEST_ASSIGN</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>dbGet</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"get primary and standy"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>hrnLogReplaceAdd</name><argument_list>(<argument><expr><literal type="string">"(could not connect to server|connection to server on socket).*$"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"PG ERROR"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_LOG</name><argument_list>(
            <argument><expr><literal type="string">"P00   WARN: unable to check pg4: [DbConnectError] unable to connect to 'dbname='postgres' port=5433': error\n"</literal>
            <literal type="string">"P00   WARN: unable to check pg5: [DbConnectError] raised from remote-0 ssh protocol on 'localhost':"</literal>
                <literal type="string">" unable to connect to 'dbname='postgres' port=5432': [PG ERROR]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>primaryIdx</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"check primary idx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>primary</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>dbArchiveMode</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"on"</literal></expr></argument>, <argument><expr><literal type="string">"dbArchiveMode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>dbArchiveCommand</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>PROJECT_BIN</name></expr></argument>, <argument><expr><literal type="string">"dbArchiveCommand"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_STR_Z</name><argument_list>(<argument><expr><call><name>dbWalSwitch</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"000000010000000200000003"</literal></expr></argument>, <argument><expr><literal type="string">"wal switch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_INT</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>standbyIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"check standby id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_BOOL</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>standby</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"check standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>primary</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free primary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TEST_RESULT_VOID</name><argument_list>(<argument><expr><call><name>dbFree</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>standby</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"free standby"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>protocolFree</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_HARNESS_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
