<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/test/src/main.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Main
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/exit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/help/help.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/test/test.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/macro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/memContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/stat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/load.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Include automatically generated help data
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/help/help.auto.c.inc"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argListSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argList</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Set stack trace and mem context error cleanup handlers</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ErrorHandlerFunction</name></type> <name><name>errorHandlerList</name><index>[]</index></name> <init>= <expr><block>{<expr><name>stackTraceClean</name></expr>, <expr><name>memContextClean</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>errorHandlerSet</name><argument_list>(<argument><expr><name>errorHandlerList</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>errorHandlerList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>argListSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>CHARPY</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Initialize command with the start time</comment>
    <expr_stmt><expr><call><name>cmdInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Initialize statistics collector</comment>
    <expr_stmt><expr><call><name>statInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Initialize exit handler</comment>
    <expr_stmt><expr><call><name>exitInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Process commands</comment>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Load the configuration</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>cfgLoad</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>argListSize</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Display help</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <if_stmt><if>if <condition>(<expr><call><name>cfgCommandHelp</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>cmdHelp</name><argument_list>(<argument><expr><call><name>BUF</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <switch>switch <condition>(<expr><call><name>cfgCommand</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Test</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdTest</name></expr>:</case>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>cmdTest</name><argument_list>(
                        <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptRepoPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptTestPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptVm</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>cfgOptionUInt</name><argument_list>(<argument><expr><name>cfgOptVmId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgCommandParam</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><call><name>cfgOptionTest</name><argument_list>(<argument><expr><name>cfgOptTest</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>cfgOptionUInt</name><argument_list>(<argument><expr><name>cfgOptTest</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
                        <argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptScale</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>logLevelEnum</name><argument_list>(<argument><expr><call><name>cfgOptionStrId</name><argument_list>(<argument><expr><name>cfgOptLogLevelTest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptLogTimestamp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionStrNull</name><argument_list>(<argument><expr><name>cfgOptTz</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptCoverage</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptProfile</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptOptimize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break>break;</break>
                </block_content>}</block>

                <comment type="line">// Display version</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdVersion</name></expr>:</case>
                    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>PROJECT_NAME</name> <literal type="string">" Test "</literal> <name>PROJECT_VERSION</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Error on commands that should have already been handled</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdHelp</name></expr>:</case>
                <case>case <expr><name>cfgCmdNone</name></expr>:</case>
                <case>case <expr><name>cfgCmdNoop</name></expr>:</case>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"'%s' command should have been handled"</literal></expr></argument>, <argument><expr><call><name>cfgCommandName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>exitSafe</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><ternary><condition><expr><name>error</name></expr> ?</condition><then> <expr><name>result</name></expr> </then><else>: <expr><call><name>exitSafe</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
