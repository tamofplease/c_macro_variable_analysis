<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/log.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Logging routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>
<comment type="line">// is_fork()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"daemon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<comment type="line">// global variable username</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"main.h"</cpp:file></cpp:include>
<comment type="line">// global variable daemonmode</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"args.h"</cpp:file></cpp:include>
<comment type="line">// global counters variable</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shmem.h"</cpp:file></cpp:include>
<comment type="line">// main_pid()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"signals.h"</cpp:file></cpp:include>
<comment type="line">// logg_fatal_dnsmasq_message()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"database/message-table.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>print_log</name> <init>= <expr><name>true</name></expr></init></decl>, <decl><type ref="prev"/><name>print_stdout</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>log_ctrl</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>plog</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pstdout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>print_log</name> <operator>=</operator> <name>plog</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>print_stdout</name> <operator>=</operator> <name>pstdout</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>init_FTL_log</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Obtain log file location</comment>
	<expr_stmt><expr><call><name>getLogFilePath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Open the log file in append/create mode</comment>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>logfile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="string">"a+"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>logfile</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Opening of FTL\'s log file failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"FATAL: Opening of FTL log (%s) failed!\n"</literal></expr></argument>,<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>log</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"       Make sure it exists and is writeable by user %s\n"</literal></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Return failure</comment>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// The size of 84 bytes has been carefully selected for all possible timestamps</comment>
<comment type="line">// to always fit into the available space without buffer overflows</comment>
<function><type><name>void</name></type> <name>get_timestr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>timestring</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>timein</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>millis</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>timein</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if<condition>(<expr><name>millis</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>millisec</name> <init>= <expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name><operator>/</operator><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>timestring</name></expr></argument>,<argument><expr><literal type="string">"%d-%02d-%02d %02d:%02d:%02d.%03i"</literal></expr></argument>,
		        <argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>,
		        <argument><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>, <argument><expr><name>millisec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>timestring</name></expr></argument>,<argument><expr><literal type="string">"%d-%02d-%02d %02d:%02d:%02d"</literal></expr></argument>,
		        <argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>,
		        <argument><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>_FTL_log</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>newline</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>debug</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>timestring</name><index>[<expr><literal type="number">84</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

	<comment type="line">// We have been explicitly asked to not print anything to the log</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><name>print_log</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>print_stdout</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Check if this is something we should print only in debug mode</comment>
	<if_stmt><if>if<condition>(<expr><name>debug</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>config</name><operator>.</operator><name>debug</name></name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>get_timestr</name><argument_list>(<argument><expr><name>timestring</name></expr></argument>, <argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Get and log PID of current process to avoid ambiguities when more than one</comment>
	<comment type="line">// pihole-FTL instance is logging into the same file</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>idstr</name><index>[<expr><literal type="number">42</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pid</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Get the process ID of the calling process</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mpid</name> <init>= <expr><call><name>main_pid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Get the process ID of the main FTL process</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tid</name> <init>= <expr><call><name>gettid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// Get the thread ID of the calling process</comment>

	<comment type="line">// There are four cases we have to differentiate here:</comment>
	<if_stmt><if>if<condition>(<expr><name>pid</name> <operator>==</operator> <name>tid</name></expr>)</condition><block type="pseudo"><block_content>
		<if_stmt><if>if<condition>(<expr><call><name>is_fork</name><argument_list>(<argument><expr><name>mpid</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<comment type="line">// Fork of the main process</comment>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>idstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>idstr</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%i/F%i"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>mpid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<comment type="line">// Main process</comment>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>idstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>idstr</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%iM"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if>
	<if type="elseif">else
		if<condition>(<expr><call><name>is_fork</name><argument_list>(<argument><expr><name>mpid</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<comment type="line">// Thread of a fork of the main process</comment>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>idstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>idstr</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%i/F%i/T%i"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>mpid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<comment type="line">// Thread of the main process</comment>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>idstr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>idstr</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%i/T%i"</literal></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// Print to stdout before writing to file</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>!</operator><name>daemonmode</name> <operator>||</operator> <name>cli_mode</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>print_stdout</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Only print time/ID string when not in direct user interaction (CLI mode)</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>cli_mode</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%s %s] "</literal></expr></argument>, <argument><expr><name>timestring</name></expr></argument>, <argument><expr><name>idstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>vprintf</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>newline</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if<condition>(<expr><name>print_log</name> <operator>&amp;&amp;</operator> <name><name>FTLfiles</name><operator>.</operator><name>log</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Open log file</comment>
		<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>logfile</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>log</name></name></expr></argument>, <argument><expr><literal type="string">"a+"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// Write to log file</comment>
		<if_stmt><if>if<condition>(<expr><name>logfile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr><literal type="string">"[%s %s] "</literal></expr></argument>, <argument><expr><name>timestring</name></expr></argument>, <argument><expr><name>idstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>,<argument><expr><name>logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>logfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><operator>!</operator><name>daemonmode</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!! WARNING: Writing to FTL\'s log file failed!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"Writing to FTL\'s log file failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// Log helper activity (may be script or lua)</comment>
<function><type><name>void</name></type> <name>FTL_log_helper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Only log helper debug messages if enabled</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_HELPER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Extract all variable arguments</comment>
	<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>arg</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argin</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>argin</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>argin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Select appropriate logging format</comment>
	<switch>switch <condition>(<expr><name>n</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><literal type="number">1</literal></expr>:</case>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Script: Starting helper for action \"%s\""</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">2</literal></expr>:</case>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Script: FAILED to execute \"%s\": %s"</literal></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">5</literal></expr>:</case>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Script: Executing \"%s\" with arguments: \"%s %s %s %s\""</literal></expr></argument>,
			     <argument><expr><name><name>arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>arg</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"ERROR: Unsupported number of arguments passed to FTL_log_helper(): %u"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>

	<comment type="line">// Free allocated memory</comment>
	<for>for<control>(<init><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if<condition>(<expr><name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>arg</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>format_memory_size</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>prefix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>bytes</name></decl></parameter>,
                        <parameter><decl><type><name>double</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>formatted</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>formatted</name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
	<comment type="line">// Determine exponent for human-readable display</comment>
	<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><operator>*</operator><name>formatted</name> <operator>&lt;=</operator> <literal type="number">1e3</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
		<expr_stmt><expr><operator>*</operator><name>formatted</name> <operator>/=</operator> <literal type="number">1e3</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>prefixes</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'\0'</literal></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'M'</literal></expr>, <expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'?'</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<comment type="line">// Chose matching SI prefix</comment>
	<expr_stmt><expr><name><name>prefix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>prefixes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>prefix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Human-readable time</comment>
<function><type><name>void</name></type> <name>format_time</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">42</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name></type> <name>seconds</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>milliseconds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>umilliseconds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>milliseconds</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>seconds</name> <operator>=</operator> <name>milliseconds</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>umilliseconds</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>milliseconds</name> <operator>%</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>days</name> <init>= <expr><name>seconds</name> <operator>/</operator> <operator>(</operator><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">24</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>seconds</name> <operator>-=</operator> <name>days</name> <operator>*</operator> <operator>(</operator><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>hours</name> <init>= <expr><name>seconds</name> <operator>/</operator> <operator>(</operator><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>seconds</name> <operator>-=</operator> <name>hours</name> <operator>*</operator> <operator>(</operator><literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>minutes</name> <init>= <expr><name>seconds</name> <operator>/</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>seconds</name> <operator>%=</operator> <literal type="number">60</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>days</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%ud "</literal></expr></argument>, <argument><expr><name>days</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>hours</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%uh "</literal></expr></argument>, <argument><expr><name>hours</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>minutes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%um "</literal></expr></argument>, <argument><expr><name>minutes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>seconds</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%lus "</literal></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Only append milliseconds when the timer value is less than 10 seconds</comment>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>days</name> <operator>+</operator> <name>hours</name> <operator>+</operator> <name>minutes</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>seconds</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>umilliseconds</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%lums "</literal></expr></argument>, <argument><expr><name>umilliseconds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>FTL_log_dnsmasq_fatal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Build a complete string from possible multi-part string passed from dnsmasq</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>message</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>message</name><index>[<expr><literal type="number">255</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<comment type="line">// Log error into FTL's log + message table</comment>
	<expr_stmt><expr><call><name>logg_fatal_dnsmasq_message</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>log_counter_info</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" -&gt; Total DNS queries: %i"</literal></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>queries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" -&gt; Cached DNS queries: %i"</literal></expr></argument>, <argument><expr><call><name>cached_queries</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" -&gt; Forwarded DNS queries: %i"</literal></expr></argument>, <argument><expr><call><name>forwarded_queries</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" -&gt; Blocked DNS queries: %i"</literal></expr></argument>, <argument><expr><call><name>blocked_queries</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" -&gt; Unknown DNS queries: %i"</literal></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>QUERY_UNKNOWN</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" -&gt; Unique domains: %i"</literal></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>domains</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" -&gt; Unique clients: %i"</literal></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>clients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" -&gt; Known forward destinations: %i"</literal></expr></argument>, <argument><expr><name><name>counters</name><operator>-&gt;</operator><name>upstreams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>log_FTL_version</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>crashreport</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"FTL branch: %s"</literal></expr></argument>, <argument><expr><name>GIT_BRANCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"FTL version: %s"</literal></expr></argument>, <argument><expr><call><name>get_FTL_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"FTL commit: %s"</literal></expr></argument>, <argument><expr><name>GIT_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"FTL date: %s"</literal></expr></argument>, <argument><expr><name>GIT_DATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>crashreport</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>username_now</name> <init>= <expr><call><name>getUserName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"FTL user: started as %s, ended as %s"</literal></expr></argument>, <argument><expr><name>username</name></expr></argument>, <argument><expr><name>username_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>username_now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"FTL user: %s"</literal></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Compiled for %s using %s"</literal></expr></argument>, <argument><expr><name>FTL_ARCH</name></expr></argument>, <argument><expr><name>FTL_CC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>FTLversion</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>malloc</name><operator>)</operator></expr></argument>)</argument_list> <modifier>*</modifier><name>get_FTL_version</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
	<comment type="line">// Obtain FTL version if not already determined</comment>
	<if_stmt><if>if<condition>(<expr><name>FTLversion</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>GIT_TAG</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>GIT_VERSION</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// Copy version string if this is a tagged release</comment>
				<expr_stmt><expr><name>FTLversion</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>GIT_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

		</block_content>}</block></if>
		<if type="elseif">else if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>GIT_HASH</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Build special version string when there is a hash</comment>
			<expr_stmt><expr><name>FTLversion</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// Build version by appending 7 characters of the hash to "vDev-"</comment>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>FTLversion</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="string">"vDev-%.7s"</literal></expr></argument>, <argument><expr><name>GIT_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="line">// Fallback for tarball build, etc. without any GIT subsystem</comment>
			<expr_stmt><expr><name>FTLversion</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">"UNKNOWN (not a GIT build)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>FTLversion</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier><operator>)</operator></expr></argument>)</argument_list> <modifier>*</modifier><name>get_ordinal_suffix</name><argument_list>(<argument><expr><name>unsigned</name> <name>int</name> <name>number</name></expr></argument>)</argument_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>number</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&gt;</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>number</name> <operator>%</operator> <literal type="number">100</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// If the tens digit of a number is 1, then "th" is written</comment>
		<comment type="line">// after the number. For example: 13th, 19th, 112th, 9,311th.</comment>
		<return>return <expr><literal type="string">"th"</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// If the tens digit is not equal to 1, then the following table could be used:</comment>
	<switch>switch <condition>(<expr><name>number</name> <operator>%</operator> <literal type="number">10</literal></expr>)</condition>
	<block>{<block_content>
	<case>case <expr><literal type="number">1</literal></expr>:</case> <comment type="line">// If the units digit is 1: This is written after the number "st"</comment>
		<return>return <expr><literal type="string">"st"</literal></expr>;</return>
	<case>case <expr><literal type="number">2</literal></expr>:</case> <comment type="line">// If the units digit is 2: This is written after the number "nd"</comment>
		<return>return <expr><literal type="string">"nd"</literal></expr>;</return>
	<case>case <expr><literal type="number">3</literal></expr>:</case> <comment type="line">// If the units digit is 3: This is written after the number "rd"</comment>
		<return>return <expr><literal type="string">"rd"</literal></expr>;</return>
	<default>default:</default> <comment type="line">// If the units digit is 0 or 4-9: This is written after the number "th"</comment>
		<return>return <expr><literal type="string">"th"</literal></expr>;</return>
	</block_content>}</block></switch>
	<comment type="line">// For example: 2nd, 7th, 20th, 23rd, 52nd, 135th, 301st BUT 311th (covered above)</comment>
</block_content>}</block></decl></decl_stmt>

<comment type="line">// Converts a buffer of specified length to ASCII representation as it was a C</comment>
<comment type="line">// string literal. Returns how much bytes from source was processed</comment>
<comment type="line">// Inspired by https://stackoverflow.com/a/56123950</comment>
<function><type><name>int</name></type> <name>binbuf_to_escaped_C_literal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_sz</name></decl></parameter>,
                                      <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst_str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_sz</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>src_buf</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>dst_str</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Special handling for empty strings</comment>
	<if_stmt><if>if<condition>(<expr><name>src_sz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>dst_str</name></expr></argument>, <argument><expr><literal type="string">"(empty)"</literal></expr></argument>, <argument><expr><name>dst_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dst_str</name><index>[<expr><name>dst_sz</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<while>while <condition>(<expr><name>src</name> <operator>&lt;</operator> <name>src_buf</name> <operator>+</operator> <name>src_sz</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// The printable characters are:</comment>
			<comment type="line">// ! " # $ % &amp; ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ;</comment>
			<comment type="line">// &lt; = &gt; ? @ A B C D E F G H I J K L M N O P Q R S T U V</comment>
			<comment type="line">// W X Y Z [ \ ] ^ _ ` a b c d e f g h i j k l m n o p q</comment>
			<comment type="line">// r s t u v w x y z { | } ~</comment>
			<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><operator>*</operator><name>src</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Backslash isn't included above but isn't harmful</comment>
			<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="line">// Handle other characters more specifically</comment>
			<switch>switch<condition>(<expr><operator>*</operator><name>src</name></expr>)</condition>
			<block>{<block_content>
				<case>case <expr><literal type="char">'\n'</literal></expr>:</case>
					<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><literal type="char">'\r'</literal></expr>:</case>
					<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">'r'</literal></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><literal type="char">'\t'</literal></expr>:</case>
					<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt>
					<break>break;</break>
				<case>case <expr><literal type="char">'\0'</literal></expr>:</case>
					<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
					<break>break;</break>
				<default>default:</default>
					<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="string">"0x%X"</literal></expr></argument>, <argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
			</block_content>}</block></switch>

			<comment type="line">// Advance reading counter by one character</comment>
			<expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="line">// next iteration requires up to 5 chars in dst buffer, for ex.</comment>
		<comment type="line">// "0x04" + terminating zero (see below)</comment>
		<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>&gt;</operator> <operator>(</operator><name>dst_str</name> <operator>+</operator> <name>dst_sz</name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<comment type="line">// Zero-terminate buffer</comment>
	<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

	<return>return <expr><name>src</name> <operator>-</operator> <name>src_buf</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>forwarded_queries</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
	<return>return <expr><name><name>counters</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>QUERY_FORWARDED</name></expr>]</index></name> <operator>+</operator>
	       <name><name>counters</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>QUERY_RETRIED</name></expr>]</index></name> <operator>+</operator>
	       <name><name>counters</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>QUERY_RETRIED_DNSSEC</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>cached_queries</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
	<return>return <expr><name><name>counters</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>QUERY_CACHE</name></expr>]</index></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>blocked_queries</name><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name><name>enum</name> <name>query_status</name></name></type> <name>status</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>status</name> <operator>&lt;</operator> <name>QUERY_STATUS_MAX</name></expr>;</condition> <incr><expr><name>status</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if<condition>(<expr><call><name>is_blocked</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>num</name> <operator>+=</operator> <name><name>counters</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>status</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
	<return>return <expr><name>num</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>__attribute__</name> <argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>short_path</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>full_path</name></expr></argument>)</argument_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>shorter</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>full_path</name></expr></argument>, <argument><expr><literal type="string">"src/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><ternary><condition><expr><name>shorter</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>shorter</name></expr> </then><else>: <expr><name>full_path</name></expr></else></ternary></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>print_FTL_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Pi-hole FTL %s\n"</literal></expr></argument>, <argument><expr><call><name>get_FTL_version</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// Skip leading string if found</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>skipStr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>startstr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>startlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>startstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>startstr</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>startlen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>message</name> <operator>+</operator> <name>startlen</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>message</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dnsmasq_diagnosis_warning</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Crop away any existing initial "warning: "</comment>
	<expr_stmt><expr><call><name>logg_warn_dnsmasq_message</name><argument_list>(<argument><expr><call><name>skipStr</name><argument_list>(<argument><expr><literal type="string">"warning: "</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
