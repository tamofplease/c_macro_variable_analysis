<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dhcp-discover.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2020 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  DHCP discover routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTLDNS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq/dnsmasq.h"</cpp:file></cpp:include>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__USE_XOPEN</name></cpp:undef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dhcp-discover.h"</cpp:file></cpp:include>
<comment type="line">// logg(), format_time()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<comment type="line">// read_FTLconf()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<comment type="line">// SIOCGIFHWADDR</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>

<comment type="line">// strncpy()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="line">//*** DHCP definitions **</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DHCP_CHADDR_LENGTH</name></cpp:macro>           <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DHCP_SNAME_LENGTH</name></cpp:macro>            <cpp:value>64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DHCP_FILE_LENGTH</name></cpp:macro>             <cpp:value>128</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_DHCP_OPTIONS_LENGTH</name></cpp:macro>          <cpp:value>312</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DHCP_SERVER_PORT</name></cpp:macro>   <cpp:value>67</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DHCP_CLIENT_PORT</name></cpp:macro>   <cpp:value>68</cpp:value></cpp:define>

<comment type="line">// Maximum time we wait for incoming DHCPOFFERs</comment>
<comment type="line">// (seconds)</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DHCPOFFER_TIMEOUT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<comment type="line">// How many threads do we spawn at maximum?</comment>
<comment type="line">// This is also the limit for interfaces</comment>
<comment type="line">// we scan for DHCP activity.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXTHREADS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<comment type="line">// Probe DHCP servers responding to the broadcast address</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROBE_BCAST</name></cpp:macro></cpp:define>

<comment type="line">// Should we generate test data for DHCP option 249?</comment>
<comment type="line">//#define TEST_OPT_249</comment>

<comment type="line">// Global lock used by all threads</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>pthread_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<struct><specifier>extern</specifier> <specifier>const</specifier> struct <name>opttab_t</name> <block>{
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u16</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
}</block> <decl><name><name>opttab</name><index>[]</index></name></decl>;</struct>

<comment type="line">// creates a socket for DHCP communication</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>create_dhcp_socket</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>dhcp_socket</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>interface</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Set up the address we're going to bind to (we will listen on any address).</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>interface</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dhcp_socket</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dhcp_socket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dhcp_socket</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dhcp_socket</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>DHCP_CLIENT_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dhcp_socket</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_ANY</name></expr>;</expr_stmt>

	<comment type="line">// create a socket for DHCP communications</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name> <init>= <expr><call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>sock</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Error: Could not create socket for interface %s!"</literal></expr></argument>, <argument><expr><name>iname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DHCP socket: %d"</literal></expr></argument>, <argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="line">// set the reuse address flag so we don't get errors when restarting</comment>
	<if_stmt><if>if<condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>,<argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_REUSEADDR</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>flag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Error: Could not set reuse address option on DHCP socket (%s)!"</literal></expr></argument>, <argument><expr><name>iname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// set the broadcast option - we need this to listen to DHCP broadcast messages</comment>
	<if_stmt><if>if<condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SOL_SOCKET</name></expr></argument>,<argument><expr><name>SO_BROADCAST</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>flag</name></expr></argument>, <argument><expr><sizeof>sizeof <name>flag</name></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Error: Could not set broadcast option on DHCP socket (%s)!"</literal></expr></argument>, <argument><expr><name>iname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// bind socket to interface</comment>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>interface</name><operator>.</operator><name>ifr_ifrn</name><operator>.</operator><name>ifrn_name</name></name></expr></argument>, <argument><expr><name>iname</name></expr></argument>, <argument><expr><name>IFNAMSIZ</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>setsockopt</name><argument_list>(<argument><expr><name>sock</name></expr></argument>,<argument><expr><name>SOL_SOCKET</name></expr></argument>, <argument><expr><name>SO_BINDTODEVICE</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>interface</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>interface</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Error: Could not bind socket to interface %s (%s)\n       ---&gt; Check your privileges (run with sudo)!\n"</literal></expr></argument>,
		     <argument><expr><name>iname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// bind the socket</comment>
	<if_stmt><if>if<condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>dhcp_socket</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dhcp_socket</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Error: Could not bind to DHCP socket (interface %s, port %d, %s)\n       ---&gt; Check your privileges (run with sudo)!\n"</literal></expr></argument>,
		     <argument><expr><name>iname</name></expr></argument>, <argument><expr><name>DHCP_CLIENT_PORT</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>sock</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// determines hardware address on client machine</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>get_hardware_address</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iname</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>iname</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// try and grab hardware address of requested interface</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><name>SIOCGIFHWADDR</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" Error: Could not get hardware address of interface '%s' (socket %d, error: %s)"</literal></expr></argument>, <argument><expr><name>iname</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ifr</name><operator>.</operator><name>ifr_hwaddr</name><operator>.</operator><name>sa_data</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>logg_sameline</name><argument_list>(<argument><expr><literal type="string">"Hardware address of this interface: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg_sameline</name><argument_list>(<argument><expr><literal type="string">"%02x%s"</literal></expr></argument>, <argument><expr><name><name>mac</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><literal type="string">":"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>dhcp_packet_struct</name>
<block>{
	<decl_stmt><decl><type><name>u_int8_t</name></type>  <name>op</name></decl>;</decl_stmt>                   <comment type="line">// packet type</comment>
	<decl_stmt><decl><type><name>u_int8_t</name></type>  <name>htype</name></decl>;</decl_stmt>                <comment type="line">// type of hardware address for this machine (Ethernet, etc)</comment>
	<decl_stmt><decl><type><name>u_int8_t</name></type>  <name>hlen</name></decl>;</decl_stmt>                 <comment type="line">// length of hardware address (of this machine)</comment>
	<decl_stmt><decl><type><name>u_int8_t</name></type>  <name>hops</name></decl>;</decl_stmt>                 <comment type="line">// hops</comment>
	<decl_stmt><decl><type><name>u_int32_t</name></type> <name>xid</name></decl>;</decl_stmt>                  <comment type="line">// random transaction id number - chosen by this machine</comment>
	<decl_stmt><decl><type><name>u_int16_t</name></type> <name>secs</name></decl>;</decl_stmt>                 <comment type="line">// seconds used in timing</comment>
	<decl_stmt><decl><type><name>u_int16_t</name></type> <name>flags</name></decl>;</decl_stmt>                <comment type="line">// flags</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>ciaddr</name></decl>;</decl_stmt>          <comment type="line">// IP address of this machine (if we already have one)</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>yiaddr</name></decl>;</decl_stmt>          <comment type="line">// IP address of this machine (offered by the DHCP server)</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>siaddr</name></decl>;</decl_stmt>          <comment type="line">// IP address of DHCP server</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>giaddr</name></decl>;</decl_stmt>          <comment type="line">// IP address of DHCP relay</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>chaddr</name> <index>[<expr><name>MAX_DHCP_CHADDR_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>      <comment type="line">// hardware address of this machine</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>sname</name> <index>[<expr><name>MAX_DHCP_SNAME_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>    <comment type="line">// name of DHCP server</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>file</name> <index>[<expr><name>MAX_DHCP_FILE_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>      <comment type="line">// boot file name (used for diskless booting?)</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>options</name><index>[<expr><name>MAX_DHCP_OPTIONS_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="line">// options</comment>
}</block></struct></type> <name>dhcp_packet_data</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOTREQUEST</name></cpp:macro>     <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOOTREPLY</name></cpp:macro>       <cpp:value>2</cpp:value></cpp:define>

<comment type="line">// sends a DHCPDISCOVER message to the specified in an attempt to find DHCP servers</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>send_dhcp_discover</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>xid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iface</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mac</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>in_addr_t</name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dhcp_packet_data</name></type> <name>discover_packet</name></decl>;</decl_stmt>

	<comment type="line">// clear the packet data structure</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>discover_packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>discover_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// boot request flag (backward compatible with BOOTP servers)</comment>
	<expr_stmt><expr><name><name>discover_packet</name><operator>.</operator><name>op</name></name> <operator>=</operator> <name>BOOTREQUEST</name></expr>;</expr_stmt>

	<comment type="line">// hardware address type</comment>
	<expr_stmt><expr><name><name>discover_packet</name><operator>.</operator><name>htype</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// ETHERNET_HARDWARE_ADDRESS;</comment>

	<comment type="line">// length of our hardware address</comment>
	<expr_stmt><expr><name><name>discover_packet</name><operator>.</operator><name>hlen</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> <comment type="line">// ETHERNET_HARDWARE_ADDRESS_LENGTH;</comment>
	<expr_stmt><expr><name><name>discover_packet</name><operator>.</operator><name>hops</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="line">// transaction id is supposed to be random</comment>
	<expr_stmt><expr><name><name>discover_packet</name><operator>.</operator><name>xid</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>discover_packet</name><operator>.</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>discover_packet</name><operator>.</operator><name>secs</name></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

	<comment type="line">// tell server it should broadcast its response</comment>
	<expr_stmt><expr><name><name>discover_packet</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">32768</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// DHCP_BROADCAST_FLAG</comment>

	<comment type="line">// our hardware address</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>discover_packet</name><operator>.</operator><name>chaddr</name></name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// first four bytes of options field is magic cookie (as per RFC 2132)</comment>
	<expr_stmt><expr><name><name>discover_packet</name><operator>.</operator><name>options</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\x63'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>discover_packet</name><operator>.</operator><name>options</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\x82'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>discover_packet</name><operator>.</operator><name>options</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\x53'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>discover_packet</name><operator>.</operator><name>options</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\x63'</literal></expr>;</expr_stmt>

	<comment type="line">// DHCP message type is embedded in options field</comment>
	<expr_stmt><expr><name><name>discover_packet</name><operator>.</operator><name>options</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">53</literal></expr>;</expr_stmt>     <comment type="line">// DHCP message type option identifier</comment>
	<expr_stmt><expr><name><name>discover_packet</name><operator>.</operator><name>options</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\x01'</literal></expr>;</expr_stmt> <comment type="line">// DHCP message option length in bytes</comment>
	<expr_stmt><expr><name><name>discover_packet</name><operator>.</operator><name>options</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>      <comment type="line">// DHCP message type code for DHCPDISCOVER</comment>

	<comment type="line">// Place end option at the end of the options</comment>
	<expr_stmt><expr><name><name>discover_packet</name><operator>.</operator><name>options</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

	<comment type="line">// send the DHCPDISCOVER packet to the specified address</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>target</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>target</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>target</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>DHCP_SERVER_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>target</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>target</name><operator>.</operator><name>sin_zero</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>target</name><operator>.</operator><name>sin_zero</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Sending DHCPDISCOVER on interface %s:%s ... "</literal></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>target</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DHCPDISCOVER XID: %lu (0x%X)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>discover_packet</name><operator>.</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>discover_packet</name><operator>.</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DHCDISCOVER ciaddr:  %s"</literal></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>discover_packet</name><operator>.</operator><name>ciaddr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DHCDISCOVER yiaddr:  %s"</literal></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>discover_packet</name><operator>.</operator><name>yiaddr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DHCDISCOVER siaddr:  %s"</literal></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>discover_packet</name><operator>.</operator><name>siaddr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DHCDISCOVER giaddr:  %s"</literal></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>discover_packet</name><operator>.</operator><name>giaddr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="line">// send the DHCPDISCOVER packet</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bytes</name> <init>= <expr><call><name>sendto</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>discover_packet</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>discover_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>target</name></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Sent %d bytes"</literal></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<return>return <expr><name>bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_OPT_249</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>void</name></type> <name>gen_249_test_data</name><parameter_list>(<parameter><decl><type><name>dhcp_packet_data</name> <modifier>*</modifier></type><name>offer_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Test data for DHCP option 249 (length 14)</comment>
	<comment type="line">// See https://discourse.pi-hole.net/t/pi-hole-unbound-via-wireguard-stops-working-over-night/49149</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>test_data</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">249</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<comment type="line">// The first 4 bytes are DHCP magic cookie</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>test_data</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>test_data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><sizeof>sizeof<argument_list>(<argument><expr><name>test_data</name></expr></argument>)</argument_list></sizeof><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// adds a DHCP OFFER to list in memory</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>print_dhcp_offer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>dhcp_packet_data</name> <modifier>*</modifier></type><name>offer_packet</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>offer_packet</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>

	<comment type="line">// Generate option test data</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TEST_OPT_249</name></cpp:ifdef>
	<expr_stmt><expr><call><name>gen_249_test_data</name><argument_list>(<argument><expr><name>offer_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="line">// process all DHCP options present in the packet</comment>
	<comment type="line">// We start from 4 as the first 32 bit are the DHCP magic coockie (verified before)</comment>
	<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>MAX_DHCP_OPTIONS_LENGTH</name></expr>;</condition><incr/>)</control>
	<block>{<block_content>
		<comment type="line">// End of options</comment>
		<if_stmt><if>if<condition>(<expr><name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>

		<comment type="line">// Sanity check</comment>
		<if_stmt><if>if<condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>MAX_DHCP_OPTIONS_LENGTH</name><operator>-</operator><literal type="number">2</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" OVERFLOWING DHCP OPTION (invalid size)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// get option type</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>opttype</name> <init>= <expr><name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="line">// get option length</comment>
		<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>optlen</name> <init>= <expr><name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>logg_sameline</name><argument_list>(<argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// Sanity check</comment>
		<if_stmt><if>if<condition>(<expr><name>x</name> <operator>+</operator> <name>optlen</name> <operator>&gt;</operator> <name>MAX_DHCP_OPTIONS_LENGTH</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" OVERFLOWING DHCP OPTION (invalid size)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Interpret option data, see RFC 1497 and RFC 2132, Section 3 for further details</comment>
		<comment type="line">// A nice summary can be found in https://tools.ietf.org/html/rfc2132#section-3</comment>
		<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>opttab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name><name>opttab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>!=</operator> <name>opttype</name></expr>)</condition><block type="pseudo"><block_content>
				<continue>continue;</continue></block_content></block></if></if_stmt>

			<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name><name>opttab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&amp;</operator> <name>OT_ADDR_LIST</name></expr>)</condition>
			<block>{<block_content>
				<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>optlen</name><operator>/</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr_list</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr_list</name><operator>.</operator><name>s_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name><operator>+</operator><name>n</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>addr_list</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>logg_sameline</name><argument_list>(<argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name><name>opttab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name>addr_list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>

				<comment type="line">// Special case: optlen == 0</comment>
				<if_stmt><if>if<condition>(<expr><name>optlen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"--- end of options ---"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if<condition>(<expr><name><name>opttab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&amp;</operator> <name>OT_NAME</name></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// We may need to escape this, buffer size: 4</comment>
				<comment type="line">// chars per control character plus room for</comment>
				<comment type="line">// possible "(empty)"</comment>
				<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>optlen</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>binbuf_to_escaped_C_literal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>optlen</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s: \"%s\""</literal></expr></argument>, <argument><expr><name><name>opttab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if<condition>(<expr><name><name>opttab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&amp;</operator> <name>OT_TIME</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>uint32_t</name></type> <name>time</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>time</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>optname</name> <init>= <expr><name><name>opttab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></init></decl>;</decl_stmt>
				<comment type="line">// Some timers deserve a more user-friedly name</comment>
				<if_stmt><if>if<condition>(<expr><name>opttype</name> <operator>==</operator> <literal type="number">58</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>optname</name> <operator>=</operator> <literal type="string">"renewal-time"</literal></expr>;</expr_stmt></block_content></block></if> <comment type="line">// "T1" in dnsmasq-notation</comment>
				<if type="elseif">else if<condition>(<expr><name>opttype</name> <operator>==</operator> <literal type="number">59</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>optname</name> <operator>=</operator> <literal type="string">"rebinding-time"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line">// "T2" in dnsmasq-notation</comment>

				<if_stmt><if>if<condition>(<expr><name>time</name> <operator>==</operator> <literal type="number">0xFFFFFFFF</literal></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s: Infinite"</literal></expr></argument>, <argument><expr><name>optname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
				<else>else
				<block>{<block_content>
					<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">42</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>format_time</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s: %lu (%s)"</literal></expr></argument>, <argument><expr><name>optname</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>time</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if<condition>(<expr><name><name>opttab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>&amp;</operator> <name>OT_DEC</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if<condition>(<expr><name>opttype</name> <operator>==</operator> <literal type="number">53</literal></expr>)</condition> <comment type="line">// DHCP MESSAGE TYPE</comment>
				<block>{<block_content>
					<switch>switch<condition>(<expr><name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition>
					<block>{<block_content>
						<case>case <expr><literal type="number">1</literal></expr>:</case>
							<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Message type: DHCPDISCOVER (1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><literal type="number">2</literal></expr>:</case>
							<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Message type: DHCPOFFER (2)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><literal type="number">3</literal></expr>:</case>
							<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Message type: DHCPREQUEST (3)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><literal type="number">4</literal></expr>:</case>
							<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Message type: DHCPDECLINE (4)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><literal type="number">5</literal></expr>:</case>
							<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Message type: DHCPACK (5)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><literal type="number">6</literal></expr>:</case>
							<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Message type: DHCPNAK (6)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><literal type="number">7</literal></expr>:</case>
							<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Message type: DHCPRELEASE (7)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						<case>case <expr><literal type="number">8</literal></expr>:</case>
							<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Message type: DHCPINFORM (8)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
						<default>default:</default>
							<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Message type: UNKNOWN (%u)"</literal></expr></argument>, <argument><expr><name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							<break>break;</break>
					</block_content>}</block></switch>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="line">// Log generic (unsigned) number</comment>
					<decl_stmt><decl><type><name>uint32_t</name></type> <name>number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if<condition>(<expr><name>optlen</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition>
					<block>{<block_content>
						<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>optlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<if_stmt><if>if<condition>(<expr><name>optlen</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>number</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
						<if type="elseif">else if<condition>(<expr><name>optlen</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
							<expr_stmt><expr><name>number</name> <operator>=</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
						<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s: %u"</literal></expr></argument>, <argument><expr><name><name>opttab</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<comment type="line">// Log some special messages that are not handled by dnsmasq</comment>
		<if_stmt><if>if<condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><name>opttype</name> <operator>==</operator> <literal type="number">252</literal></expr>)</condition> <comment type="line">// WPAD configuration (this is a non-standard extension)</comment>
			<block>{<block_content>                  <comment type="line">// see INTERNET-DRAFT Web Proxy Auto-Discovery Protocol</comment>
			                   <comment type="line">// https://tools.ietf.org/html/draft-ietf-wrec-wpad-01</comment>
				<comment type="line">// We may need to escape this, buffer size: 4</comment>
				<comment type="line">// chars per control character plus room for</comment>
				<comment type="line">// possible "(empty)"</comment>
				<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>optlen</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>binbuf_to_escaped_C_literal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>optlen</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"wpad-server: \"%s\""</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if<condition>(<expr><name>opttype</name> <operator>==</operator> <literal type="number">158</literal></expr>)</condition> <comment type="line">// DHCPv4 PCP Option (RFC 7291)</comment>
			<block>{<block_content>                       <comment type="line">// https://tools.ietf.org/html/rfc7291#section-4</comment>
				<decl_stmt><decl><type><name>uint16_t</name></type> <name>list_length</name> <init>= <expr><name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name><operator>++</operator></expr>]</index></name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 4 bytes per list entry</comment>
				<comment type="line">// Loop over IPv4 lists</comment>
				<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>list_length</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr_list</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if<condition>(<expr><name>optlen</name> <operator>&lt;</operator> <operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>addr_list</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
						<break>break;</break></block_content></block></if></if_stmt>
					<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr_list</name><operator>.</operator><name>s_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name><operator>+</operator><name>n</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>addr_list</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></sizeof></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>addr_list</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if<condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>logg_sameline</name><argument_list>(<argument><expr><literal type="string">"   "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Port Control Protocol (PCP) server: %s"</literal></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name>addr_list</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
			</block_content>}</block></if>
			<if type="elseif">else if<condition>(<expr><operator>(</operator><name>opttype</name> <operator>==</operator> <literal type="number">121</literal> <operator>||</operator> <name>opttype</name> <operator>==</operator> <literal type="number">249</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>optlen</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition>
			<block>{<block_content>
				<comment type="line">// RFC 3442 / Microsoft Classless Static Route Option</comment>
				<comment type="line">// see</comment>
				<comment type="line">// - https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-dhcpe/f9c19c79-1c7f-4746-b555-0c0fc523f3f9</comment>
				<comment type="line">// - https://datatracker.ietf.org/doc/html/rfc3442 (page 3)</comment>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s Classless Static Route:"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>opttype</name> <operator>==</operator> <literal type="number">121</literal></expr> ?</condition><then> <expr><literal type="string">"RFC 3442"</literal></expr> </then><else>: <expr><literal type="string">"Microsoft"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">// Loop over contained routes</comment>
				<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>optlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{<block_content>
					<comment type="line">// Extract destination descriptor</comment>
					<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>cidr</name> <init>= <expr><name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name><operator>+</operator><name>n</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>addr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if<condition>(<expr><name>cidr</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name><operator>+</operator><name>n</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<if_stmt><if>if<condition>(<expr><name>cidr</name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name><operator>+</operator><name>n</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<if_stmt><if>if<condition>(<expr><name>cidr</name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>addr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name><operator>+</operator><name>n</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
					<if_stmt><if>if<condition>(<expr><name>cidr</name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>addr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name><operator>+</operator><name>n</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

					<comment type="line">// Extract router address</comment>
					<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>router</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
						<expr_stmt><expr><name><name>router</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name><operator>+</operator><name>n</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

					<if_stmt><if>if<condition>(<expr><name>cidr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
					<block>{<block_content>
						<comment type="line">// default route (0.0.0.0/0)</comment>
						<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"     %d: default via %d.%d.%d.%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
						     <argument><expr><name><name>router</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>router</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>router</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>router</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></if>
					<else>else
					<block>{<block_content>
						<comment type="line">// specific route</comment>
						<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"     %d: %d.%d.%d.%d/%d via %d.%d.%d.%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,
						     <argument><expr><name><name>addr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>addr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>addr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>addr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cidr</name></expr></argument>,
						     <argument><expr><name><name>router</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>router</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>router</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>router</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block></else></if_stmt>
				</block_content>}</block></for>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>logg_sameline</name><argument_list>(<argument><expr><literal type="string">"Unknown option %d:"</literal></expr></argument>, <argument><expr><name>opttype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">// Print bytes</comment>
				<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>optlen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>logg_sameline</name><argument_list>(<argument><expr><literal type="string">" %02X"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>offer_packet</name><operator>-&gt;</operator><name>options</name><index>[<expr><name>x</name><operator>+</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
				<comment type="line">// Add newline when done above</comment>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" (length %d)"</literal></expr></argument>, <argument><expr><name>optlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Advance option pointer index</comment>
		<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>optlen</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="line">// Add one empty line for readability</comment>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// receives a DHCP packet</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>receive_dhcp_packet</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buffer_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iface</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>start_time</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sockaddr_in</name></name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>fd_set</name></type> <name>readfds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>recv_result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>socklen_t</name></type> <name>address_size</name></decl>;</decl_stmt>

	<comment type="line">// Wait for data to arrive</comment>
	<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tv</name><operator>.</operator><name>tv_usec</name></name> <operator>=</operator> <literal type="number">100000</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FD_ZERO</name><argument_list>(<argument><expr><operator>&amp;</operator><name>readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FD_SET</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// see "man select" for the "sock + 1"</comment>
	<expr_stmt><expr><call><name>select</name><argument_list>(<argument><expr><name>sock</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>readfds</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// make sure some data has arrived</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>FD_ISSET</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>readfds</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>address_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name>recv_result</name> <operator>=</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name>sock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><name>address</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>address_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"* Received %d bytes from %s:%s"</literal></expr></argument>, <argument><expr><name>recv_result</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>address</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"  after waiting for %f seconds"</literal></expr></argument>, <argument><expr><call><name>difftime</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start_time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<comment type="line">// Return on error</comment>
	<if_stmt><if>if<condition>(<expr><name>recv_result</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" recvfrom() failed on %s, error: %s"</literal></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// waits for a DHCPOFFER message from one or more DHCP servers</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_dhcp_offer</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>sock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>xid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iface</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>mac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dhcp_packet_data</name></type> <name>offer_packet</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>source</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>responses</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>valid_responses</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>start_time</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>time_t</name></type> <name>current_time</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>start_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// receive as many responses as we can</comment>
	<while>while<condition>(<expr><call><name>time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current_time</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>current_time</name><operator>-</operator><name>start_time</name><operator>)</operator> <operator>&lt;</operator> <name>DHCPOFFER_TIMEOUT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>source</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>offer_packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>offer_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>receive_dhcp_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>offer_packet</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>offer_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>sock</name></expr></argument>, <argument><expr><name>start_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>responses</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<if_stmt><if>if<condition>(<expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" DHCPOFFER XID: %lu (0x%X)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>offer_packet</name><operator>.</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>offer_packet</name><operator>.</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<comment type="line">// check packet xid to see if its the same as the one we used in the discover packet</comment>
		<if_stmt><if>if<condition>(<expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>offer_packet</name><operator>.</operator><name>xid</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>xid</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"  DHCPOFFER XID (%lu) does not match our DHCPDISCOVER XID (%lu) - ignoring packet (not for us)\n"</literal></expr></argument>,
			     <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <call><name>ntohl</name><argument_list>(<argument><expr><name><name>offer_packet</name><operator>.</operator><name>xid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator> <name>xid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// check hardware address</comment>
		<if_stmt><if>if<condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>offer_packet</name><operator>.</operator><name>chaddr</name></name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"  DHCPOFFER hardware address did not match our own - ignoring packet (not for us)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>logg_sameline</name><argument_list>(<argument><expr><literal type="string">"  DHCPREQUEST chaddr: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>uint8_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg_sameline</name><argument_list>(<argument><expr><literal type="string">"%02x%s"</literal></expr></argument>, <argument><expr><name><name>mac</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><literal type="string">":"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" (our MAC address)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>logg_sameline</name><argument_list>(<argument><expr><literal type="string">"  DHCPOFFER   chaddr: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>uint8_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
				<expr_stmt><expr><call><name>logg_sameline</name><argument_list>(<argument><expr><literal type="string">"%02x%s"</literal></expr></argument>, <argument><expr><name><name>offer_packet</name><operator>.</operator><name>chaddr</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">5</literal></expr> ?</condition><then> <expr><literal type="string">":"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" (response MAC address)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>logg_sameline</name><argument_list>(<argument><expr><literal type="string">"  Offered IP address: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>offer_packet</name><operator>.</operator><name>yiaddr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>offer_packet</name><operator>.</operator><name>yiaddr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>logg_sameline</name><argument_list>(<argument><expr><literal type="string">"  Server IP address: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>offer_packet</name><operator>.</operator><name>siaddr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>offer_packet</name><operator>.</operator><name>siaddr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>logg_sameline</name><argument_list>(<argument><expr><literal type="string">"  Relay-agent IP address: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>offer_packet</name><operator>.</operator><name>giaddr</name><operator>.</operator><name>s_addr</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>inet_ntoa</name><argument_list>(<argument><expr><name><name>offer_packet</name><operator>.</operator><name>giaddr</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"N/A"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>logg_sameline</name><argument_list>(<argument><expr><literal type="string">"  BOOTP server: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>offer_packet</name><operator>.</operator><name>sname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>offer_packet</name><operator>.</operator><name>sname</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>len</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>binbuf_to_escaped_C_literal</name><argument_list>(<argument><expr><name><name>offer_packet</name><operator>.</operator><name>sname</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"(empty)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>logg_sameline</name><argument_list>(<argument><expr><literal type="string">"  BOOTP file: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name><name>offer_packet</name><operator>.</operator><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>offer_packet</name><operator>.</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>len</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>binbuf_to_escaped_C_literal</name><argument_list>(<argument><expr><name><name>offer_packet</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"(empty)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"  DHCP options:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>print_dhcp_offer</name><argument_list>(<argument><expr><name><name>source</name><operator>.</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offer_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>valid_responses</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" Responses seen while scanning:    %d"</literal></expr></argument>, <argument><expr><name>responses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">" Responses meant for this machine: %d\n"</literal></expr></argument>, <argument><expr><name>valid_responses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DHCP packets received on interface %s: %u"</literal></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>valid_responses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>dhcp_discover_iface</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>args</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Get interface details</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>iface</name> <init>= <expr><operator>(</operator><operator>(</operator>struct <name>ifaddrs</name><operator>*</operator><operator>)</operator><name>args</name><operator>)</operator><operator>-&gt;</operator><name>ifa_name</name></expr></init></decl>;</decl_stmt>

	<comment type="line">// Set interface name as thread name</comment>
	<expr_stmt><expr><call><name>prctl</name><argument_list>(<argument><expr><name>PR_SET_NAME</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// create socket for DHCP communications</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dhcp_socket</name> <init>= <expr><call><name>create_dhcp_socket</name><argument_list>(<argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Cannot create socket, likely a permission error</comment>
	<if_stmt><if>if<condition>(<expr><name>dhcp_socket</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pthread_exit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// get hardware address of client machine</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>mac</name><index>[<expr><name>MAX_DHCP_CHADDR_LENGTH</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>get_hardware_address</name><argument_list>(<argument><expr><name>dhcp_socket</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>mac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Generate pseudo-random transaction ID</comment>
	<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>xid</name> <init>= <expr><call><name>random</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>iface</name></expr></argument>, <argument><expr><literal type="string">"lo"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Probe a local server listening on this interface</comment>
		<comment type="line">// Send DHCPDISCOVER packet to interface address</comment>
		<decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>ifaddr</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifaddr</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator>struct <name>ifaddrs</name><operator>*</operator><operator>)</operator><name>args</name><operator>)</operator><operator>-&gt;</operator><name>ifa_addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>send_dhcp_discover</name><argument_list>(<argument><expr><name>dhcp_socket</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><name><name>ifaddr</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="line">// Probe distant servers</comment>
		<comment type="line">// Send DHCPDISCOVER packet to broadcast address</comment>
		<expr_stmt><expr><call><name>send_dhcp_discover</name><argument_list>(<argument><expr><name>dhcp_socket</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><name>INADDR_BROADCAST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<comment type="line">// wait for a DHCPOFFER packet</comment>
	<expr_stmt><expr><call><name>get_dhcp_offer</name><argument_list>(<argument><expr><name>dhcp_socket</name></expr></argument>, <argument><expr><name>xid</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>mac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// close socket we created</comment>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>dhcp_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pthread_exit</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>run_dhcp_discover</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Disable terminal output during config config file parsing</comment>
	<expr_stmt><expr><call><name>log_ctrl</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Process pihole-FTL.conf to get gravity.db</comment>
	<expr_stmt><expr><call><name>read_FTLconf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Only print to terminal, disable log file</comment>
	<expr_stmt><expr><call><name>log_ctrl</name><argument_list>(<argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Scanning all your interfaces for DHCP servers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Timeout: %d seconds\n"</literal></expr></argument>, <argument><expr><name>DHCPOFFER_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Get interface names for available interfaces on this machine</comment>
	<comment type="line">// and launch a thread for each one</comment>
	<decl_stmt><decl><type><name>pthread_t</name></type> <name><name>scanthread</name><index>[<expr><name>MAXTHREADS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pthread_attr_t</name></type> <name>attr</name></decl>;</decl_stmt>
	<comment type="line">// Initialize thread attributes object with default attribute values</comment>
	<expr_stmt><expr><call><name>pthread_attr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Create processing/logging lock</comment>
	<decl_stmt><decl><type><name>pthread_mutexattr_t</name></type> <name>lock_attr</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
	<comment type="line">// Initialize the lock attributes</comment>
	<expr_stmt><expr><call><name>pthread_mutexattr_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Initialize the lock</comment>
	<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lock_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Destroy the lock attributes since we're done with it</comment>
	<expr_stmt><expr><call><name>pthread_mutexattr_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lock_attr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>addrs</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>getifaddrs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>addrs</name></expr>;</expr_stmt>

	<comment type="line">// Loop until there are no more interfaces available</comment>
	<comment type="line">// or we reached the maximum number of threads</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>tid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>tmp</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>tid</name> <operator>&lt;</operator> <name>MAXTHREADS</name></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Create a thread for interfaces of type AF_PACKET</comment>
		<if_stmt><if>if<condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>ifa_addr</name></name> <operator>&amp;&amp;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>ifa_addr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_PACKET</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scanthread</name><index>[<expr><name>tid</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><name>dhcp_discover_iface</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Unable to launch thread for interface %s, skipping..."</literal></expr></argument>,
				     <argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<comment type="line">// Increase thread ID</comment>
			<expr_stmt><expr><name>tid</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="line">// Advance to the next interface</comment>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>ifa_next</name></name></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="line">// Wait for all threads to join back with us</comment>
	<for>for<control>(<init><expr><name>tid</name><operator>--</operator></expr>;</init> <condition><expr><name>tid</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>tid</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>scanthread</name><index>[<expr><name>tid</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

	<comment type="line">// Free linked-list of interfaces on this client</comment>
	<expr_stmt><expr><call><name>freeifaddrs</name><argument_list>(<argument><expr><name>addrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>EXIT_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
