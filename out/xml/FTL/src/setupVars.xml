<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/setupVars.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Configuration interpreting routines
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"setupVars.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name>setupVarsElements</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>setupVarsArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>check_setupVarsconf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>setupVarsfp</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>setupVarsfp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>setupVars</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARN: Opening of setupVars.conf failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"      Make sure it exists and is readable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"      Message: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Successfully accessed setupVars.conf"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>setupVarsfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>find_equals</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>s</name></expr></argument>)</argument_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>chars</name> <init>= <expr><literal type="string">"="</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>*</operator><name>s</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>chars</name> <operator>||</operator> <operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>chars</name></expr></argument>, <argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
	<return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>s</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>trim_whitespace</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// isspace(char*) man page:</comment>
	<comment type="line">// checks for white-space  characters. In the "C" and "POSIX"</comment>
	<comment type="line">// locales, these are: space, form-feed ('\f'), newline ('\n'),</comment>
	<comment type="line">// carriage return ('\r'), horizontal tab ('\t'), and vertical tab</comment>
	<comment type="line">// ('\v').</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>original</name> <init>= <expr><name>string</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>modified</name> <init>= <expr><name>string</name></expr></init></decl>;</decl_stmt>
	<comment type="line">// Trim any whitespace characters (see above) at the beginning by increasing the pointer address</comment>
	<while>while <condition>(<expr><call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>original</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>original</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
	<comment type="line">// Copy the content of original into modified as long as there is something in original</comment>
	<while>while <condition>(<expr><operator>(</operator><operator>*</operator><name>modified</name> <operator>=</operator> <operator>*</operator><name>original</name><operator>++</operator><operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>modified</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
	<comment type="line">// Trim any whitespace characters (see above) at the end of the string by overwriting it</comment>
	<comment type="line">// with the zero character (marking the end of a C string)</comment>
	<while>while <condition>(<expr><name>modified</name> <operator>&gt;</operator> <name>string</name> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><operator>--</operator><name>modified</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>modified</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></while>
</block_content>}</block></function>

<comment type="line">// This will hold the read string</comment>
<comment type="line">// in memory and will serve the space</comment>
<comment type="line">// we will point to in the rest of the</comment>
<comment type="line">// process (e.g. setupVarsArray will</comment>
<comment type="line">// actually point to memory addresses</comment>
<comment type="line">// which we allocate for this buffer.</comment>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>linebuffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>size_t</name></type> <name>linebuffersize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>char</name> <modifier>*</modifier></type> <name>read_setupVarsconf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>setupVarsfp</name></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><name>setupVarsfp</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>FTLfiles</name><operator>.</operator><name>setupVars</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARN: Reading setupVars.conf failed: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// Allocate keystr</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>keystr</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>keystr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARN: read_setupVarsconf failed: could not allocate memory for keystr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>setupVarsfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>, <argument><expr><literal type="string">"%s="</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>linebuffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linebuffersize</name></expr></argument>, <argument><expr><name>setupVarsfp</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Strip (possible) newline</comment>
		<expr_stmt><expr><name><name>linebuffer</name><index>[<expr><call><name>strcspn</name><argument_list>(<argument><expr><name>linebuffer</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

		<comment type="line">// Skip comment lines</comment>
		<if_stmt><if>if<condition>(<expr><name><name>linebuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal> <operator>||</operator> <name><name>linebuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// Skip lines with other keys</comment>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>strstr</name><argument_list>(<argument><expr><name>linebuffer</name></expr></argument>, <argument><expr><name>keystr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
			<continue>continue;</continue></block_content></block></if></if_stmt>

		<comment type="line">// otherwise: key found</comment>
		<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>setupVarsfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><call><name>find_equals</name><argument_list>(<argument><expr><name>linebuffer</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
	</block_content>}</block></while>

	<if_stmt><if>if<condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARN: read_setupVarsconf failed: could not allocate memory for getline"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Key not found -&gt; return NULL</comment>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>setupVarsfp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Freeing keystr, not setting to NULL, since not used outside of this routine</comment>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>keystr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Freeing and setting to NULL to prevent a dangling pointer</comment>
	<if_stmt><if>if<condition>(<expr><name>linebuffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>linebuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>linebuffersize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>linebuffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// split string in form:</comment>
<comment type="line">//   abc,def,ghi</comment>
<comment type="line">// into char ** array:</comment>
<comment type="line">// setupVarsArray[0] = abc</comment>
<comment type="line">// setupVarsArray[1] = def</comment>
<comment type="line">// setupVarsArray[2] = ghi</comment>
<comment type="line">// setupVarsArray[3] = NULL</comment>
<function><type><name>void</name></type> <name>getSetupVarsArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>strtok</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>input</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* split string and append tokens to 'res' */</comment>

	<while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name>setupVarsArray</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>setupVarsArray</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>++</operator><name>setupVarsElements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>setupVarsArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
		<expr_stmt><expr><name><name>setupVarsArray</name><index>[<expr><name>setupVarsElements</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* realloc one extra element for the last NULL */</comment>
	<expr_stmt><expr><name>setupVarsArray</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name>setupVarsArray</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>setupVarsElements</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>setupVarsArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
	<expr_stmt><expr><name><name>setupVarsArray</name><index>[<expr><name>setupVarsElements</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>clearSetupVarsArray</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>setupVarsElements</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="line">// setting unused pointers to NULL</comment>
	<comment type="line">// protecting against dangling pointer bugs</comment>
	<comment type="line">// free only if not already NULL</comment>
	<if_stmt><if>if<condition>(<expr><name>setupVarsArray</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>setupVarsArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>setupVarsArray</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if<condition>(<expr><name>linebuffer</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>linebuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>linebuffersize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>linebuffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Example
	char * iface = read_setupVarsconf("API_EXCLUDE_DOMAINS");
	if(iface != NULL)
		logg_str("Interface: ",iface);
	getSetupVarsArray(iface);
	int i;
	for (i = 0; i &lt;= setupVarsElements; ++i)
		printf ("[%d] = %s\n", i, setupVarsArray[i]);
	clearSetupVarsArray();
*/</comment>

<function><type><name>bool</name></type> <name>insetupVarsArray</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Check for possible NULL pointer</comment>
	<comment type="line">// (this is valid input, e.g. if clients[i].name is unspecified)</comment>
	<if_stmt><if>if<condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

	<comment type="line">// Loop over all entries in setupVarsArray</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>setupVarsElements</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if<condition>(<expr><name><name>setupVarsArray</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="line">// Copying strlen-1 chars into buffer of size strlen: OK</comment>
			<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>setupVarsArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>domain</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if<condition>(<expr><name>domain</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
			<comment type="line">// strncat() NULL-terminates the copied string (strncpy() doesn't!)</comment>
			<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name><name>setupVarsArray</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>length</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if<condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>setupVarsArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
				<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></else></if_stmt></block_content></block></for>

	<comment type="line">// If not found</comment>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>bool</name></type> <name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>pure</name><operator>)</operator></expr></argument>)</argument_list> <name>getSetupVarsBool</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <name>input</name></expr></argument>)</argument_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>true</name></expr>;</return></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<comment type="line">// Global variable showing current blocking status</comment>
<decl_stmt><decl><type><name><name>enum</name> <name>blocking_status</name></name></type> <name>blockingstatus</name> <init>= <expr><name>BLOCKING_UNKNOWN</name></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>check_blocking_status</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>blocking</name> <init>= <expr><call><name>read_setupVarsconf</name><argument_list>(<argument><expr><literal type="string">"BLOCKING_ENABLED"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>message</name></decl>;</decl_stmt>

	<if_stmt><if>if<condition>(<expr><name>blocking</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>getSetupVarsBool</name><argument_list>(<argument><expr><name>blocking</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="line">// Parameter either not present in setupVars.conf</comment>
		<comment type="line">// or explicitly set to true</comment>
		<expr_stmt><expr><name>blockingstatus</name> <operator>=</operator> <name>BLOCKING_ENABLED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>message</name> <operator>=</operator> <literal type="string">"enabled"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>clearSetupVarsArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="line">// Disabled</comment>
		<expr_stmt><expr><name>blockingstatus</name> <operator>=</operator> <name>BLOCKING_DISABLED</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>message</name> <operator>=</operator> <literal type="string">"disabled"</literal></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Blocking status is %s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
