<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/main.c"><comment type="block">/* Pi-hole: A black hole for Internet advertisements
*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)
*  Network-wide ad blocking via your own hardware.
*
*  FTL Engine
*  Core routine
*
*  This file is copyright under the latest version of the EUPL.
*  Please see LICENSE file for your rights under this license. */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FTL.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"daemon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"setupVars.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"args.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"database/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"database/query-table.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"main.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"signals.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"regex_r.h"</cpp:file></cpp:include>
<comment type="line">// init_shmem()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"capabilities.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"procps.h"</cpp:file></cpp:include>
<comment type="line">// init_overtime()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"overTime.h"</cpp:file></cpp:include>
<comment type="line">// flush_message_table()</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"database/message-table.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>username</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>needGC</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>needDBGC</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>startup</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>exit_code</name> <init>= <expr><name>EXIT_SUCCESS</name></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="line">// Get user pihole-FTL is running as</comment>
	<comment type="line">// We store this in a global variable</comment>
	<comment type="line">// such that the log routine can access</comment>
	<comment type="line">// it if needed</comment>
	<expr_stmt><expr><name>username</name> <operator>=</operator> <call><name>getUserName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Parse arguments</comment>
	<comment type="line">// We run this also for no direct arguments</comment>
	<comment type="line">// to have arg{c,v}_dnsmasq initialized</comment>
	<expr_stmt><expr><call><name>parse_args</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Try to open FTL log</comment>
	<expr_stmt><expr><call><name>init_config_mutex</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init_FTL_log</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>timer_start</name><argument_list>(<argument><expr><name>EXIT_TIMER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"########## FTL started on %s! ##########"</literal></expr></argument>, <argument><expr><call><name>hostname</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>log_FTL_version</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Process pihole-FTL.conf</comment>
	<expr_stmt><expr><call><name>read_FTLconf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Catch signals not handled by dnsmasq</comment>
	<comment type="line">// We configure real-time signals later (after dnsmasq has forked)</comment>
	<expr_stmt><expr><call><name>handle_signals</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Initialize shared memory</comment>
	<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>init_shmem</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Initialization of shared memory failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// Check if there is already a running FTL process</comment>
		<expr_stmt><expr><call><name>check_running_FTL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>EXIT_FAILURE</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="line">// pihole-FTL should really be run as user "pihole" to not mess up with file permissions</comment>
	<comment type="line">// print warning otherwise</comment>
	<if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>username</name></expr></argument>, <argument><expr><literal type="string">"pihole"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"WARNING: Starting pihole-FTL as user %s is not recommended"</literal></expr></argument>, <argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Write PID early on so systemd cannot be fooled during DELAY_STARTUP</comment>
	<comment type="line">// times. The PID in this file will later be overwritten after forking</comment>
	<expr_stmt><expr><call><name>savepid</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Delay startup (if requested)</comment>
	<comment type="line">// Do this before reading the database to make this option not only</comment>
	<comment type="line">// useful for interfaces that aren't ready but also for fake-hwclocks</comment>
	<comment type="line">// which aren't ready at this point</comment>
	<expr_stmt><expr><call><name>delay_startup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Initialize overTime datastructure</comment>
	<expr_stmt><expr><call><name>initOverTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Initialize query database (pihole-FTL.db)</comment>
	<expr_stmt><expr><call><name>db_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Flush messages stored in the long-term database</comment>
	<expr_stmt><expr><call><name>flush_message_table</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Try to import queries from long-term database if available</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>DBimport</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>DB_read_queries</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>log_counter_info</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>check_setupVarsconf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Check for availability of capabilities in debug mode</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>&amp;</operator> <name>DEBUG_CAPS</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>check_capabilities</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// Start the resolver</comment>
	<expr_stmt><expr><name>startup</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>debug</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc_dnsmasq</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"DEBUG: argv[%i] = \"%s\""</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>argv_dnsmasq</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>main_dnsmasq</name><argument_list>(<argument><expr><name>argc_dnsmasq</name></expr></argument>, <argument><expr><name>argv_dnsmasq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Shutting down..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// Extra grace time is needed as dnsmasq script-helpers may not be</comment>
	<comment type="line">// terminating immediately</comment>
	<expr_stmt><expr><call><name>sleepms</name><argument_list>(<argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Save new queries to database (if database is used)</comment>
	<if_stmt><if>if<condition>(<expr><name><name>config</name><operator>.</operator><name>DBexport</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>lock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>saved</name></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><operator>(</operator><name>saved</name> <operator>=</operator> <call><name>DB_save_queries</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>logg</name><argument_list>(<argument><expr><literal type="string">"Finished final database update (stored %d queries)"</literal></expr></argument>, <argument><expr><name>saved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>unlock_shm</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><name>exit_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>exit_code</name></expr>;</return>
</block_content>}</block></function>
</unit>
