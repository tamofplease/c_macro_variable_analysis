<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/rrfilter.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<comment type="block">/* Code to safely remove RRs from a DNS answer */</comment> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<comment type="block">/* Go through a domain name, find "pointers" and fix them up based on how many bytes
   we've chopped out of the packet, or check they don't point into an elided part.  */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_name</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>namep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fixup</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>rrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rr_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ansp</name> <init>= <expr><operator>*</operator><name>namep</name></expr></init></decl>;</decl_stmt>

  <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>label_type</name></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>ansp</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name>label_type</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>ansp</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>label_type</name> <operator>==</operator> <literal type="number">0xc0</literal></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* pointer for compression. */</comment>
	  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>ansp</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	  <expr_stmt><expr><name>offset</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>ansp</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>offset</name> <operator>|=</operator> <operator>*</operator><name>ansp</name><operator>++</operator></expr>;</expr_stmt>

	  <expr_stmt><expr><name>p</name> <operator>=</operator> <name>offset</name> <operator>+</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr>;</expr_stmt>
	  
	  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rr_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name><name>rrs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if>
	    <if type="elseif">else
	      if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>offset</name> <operator>-=</operator> <name><name>rrs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>rrs</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

	  <comment type="block">/* does the pointer end up in an elided RR? */</comment>
	  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	  <comment type="block">/* No, scale the pointer */</comment>
	  <if_stmt><if>if <condition>(<expr><name>fixup</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>ansp</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><operator>*</operator><name>ansp</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>offset</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><operator>*</operator><name>ansp</name><operator>++</operator> <operator>=</operator> <name>offset</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  <break>break;</break>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>label_type</name> <operator>==</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if> <comment type="block">/* reserved */</comment>
      <if type="elseif">else if <condition>(<expr><name>label_type</name> <operator>==</operator> <literal type="number">0x40</literal></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* Extended label type */</comment>
	  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>count</name></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CHECK_LEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>ansp</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>ansp</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* we only understand bitstrings */</comment>
	  
	  <expr_stmt><expr><name>count</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>ansp</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* Bits in bitstring */</comment>
	  
	  <if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* count == 0 means 256 bits */</comment>
	    <expr_stmt><expr><name>ansp</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>ansp</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>count</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content> <comment type="block">/* label type == 0 Bottom six bits is length */</comment>
	  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><operator>*</operator><name>ansp</name><operator>++</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></init></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ADD_RDLEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>ansp</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt> <comment type="block">/* zero length label marks the end. */</comment>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

  <expr_stmt><expr><operator>*</operator><name>namep</name> <operator>=</operator> <name>ansp</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Go through RRs and check or fixup the domain names contained within */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>check_rrs</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fixup</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>rrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rr_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>class</name></decl>, <decl><type ref="prev"/><name>rdlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>skip_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <comment type="block">/* TTL */</comment>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>rdlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* If this RR is to be elided, don't fix up its contents */</comment>
      <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>rr_count</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>rrs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>pp</name></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

      <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>rr_count</name></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* fixup name of RR */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>fixup</name></expr></argument>, <argument><expr><name>rrs</name></expr></argument>, <argument><expr><name>rr_count</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>class</name> <operator>==</operator> <name>C_IN</name></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>u16</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
 
	      <for>for <control>(<init><expr><name>pp</name> <operator>=</operator> <name>p</name></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <call><name>rrfilter_desc</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><operator>*</operator><name>d</name> <operator>!=</operator> <operator>(</operator><name>u16</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>d</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>pp</name> <operator>+=</operator> <operator>*</operator><name>d</name></expr>;</expr_stmt></block_content></block></if>
		  <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>check_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pp</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>fixup</name></expr></argument>, <argument><expr><name>rrs</name></expr></argument>, <argument><expr><name>rr_count</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
		</block_content>}</block></for>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ADD_RDLEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>rdlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
	

<comment type="block">/* mode may be remove EDNS0 or DNSSEC RRs or remove A or AAAA from answer section. */</comment>
<function><type><name>size_t</name></type> <name>rrfilter</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>plen</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>rrs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>rr_sz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>header</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>rdlen</name></decl>, <decl><type ref="prev"/><name>qtype</name></decl>, <decl><type ref="prev"/><name>qclass</name></decl>, <decl><type ref="prev"/><name>rr_found</name></decl>, <decl><type ref="prev"/><name>chop_an</name></decl>, <decl><type ref="prev"/><name>chop_ns</name></decl>, <decl><type ref="prev"/><name>chop_ar</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>qdcount</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
      <operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>skip_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>plen</name></expr>;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>qtype</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>qclass</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* First pass, find pointers to start and end of all the records we wish to elide:
     records added for DNSSEC, unless explicitly queried for */</comment>
  <for>for <control>(<init><expr><name>rr_found</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>chop_ns</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>chop_an</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>chop_ar</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> 
       <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name></expr></argument>)</argument_list></call></expr>;</condition>
       <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pstart</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>class</name></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>skip_name</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>plen</name></expr>;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>class</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <comment type="block">/* TTL */</comment>
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>rdlen</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ADD_RDLEN</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><name>rdlen</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>plen</name></expr>;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>RRFILTER_EDNS0</name></expr>)</condition> <comment type="block">/* EDNS */</comment>
	<block>{<block_content>
	  <comment type="block">/* EDNS mode, remove T_OPT from additional section only */</comment>
	  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <name>type</name> <operator>!=</operator> <name>T_OPT</name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>mode</name> <operator>==</operator> <name>RRFILTER_DNSSEC</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>T_NSEC</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>T_NSEC3</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>T_RRSIG</name></expr>)</condition><block type="pseudo"><block_content>
	    <comment type="block">/* DNSSEC mode, remove SIGs and NSECs from all three sections. */</comment>
	    <continue>continue;</continue></block_content></block></if></if_stmt>

	  <comment type="block">/* Don't remove the answer. */</comment>
	  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>type</name> <operator>==</operator> <name>qtype</name> <operator>&amp;&amp;</operator> <name>class</name> <operator>==</operator> <name>qclass</name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <comment type="block">/* Only looking at answer section now. */</comment>
	  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>class</name> <operator>!=</operator> <name>C_IN</name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>RRFILTER_A</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>T_A</name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <name>RRFILTER_AAAA</name> <operator>&amp;&amp;</operator> <name>type</name> <operator>!=</operator> <name>T_AAAA</name></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>expand_workspace</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rrs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rr_sz</name></expr></argument>, <argument><expr><name>rr_found</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>plen</name></expr>;</return></block_content></block></if></if_stmt> 
      
      <expr_stmt><expr><name><name>rrs</name><index>[<expr><name>rr_found</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>pstart</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>rrs</name><index>[<expr><name>rr_found</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>chop_an</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>chop_ns</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>chop_ar</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
  
  <comment type="block">/* Nothing to do. */</comment>
  <if_stmt><if>if <condition>(<expr><name>rr_found</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>plen</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Second pass, look for pointers in names in the records we're keeping and make sure they don't
     point to records we're going to elide. This is theoretically possible, but unlikely. If
     it happens, we give up and leave the answer unchanged. */</comment>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>header</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  
  <comment type="block">/* question first */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rrs</name></expr></argument>, <argument><expr><name>rr_found</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>plen</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <comment type="block">/* qclass, qtype */</comment>
  
  <comment type="block">/* Now answers and NS */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>check_rrs</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rrs</name></expr></argument>, <argument><expr><name>rr_found</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>plen</name></expr>;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* Third pass, actually fix up pointers in the records */</comment>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>header</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>check_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rrs</name></expr></argument>, <argument><expr><name>rr_found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <comment type="block">/* qclass, qtype */</comment>
  
  <expr_stmt><expr><call><name>check_rrs</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>plen</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rrs</name></expr></argument>, <argument><expr><name>rr_found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Fourth pass, elide records */</comment>
  <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name><name>rrs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rr_found</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start</name> <init>= <expr><name><name>rrs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>!=</operator> <name>rr_found</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>rrs</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name><operator>)</operator> <operator>+</operator> <name>plen</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      
      <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name><operator>-</operator><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>end</name><operator>-</operator><name>start</name></expr>;</expr_stmt>
    </block_content>}</block></for>
     
  <expr_stmt><expr><name>plen</name> <operator>=</operator> <name>p</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>chop_an</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>chop_ns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>chop_ar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>plen</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* This is used in the DNSSEC code too, hence it's exported */</comment>
<function><type><name>u16</name> <modifier>*</modifier></type><name>rrfilter_desc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* List of RRtypes which include domains in the data.
     0 -&gt; domain
     integer -&gt; no. of plain bytes
     -1 -&gt; end

     zero is not a valid RRtype, so the final entry is returned for
     anything which needs no mangling.
  */</comment>
  
  <decl_stmt><decl><type><specifier>static</specifier> <name>u16</name></type> <name><name>rr_desc</name><index>[]</index></name> <init>= 
    <expr><block>{ 
      <expr><name>T_NS</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, 
      <expr><name>T_MD</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_MF</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_CNAME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_SOA</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_MB</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_MG</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_MR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_PTR</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_MINFO</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_MX</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_RP</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_AFSDB</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_RT</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_SIG</name></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_PX</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_NXT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_KX</name></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_SRV</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><name>T_DNAME</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
      <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> <comment type="block">/* wildcard/catchall */</comment>
    }</block></expr></init></decl>;</decl_stmt> 
  
  <decl_stmt><decl><type><name>u16</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>rr_desc</name></expr></init></decl>;</decl_stmt>
  
  <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>type</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <while>while <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <operator>(</operator><name>u16</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while></block_content></block></while>

  <return>return <expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>expand_workspace</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>wkspc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>szp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>new</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>old</name> <init>= <expr><operator>*</operator><name>szp</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>old</name> <operator>&gt;=</operator> <name>new</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>new</name> <operator>&gt;=</operator> <literal type="number">100</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>new</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>whine_realloc</name><argument_list>(<argument><expr><operator>*</operator><name>wkspc</name></expr></argument>, <argument><expr><name>new</name> <operator>*</operator> sizeof<operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name><operator>+</operator><name>old</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>new</name><operator>-</operator><name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><operator>*</operator><name>wkspc</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>szp</name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
