<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/domain-match.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>order</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>qdomain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>qlen</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>order_qsort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>order_servers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* If the server is USE_RESOLV or LITERAL_ADDRES, it lives on the local_domains chain. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERV_IS_LOCAL</name></cpp:macro> <cpp:value>(SERV_USE_RESOLV | SERV_LITERAL_ADDRESS)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>build_server_array</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LOOP</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_LOOP</name><operator>)</operator></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <block>{<block_content>
	<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_WILDCARD</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>server_has_wildcard</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>local_domains</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_WILDCARD</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>server_has_wildcard</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarraysz</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarrayhwm</name></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>new</name></decl>;</decl_stmt>

      <expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt> <comment type="block">/* A few extra without re-allocating. */</comment>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>new</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>server</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarrayhwm</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  
  <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LOOP</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_LOOP</name><operator>)</operator></expr>)</condition>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <block>{<block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>serv</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>serial</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>last_server</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>local_domains</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>count</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>count</name></expr>]</index></name> <operator>=</operator> <name>serv</name></expr>;</expr_stmt></block_content></block></for>
  
  <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarraysz</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>server</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>order_qsort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* servers need the location in the array to find all the whole
     set of equivalent servers from a pointer to a single one. */</comment>
  <for>for <control>(<init><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>count</name> <operator>&lt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarraysz</name></name></expr>;</condition> <incr><expr><name>count</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>count</name></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>SERV_IS_LOCAL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>count</name></expr>]</index></name><operator>-&gt;</operator><name>arrayposn</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/* we're looking for the server whose domain is the longest exact match
   to the RH end of qdomain, or a local address if the flags match.
   Add '.' to the LHS of the query string so
   server=/.example.com/ works.

   A flag of F_SERVER returns an upstream server only.
   A flag of F_DNSSECOK returns a DNSSEC capable server only and
   also disables NODOTS servers from consideration.
   A flag of F_DOMAINSRV returns a domain-specific server only.
   A flag of F_CONFIG returns anything that generates a local
   reply of IPv4 or IPV6.
   return 0 if nothing found, 1 otherwise.
*/</comment>
<function><type><name>int</name></type> <name>lookup_domain</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lowout</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>highout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>, <decl><type ref="prev"/><name>crop_query</name></decl>, <decl><type ref="prev"/><name>nodots</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>qlen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>try</name></decl>, <decl><type ref="prev"/><name>high</name></decl>, <decl><type ref="prev"/><name>low</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nlow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nhigh</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>qdomain</name> <init>= <expr><name>domain</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* may be no configured servers. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarraysz</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <comment type="block">/* find query length and presence of '.' */</comment>
  <for>for <control>(<init><expr><name>cp</name> <operator>=</operator> <name>qdomain</name></expr><operator>,</operator> <expr><name>nodots</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>qlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>*</operator><name>cp</name></expr>;</condition> <incr><expr><name>qlen</name><operator>++</operator></expr><operator>,</operator> <expr><name>cp</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>cp</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>nodots</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

  <comment type="block">/* Handle empty name, and searches for DNSSEC queries without
     diverting to NODOTS servers. */</comment>
  <if_stmt><if>if <condition>(<expr><name>qlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>flags</name> <operator>&amp;</operator> <name>F_DNSSECOK</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>nodots</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Search shorter and shorter RHS substrings for a match */</comment>
  <while>while <condition>(<expr><name>qlen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* Note that when we chop off a label, all the possible matches
	 MUST be at a larger index than the nearest failing match with one more
	 character, since the array is sorted longest to smallest. Hence 
	 we don't reset low to zero here, we can go further below and crop the 
	 search string to the size of the largest remaining server
	 when this match fails. */</comment>
      <expr_stmt><expr><name>high</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarraysz</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>crop_query</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      
      <comment type="block">/* binary search */</comment>
      <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> 
	<block>{<block_content>
	  <expr_stmt><expr><name>try</name> <operator>=</operator> <operator>(</operator><name>low</name> <operator>+</operator> <name>high</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>order</name><argument_list>(<argument><expr><name>qdomain</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>try</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <break>break;</break></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>high</name> <operator>==</operator> <name>try</name></expr>)</condition>
		<block>{<block_content>
		  <comment type="block">/* qdomain is longer or same length as longest domain, and try == 0 
		     crop the query to the longest domain. */</comment>
		  <expr_stmt><expr><name>crop_query</name> <operator>=</operator> <name>qlen</name> <operator>-</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>try</name></expr>]</index></name><operator>-&gt;</operator><name>domain_len</name></expr>;</expr_stmt>
		  <break>break;</break>
		</block_content>}</block></if></if_stmt>
	      <expr_stmt><expr><name>high</name> <operator>=</operator> <name>try</name></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>low</name> <operator>==</operator> <name>try</name></expr>)</condition>
		<block>{<block_content>
		  <comment type="block">/* try now points to the last domain that sorts before the query, so 
		     we know that a substring of the query shorter than it is required to match, so
		     find the largest domain that's shorter than try. Note that just going to
		     try+1 is not optimal, consider searching bbb in (aaa,ccc,bb). try will point
		     to aaa, since ccc sorts after bbb, but the first domain that has a chance to 
		     match is bb. So find the length of the first domain later than try which is
		     is shorter than it. 
		     There's a nasty edge case when qdomain sorts before _any_ of the 
		     server domains, where try _doesn't point_ to the last domain that sorts
		     before the query, since no such domain exists. In that case, the loop 
		     exits via the rc &lt; 0 &amp;&amp; high == try path above and this code is
		     not executed. */</comment>
		  <decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>old</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>try</name></expr>]</index></name><operator>-&gt;</operator><name>domain_len</name></expr></init></decl>;</decl_stmt>
		  <while>while <condition>(<expr><operator>++</operator><name>try</name> <operator>!=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarraysz</name></name></expr>)</condition>
		    <block>{<block_content>
		      <if_stmt><if>if <condition>(<expr><name>old</name> <operator>!=</operator> <operator>(</operator><name>len</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>try</name></expr>]</index></name><operator>-&gt;</operator><name>domain_len</name><operator>)</operator></expr>)</condition>
			<block>{<block_content>
			  <expr_stmt><expr><name>crop_query</name> <operator>=</operator> <name>qlen</name> <operator>-</operator> <name>len</name></expr>;</expr_stmt>
			  <break>break;</break>
			</block_content>}</block></if></if_stmt>
		    </block_content>}</block></while>
		  <break>break;</break>
		</block_content>}</block></if></if_stmt>
	      <expr_stmt><expr><name>low</name> <operator>=</operator> <name>try</name></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></while><empty_stmt>;</empty_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>server_has_wildcard</name></name></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* if we have example.com and *example.com we need to check against *example.com, 
		 but the binary search may have found either. Use the fact that example.com is sorted before *example.com
		 We favour example.com in the case that both match (ie www.example.com) */</comment>
	      <while>while <condition>(<expr><name>try</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>order</name><argument_list>(<argument><expr><name>qdomain</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>try</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>try</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>qdomain</name> <operator>==</operator> <name>domain</name> <operator>||</operator> <operator>*</operator><name>qdomain</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>qdomain</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <while>while <condition>(<expr><name>try</name> <operator>&lt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarraysz</name></name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>order</name><argument_list>(<argument><expr><name>qdomain</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>try</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>try</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
		  
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>try</name></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>SERV_WILDCARD</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		     <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>found</name> <operator>&amp;&amp;</operator> <call><name>filter_servers</name><argument_list>(<argument><expr><name>try</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nhigh</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <comment type="block">/* We have a match, but it may only be (say) an IPv6 address, and
	       if the query wasn't for an AAAA record, it's no good, and we need
	       to continue generalising */</comment>
	    <block>{<block_content>
	      <comment type="block">/* We've matched a setting which says to use servers without a domain.
		 Continue the search with empty query. We set the F_SERVER flag
		 so that --address=/#/... doesn't match. */</comment>
	      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>nlow</name></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>SERV_USE_RESOLV</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>crop_query</name> <operator>=</operator> <name>qlen</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>F_SERVER</name></expr>;</expr_stmt>
		</block_content>}</block></if>
	      <else>else<block type="pseudo"><block_content>
		<break>break;</break></block_content></block></else></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <comment type="block">/* crop_query must be at least one always. */</comment>
      <if_stmt><if>if <condition>(<expr><name>crop_query</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>crop_query</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <comment type="block">/* strip chars off the query based on the largest possible remaining match,
	 then continue to the start of the next label unless we have a wildcard
	 domain somewhere, in which case we have to go one at a time. */</comment>
      <expr_stmt><expr><name>qlen</name> <operator>-=</operator> <name>crop_query</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>qdomain</name> <operator>+=</operator> <name>crop_query</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>server_has_wildcard</name></name></expr>)</condition><block type="pseudo"><block_content>
	<while>while <condition>(<expr><name>qlen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>  <operator>(</operator><operator>*</operator><operator>(</operator><name>qdomain</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="char">'.'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>qlen</name><operator>--</operator></expr><operator>,</operator> <expr><name>qdomain</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>
    </block_content>}</block></while>

  <comment type="block">/* domain has no dots, and we have at least one server configured to handle such,
     These servers always sort to the very end of the array. 
     A configured server eg server=/lan/ will take precdence. */</comment>
  <if_stmt><if>if <condition>(<expr><name>nodots</name> <operator>&amp;&amp;</operator>
      <operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarraysz</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>SERV_FOR_NODOTS</name><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><name>nlow</name> <operator>==</operator> <name>nhigh</name> <operator>||</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>nlow</name></expr>]</index></name><operator>-&gt;</operator><name>domain_len</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>filter_servers</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarraysz</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nlow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nhigh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>lowout</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>lowout</name> <operator>=</operator> <name>nlow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>highout</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>highout</name> <operator>=</operator> <name>nhigh</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>nlow</name> <operator>==</operator> <name>nhigh</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return first server in group of equivalent servers; this is the "master" record. */</comment>
<function><type><name>int</name></type> <name>server_samegroup</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <return>return <expr><call><name>order_servers</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>filter_servers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lowout</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>highout</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>nlow</name> <init>= <expr><name>seed</name></expr></init></decl>, <decl><type ref="prev"/><name>nhigh</name> <init>= <expr><name>seed</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  
  <comment type="block">/* expand nlow and nhigh to cover all the records with the same domain 
     nlow is the first, nhigh - 1 is the last. nlow=nhigh means no servers,
     which can happen below. */</comment>
  <while>while <condition>(<expr><name>nlow</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>order_servers</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>nlow</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>nlow</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>nlow</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>
  
  <while>while <condition>(<expr><name>nhigh</name> <operator>&lt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarraysz</name></name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>order_servers</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>nhigh</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>nhigh</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>nhigh</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
  
  <expr_stmt><expr><name>nhigh</name><operator>++</operator></expr>;</expr_stmt>
  
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SERV_LOCAL_ADDRESS</name></cpp:macro> <cpp:value>(SERV_6ADDR | SERV_4ADDR | SERV_ALL_ZEROS)</cpp:value></cpp:define>
  
  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_CONFIG</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* We're just lookin for any matches that return an RR. */</comment>
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nlow</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nhigh</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>SERV_LOCAL_ADDRESS</name></expr>)</condition><block type="pseudo"><block_content>
	  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
      
      <comment type="block">/* failed, return failure. */</comment>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>nhigh</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>nhigh</name> <operator>=</operator> <name>nlow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <comment type="block">/* Now the servers are on order between low and high, in the order
	 IPv6 addr, IPv4 addr, return zero for both, resolvconf servers, send upstream, no-data return.
	 
	 See which of those match our query in that priority order and narrow (low, high) */</comment>
      
      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nlow</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nhigh</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>SERV_6ADDR</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_SERVER</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>nlow</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_IPV6</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>nhigh</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <expr_stmt><expr><name>nlow</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	  
	  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nlow</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nhigh</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>SERV_4ADDR</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_SERVER</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>nlow</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_IPV4</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>nhigh</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
	  <else>else
	    <block>{<block_content>
	      <expr_stmt><expr><name>nlow</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	      
	      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nlow</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nhigh</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>SERV_ALL_ZEROS</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_SERVER</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>nlow</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>nhigh</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
	      <else>else
		<block>{<block_content>
		  <expr_stmt><expr><name>nlow</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		  
		  <comment type="block">/* Short to resolv.conf servers */</comment>
		  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nlow</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nhigh</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>SERV_USE_RESOLV</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
		  
		  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>nlow</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>nhigh</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if>
		  <else>else
		    <block>{<block_content>
		      <comment type="block">/* now look for a server */</comment>
		      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>nlow</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nhigh</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>SERV_LITERAL_ADDRESS</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
		      
		      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>nlow</name></expr>)</condition>
			<block>{<block_content>
			  <comment type="block">/* If we want a server that can do DNSSEC, and this one can't, 
			     return nothing, similarly if were looking only for a server
			     for a particular domain. */</comment>
			  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_DNSSECOK</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>nlow</name></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>SERV_DO_DNSSEC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><name>nlow</name> <operator>=</operator> <name>nhigh</name></expr>;</expr_stmt></block_content></block></if>
			  <if type="elseif">else if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>F_DOMAINSRV</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>nlow</name></expr>]</index></name><operator>-&gt;</operator><name>domain_len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><name>nlow</name> <operator>=</operator> <name>nhigh</name></expr>;</expr_stmt></block_content></block></if>
			  <else>else<block type="pseudo"><block_content>
			    <expr_stmt><expr><name>nhigh</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
			</block_content>}</block></if>
		      <else>else
			<block>{<block_content>
			  <comment type="block">/* --local=/domain/, only return if we don't need a server. */</comment>
			  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>F_DNSSECOK</name> <operator>|</operator> <name>F_DOMAINSRV</name> <operator>|</operator> <name>F_SERVER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><name>nhigh</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></else></if_stmt>
		    </block_content>}</block></else></if_stmt>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>lowout</name> <operator>=</operator> <name>nlow</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>highout</name> <operator>=</operator> <name>nhigh</name></expr>;</expr_stmt>
  
  <return>return <expr><operator>(</operator><name>nlow</name> <operator>!=</operator> <name>nhigh</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>is_local_answer</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>first</name></expr>]</index></name><operator>-&gt;</operator><name>flags</name><operator>)</operator> <operator>&amp;</operator> <name>SERV_LITERAL_ADDRESS</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SERV_4ADDR</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>F_IPV4</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SERV_6ADDR</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>F_IPV6</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SERV_ALL_ZEROS</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>rc</name> <operator>=</operator> <name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <comment type="block">/* argument first is the first struct server which matches the query type;
	     now roll back to the server which is just the same domain, to check if that 
	     provides an answer of a different type. */</comment>

	  <for>for <control>(<init>;</init><condition><expr><name>first</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>order_servers</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>first</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>first</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>first</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>
	  
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>first</name></expr>]</index></name><operator>-&gt;</operator><name>flags</name> <operator>&amp;</operator> <name>SERV_LOCAL_ADDRESS</name><operator>)</operator> <operator>||</operator>
	      <call><name>check_for_local_domain</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>F_NOERR</name></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>F_NXDOMAIN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>make_local_answer</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>gotname</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ede</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>trunc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>anscount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <operator>(</operator><name>F_NXDOMAIN</name> <operator>|</operator> <name>F_NOERR</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>flags</name> <operator>|</operator> <name>gotname</name> <operator>|</operator> <name>F_NEG</name> <operator>|</operator> <name>F_CONFIG</name> <operator>|</operator> <name>F_FORWARD</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
  <expr_stmt><expr><call><name>setup_reply</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>ede</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>p</name> <operator>=</operator> <call><name>skip_questions</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	  
  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>gotname</name> <operator>&amp;</operator> <name>F_IPV4</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>start</name> <operator>=</operator> <name>first</name></expr>;</init> <condition><expr><name>start</name> <operator>!=</operator> <name>last</name></expr>;</condition> <incr><expr><name>start</name><operator>++</operator></expr></incr>)</control>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>serv_addr4</name></name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><operator>(</operator>struct <name>serv_addr4</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_ALL_ZEROS</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>addr4</name></name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dns_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_A</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><operator>(</operator><name>flags</name> <operator>|</operator> <name>F_CONFIG</name> <operator>|</operator> <name>F_FORWARD</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>F_IPV6</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>gotname</name> <operator>&amp;</operator> <name>F_IPV6</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>start</name> <operator>=</operator> <name>first</name></expr>;</init> <condition><expr><name>start</name> <operator>!=</operator> <name>last</name></expr>;</condition> <incr><expr><name>start</name><operator>++</operator></expr></incr>)</control>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>serv_addr6</name></name> <modifier>*</modifier></type><name>srv</name> <init>= <expr><operator>(</operator>struct <name>serv_addr6</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>srv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_ALL_ZEROS</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>addr6</name></name> <operator>=</operator> <name><name>srv</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dns_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>local_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_AAAA</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"6"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><operator>(</operator><name>flags</name> <operator>|</operator> <name>F_CONFIG</name> <operator>|</operator> <name>F_FORWARD</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><name>F_IPV4</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>trunc</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>|=</operator> <name>HB3_TC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>anscount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><name>p</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DNSSEC</name></cpp:ifdef>
<function><type><name>int</name></type> <name>dnssec_server</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>server</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>keyname</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>firstp</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>lastp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>last</name></decl>, <decl><type ref="prev"/><name>index</name></decl>;</decl_stmt>

  <comment type="block">/* Find server to send DNSSEC query to. This will normally be the 
     same as for the original query, but may be another if
     servers for domains are involved. */</comment>		      
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>lookup_domain</name><argument_list>(<argument><expr><name>keyname</name></expr></argument>, <argument><expr><name>F_DNSSECOK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>last</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>index</name> <operator>=</operator> <name>first</name></expr>;</init> <condition><expr><name>index</name> <operator>!=</operator> <name>last</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>index</name></expr>]</index></name> <operator>==</operator> <name>server</name></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	      
  <comment type="block">/* No match to server used for original query.
     Use newly looked up set. */</comment>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>last</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>index</name> <operator>=</operator>  <ternary><condition><expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>first</name></expr>]</index></name><operator>-&gt;</operator><name>last_server</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then>
      <expr><name>first</name></expr> </then><else>: <expr><name><name>daemon</name><operator>-&gt;</operator><name>serverarray</name><index>[<expr><name>first</name></expr>]</index></name><operator>-&gt;</operator><name>last_server</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>firstp</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>firstp</name> <operator>=</operator> <name>first</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>lastp</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>lastp</name> <operator>=</operator> <name>last</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
   
  <return>return <expr><name>index</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* order by size, then by dictionary order */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>order</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>qdomain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>qlen</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>dlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
  <comment type="block">/* servers for dotless names always sort last 
     searched for name is never dotless. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_FOR_NODOTS</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>dlen</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>domain_len</name></name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>qlen</name> <operator>&lt;</operator> <name>dlen</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>qlen</name> <operator>&gt;</operator> <name>dlen</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><call><name>hostname_order</name><argument_list>(<argument><expr><name>qdomain</name></expr></argument>, <argument><expr><name><name>serv</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>order_servers</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <comment type="block">/* need full comparison of dotless servers in 
     order_qsort() and filter_servers() */</comment>

  <if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_FOR_NODOTS</name></expr>)</condition><block type="pseudo"><block_content>
     <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>s2</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_FOR_NODOTS</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>
   
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>order</name><argument_list>(<argument><expr><name><name>s1</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><name><name>s1</name><operator>-&gt;</operator><name>domain_len</name></name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* For identical domains, sort wildcard ones first */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>s1</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_WILDCARD</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>s2</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_WILDCARD</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>s2</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_WILDCARD</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>
  
<function><type><specifier>static</specifier> <name>int</name></type> <name>order_qsort</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator>struct <name>server</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>a</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator>struct <name>server</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>b</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>order_servers</name><argument_list>(<argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Sort all literal NODATA and local IPV4 or IPV6 responses together,
     in a very specific order. We flip the SERV_LITERAL_ADDRESS bit
     so the order is IPv6 literal, IPv4 literal, all-zero literal, 
     unqualified servers, upstream server, NXDOMAIN literal. */</comment>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s2</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SERV_LITERAL_ADDRESS</name> <operator>|</operator> <name>SERV_4ADDR</name> <operator>|</operator> <name>SERV_6ADDR</name> <operator>|</operator> <name>SERV_USE_RESOLV</name> <operator>|</operator> <name>SERV_ALL_ZEROS</name><operator>)</operator><operator>)</operator> <operator>^</operator> <name>SERV_LITERAL_ADDRESS</name><operator>)</operator> <operator>-</operator>
      <operator>(</operator><operator>(</operator><name><name>s1</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>SERV_LITERAL_ADDRESS</name> <operator>|</operator> <name>SERV_4ADDR</name> <operator>|</operator> <name>SERV_6ADDR</name> <operator>|</operator> <name>SERV_USE_RESOLV</name> <operator>|</operator> <name>SERV_ALL_ZEROS</name><operator>)</operator><operator>)</operator> <operator>^</operator> <name>SERV_LITERAL_ADDRESS</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Finally, order by appearance in /etc/resolv.conf etc, for --strict-order */</comment>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s1</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_LITERAL_ADDRESS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>s1</name><operator>-&gt;</operator><name>serial</name></name> <operator>-</operator> <name><name>s2</name><operator>-&gt;</operator><name>serial</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Must be called before  add_update_server() to set daemon-&gt;servers_tail */</comment>
<function><type><name>void</name></type> <name>mark_servers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>servers_tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  
  <comment type="block">/* mark everything with argument flag */</comment>
  <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>flag</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>SERV_MARK</name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SERV_MARK</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>servers_tail</name></name> <operator>=</operator> <name>serv</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  
  <comment type="block">/* --address etc is different: since they are expected to be 
     1) numerous and 2) not reloaded often. We just delete 
     and recreate. */</comment>
  <if_stmt><if>if <condition>(<expr><name>flag</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>local_domains</name></name></expr><operator>,</operator> <expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>local_domains</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
      <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>flag</name></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>serv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  </block_content>}</block></if>
	<else>else<block type="pseudo"><block_content> 
	  <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
      </block_content>}</block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>cleanup_servers</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>

  <comment type="block">/* unlink and free anything still marked. */</comment>
  <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr><operator>,</operator> <expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr><operator>,</operator> <expr><name><name>daemon</name><operator>-&gt;</operator><name>servers_tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control> 
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_MARK</name></expr>)</condition>
       <block>{<block_content>
         <expr_stmt><expr><call><name>server_gone</name><argument_list>(<argument><expr><name>serv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	 <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>serv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></if>
      <else>else 
	<block>{<block_content>
	  <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>servers_tail</name></name> <operator>=</operator> <name>serv</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>add_update_server</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>,
		      <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>,
		      <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>source_addr</name></decl></parameter>,
		      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>interface</name></decl></parameter>,
		      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>,
		      <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>local_addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier></type><name>serv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alloc_domain</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>domain</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>domain</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* .domain == domain, for historical reasons. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>domain</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>
    <while>while <condition>(<expr><operator>*</operator><name>domain</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>domain</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>*</operator><name>domain</name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>domain</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>domain</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>SERV_WILDCARD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>domain</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>alloc_domain</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>alloc_domain</name> <operator>=</operator> <call><name>canonicalise</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>domain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>alloc_domain</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SERV_IS_LOCAL</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SERV_6ADDR</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>serv_addr6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SERV_4ADDR</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>serv_addr4</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>serv_local</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt></block_content></block></else></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>serv</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>alloc_domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>local_domains</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>local_domains</name></name> <operator>=</operator> <name>serv</name></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SERV_4ADDR</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>serv_addr4</name><operator>*</operator><operator>)</operator><name>serv</name><operator>)</operator><operator>-&gt;</operator><name>addr</name> <operator>=</operator> <name><name>local_addr</name><operator>-&gt;</operator><name>addr4</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>SERV_6ADDR</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>serv_addr6</name><operator>*</operator><operator>)</operator><name>serv</name><operator>)</operator><operator>-&gt;</operator><name>addr</name> <operator>=</operator> <name><name>local_addr</name><operator>-&gt;</operator><name>addr6</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content> 
      <comment type="block">/* Upstream servers. See if there is a suitable candidate, if so unmark
	 and move to the end of the list, for order. The entry found may already
	 be at the end. */</comment>
      <decl_stmt><decl><type><name><name>struct</name> <name>server</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
      
      <for>for <control>(<init><expr><name>serv</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr><operator>,</operator> <expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name></expr>;</init> <condition><expr><name>serv</name></expr>;</condition> <incr><expr><name>serv</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>SERV_MARK</name><operator>)</operator> <operator>&amp;&amp;</operator>
	      <call><name>hostname_isequal</name><argument_list>(<argument><expr><name>alloc_domain</name></expr></argument>, <argument><expr><name><name>serv</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* Need to move down? */</comment>
	      <if_stmt><if>if <condition>(<expr><name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>servers_tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>serv</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>servers_tail</name></name> <operator>=</operator> <name>serv</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      <break>break;</break>
	    </block_content>}</block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>serv</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><name>serv</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>alloc_domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>alloc_domain</name> <operator>=</operator> <name><name>serv</name><operator>-&gt;</operator><name>domain</name></name></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>serv</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>server</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>alloc_domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <return>return <expr><literal type="number">0</literal></expr>;</return>
	    </block_content>}</block></if></if_stmt>
	  
	  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>serv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>server</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <comment type="block">/* Add to the end of the chain, for order */</comment>
	  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>servers_tail</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>servers_tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>serv</name></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>servers</name></name> <operator>=</operator> <name>serv</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>servers_tail</name></name> <operator>=</operator> <name>serv</name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LOOP</name></cpp:ifdef>
      <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>rand32</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>      
	  
      <if_stmt><if>if <condition>(<expr><name>interface</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>serv</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>addr</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <operator>*</operator><name>addr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>source_addr</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>source_addr</name></name> <operator>=</operator> <operator>*</operator><name>source_addr</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    
  <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>domain</name></name> <operator>=</operator> <name>alloc_domain</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>serv</name><operator>-&gt;</operator><name>domain_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>alloc_domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

</unit>
