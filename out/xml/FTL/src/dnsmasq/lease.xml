<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/lease.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>leases</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>old_leases</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dns_dirty</name></decl>, <decl><type ref="prev"/><name>file_dirty</name></decl>, <decl><type ref="prev"/><name>leases_left</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_leases</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>leasestream</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>ei</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>clid_len</name></decl>, <decl><type ref="prev"/><name>hw_len</name></decl>, <decl><type ref="prev"/><name>hw_type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>items</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>domain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name> <operator>=</operator> <operator>*</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <comment type="block">/* client-id max length is 255 which is 255*2 digits + 254 colons
     borrow DNS packet buffer which is always larger than 1000 bytes

     Check various buffers are big enough for the code below */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DHCP_BUFF_SZ</name> <operator>&lt;</operator> <literal type="number">255</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>MAXDNAME</name> <operator>&lt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>PACKETSZ</name><operator>+</operator><name>MAXDNAME</name><operator>+</operator><name>RRFIXEDSZ</name>  <operator>&lt;</operator> <literal type="number">764</literal><operator>)</operator></expr></cpp:if>
<cpp:error># <cpp:directive>error</cpp:directive> Buffer size breakage in leasefile parsing.</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <while>while <condition>(<expr><operator>(</operator><name>items</name><operator>=</operator><call><name>fscanf</name><argument_list>(<argument><expr><name>leasestream</name></expr></argument>, <argument><expr><literal type="string">"%255s %255s"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name> <operator>=</operator> <operator>*</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name> <operator>=</operator> <operator>*</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>hw_len</name> <operator>=</operator> <name>hw_type</name> <operator>=</operator> <name>clid_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name></expr></argument>, <argument><expr><literal type="string">"duid"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_len</name></name> <operator>=</operator> <call><name>parse_hex</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><literal type="number">130</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_len</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid</name></name> <operator>=</operator> <call><name>safe_malloc</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <continue>continue;</continue>
	  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
	<if_stmt><if>if <condition>(<expr><call><name>fscanf</name><argument_list>(<argument><expr><name>leasestream</name></expr></argument>, <argument><expr><literal type="string">" %64s %255s %764s"</literal></expr></argument>,
		   <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignoring invalid line in lease database: %s %s %s %s ..."</literal></expr></argument>)</argument_list></call></expr></argument>,
		      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>,
		      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <continue>continue;</continue>
	  </block_content>}</block></if></if_stmt>
		
	<if_stmt><if>if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>lease</name> <operator>=</operator> <call><name>lease4_allocate</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>domain</name> <operator>=</operator> <call><name>get_domain</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    
	    <expr_stmt><expr><name>hw_len</name> <operator>=</operator> <call><name>parse_hex</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><name>DHCP_CHADDR_MAX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hw_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <comment type="block">/* For backwards compatibility, no explicit MAC address type means ether. */</comment>
	    <if_stmt><if>if <condition>(<expr><name>hw_type</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>hw_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>hw_type</name> <operator>=</operator> <name>ARPHRD_ETHER</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
	  </block_content>}</block></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	<if type="elseif">else if <condition>(<expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	  <block>{<block_content>
	    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>int</name></type> <name>lease_type</name> <init>= <expr><name>LEASE_NA</name></expr></init></decl>;</decl_stmt>

	    <if_stmt><if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'T'</literal></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>lease_type</name> <operator>=</operator> <name>LEASE_TA</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>lease</name> <operator>=</operator> <call><name>lease6_allocate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><name>lease_type</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><call><name>lease_set_iaid</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><call><name>strtoul</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>domain</name> <operator>=</operator> <call><name>get_domain6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<else>else
	  <block>{<block_content>
	    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignoring invalid line in lease database, bad address: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
		      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <continue>continue;</continue>
	  </block_content>}</block></else></if_stmt>
	

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>lease</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>die</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"too many stored leases"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>clid_len</name> <operator>=</operator> <call><name>parse_hex</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><call><name>lease_set_hwaddr</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, 
			 <argument><expr><name>hw_len</name></expr></argument>, <argument><expr><name>hw_type</name></expr></argument>, <argument><expr><name>clid_len</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><literal type="string">"*"</literal></expr></argument>)</argument_list></call> <operator>!=</operator>  <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><call><name>lease_set_hostname</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>domain</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>ei</name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BROKEN_RTC</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name>ei</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name>ei</name> <operator>+</operator> <name>now</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	<expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>ei</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/* strictly time_t is opaque, but this hack should work on all sane systems,
	   even when sizeof(time_t) == 8 */</comment>
	<expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name>ei</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
	<comment type="block">/* set these correctly: the "old" events are generated later from
	   the startup synthesised SIGHUP. */</comment>
	<expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>LEASE_NEW</name> <operator>|</operator> <name>LEASE_CHANGED</name><operator>)</operator></expr>;</expr_stmt>
	
	<expr_stmt><expr><operator>*</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff3</name></name> <operator>=</operator> <operator>*</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff2</name></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
      </block_content>}</block></while>
    
    <return>return <expr><operator>(</operator><name>items</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>items</name> <operator>==</operator> <name>EOF</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>lease_init</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>leasestream</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>leases_left</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_max</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LEASE_RO</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* run "&lt;lease_change_script&gt; init" once to get the
	 initial state of the database. If leasefile-ro is
	 set without a script, we just do without any
	 lease database. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_change_command</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_change_command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><literal type="string">" init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name>leasestream</name> <operator>=</operator> <call><name>popen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<block>{<block_content>
          <expr_stmt><expr><name>file_dirty</name> <operator>=</operator> <name>dns_dirty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <return>return;</return>
        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <comment type="block">/* NOTE: need a+ mode to create file if it doesn't exist */</comment>
      <expr_stmt><expr><name>leasestream</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>lease_stream</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_file</name></name></expr></argument>, <argument><expr><literal type="string">"a+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>leasestream</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot open or create lease file %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_file</name></name></expr></argument>, <argument><expr><name>EC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <comment type="block">/* a+ mode leaves pointer at end. */</comment>
      <expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>leasestream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>leasestream</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>read_leases</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>leasestream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to parse lease database cleanly"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>ferror</name><argument_list>(<argument><expr><name>leasestream</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to read lease file %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_file</name></name></expr></argument>, <argument><expr><name>EC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>lease_stream</name></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <comment type="block">/* shell returns 127 for "command not found", 126 for bad permissions. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>leasestream</name> <operator>||</operator> <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>pclose</name><argument_list>(<argument><expr><name>leasestream</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">127</literal> <operator>||</operator> <call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">126</literal></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">127</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOENT</name></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">126</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EACCES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot run lease-init script %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_change_command</name></name></expr></argument>, <argument><expr><name>EC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"lease-init script returned exit code %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><call><name>WEXITSTATUS</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>EC_INIT_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Some leases may have expired */</comment>
  <expr_stmt><expr><name>file_dirty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>lease_prune</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>dns_dirty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>lease_update_from_configs</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* changes to the config may change current leases. */</comment>
  
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_config</name></name> <modifier>*</modifier></type><name>config</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <continue>continue;</continue></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>config</name> <operator>=</operator> <call><name>find_config</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_conf</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name></expr></argument>, 
				   <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr_len</name></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr_type</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> 
	     <operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_NAME</name><operator>)</operator> <operator>&amp;&amp;</operator>
	     <operator>(</operator><operator>!</operator><operator>(</operator><name><name>config</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONFIG_ADDR</name><operator>)</operator> <operator>||</operator> <name><name>config</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>lease</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lease_set_hostname</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name><name>config</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>get_domain</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>(</operator><name>name</name> <operator>=</operator> <call><name>host_from_dns</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>lease_set_hostname</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>get_domain</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for> <comment type="block">/* updates auth flag only */</comment>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ourprintf</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>errp</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>errp</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>vfprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_stream</name></name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>errp</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>lease_update_file</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>next_event</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>file_dirty</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>lease_stream</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>ftruncate</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_stream</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BROKEN_RTC</name></cpp:ifdef>
	  <expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"%u "</literal></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	  <expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>!=</operator> <name>ARPHRD_ETHER</name> <operator>||</operator> <name><name>lease</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
	    <expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"%.2x-"</literal></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lease</name><operator>-&gt;</operator><name>hwaddr_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"%.2x"</literal></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>lease</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></for>
	  
	  <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

	  <expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">" %s "</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr> ?</condition><then> <expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr> </then><else>: <expr><literal type="string">"*"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  	  
	  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name> <operator>&amp;&amp;</operator> <name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"%.2x:"</literal></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	      <expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"%.2x\n"</literal></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"*\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>	  
	</block_content>}</block></for>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>  
      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>duid</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"duid "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>duid_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"%.2x:"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	  <expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"%.2x\n"</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>duid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	    <block>{<block_content>
	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BROKEN_RTC</name></cpp:ifdef>
	      <expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"%u "</literal></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	      <expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"%lu "</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    
	      <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 
	      <expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"%s%u %s "</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LEASE_TA</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"T"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,
			<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>iaid</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"%s "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr> ?</condition><then> <expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr> </then><else>: <expr><literal type="string">"*"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name> <operator>&amp;&amp;</operator> <name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
		  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"%.2x:"</literal></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
		  <expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"%.2x\n"</literal></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ourprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>err</name></expr></argument>, <argument><expr><literal type="string">"*\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>	  
	    </block_content>}</block></for>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>      
	  
      <if_stmt><if>if <condition>(<expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_stream</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
	  <call><name>fsync</name><argument_list>(<argument><expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_stream</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>file_dirty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Set alarm for when the first lease expires. */</comment>
  <expr_stmt><expr><name>next_event</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <comment type="block">/* do timed RAs and determine when the next is, also pings to potential SLAAC addresses */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>time_t</name></type> <name>event</name></decl>;</decl_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>event</name> <operator>=</operator> <call><name>periodic_slaac</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>leases</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>next_event</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>difftime</name><argument_list>(<argument><expr><name>next_event</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>next_event</name> <operator>=</operator> <name>event</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>event</name> <operator>=</operator> <call><name>periodic_ra</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>next_event</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>difftime</name><argument_list>(<argument><expr><name>next_event</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>next_event</name> <operator>=</operator> <name>event</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	<operator>(</operator><name>next_event</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>difftime</name><argument_list>(<argument><expr><name>next_event</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>next_event</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>expires</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
   
  <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>next_event</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>difftime</name><argument_list>(<argument><expr><name>next_event</name></expr></argument>, <argument><expr><name>LEASE_RETRY</name> <operator>+</operator> <name>now</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>next_event</name> <operator>=</operator> <name>LEASE_RETRY</name> <operator>+</operator> <name>now</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to write %s: %s (retry in %u s)"</literal></expr></argument>)</argument_list></call></expr></argument>, 
		<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>lease_file</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>difftime</name><argument_list>(<argument><expr><name>next_event</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>send_alarm</name><argument_list>(<argument><expr><name>next_event</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>find_interface_v4</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>local</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_index</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>label</name></decl></parameter>,
			     <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>netmask</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>broadcast</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vparam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>prefix</name> <init>= <expr><call><name>netmask_length</name><argument_list>(<argument><expr><name>netmask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>label</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>broadcast</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>vparam</name></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
	<call><name>is_same_net</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
	<name>prefix</name> <operator>&gt;</operator> <name><name>lease</name><operator>-&gt;</operator><name>new_prefixlen</name></name></expr>)</condition> 
      <block>{<block_content>
	<expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>new_interface</name></name> <operator>=</operator> <name>if_index</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>new_prefixlen</name></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
<function><type><specifier>static</specifier> <name>int</name></type> <name>find_interface_v6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>local</name></decl></parameter>,  <parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>,
			     <parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
			     <parameter><decl><type><name>int</name></type> <name>preferred</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>valid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vparam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>scope</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>preferred</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>valid</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>vparam</name></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><call><name>is_same_net6</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>prefix</name> <operator>&gt;</operator> <name><name>lease</name><operator>-&gt;</operator><name>new_prefixlen</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* save prefix length for comparison, as we might get shorter matching
         * prefix in upcoming netlink GETADDR responses
         * */</comment>
        <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>new_interface</name></name> <operator>=</operator> <name>if_index</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>new_prefixlen</name></name> <operator>=</operator> <name>prefix</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>lease_ping_reply</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>sender</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>interface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* We may be doing RA but not DHCPv4, in which case the lease
     database may not exist and we have nothing to do anyway */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>slaac_ping_reply</name><argument_list>(<argument><expr><name>sender</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><name>leases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>lease_update_slaac</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Called when we construct a new RA-names context, to add putative
     new SLAAC addresses to existing leases. */</comment>

  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>slaac_add_addrs</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* Find interfaces associated with leases at start-up. This gets updated as
   we do DHCP transactions, but information about directly-connected subnets
   is useful from scrips and necessary for determining SLAAC addresses from
   start-time. */</comment>
<function><type><name>void</name></type> <name>lease_find_interfaces</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>new_prefixlen</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>new_interface</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

  <expr_stmt><expr><call><name>iface_enumerate</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>find_interface_v4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <expr_stmt><expr><call><name>iface_enumerate</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><name>find_interface_v6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>new_interface</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
      <expr_stmt><expr><call><name>lease_set_interface</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>new_interface</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
<function><type><name>void</name></type> <name>lease_make_duid</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* If we're not doing DHCPv6, and there are not v6 leases, don't add the DUID to the database */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>duid</name></name> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>doing_dhcp6</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>file_dirty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>make_duid</name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>




<function><type><name>void</name></type> <name>lease_update_dns</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>dns_dirty</name> <operator>||</operator> <name>force</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_BROKEN_RTC</name></cpp:ifndef>
      <comment type="block">/* force transfer to authoritative secondaries */</comment>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_sn</name></name><operator>++</operator></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      
      <expr_stmt><expr><call><name>cache_unhash_dhcp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>prot</name> <init>= <expr><name>AF_INET</name></expr></init></decl>;</decl_stmt>
	  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>prot</name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name> <operator>||</operator> <name><name>lease</name><operator>-&gt;</operator><name>fqdn</name></name></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>slaac_address</name></name> <modifier>*</modifier></type><name>slaac</name></decl>;</decl_stmt>

	      <for>for <control>(<init><expr><name>slaac</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>slaac_address</name></name></expr>;</init> <condition><expr><name>slaac</name></expr>;</condition> <incr><expr><name>slaac</name> <operator>=</operator> <name><name>slaac</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><name><name>slaac</name><operator>-&gt;</operator><name>backoff</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>fqdn</name></name></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><call><name>cache_add_dhcp_entry</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>slaac</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DHCP_FQDN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><call><name>cache_add_dhcp_entry</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>slaac</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  </block_content>}</block></if></if_stmt></block_content></block></for>
	    </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>fqdn</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>cache_add_dhcp_entry</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name>prot</name></expr></argument>, 
				 <argument><expr><ternary><condition><expr><name>prot</name> <operator>==</operator> <name>AF_INET</name></expr> ?</condition><then> <expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr6</name></name></expr></else></ternary></expr></argument>,
				 <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	     
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DHCP_FQDN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>cache_add_dhcp_entry</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name>prot</name></expr></argument>, 
				 <argument><expr><ternary><condition><expr><name>prot</name> <operator>==</operator> <name>AF_INET</name></expr> ?</condition><then> <expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr> </then><else>: <expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr6</name></name></expr></else></ternary></expr></argument>, 
				 <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
       
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>fqdn</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>cache_add_dhcp_entry</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name>prot</name></expr></argument>, <argument><expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DHCP_FQDN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>cache_add_dhcp_entry</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name>prot</name></expr></argument>, <argument><expr><operator>(</operator>union <name>all_addr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></for>
      
      <expr_stmt><expr><name>dns_dirty</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>lease_prune</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>target</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr><operator>,</operator> <expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <name>lease</name> <operator>==</operator> <name>target</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>file_dirty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>dns_dirty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><ternary><condition><expr><name><name>lease</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name></expr> ?</condition><then> <expr><name>METRIC_LEASES_PRUNED_4</name></expr> </then><else>: <expr><name>METRIC_LEASES_PRUNED_6</name></expr></else></ternary></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

 	  <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt> <comment type="block">/* unlink */</comment>
	  
	  <comment type="block">/* Put on old_leases list 'till we
	     can run the script */</comment>
	  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>old_leases</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>old_leases</name> <operator>=</operator> <name>lease</name></expr>;</expr_stmt>
	  
	  <expr_stmt><expr><name>leases_left</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function> 
	
  
<function><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease_find_by_client</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hwaddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hw_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hw_type</name></decl></parameter>,
					<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>clid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clid_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>clid</name></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
      <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name> <operator>&amp;&amp;</operator> <name>clid_len</name> <operator>==</operator> <name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>&amp;&amp;</operator>
	    <call><name>memcmp</name><argument_list>(<argument><expr><name>clid</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name>clid_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><name>lease</name></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></for></block_content></block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>	
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>   
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name> <operator>||</operator> <operator>!</operator><name>clid</name><operator>)</operator> <operator>&amp;&amp;</operator> 
	  <name>hw_len</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> 
	  <name><name>lease</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>==</operator> <name>hw_len</name> <operator>&amp;&amp;</operator>
	  <name><name>lease</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>==</operator> <name>hw_type</name> <operator>&amp;&amp;</operator>
	  <call><name>memcmp</name><argument_list>(<argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name>hw_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>lease</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease_find_by_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
      <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
      <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>lease</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
<comment type="block">/* find address for {CLID, IAID, address} */</comment>
<function><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease6_find</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>clid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clid_len</name></decl></parameter>, 
			       <parameter><decl><type><name>int</name></type> <name>lease_type</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iaid</name></decl></parameter>,
			       <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>lease_type</name><operator>)</operator> <operator>||</operator> <name><name>lease</name><operator>-&gt;</operator><name>iaid</name></name> <operator>!=</operator> <name>iaid</name></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>clid_len</name> <operator>!=</operator> <name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>||</operator>
	   <call><name>memcmp</name><argument_list>(<argument><expr><name>clid</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name>clid_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <return>return <expr><name>lease</name></expr>;</return>
    </block_content>}</block></for>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* reset "USED flags */</comment>
<function><type><name>void</name></type> <name>lease6_reset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LEASE_USED</name></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<comment type="block">/* enumerate all leases belonging to {CLID, IAID} */</comment>
<function><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease6_find_by_client</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lease_type</name></decl></parameter>,
					 <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>clid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>clid_len</name></decl></parameter>,
					 <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iaid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <name>leases</name></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name>first</name> <operator>=</operator> <name><name>first</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>first</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LEASE_USED</name></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>lease_type</name><operator>)</operator> <operator>||</operator> <name><name>lease</name><operator>-&gt;</operator><name>iaid</name></name> <operator>!=</operator> <name>iaid</name></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
 
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>clid_len</name> <operator>!=</operator> <name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>||</operator>
	   <call><name>memcmp</name><argument_list>(<argument><expr><name>clid</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name>clid_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>

      <return>return <expr><name>lease</name></expr>;</return>
    </block_content>}</block></for>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease6_find_by_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>net</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>u64</name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
    
  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<continue>continue;</continue></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>, <argument><expr><name>net</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	  <operator>(</operator><name>prefix</name> <operator>==</operator> <literal type="number">128</literal> <operator>||</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>addr</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><name>lease</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function> 

<comment type="block">/* Find largest assigned address in context */</comment>
<function><type><name>u64</name></type> <name>lease_find_max_addr6</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>addr</name> <init>= <expr><call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CONTEXT_STATIC</name> <operator>|</operator> <name>CONTEXT_PROXY</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
      <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <continue>continue;</continue></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	    <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	    <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	    <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>addr</name></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>addr</name> <operator>=</operator> <call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lease</name><operator>-&gt;</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></for></block_content></block></if></if_stmt>
  
  <return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Find largest assigned address in context */</comment>
<function><type><name><name>struct</name> <name>in_addr</name></name></type> <name>lease_find_max_addr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>start</name></name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CONTEXT_STATIC</name> <operator>|</operator> <name>CONTEXT_PROXY</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
      <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>start</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
	    <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>end</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
	    <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>ntohl</name><argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></for></block_content></block></if></if_stmt>
  
  <return>return <expr><name>addr</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease_allocate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>leases_left</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>lease</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_lease</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_lease</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>LEASE_NEW</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BROKEN_RTC</name></cpp:ifdef>
  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt> <comment type="block">/* illegal value */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt> <comment type="block">/* illegal value */</comment>
  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>leases</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>leases</name> <operator>=</operator> <name>lease</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>file_dirty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>leases_left</name><operator>--</operator></expr>;</expr_stmt>

  <return>return <expr><name>lease</name></expr>;</return>
</block_content>}</block></function>

<function><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease4_allocate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name> <init>= <expr><call><name>lease_allocate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>lease</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>addr</name></name> <operator>=</operator> <name>addr</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_LEASES_ALLOCATED_4</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><name>lease</name></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
<function><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease6_allocate</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addrp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lease_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name> <init>= <expr><call><name>lease_allocate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>lease</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>addr6</name></name> <operator>=</operator> <operator>*</operator><name>addrp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>lease_type</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>iaid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>metrics</name><index>[<expr><name>METRIC_LEASES_ALLOCATED_6</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><name>lease</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>lease_set_expires</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>time_t</name></type> <name>exp</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0xffffffff</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>exp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>exp</name> <operator>=</operator> <name>now</name> <operator>+</operator> <operator>(</operator><name>time_t</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
      <comment type="block">/* Check for 2038 overflow. Make the lease
	 infinite in that case, as the least disruptive
	 thing we can do. */</comment>
      <if_stmt><if>if <condition>(<expr><call><name>difftime</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>exp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>exp</name> <operator>!=</operator> <name><name>lease</name><operator>-&gt;</operator><name>expires</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>dns_dirty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>expires</name></name> <operator>=</operator> <name>exp</name></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_BROKEN_RTC</name></cpp:ifndef>
      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>LEASE_AUX_CHANGED</name> <operator>|</operator> <name>LEASE_EXP_CHANGED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>file_dirty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BROKEN_RTC</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <name><name>lease</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>LEASE_AUX_CHANGED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>file_dirty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function> 

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
<function><type><name>void</name></type> <name>lease_set_iaid</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>iaid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>iaid</name></name> <operator>!=</operator> <name>iaid</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>iaid</name></name> <operator>=</operator> <name>iaid</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>LEASE_CHANGED</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>lease_set_hwaddr</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>hwaddr</name></decl></parameter>,
		      <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>clid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hw_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>hw_type</name></decl></parameter>,
		      <parameter><decl><type><name>int</name></type> <name>clid_len</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <decl_stmt><decl><type><name>int</name></type> <name>change</name> <init>= <expr><name>force</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>LEASE_HAVE_HWADDR</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>force</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>now</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>hw_len</name> <operator>!=</operator> <name><name>lease</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>||</operator>
      <name>hw_type</name> <operator>!=</operator> <name><name>lease</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>||</operator> 
      <operator>(</operator><name>hw_len</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>hw_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>hw_len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr</name></name></expr></argument>, <argument><expr><name>hwaddr</name></expr></argument>, <argument><expr><name>hw_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>=</operator> <name>hw_len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>=</operator> <name>hw_type</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>LEASE_CHANGED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>file_dirty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* run script on change */</comment>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* only update clid when one is available, stops packets
     without a clid removing the record. Lease init uses
     clid_len == 0 for no clid. */</comment>
  <if_stmt><if>if <condition>(<expr><name>clid_len</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>clid</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>!=</operator> <name>clid_len</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>LEASE_AUX_CHANGED</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>file_dirty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><name>clid_len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <return>return;</return></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	  <expr_stmt><expr><name>change</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	   
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name>clid</name></expr></argument>, <argument><expr><name>clid_len</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>LEASE_AUX_CHANGED</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>file_dirty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	  <expr_stmt><expr><name>change</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	
	</block_content>}</block></if></if_stmt>
      
      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>=</operator> <name>clid_len</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name>clid</name></expr></argument>, <argument><expr><name>clid_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name>change</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>slaac_add_addrs</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>force</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>kill_name</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* run script to say we lost our old name */</comment>
  
  <comment type="block">/* this shouldn't happen unless updates are very quick and the
     script very slow, we just avoid a memory leak if it does. */</comment>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>old_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* If we know the fqdn, pass that. The helper will derive the
     unqualified name from it, free the unqualified name here. */</comment>

  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>fqdn</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>old_hostname</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>fqdn</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>old_hostname</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>fqdn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>lease_set_hostname</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>auth</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>domain</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>config_domain</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease_tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_name</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>new_fqdn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>config_domain</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>domain</name> <operator>||</operator> <operator>!</operator><call><name>hostname_isequal</name><argument_list>(<argument><expr><name>domain</name></expr></argument>, <argument><expr><name>config_domain</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Ignoring domain %s for DHCP host name %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>config_domain</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name> <operator>&amp;&amp;</operator> <name>name</name> <operator>&amp;&amp;</operator> <call><name>hostname_isequal</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>auth</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>LEASE_AUTH_NAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>name</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <comment type="block">/* If a machine turns up on a new net without dropping the old lease,
     or two machines claim the same name, then we end up with two interfaces with
     the same name. Check for that here and remove the name from the old lease.
     Note that IPv6 leases are different. All the leases to the same DUID are 
     allowed the same name.

     Don't allow a name from the client to override a name from dnsmasq config. */</comment>
  
  <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>new_name</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>domain</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>new_fqdn</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>domain</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>new_fqdn</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>new_fqdn</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>new_fqdn</name></expr></argument>, <argument><expr><name>domain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	  
      <comment type="block">/* Depending on mode, we check either unqualified name or FQDN. */</comment>
      <for>for <control>(<init><expr><name>lease_tmp</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease_tmp</name></expr>;</condition> <incr><expr><name>lease_tmp</name> <operator>=</operator> <name><name>lease_tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DHCP_FQDN</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_fqdn</name> <operator>||</operator> <operator>!</operator><name><name>lease_tmp</name><operator>-&gt;</operator><name>fqdn</name></name> <operator>||</operator> <operator>!</operator><call><name>hostname_isequal</name><argument_list>(<argument><expr><name><name>lease_tmp</name><operator>-&gt;</operator><name>fqdn</name></name></expr></argument>, <argument><expr><name>new_fqdn</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></if></if_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_name</name> <operator>||</operator> <operator>!</operator><name><name>lease_tmp</name><operator>-&gt;</operator><name>hostname</name></name> <operator>||</operator> <operator>!</operator><call><name>hostname_isequal</name><argument_list>(<argument><expr><name><name>lease_tmp</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></if></if_stmt> 
	    </block_content>}</block></else></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>lease_tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></if></if_stmt>

	      <comment type="block">/* another lease for the same DUID is OK for IPv6 */</comment>
	      <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>==</operator> <name><name>lease_tmp</name><operator>-&gt;</operator><name>clid_len</name></name> <operator>&amp;&amp;</operator>
		  <name><name>lease</name><operator>-&gt;</operator><name>clid</name></name> <operator>&amp;&amp;</operator> <name><name>lease_tmp</name><operator>-&gt;</operator><name>clid</name></name> <operator>&amp;&amp;</operator>
		  <call><name>memcmp</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name><name>lease_tmp</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid_len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></if></if_stmt>	      
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><name><name>lease_tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_TA</name> <operator>|</operator> <name>LEASE_NA</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
		   
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lease_tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LEASE_AUTH_NAME</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>auth</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>new_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>new_fqdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <return>return;</return>
	    </block_content>}</block></if></if_stmt>
	
	  <expr_stmt><expr><call><name>kill_name</name><argument_list>(<argument><expr><name>lease_tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>lease_tmp</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>LEASE_CHANGED</name></expr>;</expr_stmt> <comment type="block">/* run script on change */</comment>
	  <break>break;</break>
	</block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>kill_name</name><argument_list>(<argument><expr><name>lease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name> <operator>=</operator> <name>new_name</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>fqdn</name></name> <operator>=</operator> <name>new_fqdn</name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>auth</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>LEASE_AUTH_NAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name>file_dirty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>dns_dirty</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>LEASE_CHANGED</name></expr>;</expr_stmt> <comment type="block">/* run script on change */</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>lease_set_interface</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interface</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>now</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>last_interface</name></name> <operator>==</operator> <name>interface</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>last_interface</name></name> <operator>=</operator> <name>interface</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>LEASE_CHANGED</name></expr>;</expr_stmt> 

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
  <expr_stmt><expr><call><name>slaac_add_addrs</name><argument_list>(<argument><expr><name>lease</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>rerun_scripts</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>LEASE_CHANGED</name></expr>;</expr_stmt></block_content></block></for> 
</block_content>}</block></function>

<comment type="block">/* deleted leases get transferred to the old_leases list.
   remove them here, after calling the lease change
   script. Also run the lease change script on new/modified leases.

   Return zero if nothing to do. */</comment>
<function><type><name>int</name></type> <name>do_script_run</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>now</name></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DBUS</name></cpp:ifdef>
  <comment type="block">/* If we're going to be sending DBus signals, but the connection is not yet up,
     delay everything until it is. */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DBUS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>dbus</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name>old_leases</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>lease</name> <operator>=</operator> <name>old_leases</name></expr>;</expr_stmt>
                  
      <comment type="block">/* If the lease still has an old_hostname, do the "old" action on that first */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>old_hostname</name></name></expr>)</condition>
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
	  <expr_stmt><expr><call><name>queue_script</name><argument_list>(<argument><expr><name>ACTION_OLD_HOSTNAME</name></expr></argument>, <argument><expr><name>lease</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>old_hostname</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>old_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>old_hostname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	  <return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if>
      <else>else 
	<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>
	  <decl_stmt><decl><type><name><name>struct</name> <name>slaac_address</name></name> <modifier>*</modifier></type><name>slaac</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	  <for>for <control>(<init><expr><name>slaac</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>slaac_address</name></name></expr>;</init> <condition><expr><name>slaac</name></expr>;</condition> <incr><expr><name>slaac</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
	    <block>{<block_content>
	      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>slaac</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>slaac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  <expr_stmt><expr><call><name>kill_name</name><argument_list>(<argument><expr><name>lease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
	  <expr_stmt><expr><call><name>queue_script</name><argument_list>(<argument><expr><name>ACTION_DEL</name></expr></argument>, <argument><expr><name>lease</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>old_hostname</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DBUS</name></cpp:ifdef>
	  <expr_stmt><expr><call><name>emit_dbus_signal</name><argument_list>(<argument><expr><name>ACTION_DEL</name></expr></argument>, <argument><expr><name>lease</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>old_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  <expr_stmt><expr><name>old_leases</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	  
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>old_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>clid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lease</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    
	  <return>return <expr><literal type="number">1</literal></expr>;</return> 
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* make sure we announce the loss of a hostname before its new location. */</comment>
  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>lease</name><operator>-&gt;</operator><name>old_hostname</name></name></expr>)</condition>
      <block>{<block_content>	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
	<expr_stmt><expr><call><name>queue_script</name><argument_list>(<argument><expr><name>ACTION_OLD_HOSTNAME</name></expr></argument>, <argument><expr><name>lease</name></expr></argument>, <argument><expr><name><name>lease</name><operator>-&gt;</operator><name>old_hostname</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>old_hostname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>old_hostname</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <for>for <control>(<init><expr><name>lease</name> <operator>=</operator> <name>leases</name></expr>;</init> <condition><expr><name>lease</name></expr>;</condition> <incr><expr><name>lease</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>LEASE_NEW</name> <operator>|</operator> <name>LEASE_CHANGED</name><operator>)</operator><operator>)</operator> <operator>||</operator> 
	<operator>(</operator><operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LEASE_AUX_CHANGED</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LEASE_RO</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
	<operator>(</operator><operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LEASE_EXP_CHANGED</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_LEASE_RENEW</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
      <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
	<expr_stmt><expr><call><name>queue_script</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LEASE_NEW</name><operator>)</operator></expr> ?</condition><then> <expr><name>ACTION_ADD</name></expr> </then><else>: <expr><name>ACTION_OLD</name></expr></else></ternary></expr></argument>, <argument><expr><name>lease</name></expr></argument>, 
		     <argument><expr><ternary><condition><expr><name><name>lease</name><operator>-&gt;</operator><name>fqdn</name></name></expr> ?</condition><then> <expr><name><name>lease</name><operator>-&gt;</operator><name>fqdn</name></name></expr> </then><else>: <expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr></else></ternary></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DBUS</name></cpp:ifdef>
	<expr_stmt><expr><call><name>emit_dbus_signal</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LEASE_NEW</name><operator>)</operator></expr> ?</condition><then> <expr><name>ACTION_ADD</name></expr> </then><else>: <expr><name>ACTION_OLD</name></expr></else></ternary></expr></argument>, <argument><expr><name>lease</name></expr></argument>,
			 <argument><expr><ternary><condition><expr><name><name>lease</name><operator>-&gt;</operator><name>fqdn</name></name></expr> ?</condition><then> <expr><name><name>lease</name><operator>-&gt;</operator><name>fqdn</name></name></expr> </then><else>: <expr><name><name>lease</name><operator>-&gt;</operator><name>hostname</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>LEASE_NEW</name> <operator>|</operator> <name>LEASE_CHANGED</name> <operator>|</operator> <name>LEASE_AUX_CHANGED</name> <operator>|</operator> <name>LEASE_EXP_CHANGED</name><operator>)</operator></expr>;</expr_stmt>
	
	<comment type="block">/* this is used for the "add" call, then junked, since they're not in the database */</comment>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	
	<return>return <expr><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt></block_content></block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="block">/* nothing to do */</comment>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
<comment type="block">/* delim == -1 -&gt; delim = 0, but embedded 0s, creating extra records, are OK. */</comment>
<function><type><name>void</name></type> <name>lease_add_extradata</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>delim</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>delim</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>delim</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <comment type="block">/* check for embedded NULLs */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>len</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	  <break>break;</break>
	</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>lease</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>-</operator> <name><name>lease</name><operator>-&gt;</operator><name>extradata_len</name></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>size_t</name></type> <name>newsz</name> <init>= <expr><name><name>lease</name><operator>-&gt;</operator><name>extradata_len</name></name> <operator>+</operator> <name>len</name> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>whine_realloc</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>newsz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>new</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>newsz</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>lease</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <name><name>lease</name><operator>-&gt;</operator><name>extradata_len</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>extradata</name><index>[<expr><name><name>lease</name><operator>-&gt;</operator><name>extradata_len</name></name> <operator>+</operator> <name>len</name></expr>]</index></name> <operator>=</operator> <name>delim</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>lease</name><operator>-&gt;</operator><name>extradata_len</name></name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_DHCP */</comment>
</unit>
