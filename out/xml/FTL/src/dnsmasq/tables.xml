<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/tables.c"><comment type="block">/* tables.c is Copyright (c) 2014 Sven Falempin  All Rights Reserved.

   Author's email: sfalempin@citypassenger.com 

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_IPSET</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/pfvar.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;err.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNUSED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(void)(x)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>pf_device</name> <init>= <expr><literal type="string">"/dev/pf"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>dev</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>pfr_strerror</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errnum</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <switch>switch <condition>(<expr><name>errnum</name></expr>)</condition> 
    <block>{<block_content>
    <case>case <expr><name>ESRCH</name></expr>:</case>
      <return>return <expr><literal type="string">"Table does not exist"</literal></expr>;</return>
    <case>case <expr><name>ENOENT</name></expr>:</case>
      <return>return <expr><literal type="string">"Anchor or Ruleset does not exist"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><call><name>strerror</name><argument_list>(<argument><expr><name>errnum</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>ipset_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> 
<block>{<block_content>
  <expr_stmt><expr><name>dev</name> <operator>=</operator> <call><name>open</name><argument_list>( <argument><expr><name>pf_device</name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>dev</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>pf_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>die</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed to access pf devices: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_MISC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>add_to_ipset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>setname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>ipaddr</name></decl></parameter>,
		 <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>remove</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>pfr_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>pfioc_table</name></name></type> <name>io</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>pfr_table</name></name></type> <name>table</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>dev</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> 
    <block>{<block_content>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"warning: no opened pf devices %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pf_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>table</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pfr_table</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>table</name><operator>.</operator><name>pfrt_flags</name></name> <operator>|=</operator> <name>PFR_TFLAG_PERSIST</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>setname</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>PF_TABLE_NAME_SIZE</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error: cannot use table name %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENAMETOOLONG</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>pfrt_name</name></name></expr></argument>, <argument><expr><name>setname</name></expr></argument>,
	      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>pfrt_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>table</name><operator>.</operator><name>pfrt_name</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> 
    <block>{<block_content>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error: cannot strlcpy table name %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>, <argument><expr><sizeof>sizeof <name>io</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>io</name><operator>.</operator><name>pfrio_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>io</name><operator>.</operator><name>pfrio_buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name>table</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>io</name><operator>.</operator><name>pfrio_esize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>table</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>io</name><operator>.</operator><name>pfrio_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><name>DIOCRADDTABLES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"IPset: error: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>pfr_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name><name>table</name><operator>.</operator><name>pfrt_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>PFR_TFLAG_PERSIST</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>io</name><operator>.</operator><name>pfrio_nadd</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"info: table created"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
 
  <expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>F_IPV6</name></expr>)</condition> 
    <block>{<block_content>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>pfra_af</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>pfra_net</name></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>addr</name><operator>.</operator><name>pfra_ip6addr</name></name><operator>)</operator></expr></argument>, <argument><expr><name>ipaddr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> 
  <else>else 
    <block>{<block_content>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>pfra_af</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>pfra_net</name></name> <operator>=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>pfra_ip4addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>ipaddr</name><operator>-&gt;</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>bzero</name><argument_list>(<argument><expr><operator>&amp;</operator><name>io</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>io</name><operator>.</operator><name>pfrio_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>io</name><operator>.</operator><name>pfrio_table</name></name> <operator>=</operator> <name>table</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>io</name><operator>.</operator><name>pfrio_buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name>addr</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>io</name><operator>.</operator><name>pfrio_esize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>io</name><operator>.</operator><name>pfrio_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>(</operator> <ternary><condition><expr><name>remove</name></expr> ?</condition><then> <expr><name>DIOCRDELADDRS</name></expr> </then><else>: <expr><name>DIOCRADDADDRS</name></expr></else></ternary> <operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>)</argument_list></call></expr>)</condition> 
    <block>{<block_content>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"warning: DIOCR%sADDRS: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator> <ternary><condition><expr><name>remove</name></expr> ?</condition><then> <expr><literal type="string">"DEL"</literal></expr> </then><else>: <expr><literal type="string">"ADD"</literal></expr></else></ternary> <operator>)</operator></expr></argument>, <argument><expr><call><name>pfr_strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"%d addresses %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><name>io</name><operator>.</operator><name>pfrio_nadd</name></name></expr></argument>, <argument><expr><operator>(</operator> <ternary><condition><expr><name>remove</name></expr> ?</condition><then> <expr><literal type="string">"removed"</literal></expr> </then><else>: <expr><literal type="string">"added"</literal></expr></else></ternary> <operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><name><name>io</name><operator>.</operator><name>pfrio_nadd</name></name></expr>;</return>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
