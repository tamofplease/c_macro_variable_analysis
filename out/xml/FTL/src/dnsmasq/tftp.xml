<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/tftp.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_TFTP</name></cpp:ifdef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>handle_tftp</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tftp_transfer</name></name> <modifier>*</modifier></type><name>transfer</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>tftp_file</name></name> <modifier>*</modifier></type><name>check_tftp_fileperm</name><parameter_list>(<parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>free_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tftp_transfer</name></name> <modifier>*</modifier></type><name>transfer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>tftp_err</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>tftp_err_oops</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>get_block</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tftp_transfer</name></name> <modifier>*</modifier></type><name>transfer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>next</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sanitise</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_RRQ</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_WRQ</name></cpp:macro>  <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_DATA</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_ACK</name></cpp:macro>  <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_ERR</name></cpp:macro>  <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_OACK</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_NOTDEF</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_FNF</name></cpp:macro>    <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_PERM</name></cpp:macro>   <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_FULL</name></cpp:macro>   <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_ILL</name></cpp:macro>    <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERR_TID</name></cpp:macro>    <cpp:value>5</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>tftp_request</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>listener</name></name> <modifier>*</modifier></type><name>listen</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mode</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>peer</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>iov</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ifreq</name></name></type> <name>ifr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>is_err</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>if_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mtu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tftp_transfer</name></name> <modifier>*</modifier></type><name>transfer</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>start_tftp_port</name></name></expr></init></decl>;</decl_stmt> <comment type="block">/* may be zero to use ephemeral port */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_MTU_DISCOVER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IP_PMTUDISC_DONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>mtuflag</name> <init>= <expr><name>IP_PMTUDISC_DONT</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>char</name></type> <name><name>namebuff</name><index>[<expr><name>IF_NAMESIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_prefix</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tftp_prefix</name></name> <modifier>*</modifier></type><name>pref</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addra</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>family</name> <init>= <expr><name><name>listen</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name></expr></init></decl>;</decl_stmt>
  <comment type="block">/* Can always get recvd interface for IPv6 */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>check_dest</name> <init>= <expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>family</name> <operator>==</operator> <name>AF_INET6</name></expr></init></decl>;</decl_stmt>
  <union>union <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name></type> <name>align</name></decl>;</decl_stmt> <comment type="block">/* this ensures alignment */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>control6</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>char</name></type> <name><name>control</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOLARIS_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <expr_stmt><expr><name>char</name> <name><name>control</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator>
		 <call><name>CMSG_SPACE</name><argument_list>(<argument><expr/></argument></argument_list></call></expr></index></name>sizeof<operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator></expr></expr_stmt>)</block>];</union>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_RECVDSTADDR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IP_RECVIF</name></expr></argument>)</argument_list></call></expr></cpp:elif>
    <decl_stmt><decl><type><name>char</name></type> <name><name>control</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in_addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>+</operator>
		 <call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_dl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></function> <expr_stmt><expr><name>control_u</name></expr>;</expr_stmt> 

  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>control_u</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <name><name>control_u</name><operator>.</operator><name>control</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <operator>&amp;</operator><name>peer</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>peer</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <operator>&amp;</operator><name>iov</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <name>packet</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iov</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>packet_buff_sz</name></name></expr>;</expr_stmt>

  <comment type="block">/* we overwrote the buffer... */</comment>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>srv_save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>recvmsg</name><argument_list>(<argument><expr><name><name>listen</name><operator>-&gt;</operator><name>tftpfd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
  <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_TFTP</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>packet</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>(</operator>union <name>mysockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>peer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>listen</name><operator>-&gt;</operator><name>tftpfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <comment type="block">/* Can always get recvd interface for IPv6 */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>check_dest</name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>listen</name><operator>-&gt;</operator><name>iface</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>addr</name> <operator>=</operator> <name><name>listen</name><operator>-&gt;</operator><name>iface</name><operator>-&gt;</operator><name>addr</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>listen</name><operator>-&gt;</operator><name>iface</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><name>mtu</name> <operator>=</operator> <name><name>listen</name><operator>-&gt;</operator><name>iface</name><operator>-&gt;</operator><name>mtu</name></name></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_mtu</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_mtu</name></name> <operator>&lt;</operator> <name>mtu</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>mtu</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_mtu</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <comment type="block">/* we're listening on an address that doesn't appear on an interface,
	     ask the kernel what the socket is bound to */</comment>
	  <decl_stmt><decl><type><name>socklen_t</name></type> <name>tcp_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>union <name>mysockaddr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	  <if_stmt><if>if <condition>(<expr><call><name>getsockname</name><argument_list>(<argument><expr><name><name>listen</name><operator>-&gt;</operator><name>tftpfd</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tcp_len</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <return>return;</return></block_content></block></if></if_stmt>
	</block_content>}</block></else></if_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier></type><name>cmptr</name></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>cmsghdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>family</name></expr>;</expr_stmt>
      
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LINUX_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
	<for>for <control>(<init><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cmptr</name></expr>;</condition> <incr><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IP</name> <operator>&amp;&amp;</operator> <name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name>IP_PKTINFO</name></expr>)</condition>
	    <block>{<block_content>
	      <union>union <block>{
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>struct</name> <name>in_pktinfo</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	      }</block> <decl><name>p</name></decl>;</union>
	      <expr_stmt><expr><name><name>p</name><operator>.</operator><name>c</name></name> <operator>=</operator> <call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>ipi_spec_dst</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><name>if_index</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>ipi_ifindex</name></name></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
      
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOLARIS_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
	<for>for <control>(<init><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cmptr</name></expr>;</condition> <incr><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	  <block>{<block_content>
	    <union>union <block>{
	      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>i</name></decl>;</decl_stmt>
	    }</block> <decl><name>p</name></decl>;</union>
	    <expr_stmt><expr><name><name>p</name><operator>.</operator><name>c</name></name> <operator>=</operator> <call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IP</name> <operator>&amp;&amp;</operator> <name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name>IP_RECVDSTADDR</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>a</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IP</name> <operator>&amp;&amp;</operator> <name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name>IP_RECVIF</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>if_index</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>i</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></for></block_content></block></if></if_stmt>
      
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_RECVDSTADDR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IP_RECVIF</name></expr></argument>)</argument_list></call></expr></cpp:elif>
      <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
	<for>for <control>(<init><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cmptr</name></expr>;</condition> <incr><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></incr>)</control>
	  <block>{<block_content>
	    <union>union <block>{
	      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_dl</name></name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>
	    }</block> <decl><name>p</name></decl>;</union>
	    <expr_stmt><expr><name><name>p</name><operator>.</operator><name>c</name></name> <operator>=</operator> <call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IP</name> <operator>&amp;&amp;</operator> <name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name>IP_RECVDSTADDR</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><name><name>p</name><operator>.</operator><name>a</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
	    <if type="elseif">else if <condition>(<expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IP</name> <operator>&amp;&amp;</operator> <name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name>IP_RECVIF</name></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>if_index</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>s</name><operator>-&gt;</operator><name>sdl_index</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></for></block_content></block></if></if_stmt>
	  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

      <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
        <block>{<block_content>
          <for>for <control>(<init><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cmptr</name></expr>;</condition> <incr><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IPV6</name> <operator>&amp;&amp;</operator> <name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name><name>daemon</name><operator>-&gt;</operator><name>v6pktinfo</name></name></expr>)</condition>
              <block>{<block_content>
                <union>union <block>{
                  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name><name>struct</name> <name>in6_pktinfo</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
                }</block> <decl><name>p</name></decl>;</union>
                <expr_stmt><expr><name><name>p</name><operator>.</operator><name>c</name></name> <operator>=</operator> <call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  
                <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>ipi6_addr</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>if_index</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>ipi6_ifindex</name></name></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>indextoname</name><argument_list>(<argument><expr><name><name>listen</name><operator>-&gt;</operator><name>tftpfd</name></name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>, <argument><expr><name>namebuff</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>name</name> <operator>=</operator> <name>namebuff</name></expr>;</expr_stmt>
      
      <expr_stmt><expr><name><name>addra</name><operator>.</operator><name>addr4</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>addra</name><operator>.</operator><name>addr6</name></name> <operator>=</operator> <name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_interfaces</name></name></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* dedicated tftp interface list */</comment>
	  <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_interfaces</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return;</return></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <else>else
	<block>{<block_content>
	  <comment type="block">/* Do the same as DHCP */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iface_check</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addra</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_CLEVERBIND</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>enumerate_interfaces</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>loopback_exception</name><argument_list>(<argument><expr><name><name>listen</name><operator>-&gt;</operator><name>tftpfd</name></name></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addra</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		  <operator>!</operator><call><name>label_exception</name><argument_list>(<argument><expr><name>if_index</name></expr></argument>, <argument><expr><name>family</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addra</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<return>return;</return></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>      
	  <comment type="block">/* allowed interfaces are the same as for DHCP */</comment>
	  <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_except</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <return>return;</return></block_content></block></if></if_stmt></block_content></block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name><name>ifr</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>IF_NAMESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>listen</name><operator>-&gt;</operator><name>tftpfd</name></name></expr></argument>, <argument><expr><name>SIOCGIFMTU</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>mtu</name> <operator>=</operator> <name><name>ifr</name><operator>.</operator><name>ifr_mtu</name></name></expr>;</expr_stmt>  
	  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_mtu</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_mtu</name></name> <operator>&lt;</operator> <name>mtu</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>mtu</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_mtu</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>    
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

  <comment type="block">/* Failed to get interface mtu - can use configured value. */</comment>
  <if_stmt><if>if <condition>(<expr><name>mtu</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>mtu</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_mtu</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* data transfer via server listening socket */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_SINGLE_PORT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>tftp_cnt</name></decl>;</decl_stmt>

      <for>for <control>(<init><expr><name>tftp_cnt</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>transfer</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_trans</name></name></expr><operator>,</operator> <expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>tftp_trans</name></name></expr>;</init> <condition><expr><name>transfer</name></expr>;</condition> <incr><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>transfer</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>transfer</name> <operator>=</operator> <name><name>transfer</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><name>tftp_cnt</name><operator>++</operator></expr>;</expr_stmt>

	  <if_stmt><if>if <condition>(<expr><call><name>sockaddr_isequal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>peer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>transfer</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><call><name>ntohs</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name>packet</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_RRQ</name></expr>)</condition>
		<block>{<block_content>
		  <comment type="block">/* Handle repeated RRQ or abandoned transfer from same host and port 
		     by unlinking and reusing the struct transfer. */</comment>
		  <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>transfer</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		  <break>break;</break>
		</block_content>}</block></if>
	      <else>else
		<block>{<block_content>
		  <expr_stmt><expr><call><name>handle_tftp</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>transfer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return;</return>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
      
      <comment type="block">/* Enforce simultaneous transfer limit. In non-single-port mode
	 this is doene by not listening on the server socket when
	 too many transfers are in progress. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>transfer</name> <operator>&amp;&amp;</operator> <name>tftp_cnt</name> <operator>&gt;=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_max</name></name></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* check for per-interface prefix */</comment> 
      <for>for <control>(<init><expr><name>pref</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>if_prefix</name></name></expr>;</init> <condition><expr><name>pref</name></expr>;</condition> <incr><expr><name>pref</name> <operator>=</operator> <name><name>pref</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pref</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name>prefix</name> <operator>=</operator> <name><name>pref</name><operator>-&gt;</operator><name>prefix</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>  
    </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>in</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_flowinfo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>addr</name><operator>.</operator><name>in6</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>

  <comment type="block">/* May reuse struct transfer from abandoned transfer in single port mode. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>transfer</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>transfer</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tftp_transfer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_SINGLE_PORT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>sockfd</name></name> <operator>=</operator> <name><name>listen</name><operator>-&gt;</operator><name>tftpfd</name></name></expr>;</expr_stmt></block_content></block></if>
  <if type="elseif">else if <condition>(<expr><operator>(</operator><name><name>transfer</name><operator>-&gt;</operator><name>sockfd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>family</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>peer</name></name> <operator>=</operator> <name>peer</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>addra</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>if_index</name></name> <operator>=</operator> <name>if_index</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>now</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>backoff</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <literal type="number">512</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>opt_blocksize</name></name> <operator>=</operator> <name><name>transfer</name><operator>-&gt;</operator><name>opt_transize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>netascii</name></name> <operator>=</operator> <name><name>transfer</name><operator>-&gt;</operator><name>carrylf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
 
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>peer</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* if we have a nailed-down range, iterate until we find a free one. */</comment>
  <while>while <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_SINGLE_PORT</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>bind</name><argument_list>(<argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><call><name>sa_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IP_MTU_DISCOVER</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IP_PMTUDISC_DONT</name></expr></argument>)</argument_list></call></expr></cpp:if>
	  <call><name>setsockopt</name><argument_list>(<argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><name>IPPROTO_IP</name></expr></argument>, <argument><expr><name>IP_MTU_DISCOVER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mtuflag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mtuflag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	  <operator>!</operator><call><name>fix_fd</name><argument_list>(<argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EADDRINUSE</name> <operator>&amp;&amp;</operator> <name><name>daemon</name><operator>-&gt;</operator><name>start_tftp_port</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>++</operator><name>port</name> <operator>&lt;=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>end_tftp_port</name></name></expr>)</condition>
		<block>{<block_content> 
		  <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		  <else>else<block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		  
		  <continue>continue;</continue>
		</block_content>}</block></if></if_stmt>
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_TFTP</name> <operator>|</operator> <name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unable to get free port for TFTP"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	  <expr_stmt><expr><call><name>free_transfer</name><argument_list>(<argument><expr><name>transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return;</return>
	</block_content>}</block></if></if_stmt>
      <break>break;</break>
    </block_content>}</block></while>
  
  <expr_stmt><expr><name>p</name> <operator>=</operator> <name>packet</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>end</name> <operator>=</operator> <name>packet</name> <operator>+</operator> <name>len</name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>ntohs</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>unsigned</name> <name>short</name> <operator>*</operator><operator>)</operator><name>packet</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>!=</operator> <name>OP_RRQ</name> <operator>||</operator>
      <operator>!</operator><operator>(</operator><name>filename</name> <operator>=</operator> <call><name>next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
      <operator>!</operator><operator>(</operator><name>mode</name> <operator>=</operator> <call><name>next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
      <operator>(</operator><call><name>strcasecmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"octet"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>strcasecmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"netascii"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>tftp_err</name><argument_list>(<argument><expr><name>ERR_ILL</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"unsupported request from %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>is_err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"netascii"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>netascii</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"blksize"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP_NOBLOCK</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <comment type="block">/* 32 bytes for IP, UDP and TFTP headers, 52 bytes for IPv6 */</comment>
		  <decl_stmt><decl><type><name>int</name></type> <name>overhead</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>family</name> <operator>==</operator> <name>AF_INET</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><literal type="number">52</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
		  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name><name>transfer</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <if_stmt><if>if <condition>(<expr><name><name>transfer</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet_buff_sz</name></name> <operator>-</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet_buff_sz</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <if_stmt><if>if <condition>(<expr><name>mtu</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>transfer</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>mtu</name> <operator>-</operator> <name>overhead</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>mtu</name> <operator>-</operator> <name>overhead</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>opt_blocksize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><literal type="string">"tsize"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>transfer</name><operator>-&gt;</operator><name>netascii</name></name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>opt_transize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

      <comment type="block">/* cope with backslashes from windows boxen. */</comment>
      <for>for <control>(<init><expr><name>p</name> <operator>=</operator> <name>filename</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="char">'/'</literal></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP_LC</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <call><name>tolower</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
		
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>prefix</name></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name><name>prefix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><operator>(</operator><name>MAXDNAME</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>prefix</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><operator>(</operator><name>MAXDNAME</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP_APREF_IP</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>size_t</name></type> <name>oldlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuf</name></decl>;</decl_stmt>
	      
	      <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><operator>(</operator><name>MAXDNAME</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><operator>(</operator><name>MAXDNAME</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <comment type="block">/* remove unique-directory if it doesn't exist */</comment>
	      <if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>statbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name><index>[<expr><name>oldlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP_APREF_MAC</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>macaddr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>macbuf</name><index>[<expr><name>DHCP_CHADDR_MAX</name></expr>]</index></name></decl>;</decl_stmt>
	      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP</name></cpp:ifdef>
	      <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp</name></name> <operator>&amp;&amp;</operator> <name><name>peer</name><operator>.</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
	        <block>{<block_content>
		  <comment type="block">/* Check if the client IP is in our lease database */</comment>
		  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_lease</name></name> <modifier>*</modifier></type><name>lease</name> <init>= <expr><call><name>lease_find_by_addr</name><argument_list>(<argument><expr><name><name>peer</name><operator>.</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		  <if_stmt><if>if <condition>(<expr><name>lease</name> <operator>&amp;&amp;</operator> <name><name>lease</name><operator>-&gt;</operator><name>hwaddr_type</name></name> <operator>==</operator> <name>ARPHRD_ETHER</name> <operator>&amp;&amp;</operator> <name><name>lease</name><operator>-&gt;</operator><name>hwaddr_len</name></name> <operator>==</operator> <name>ETHER_ADDR_LEN</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>macaddr</name> <operator>=</operator> <name><name>lease</name><operator>-&gt;</operator><name>hwaddr</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	      
	      <comment type="block">/* If no luck, try to find in ARP table. This only works if client is in same (V)LAN */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>macaddr</name> <operator>&amp;&amp;</operator> <call><name>find_mac</name><argument_list>(<argument><expr><operator>&amp;</operator><name>peer</name></expr></argument>, <argument><expr><name>macbuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>macaddr</name> <operator>=</operator> <name>macbuf</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name>macaddr</name></expr>)</condition>
	        <block>{<block_content>
		  <decl_stmt><decl><type><name>size_t</name></type> <name>oldlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuf</name></decl>;</decl_stmt>

		  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name> <operator>+</operator> <name>oldlen</name></expr></argument>, <argument><expr><operator>(</operator><name>MAXDNAME</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>oldlen</name></expr></argument>, <argument><expr><literal type="string">"%.2x-%.2x-%.2x-%.2x-%.2x-%.2x/"</literal></expr></argument>,
			   <argument><expr><name><name>macaddr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>macaddr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>macaddr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>macaddr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>macaddr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>macaddr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  
		  <comment type="block">/* remove unique-directory if it doesn't exist */</comment>
		  <if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>statbuf</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name><index>[<expr><name>oldlen</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <comment type="block">/* Absolute pathnames OK if they match prefix */</comment>
	  <if_stmt><if>if <condition>(<expr><name><name>filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>filename</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	      <else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>filename</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name><name>filename</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>filename</name></expr></argument>, <argument><expr><operator>(</operator><name>MAXDNAME</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <comment type="block">/* check permissions and open file */</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>transfer</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>check_tftp_fileperm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>get_block</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>transfer</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>tftp_err_oops</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>is_err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>send_from</name><argument_list>(<argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_SINGLE_PORT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addra</name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
  <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_TFTP</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>packet</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator>union <name>mysockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>peer</name></expr></argument>, <argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <if_stmt><if>if <condition>(<expr><name>is_err</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>free_transfer</name><argument_list>(<argument><expr><name>transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else
    <block>{<block_content>
      <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_trans</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_trans</name></name> <operator>=</operator> <name>transfer</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
}
 
static <function><type><name><name>struct</name> <name>tftp_file</name></name> <modifier>*</modifier></type><name>check_tftp_fileperm</name><parameter_list>(<parameter><decl><type><name>ssize_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>prefix</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>packet</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>namebuff</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tftp_file</name></name> <modifier>*</modifier></type><name>file</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tftp_transfer</name></name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uid_t</name></type> <name>uid</name> <init>= <expr><call><name>geteuid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>statbuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <comment type="block">/* trick to ban moving out of the subtree */</comment>
  <if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>namebuff</name></expr></argument>, <argument><expr><literal type="string">"/../"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>perm</name>;</goto></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>namebuff</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <call><name>tftp_err</name><argument_list>(<argument><expr><name>ERR_FNF</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"file %s not found for %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>namebuff</name></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EACCES</name></expr>)</condition><block type="pseudo"><block_content>
	<goto>goto <name>perm</name>;</goto></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
	<goto>goto <name>oops</name>;</goto></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* stat the file descriptor to avoid stat-&gt;open races */</comment>
  <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>statbuf</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>oops</name>;</goto></block_content></block></if></if_stmt>
  
  <comment type="block">/* running as root, must be world-readable */</comment>
  <if_stmt><if>if <condition>(<expr><name>uid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>statbuf</name><operator>.</operator><name>st_mode</name></name> <operator>&amp;</operator> <name>S_IROTH</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	<goto>goto <name>perm</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <comment type="block">/* in secure mode, must be owned by user running dnsmasq */</comment>
  <if type="elseif">else if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_TFTP_SECURE</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>uid</name> <operator>!=</operator> <name><name>statbuf</name><operator>.</operator><name>st_uid</name></name></expr>)</condition><block type="pseudo"><block_content>
    <goto>goto <name>perm</name>;</goto></block_content></block></if></if_stmt>
      
  <comment type="block">/* If we're doing many transfers from the same file, only 
     open it once this saves lots of file descriptors 
     when mass-booting a big cluster, for instance. 
     Be conservative and only share when inode and name match
     this keeps error messages sane. */</comment>
  <for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_trans</name></name></expr>;</init> <condition><expr><name>t</name></expr>;</condition> <incr><expr><name>t</name> <operator>=</operator> <name><name>t</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>dev</name></name> <operator>==</operator> <name><name>statbuf</name><operator>.</operator><name>st_dev</name></name> <operator>&amp;&amp;</operator> 
	<name><name>t</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>inode</name></name> <operator>==</operator> <name><name>statbuf</name><operator>.</operator><name>st_ino</name></name> <operator>&amp;&amp;</operator>
	<call><name>strcmp</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>namebuff</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
      <block>{<block_content>
	<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>refcount</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name><name>t</name><operator>-&gt;</operator><name>file</name></name></expr>;</return>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>file</name> <operator>=</operator> <call><name>whine_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tftp_file</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>namebuff</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ENOMEM</name></expr>;</expr_stmt>
      <goto>goto <name>oops</name>;</goto>
    </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>statbuf</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>dev</name></name> <operator>=</operator> <name><name>statbuf</name><operator>.</operator><name>st_dev</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>inode</name></name> <operator>=</operator> <name><name>statbuf</name><operator>.</operator><name>st_ino</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>file</name><operator>-&gt;</operator><name>refcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><name>namebuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>file</name></expr>;</return>
  
 <label><name>perm</name>:</label>
  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator>  <call><name>tftp_err</name><argument_list>(<argument><expr><name>ERR_PERM</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot access %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>namebuff</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>EACCES</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>

 <label><name>oops</name>:</label>
  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator>  <call><name>tftp_err_oops</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>namebuff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_tftp_listeners</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>tftp_transfer</name></name> <modifier>*</modifier></type><name>transfer</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
  
  <comment type="block">/* In single port mode, all packets come via port 69 and tftp_request() */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_SINGLE_PORT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>transfer</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_trans</name></name></expr>;</init> <condition><expr><name>transfer</name></expr>;</condition> <incr><expr><name>transfer</name> <operator>=</operator> <name><name>transfer</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><call><name>poll_check</name><argument_list>(<argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><name>POLLIN</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>union</name> <name>mysockaddr</name></name></type> <name>peer</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>socklen_t</name></type> <name>addr_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr>union <name>mysockaddr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>
	  
	  <comment type="block">/* we overwrote the buffer... */</comment>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>srv_save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>recvfrom</name><argument_list>(<argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet_buff_sz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>peer</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr_len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><call><name>sockaddr_isequal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>peer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>transfer</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 
		<expr_stmt><expr><call><name>handle_tftp</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>transfer</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <else>else
		<block>{<block_content>
		  <comment type="block">/* Wrong source address. See rfc1350 para 4. */</comment>
		  <expr_stmt><expr><call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>peer</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>tftp_err</name><argument_list>(<argument><expr><name>ERR_TID</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignoring packet from %s (TID mismatch)"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <while>while<condition>(<expr><call><name>retry_send</name><argument_list>(<argument><expr><call><name>sendto</name><argument_list>(<argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>peer</name><operator>.</operator><name>sa</name></name></expr></argument>, <argument><expr><call><name>sa_len</name><argument_list>(<argument><expr><operator>&amp;</operator><name>peer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
		  <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_TFTP</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator>union <name>mysockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>peer</name></expr></argument>, <argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></else></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
	  
  <for>for <control>(<init><expr><name>transfer</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_trans</name></name></expr><operator>,</operator> <expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>tftp_trans</name></name></expr>;</init> <condition><expr><name>transfer</name></expr>;</condition> <incr><expr><name>transfer</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>transfer</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>timeout</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0.0</literal></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>endcon</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>;</decl_stmt>

	  <comment type="block">/* timeout, retransmit */</comment>
	  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>timeout</name></name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>transfer</name><operator>-&gt;</operator><name>backoff</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
	  	  
	  <comment type="block">/* we overwrote the buffer... */</comment>
	  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>srv_save</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>len</name> <operator>=</operator> <call><name>get_block</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name>transfer</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>tftp_err_oops</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>endcon</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><operator>++</operator><name><name>transfer</name><operator>-&gt;</operator><name>backoff</name></name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition>
	    <block>{<block_content>
	      <comment type="block">/* don't complain about timeout when we're awaiting the last
		 ACK, some clients never send it */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>len</name> <operator>==</operator> <name><name>transfer</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>endcon</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>send_from</name><argument_list>(<argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>, <argument><expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_SINGLE_PORT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>,
			<argument><expr><operator>&amp;</operator><name><name>transfer</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>transfer</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>if_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
	      <expr_stmt><expr><call><name>dump_packet_udp</name><argument_list>(<argument><expr><name>DUMP_TFTP</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator>union <name>mysockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>transfer</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	    </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>endcon</name> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>sanitise</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>transfer</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_TFTP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><ternary><condition><expr><name>endcon</name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"failed sending %s to %s"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"sent %s to %s"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <comment type="block">/* unlink */</comment>
	      <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name>endcon</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>free_transfer</name><argument_list>(<argument><expr><name>transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	      <else>else
		<block>{<block_content>
		  <comment type="block">/* put on queue to be sent to script and deleted */</comment>
		  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_done_trans</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_done_trans</name></name> <operator>=</operator> <name>transfer</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	      <continue>continue;</continue>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>transfer</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>    
</block_content>}</block></function>
	  
<comment type="block">/* packet in daemon-&gt;packet as this is called. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>handle_tftp</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tftp_transfer</name></name> <modifier>*</modifier></type><name>transfer</name></decl></parameter>, <parameter><decl><type><name>ssize_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <struct>struct <name>ack</name> <block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>op</name></decl>, <decl><type ref="prev"/><name>block</name></decl>;</decl_stmt>
  }</block> <decl><modifier>*</modifier><name>mess</name> <init>= <expr><operator>(</operator>struct <name>ack</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></init></decl>;</struct>
  
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ack</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_ACK</name> <operator>&amp;&amp;</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><name><name>transfer</name><operator>-&gt;</operator><name>block</name></name></expr>)</condition> 
	<block>{<block_content>
	  <comment type="block">/* Got ack, ensure we take the (re)transmit path */</comment>
	  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>backoff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name><name>transfer</name><operator>-&gt;</operator><name>block</name></name><operator>++</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name><name>transfer</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>-</operator> <name><name>transfer</name><operator>-&gt;</operator><name>expansion</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>op</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>OP_ERR</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ack</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>err</name> <init>= <expr><call><name>next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  
	  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>prettyprint_addr</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>transfer</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <comment type="block">/* Sanitise error message */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>err</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>sanitise</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	  
	  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_TFTP</name> <operator>|</operator> <name>LOG_ERR</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"error %d %s received from %s"</literal></expr></argument>)</argument_list></call></expr></argument>,
		    <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ntohs</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>err</name></expr></argument>, 
		    <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	  
	  <comment type="block">/* Got err, ensure we take abort */</comment>
	  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>backoff</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_transfer</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tftp_transfer</name></name> <modifier>*</modifier></type><name>transfer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_SINGLE_PORT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>sockfd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>transfer</name><operator>-&gt;</operator><name>file</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>--</operator><name><name>transfer</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>refcount</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>next</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><operator>*</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>end</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> 
      <operator>*</operator><name>p</name> <operator>==</operator> <name>end</name> <operator>||</operator>
      <operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>p</name> <operator>+=</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sanitise</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>q</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>q</name> <operator>=</operator> <name>r</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</init> <condition><expr><operator>*</operator><name>r</name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>isprint</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>*</operator><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>q</name><operator>++</operator><operator>)</operator> <operator>=</operator> <operator>*</operator><name>r</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
  <expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXMESSAGE</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define> <comment type="block">/* limit to make packet &lt; 512 bytes and definitely smaller than buffer */</comment> 
<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>tftp_err</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <struct>struct <name>errmess</name> <block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>op</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>message</name><index>[]</index></name></decl>;</decl_stmt>
  }</block> <decl><modifier>*</modifier><name>mess</name> <init>= <expr><operator>(</operator>struct <name>errmess</name> <operator>*</operator><operator>)</operator><name>packet</name></expr></init></decl>;</struct>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet_buff_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>sanitise</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>OP_ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>err</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>message</name></name></expr></argument>, <argument><expr><name>MAXMESSAGE</name></expr></argument>,  <argument><expr><name>message</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>len</name> <operator>&lt;</operator> <name>MAXMESSAGE</name><operator>)</operator></expr> ?</condition><then> <expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>MAXMESSAGE</name></expr></else></ternary></expr>;</expr_stmt> <comment type="block">/* include terminating zero */</comment>
  
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <name>ERR_FNF</name> <operator>||</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_QUIET_TFTP</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_TFTP</name> <operator>|</operator> <name>LOG_ERR</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <return>return  <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>tftp_err_oops</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* May have &gt;1 refs to file, so potentially mangle a copy of the name */</comment>
  <if_stmt><if>if <condition>(<expr><name>file</name> <operator>!=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><call><name>tftp_err</name><argument_list>(<argument><expr><name>ERR_NOTDEF</name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot read %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* return -1 for error, zero for done. */</comment>
<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>get_block</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>packet</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tftp_transfer</name></name> <modifier>*</modifier></type><name>transfer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet_buff_sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>transfer</name><operator>-&gt;</operator><name>block</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* send OACK */</comment>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
      <struct>struct <name>oackmess</name> <block>{
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>op</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[]</index></name></decl>;</decl_stmt>
      }</block> <decl><modifier>*</modifier><name>mess</name> <init>= <expr><operator>(</operator>struct <name>oackmess</name> <operator>*</operator><operator>)</operator><name>packet</name></expr></init></decl>;</struct>
      
      <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>OP_OACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>transfer</name><operator>-&gt;</operator><name>opt_blocksize</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"blksize"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	  <expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>blocksize</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>transfer</name><operator>-&gt;</operator><name>opt_transize</name></name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><literal type="string">"tsize"</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	  <expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>(</operator><call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name><name>transfer</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <return>return <expr><name>p</name> <operator>-</operator> <name>packet</name></expr>;</return>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <comment type="block">/* send data packet */</comment>
      <struct>struct <name>datamess</name> <block>{
	<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name>op</name></decl>, <decl><type ref="prev"/><name>block</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>data</name><index>[]</index></name></decl>;</decl_stmt>
      }</block> <decl><modifier>*</modifier><name>mess</name> <init>= <expr><operator>(</operator>struct <name>datamess</name> <operator>*</operator><operator>)</operator><name>packet</name></expr></init></decl>;</struct>
      
      <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>transfer</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name><name>transfer</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt> 
      
      <if_stmt><if>if <condition>(<expr><name><name>transfer</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <name><name>transfer</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* finished */</comment>
      
      <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name><name>transfer</name><operator>-&gt;</operator><name>blocksize</name></name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>transfer</name><operator>-&gt;</operator><name>blocksize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>op</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>OP_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator><operator>(</operator><name><name>transfer</name><operator>-&gt;</operator><name>block</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>(</operator><name>off_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal> <operator>||</operator>
	  <operator>!</operator><call><name>read_write</name><argument_list>(<argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>expansion</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      
      <comment type="block">/* Map '\n' to CR-LF in netascii mode */</comment>
      <if_stmt><if>if <condition>(<expr><name><name>transfer</name><operator>-&gt;</operator><name>netascii</name></name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>int</name></type> <name>newcarrylf</name></decl>;</decl_stmt>

	  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>newcarrylf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>transfer</name><operator>-&gt;</operator><name>carrylf</name></name><operator>)</operator></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>expansion</name></name><operator>++</operator></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <name><name>transfer</name><operator>-&gt;</operator><name>blocksize</name></name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if> <comment type="block">/* room in this block */</comment>
		<if type="elseif">else  if <condition>(<expr><name>i</name> <operator>==</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>newcarrylf</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* don't expand LF again if it moves to the next block */</comment>
		  
		<comment type="block">/* make space and insert CR */</comment>
		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mess</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>mess</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt>
		
		<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt></block_content></block></for>
	  <expr_stmt><expr><name><name>transfer</name><operator>-&gt;</operator><name>carrylf</name></name> <operator>=</operator> <name>newcarrylf</name></expr>;</expr_stmt>
	  
	</block_content>}</block></if></if_stmt>

      <return>return <expr><name>size</name> <operator>+</operator> <literal type="number">4</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>do_tftp_script_run</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>tftp_transfer</name></name> <modifier>*</modifier></type><name>transfer</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>transfer</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>tftp_done_trans</name></name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>tftp_done_trans</name></name> <operator>=</operator> <name><name>transfer</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SCRIPT</name></cpp:ifdef>
      <expr_stmt><expr><call><name>queue_tftp</name><argument_list>(<argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>transfer</name><operator>-&gt;</operator><name>file</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>transfer</name><operator>-&gt;</operator><name>peer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name>free_transfer</name><argument_list>(<argument><expr><name>transfer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
