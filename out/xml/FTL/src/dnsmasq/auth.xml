<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/auth.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_AUTH</name></cpp:ifdef>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>find_addrlist</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addr_u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <do>do <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>list</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name><operator>)</operator></expr>)</condition>
      <block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>netmask</name></decl>, <decl><type ref="prev"/><name>addr</name> <init>= <expr><name><name>addr_u</name><operator>-&gt;</operator><name>addr4</name></name></expr></init></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flag</name> <operator>&amp;</operator> <name>F_IPV4</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <continue>continue;</continue></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><name><name>netmask</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><operator>~</operator><operator>(</operator><name>in_addr_t</name><operator>)</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name><name>list</name><operator>-&gt;</operator><name>prefixlen</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if  <condition>(<expr><call><name>is_same_net</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name></name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	  <return>return <expr><name>list</name></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>is_same_net6</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>addr_u</name><operator>-&gt;</operator><name>addr6</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>list</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><name><name>list</name><operator>-&gt;</operator><name>prefixlen</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>list</name></expr>;</return></block_content></block></if></if_stmt>
    
  </block_content>}</block> while <condition>(<expr><operator>(</operator><name>list</name> <operator>=</operator> <name><name>list</name><operator>-&gt;</operator><name>next</name></name><operator>)</operator></expr>)</condition>;</do>
  
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>find_subnet</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>auth_zone</name></name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addr_u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>zone</name><operator>-&gt;</operator><name>subnet</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><call><name>find_addrlist</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>subnet</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>addr_u</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>find_exclude</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>auth_zone</name></name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addr_u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>zone</name><operator>-&gt;</operator><name>exclude</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><call><name>find_addrlist</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>exclude</name></name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>addr_u</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>filter_zone</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>auth_zone</name></name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>all_addr</name></name> <modifier>*</modifier></type><name>addr_u</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>find_exclude</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>addr_u</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* No subnets specified, no filter */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>zone</name><operator>-&gt;</operator><name>subnet</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><call><name>find_subnet</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>addr_u</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>in_zone</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>auth_zone</name></name> <modifier>*</modifier></type><name>zone</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>cut</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>namelen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>domainlen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>cut</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>*</operator><name>cut</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>namelen</name> <operator>&gt;=</operator> <name>domainlen</name> <operator>&amp;&amp;</operator> 
      <call><name>hostname_isequal</name><argument_list>(<argument><expr><name><name>zone</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>name</name><index>[<expr><name>namelen</name> <operator>-</operator> <name>domainlen</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
      
      <if_stmt><if>if <condition>(<expr><name>namelen</name> <operator>==</operator> <name>domainlen</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><name>namelen</name> <operator>-</operator> <name>domainlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><name>cut</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><operator>*</operator><name>cut</name> <operator>=</operator> <operator>&amp;</operator><name><name>name</name><index>[<expr><name>namelen</name> <operator>-</operator> <name>domainlen</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt> 
	  <return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>size_t</name></type> <name>answer_auth</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dns_header</name></name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>limit</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>qlen</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name><name>union</name> <name>mysockaddr</name></name> <modifier>*</modifier></type><name>peer_addr</name></decl></parameter>, 
		   <parameter><decl><type><name>int</name></type> <name>local_query</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>do_bit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>have_pseudoheader</name></decl></parameter>)</parameter_list> 
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ansp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>qtype</name></decl>, <decl><type ref="prev"/><name>qclass</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nameoffset</name></decl>, <decl><type ref="prev"/><name>axfroffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>, <decl><type ref="prev"/><name>anscount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>authcount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>crec</name></name> <modifier>*</modifier></type><name>crecp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>auth</name> <init>= <expr><operator>!</operator><name>local_query</name></expr></init></decl>, <decl><type ref="prev"/><name>trunc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nxdomain</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>soa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>axfr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>out_of_zone</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>auth_zone</name></name> <modifier>*</modifier></type><name>zone</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>subnet</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cut</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>mx_srv_record</name></name> <modifier>*</modifier></type><name>rec</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>move</name></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>txt_record</name></name> <modifier>*</modifier></type><name>txt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>interface_name</name></name> <modifier>*</modifier></type><name>intr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>naptr</name></name> <modifier>*</modifier></type><name>na</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>union</name> <name>all_addr</name></name></type> <name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>cname</name></name> <modifier>*</modifier></type><name>a</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>candidate</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>wclen</name></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>qdcount</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>OPCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>QUERY</name></expr> )</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <comment type="block">/* determine end of question section (we put answers there) */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ansp</name> <operator>=</operator> <call><name>skip_questions</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
  
  <comment type="block">/* now process each question, answers go in RRs after the question */</comment>
  <expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>header</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>q</name> <operator>=</operator> <call><name>ntohs</name><argument_list>(<argument><expr><name><name>header</name><operator>-&gt;</operator><name>qdcount</name></name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>q</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>q</name><operator>--</operator></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>found</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>cname_wildcard</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
      <comment type="block">/* save pointer to name for copying into answers */</comment>
      <expr_stmt><expr><name>nameoffset</name> <operator>=</operator> <name>p</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr>;</expr_stmt>

      <comment type="block">/* now extract name as .-concatenated string into name */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extract_name</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>qlen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> <comment type="block">/* bad packet */</comment>
 
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>qtype</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><call><name>GETSHORT</name><argument_list>(<argument><expr><name>qclass</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>qclass</name> <operator>!=</operator> <name>C_IN</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>auth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  <expr_stmt><expr><name>out_of_zone</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	  <continue>continue;</continue>
	</block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>qtype</name> <operator>==</operator> <name>T_PTR</name> <operator>||</operator> <name>qtype</name> <operator>==</operator> <name>T_SOA</name> <operator>||</operator> <name>qtype</name> <operator>==</operator> <name>T_NS</name><operator>)</operator> <operator>&amp;&amp;</operator>
	  <operator>(</operator><name>flag</name> <operator>=</operator> <call><name>in_arpa_name_2_addr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
	  <operator>!</operator><name>local_query</name></expr>)</condition>
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>zone</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>auth_zones</name></name></expr>;</init> <condition><expr><name>zone</name></expr>;</condition> <incr><expr><name>zone</name> <operator>=</operator> <name><name>zone</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>subnet</name> <operator>=</operator> <call><name>find_subnet</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>zone</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>out_of_zone</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>auth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      <continue>continue;</continue>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_SOA</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>soa</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_NS</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>ns</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_PTR</name> <operator>&amp;&amp;</operator> <name>flag</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>intr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	  <if_stmt><if>if <condition>(<expr><name>flag</name> <operator>==</operator> <name>F_IPV4</name></expr>)</condition><block type="pseudo"><block_content>
	    <for>for <control>(<init><expr><name>intr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>int_names</name></name></expr>;</init> <condition><expr><name>intr</name></expr>;</condition> <incr><expr><name>intr</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	      <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>addrlist</name></decl>;</decl_stmt>
		
		<for>for <control>(<init><expr><name>addrlist</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>addr</name></name></expr>;</init> <condition><expr><name>addrlist</name></expr>;</condition> <incr><expr><name>addrlist</name> <operator>=</operator> <name><name>addrlist</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>addrlist</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>addr</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>addrlist</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
		    <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
		
		<if_stmt><if>if <condition>(<expr><name>addrlist</name></expr>)</condition><block type="pseudo"><block_content>
		  <break>break;</break></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
		  <while>while <condition>(<expr><name><name>intr</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>intr</name><operator>-&gt;</operator><name>intr</name></name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>intr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>intr</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>
	      </block_content>}</block></for></block_content></block></if>
	  <if type="elseif">else if <condition>(<expr><name>flag</name> <operator>==</operator> <name>F_IPV6</name></expr>)</condition><block type="pseudo"><block_content>
	    <for>for <control>(<init><expr><name>intr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>int_names</name></name></expr>;</init> <condition><expr><name>intr</name></expr>;</condition> <incr><expr><name>intr</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
	      <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>addrlist</name></decl>;</decl_stmt>
		
		<for>for <control>(<init><expr><name>addrlist</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>addr</name></name></expr>;</init> <condition><expr><name>addrlist</name></expr>;</condition> <incr><expr><name>addrlist</name> <operator>=</operator> <name><name>addrlist</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>addrlist</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addrlist</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
		
		<if_stmt><if>if <condition>(<expr><name>addrlist</name></expr>)</condition><block type="pseudo"><block_content>
		  <break>break;</break></block_content></block></if>
		<else>else<block type="pseudo"><block_content>
		  <while>while <condition>(<expr><name><name>intr</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>intr</name><operator>-&gt;</operator><name>intr</name></name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>intr</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>intr</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>
	      </block_content>}</block></for></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>intr</name></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>local_query</name> <operator>||</operator> <call><name>in_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>	
		  <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>flag</name> <operator>|</operator> <name>F_REVERSE</name> <operator>|</operator> <name>F_CONFIG</name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
					  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
					  <argument><expr><name>T_PTR</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>crecp</name> <operator>=</operator> <call><name>cache_find_by_addr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <do>do <block>{<block_content> 
	      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DHCP</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DHCP_FQDN</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* must be bare name */</comment>
		  
		  <comment type="block">/* add  external domain */</comment>
		  <if_stmt><if>if <condition>(<expr><name>zone</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>zone</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		  <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>flag</name> <operator>|</operator> <name>F_DHCP</name> <operator>|</operator> <name>F_REVERSE</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><call><name>record_source</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
					  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
					  <argument><expr><name>T_PTR</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
	      <if type="elseif">else if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_DHCP</name> <operator>|</operator> <name>F_HOSTS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>local_query</name> <operator>||</operator> <call><name>in_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>~</operator><name>F_FORWARD</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><call><name>record_source</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
					  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
					  <argument><expr><name>T_PTR</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		</block_content>}</block></if>
	      <else>else<block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></else></if_stmt>
		    
	    </block_content>}</block> while <condition>(<expr><operator>(</operator><name>crecp</name> <operator>=</operator> <call><name>cache_find_by_addr</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>;</do></block_content></block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <call><name>is_rev_synth</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>local_query</name> <operator>||</operator> <call><name>in_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_REVERSE</name> <operator>|</operator> <name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
				      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
				      <argument><expr><name>T_PTR</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>nxdomain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>flag</name> <operator>|</operator> <name>F_NEG</name> <operator>|</operator> <name>F_NXDOMAIN</name> <operator>|</operator> <name>F_REVERSE</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>auth</name></expr> ?</condition><then> <expr><name>F_AUTH</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	  <continue>continue;</continue>
	</block_content>}</block></if></if_stmt>
      
    <label><name>cname_restart</name>:</label>
      <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
	<comment type="block">/* NS and SOA .arpa requests have set found above. */</comment>
	<expr_stmt><expr><name>cut</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>zone</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>auth_zones</name></name></expr>;</init> <condition><expr><name>zone</name></expr>;</condition> <incr><expr><name>zone</name> <operator>=</operator> <name><name>zone</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>in_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cut</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>zone</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>out_of_zone</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>auth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	      <continue>continue;</continue>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

      <for>for <control>(<init><expr><name>rec</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name></expr>;</init> <condition><expr><name>rec</name></expr>;</condition> <incr><expr><name>rec</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rec</name><operator>-&gt;</operator><name>issrv</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>hostname_issubdomain</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>nxdomain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	         
	    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>qtype</name> <operator>==</operator> <name>T_MX</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_RRNAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"&lt;MX&gt;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>,
					<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_MX</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"sd"</literal></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>weight</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
      
      <for>for <control>(<init><expr><name>move</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name></expr><operator>,</operator> <expr><name>rec</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name></expr>;</init> <condition><expr><name>rec</name></expr>;</condition> <incr><expr><name>rec</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>issrv</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>hostname_issubdomain</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>nxdomain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    
	    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>qtype</name> <operator>==</operator> <name>T_SRV</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_RRNAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"&lt;SRV&gt;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>,
					<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_SRV</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"sssd"</literal></expr></argument>, 
					<argument><expr><name><name>rec</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>weight</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>srvport</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

		  <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      </block_content>}</block></if></if_stmt> 
	    
	    <comment type="block">/* unlink first SRV record found */</comment>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>move</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>move</name> <operator>=</operator> <name>rec</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	      </block_content>}</block></if>
	    <else>else<block type="pseudo"><block_content>
	      <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>      
	  </block_content>}</block></if>
	<else>else<block type="pseudo"><block_content>
	  <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
	  
      <comment type="block">/* put first SRV record back at the end. */</comment>
      <if_stmt><if>if <condition>(<expr><name>move</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name>move</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>move</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

      <for>for <control>(<init><expr><name>txt</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rr</name></name></expr>;</init> <condition><expr><name>txt</name></expr>;</condition> <incr><expr><name>txt</name> <operator>=</operator> <name><name>txt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>hostname_issubdomain</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>nxdomain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>txt</name><operator>-&gt;</operator><name>class</name></name> <operator>==</operator> <name>qtype</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_RRNAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>,
					<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>class</name></name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"t"</literal></expr></argument>, <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
      
      <for>for <control>(<init><expr><name>txt</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>txt</name></name></expr>;</init> <condition><expr><name>txt</name></expr>;</condition> <incr><expr><name>txt</name> <operator>=</operator> <name><name>txt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>txt</name><operator>-&gt;</operator><name>class</name></name> <operator>==</operator> <name>C_IN</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>rc</name> <operator>=</operator> <call><name>hostname_issubdomain</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	  <block>{<block_content>
	    <expr_stmt><expr><name>nxdomain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>qtype</name> <operator>==</operator> <name>T_TXT</name></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_RRNAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"&lt;TXT&gt;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>,
					<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_TXT</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"t"</literal></expr></argument>, <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      </block_content>}</block></if></if_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>

       <for>for <control>(<init><expr><name>na</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>naptr</name></name></expr>;</init> <condition><expr><name>na</name></expr>;</condition> <incr><expr><name>na</name> <operator>=</operator> <name><name>na</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	 <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>hostname_issubdomain</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	   <block>{<block_content>
	     <expr_stmt><expr><name>nxdomain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	     <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>qtype</name> <operator>==</operator> <name>T_NAPTR</name></expr>)</condition>
	       <block>{<block_content>
		 <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		 <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_RRNAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"&lt;NAPTR&gt;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		 <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, 
					 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_NAPTR</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"sszzzd"</literal></expr></argument>, 
					 <argument><expr><name><name>na</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>pref</name></name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>services</name></name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>regexp</name></name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>replace</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	       </block_content>}</block></if></if_stmt>
	   </block_content>}</block></if></if_stmt></block_content></block></for>
    
       <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_A</name></expr>)</condition><block type="pseudo"><block_content>
	 <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>F_IPV4</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
       
       <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_AAAA</name></expr>)</condition><block type="pseudo"><block_content>
	 <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>F_IPV6</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
       
       <for>for <control>(<init><expr><name>intr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>int_names</name></name></expr>;</init> <condition><expr><name>intr</name></expr>;</condition> <incr><expr><name>intr</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	 <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>hostname_issubdomain</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	   <block>{<block_content>
	     <decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>addrlist</name></decl>;</decl_stmt>
	     
	     <expr_stmt><expr><name>nxdomain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	     
	     <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>flag</name></expr>)</condition><block type="pseudo"><block_content>
	       <for>for <control>(<init><expr><name>addrlist</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>addr</name></name></expr>;</init> <condition><expr><name>addrlist</name></expr>;</condition> <incr><expr><name>addrlist</name> <operator>=</operator> <name><name>addrlist</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>  
		 <if_stmt><if>if <condition>(<expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>addrlist</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name><operator>)</operator></expr>  ?</condition><then> <expr><name>T_AAAA</name></expr> </then><else>: <expr><name>T_A</name></expr></else></ternary><operator>)</operator> <operator>==</operator> <name>qtype</name> <operator>&amp;&amp;</operator>
		     <operator>(</operator><name>local_query</name> <operator>||</operator> <call><name>filter_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addrlist</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		   <block>{<block_content>
		     <if_stmt><if>if <condition>(<expr><name><name>addrlist</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_REVONLY</name></expr>)</condition><block type="pseudo"><block_content>
		       <continue>continue;</continue></block_content></block></if></if_stmt>

		     <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		     <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_FORWARD</name> <operator>|</operator> <name>F_CONFIG</name> <operator>|</operator> <name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addrlist</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		     <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
					     <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>qtype</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, 
					     <argument><expr><ternary><condition><expr><name>qtype</name> <operator>==</operator> <name>T_A</name></expr> ?</condition><then> <expr><literal type="string">"4"</literal></expr> </then><else>: <expr><literal type="string">"6"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addrlist</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		       <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		   </block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
	     </block_content>}</block></if></if_stmt></block_content></block></for>

       <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name> <operator>&amp;&amp;</operator> <call><name>is_name_synthetic</name><argument_list>(<argument><expr><name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr> )</condition>
	 <block>{<block_content>
	   <expr_stmt><expr><name>nxdomain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	   
	   <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_FORWARD</name> <operator>|</operator> <name>F_CONFIG</name> <operator>|</operator> <name>flag</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
				   <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>qtype</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><ternary><condition><expr><name>qtype</name> <operator>==</operator> <name>T_A</name></expr> ?</condition><then> <expr><literal type="string">"4"</literal></expr> </then><else>: <expr><literal type="string">"6"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	     <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	 </block_content>}</block></if></if_stmt>
       
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cut</name></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>nxdomain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_SOA</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>auth</name> <operator>=</operator> <name>soa</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* inhibits auth section */</comment>
	      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_RRNAME</name> <operator>|</operator> <name>F_AUTH</name></expr></argument>, <argument><expr><name><name>zone</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"&lt;SOA&gt;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if>
      	  <if type="elseif">else if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_AXFR</name></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>peers</name></decl>;</decl_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name><name>peer_addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>peer_addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
	      <else>else
		<block>{<block_content>
		  <expr_stmt><expr><name><name>peer_addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
		  <expr_stmt><expr><name><name>peer_addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	      
	      <for>for <control>(<init><expr><name>peers</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>auth_peers</name></name></expr>;</init> <condition><expr><name>peers</name></expr>;</condition> <incr><expr><name>peers</name> <operator>=</operator> <name><name>peers</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>sockaddr_isequal</name><argument_list>(<argument><expr><name>peer_addr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>peers</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	      
	      <comment type="block">/* Refuse all AXFR unless --auth-sec-servers or auth-peers is set */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>secondary_forward_server</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>daemon</name><operator>-&gt;</operator><name>auth_peers</name></name><operator>)</operator> <operator>||</operator>
		  <operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>auth_peers</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>peers</name><operator>)</operator></expr>)</condition> 
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><name><name>peer_addr</name><operator>-&gt;</operator><name>sa</name><operator>.</operator><name>sa_family</name></name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>peer_addr</name><operator>-&gt;</operator><name>in</name><operator>.</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
		  <else>else<block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>peer_addr</name><operator>-&gt;</operator><name>in6</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 
		  
		  <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ignoring zone transfer request from %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	       	      
	      <expr_stmt><expr><name>auth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>soa</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* inhibits auth section */</comment>
	      <expr_stmt><expr><name>ns</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* ensure we include NS records! */</comment>
	      <expr_stmt><expr><name>axfr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>axfroffset</name> <operator>=</operator> <name>nameoffset</name></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_RRNAME</name> <operator>|</operator> <name>F_AUTH</name></expr></argument>, <argument><expr><name><name>zone</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"&lt;AXFR&gt;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if>
      	  <if type="elseif">else if <condition>(<expr><name>qtype</name> <operator>==</operator> <name>T_NS</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>auth</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><name>ns</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="block">/* inhibits auth section */</comment>
	      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_RRNAME</name> <operator>|</operator> <name>F_AUTH</name></expr></argument>, <argument><expr><name><name>zone</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"&lt;NS&gt;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DHCP_FQDN</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>cut</name></expr>)</condition>
	<block>{<block_content>	  
	  <expr_stmt><expr><operator>*</operator><name>cut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* remove domain part */</comment>
	  
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>crecp</name> <operator>=</operator> <call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DHCP</name></expr>)</condition><block type="pseudo"><block_content>
		<do>do
		  <block>{<block_content> 
		    <expr_stmt><expr><name>nxdomain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>flag</name><operator>)</operator> <operator>&amp;&amp;</operator> 
			<operator>(</operator><name>local_query</name> <operator>||</operator> <call><name>filter_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		      <block>{<block_content>
			<expr_stmt><expr><operator>*</operator><name>cut</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt> <comment type="block">/* restore domain part */</comment>
			<expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><call><name>record_source</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><operator>*</operator><name>cut</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <comment type="block">/* remove domain part */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
						<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>qtype</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, 
						<argument><expr><ternary><condition><expr><name>qtype</name> <operator>==</operator> <name>T_A</name></expr> ?</condition><then> <expr><literal type="string">"4"</literal></expr> </then><else>: <expr><literal type="string">"6"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		      </block_content>}</block></if></if_stmt>
		  </block_content>}</block> while <condition>(<expr><operator>(</operator><name>crecp</name> <operator>=</operator> <call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>now</name></expr></argument>,  <argument><expr><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>;</do></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
       	  
	  <expr_stmt><expr><operator>*</operator><name>cut</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt> <comment type="block">/* restore domain part */</comment>	    
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>crecp</name> <operator>=</operator> <call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_HOSTS</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DHCP</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DHCP_FQDN</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <do>do
	      <block>{<block_content> 
		 <expr_stmt><expr><name>nxdomain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		 <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>flag</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>local_query</name> <operator>||</operator> <call><name>filter_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		   <block>{<block_content>
		     <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><call><name>record_source</name><argument_list>(<argument><expr><name><name>crecp</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		     <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
					     <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>qtype</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, 
					     <argument><expr><ternary><condition><expr><name>qtype</name> <operator>==</operator> <name>T_A</name></expr> ?</condition><then> <expr><literal type="string">"4"</literal></expr> </then><else>: <expr><literal type="string">"6"</literal></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		       <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		   </block_content>}</block></if></if_stmt>
	      </block_content>}</block> while <condition>(<expr><operator>(</operator><name>crecp</name> <operator>=</operator> <call><name>cache_find_by_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>now</name></expr></argument>, <argument><expr><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>;</do></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <comment type="block">/* Only supply CNAME if no record for any type is known. */</comment>
      <if_stmt><if>if <condition>(<expr><name>nxdomain</name></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* Check for possible wildcard match against *.domain 
	     return length of match, to get longest.
	     Note that if return length of wildcard section, so
	     we match b.simon to _both_ *.simon and b.simon
	     but return a longer (better) match to b.simon.
	  */</comment>  
	  <for>for <control>(<init><expr><name>wclen</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>candidate</name> <operator>=</operator> <name>NULL</name></expr><operator>,</operator> <expr><name>a</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>cnames</name></name></expr>;</init> <condition><expr><name>a</name></expr>;</condition> <incr><expr><name>a</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>alias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition>
	      <block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>test</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
		
		<while>while <condition>(<expr><operator>(</operator><name>test</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>test</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><call><name>hostname_isequal</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>a</name><operator>-&gt;</operator><name>alias</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition>
		      <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>wclen</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>cname_wildcard</name></expr>)</condition>
			  <block>{<block_content>
			    <expr_stmt><expr><name>wclen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			    <expr_stmt><expr><name>candidate</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
			    <expr_stmt><expr><name>cname_wildcard</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			  </block_content>}</block></if></if_stmt>
			<break>break;</break>
		      </block_content>}</block></if></if_stmt>
		  </block_content>}</block></while>
		
	      </block_content>}</block></if>
	    <if type="elseif">else if <condition>(<expr><call><name>hostname_isequal</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>wclen</name></expr>)</condition>
	      <block>{<block_content>
		<comment type="block">/* Simple case, no wildcard */</comment>
		<expr_stmt><expr><name>wclen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>candidate</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt></block_content></block></for>
	  
	  <if_stmt><if>if <condition>(<expr><name>candidate</name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_CONFIG</name> <operator>|</operator> <name>F_CNAME</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>candidate</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>zone</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	      <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>nameoffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
				      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nameoffset</name></expr></argument>,
				      <argument><expr><name>T_CNAME</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      
	      <goto>goto <name>cname_restart</name>;</goto>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><call><name>cache_find_non_terminal</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>nxdomain</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	  <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>flag</name> <operator>|</operator> <name>F_NEG</name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>nxdomain</name></expr> ?</condition><then> <expr><name>F_NXDOMAIN</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator> <name>F_FORWARD</name> <operator>|</operator> <name>F_AUTH</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
      
    </block_content>}</block></for>
  
  <comment type="block">/* Add auth section */</comment>
  <if_stmt><if>if <condition>(<expr><name>auth</name> <operator>&amp;&amp;</operator> <name>zone</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>authname</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>newoffset</name></decl>, <decl><type ref="prev"/><name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>subnet</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>authname</name> <operator>=</operator> <name><name>zone</name><operator>-&gt;</operator><name>domain</name></name></expr>;</expr_stmt></block_content></block></if>
      <else>else
	<block>{<block_content>
	  <comment type="block">/* handle NS and SOA for PTR records */</comment>
	  
	  <expr_stmt><expr><name>authname</name> <operator>=</operator> <name>name</name></expr>;</expr_stmt>

	  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>subnet</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>in_addr_t</name></type> <name>a</name> <init>= <expr><call><name>ntohl</name><argument_list>(<argument><expr><name><name>subnet</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
	      
	      <if_stmt><if>if <condition>(<expr><name><name>subnet</name><operator>-&gt;</operator><name>prefixlen</name></name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%u."</literal></expr></argument>, <argument><expr><name>a</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name><name>subnet</name><operator>-&gt;</operator><name>prefixlen</name></name> <operator>&gt;=</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%u."</literal></expr></argument>, <argument><expr><name>a</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%u.in-addr.arpa"</literal></expr></argument>, <argument><expr><name>a</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>name</name></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	      
	      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>subnet</name><operator>-&gt;</operator><name>prefixlen</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control>
		<block>{<block_content> 
		  <decl_stmt><decl><type><name>int</name></type> <name>dig</name> <init>= <expr><operator>(</operator><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>subnet</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>addr6</name></name><operator>)</operator><index>[<expr><name>i</name><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>]</index></expr></init></decl>;</decl_stmt>
		  <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%.1x."</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>dig</name> <operator>&amp;</operator> <literal type="number">15</literal></expr> </then><else>: <expr><name>dig</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"ip6.arpa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></else></if_stmt>
      
      <comment type="block">/* handle NS and SOA in auth section or for explicit queries */</comment>
       <expr_stmt><expr><name>newoffset</name> <operator>=</operator> <name>ansp</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr>;</expr_stmt>
       <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>anscount</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>ns</name><operator>)</operator> <operator>||</operator> <name>soa</name><operator>)</operator> <operator>&amp;&amp;</operator>
	  <call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
			      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_SOA</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"ddlllll"</literal></expr></argument>,
			      <argument><expr><name>authname</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>authserver</name></name></expr></argument>,  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>hostmaster</name></name></expr></argument>,
			      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_sn</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_refresh</name></name></expr></argument>, 
			      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_retry</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_expiry</name></name></expr></argument>, 
			      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>newoffset</name></expr>;</expr_stmt>
	  <if_stmt><if>if <condition>(<expr><name>soa</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
	  <else>else<block type="pseudo"><block_content>
	    <expr_stmt><expr><name>authcount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>anscount</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>ns</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>name_list</name></name> <modifier>*</modifier></type><name>secondary</name></decl>;</decl_stmt>
	  
	  <comment type="block">/* Only include the machine running dnsmasq if it's acting as an auth server */</comment>
	  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>authinterface</name></name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name>newoffset</name> <operator>=</operator> <name>ansp</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><operator>-</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
				      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_NS</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>authname</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>authserver</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 
		    <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>newoffset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition><block type="pseudo"><block_content> 
		    <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
		  <else>else<block type="pseudo"><block_content>
		    <expr_stmt><expr><name>authcount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>subnet</name></expr>)</condition><block type="pseudo"><block_content>
	    <for>for <control>(<init><expr><name>secondary</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>secondary_forward_server</name></name></expr>;</init> <condition><expr><name>secondary</name></expr>;</condition> <incr><expr><name>secondary</name> <operator>=</operator> <name><name>secondary</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	      <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
				      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_NS</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>, <argument><expr><name><name>secondary</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><name>ns</name></expr>)</condition><block type="pseudo"><block_content> 
		    <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
		  <else>else<block type="pseudo"><block_content>
		    <expr_stmt><expr><name>authcount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name>axfr</name></expr>)</condition>
	<block>{<block_content>
	  <for>for <control>(<init><expr><name>rec</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>mxnames</name></name></expr>;</init> <condition><expr><name>rec</name></expr>;</condition> <incr><expr><name>rec</name> <operator>=</operator> <name><name>rec</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>in_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cut</name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>cut</name></expr>)</condition><block type="pseudo"><block_content>
		   <expr_stmt><expr><operator>*</operator><name>cut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>rec</name><operator>-&gt;</operator><name>issrv</name></name></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><operator>-</operator><name>axfroffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>,
					    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_SRV</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"sssd"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>cut</name></expr> ?</condition><then> <expr><name><name>rec</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
					    <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>priority</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>weight</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>srvport</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		      
		      <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  </block_content>}</block></if>
		<else>else
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><operator>-</operator><name>axfroffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>,
					    <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_MX</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"sd"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>cut</name></expr> ?</condition><then> <expr><name><name>rec</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>weight</name></name></expr></argument>, <argument><expr><name><name>rec</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  </block_content>}</block></else></if_stmt>
		
		<comment type="block">/* restore config data */</comment>
		<if_stmt><if>if <condition>(<expr><name>cut</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><operator>*</operator><name>cut</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      </block_content>}</block></if></if_stmt></block_content></block></for>
	      
	  <for>for <control>(<init><expr><name>txt</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>rr</name></name></expr>;</init> <condition><expr><name>txt</name></expr>;</condition> <incr><expr><name>txt</name> <operator>=</operator> <name><name>txt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>in_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cut</name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>cut</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><operator>*</operator><name>cut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><operator>-</operator><name>axfroffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>,
					<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>class</name></name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"t"</literal></expr></argument>,  <argument><expr><ternary><condition><expr><name>cut</name></expr> ?</condition><then> <expr><name><name>txt</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<comment type="block">/* restore config data */</comment>
		<if_stmt><if>if <condition>(<expr><name>cut</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><operator>*</operator><name>cut</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      </block_content>}</block></if></if_stmt></block_content></block></for>
	  
	  <for>for <control>(<init><expr><name>txt</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>txt</name></name></expr>;</init> <condition><expr><name>txt</name></expr>;</condition> <incr><expr><name>txt</name> <operator>=</operator> <name><name>txt</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>txt</name><operator>-&gt;</operator><name>class</name></name> <operator>==</operator> <name>C_IN</name> <operator>&amp;&amp;</operator> <call><name>in_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cut</name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>cut</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><operator>*</operator><name>cut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><operator>-</operator><name>axfroffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>,
					<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_TXT</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"t"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>cut</name></expr> ?</condition><then> <expr><name><name>txt</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>txt</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<comment type="block">/* restore config data */</comment>
		<if_stmt><if>if <condition>(<expr><name>cut</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><operator>*</operator><name>cut</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      </block_content>}</block></if></if_stmt></block_content></block></for>
	  
	  <for>for <control>(<init><expr><name>na</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>naptr</name></name></expr>;</init> <condition><expr><name>na</name></expr>;</condition> <incr><expr><name>na</name> <operator>=</operator> <name><name>na</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>in_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cut</name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>cut</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><operator>*</operator><name>cut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><operator>-</operator><name>axfroffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, 
					<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_NAPTR</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"sszzzd"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>cut</name></expr> ?</condition><then> <expr><name><name>na</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,
					<argument><expr><name><name>na</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>pref</name></name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>services</name></name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>regexp</name></name></expr></argument>, <argument><expr><name><name>na</name><operator>-&gt;</operator><name>replace</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<comment type="block">/* restore config data */</comment>
		<if_stmt><if>if <condition>(<expr><name>cut</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><operator>*</operator><name>cut</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
	      </block_content>}</block></if></if_stmt></block_content></block></for>
	  
	  <for>for <control>(<init><expr><name>intr</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>int_names</name></name></expr>;</init> <condition><expr><name>intr</name></expr>;</condition> <incr><expr><name>intr</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>in_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name><name>intr</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cut</name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>addrlist</name></name> <modifier>*</modifier></type><name>addrlist</name></decl>;</decl_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>cut</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><operator>*</operator><name>cut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<for>for <control>(<init><expr><name>addrlist</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>addr</name></name></expr>;</init> <condition><expr><name>addrlist</name></expr>;</condition> <incr><expr><name>addrlist</name> <operator>=</operator> <name><name>addrlist</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content> 
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>addrlist</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name><operator>)</operator> <operator>&amp;&amp;</operator>
		      <operator>(</operator><name>local_query</name> <operator>||</operator> <call><name>filter_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>F_IPV4</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addrlist</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> 
		      <call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><operator>-</operator><name>axfroffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
					  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_A</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"4"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>cut</name></expr> ?</condition><then> <expr><name><name>intr</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addrlist</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
		
		<for>for <control>(<init><expr><name>addrlist</name> <operator>=</operator> <name><name>intr</name><operator>-&gt;</operator><name>addr</name></name></expr>;</init> <condition><expr><name>addrlist</name></expr>;</condition> <incr><expr><name>addrlist</name> <operator>=</operator> <name><name>addrlist</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content> 
		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>addrlist</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>ADDRLIST_IPV6</name><operator>)</operator> <operator>&amp;&amp;</operator> 
		      <operator>(</operator><name>local_query</name> <operator>||</operator> <call><name>filter_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>F_IPV6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addrlist</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
		      <call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><operator>-</operator><name>axfroffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
					  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_AAAA</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"6"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>cut</name></expr> ?</condition><then> <expr><name><name>intr</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addrlist</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
		
		<comment type="block">/* restore config data */</comment>
		<if_stmt><if>if <condition>(<expr><name>cut</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><operator>*</operator><name>cut</name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 
	      </block_content>}</block></if></if_stmt></block_content></block></for>
             
	  <for>for <control>(<init><expr><name>a</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>cnames</name></name></expr>;</init> <condition><expr><name>a</name></expr>;</condition> <incr><expr><name>a</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>in_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>alias</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cut</name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>zone</name><operator>-&gt;</operator><name>domain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name>cut</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><operator>*</operator><name>cut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><operator>-</operator><name>axfroffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
					<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
					<argument><expr><name>T_CNAME</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"d"</literal></expr></argument>,  <argument><expr><ternary><condition><expr><name>cut</name></expr> ?</condition><then> <expr><name><name>a</name><operator>-&gt;</operator><name>alias</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      </block_content>}</block></if></if_stmt></block_content></block></for>
	
	  <expr_stmt><expr><call><name>cache_enumerate</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <while>while <condition>(<expr><operator>(</operator><name>crecp</name> <operator>=</operator> <call><name>cache_enumerate</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV4</name> <operator>|</operator> <name>F_IPV6</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
		  <operator>!</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_NEG</name> <operator>|</operator> <name>F_NXDOMAIN</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
		  <operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_FORWARD</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DHCP</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DHCP_FQDN</name></expr></argument>)</argument_list></call></expr>)</condition>
		    <block>{<block_content>
		      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cache_name</name> <init>= <expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>cache_name</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
			  <operator>(</operator><name>local_query</name> <operator>||</operator> <call><name>filter_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV6</name> <operator>|</operator> <name>F_IPV4</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
			  <call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><operator>-</operator><name>axfroffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
					      <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IPV6</name><operator>)</operator></expr> ?</condition><then> <expr><name>T_AAAA</name></expr> </then><else>: <expr><name>T_A</name></expr></else></ternary></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, 
					      <argument><expr><ternary><condition><expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IPV4</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"4"</literal></expr> </then><else>: <expr><literal type="string">"6"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>cache_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    </block_content>}</block></if></if_stmt>
		  
		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_HOSTS</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_DHCP</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_DHCP_FQDN</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>cache_get_name</name><argument_list>(<argument><expr><name>crecp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		      <if_stmt><if>if <condition>(<expr><call><name>in_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cut</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
			  <operator>(</operator><name>local_query</name> <operator>||</operator> <call><name>filter_zone</name><argument_list>(<argument><expr><name>zone</name></expr></argument>, <argument><expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>F_IPV6</name> <operator>|</operator> <name>F_IPV4</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>addr</name></name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
			<block>{<block_content>
			  <if_stmt><if>if <condition>(<expr><name>cut</name></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><operator>*</operator><name>cut</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

			  <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><operator>-</operator><name>axfroffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
						  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IPV6</name><operator>)</operator></expr> ?</condition><then> <expr><name>T_AAAA</name></expr> </then><else>: <expr><name>T_A</name></expr></else></ternary></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, 
						  <argument><expr><ternary><condition><expr><operator>(</operator><name><name>crecp</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>F_IPV4</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"4"</literal></expr> </then><else>: <expr><literal type="string">"6"</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>cut</name></expr> ?</condition><then> <expr><name>name</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>crecp</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			    <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
			</block_content>}</block></if></if_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></while>
	   
	  <comment type="block">/* repeat SOA as last record */</comment>
	  <if_stmt><if>if <condition>(<expr><call><name>add_resource_record</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trunc</name></expr></argument>, <argument><expr><name>axfroffset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ansp</name></expr></argument>, 
				  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>T_SOA</name></expr></argument>, <argument><expr><name>C_IN</name></expr></argument>, <argument><expr><literal type="string">"ddlllll"</literal></expr></argument>,
				  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>authserver</name></name></expr></argument>,  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>hostmaster</name></name></expr></argument>,
				  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_sn</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_refresh</name></name></expr></argument>, 
				  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_retry</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>soa_expiry</name></name></expr></argument>, 
				  <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>auth_ttl</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>anscount</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	</block_content>}</block></if></if_stmt>
      
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* done all questions, set up header and return length of result */</comment>
  <comment type="block">/* clear authoritative and truncated flags, set QR flag */</comment>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>=</operator> <operator>(</operator><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><name>HB3_AA</name> <operator>|</operator> <name>HB3_TC</name><operator>)</operator><operator>)</operator> <operator>|</operator> <name>HB3_QR</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>local_query</name></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* set RA flag */</comment>
      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>|=</operator> <name>HB4_RA</name></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <comment type="block">/* clear RA flag */</comment>
      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HB4_RA</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

  <comment type="block">/* data is never DNSSEC signed. */</comment>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb4</name></name> <operator>&amp;=</operator> <operator>~</operator><name>HB4_AD</name></expr>;</expr_stmt>

  <comment type="block">/* authoritative */</comment>
  <if_stmt><if>if <condition>(<expr><name>auth</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>|=</operator> <name>HB3_AA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <comment type="block">/* truncation */</comment>
  <if_stmt><if>if <condition>(<expr><name>trunc</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>hb3</name></name> <operator>|=</operator> <name>HB3_TC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>auth</name> <operator>||</operator> <name>local_query</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>nxdomain</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>SET_RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>NXDOMAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>SET_RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>NOERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block">/* no error */</comment>
  
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>anscount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>authcount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>arcount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>local_query</name> <operator>&amp;&amp;</operator> <name>out_of_zone</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>SET_RCODE</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>REFUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>ancount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>header</name><operator>-&gt;</operator><name>nscount</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>log</name><operator>.</operator><name>rcode</name></name> <operator>=</operator> <name>REFUSED</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>log</name><operator>.</operator><name>ede</name></name> <operator>=</operator> <name>EDE_NOT_AUTH</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log_query</name><argument_list>(<argument><expr><name>F_UPSTREAM</name> <operator>|</operator> <name>F_RCODE</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>resize_packet</name><argument_list>(<argument><expr><name>header</name></expr></argument>,  <argument><expr><name>ansp</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  
  <comment type="block">/* Advertise our packet size limit in our reply */</comment>
  <if_stmt><if>if <condition>(<expr><name>have_pseudoheader</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><call><name>add_pseudoheader</name><argument_list>(<argument><expr><name>header</name></expr></argument>,  <argument><expr><name>ansp</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>limit</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>edns_pktsz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>do_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><name>ansp</name> <operator>-</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>header</name></expr>;</return>
</block_content>}</block></function>
  
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
</unit>
