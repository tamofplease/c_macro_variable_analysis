<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/bpf.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_NETWORK</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SOLARIS_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ifaddrs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/param.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_NETWORK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/sysctl.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/route.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if_dl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/if_ether.h&gt;</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;net/if_var.h&gt;</cpp:file></cpp:include> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in_var.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet6/in6_var.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SA_SIZE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SA_SIZE</name><parameter_list>(<parameter><type><name>sa</name></type></parameter>)</parameter_list></cpp:macro>                                             \
    <cpp:value>(  (!(sa) || ((struct sockaddr *)(sa))-&gt;sa_len == 0) ?      \
        sizeof(long)            :                               \
        1 + ( (((struct sockaddr *)(sa))-&gt;sa_len - 1) | (sizeof(long) - 1) ) )</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BSD_NETWORK</name></cpp:ifdef>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>del_family</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>union</name> <name>all_addr</name></name></type> <name>del_addr</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_NETWORK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>int</name></type> <name>arp_enumerate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parm</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>()</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name><name>mib</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>needed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>rt_msghdr</name></name> <modifier>*</modifier></type><name>rtm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_inarp</name></name> <modifier>*</modifier></type><name>sin2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_dl</name></name> <modifier>*</modifier></type><name>sdl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name>buff</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>buff</name><operator>.</operator><name>iov_base</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>buff</name><operator>.</operator><name>iov_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>CTL_NET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>PF_ROUTE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>NET_RT_FLAGS</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>RTF_LLINFO</name></cpp:ifdef>
  <expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>RTF_LLINFO</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>mib</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	
  <if_stmt><if>if <condition>(<expr><call><name>sysctl</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>needed</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>needed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> 
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>expand_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buff</name></expr></argument>, <argument><expr><name>needed</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rc</name> <operator>=</operator> <call><name>sysctl</name><argument_list>(<argument><expr><name>mib</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>buff</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>needed</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
	  <name>errno</name> <operator>!=</operator> <name>ENOMEM</name></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>needed</name> <operator>+=</operator> <name>needed</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>next</name> <operator>=</operator> <name><name>buff</name><operator>.</operator><name>iov_base</name></name></expr> ;</init> <condition><expr><name>next</name> <operator>&lt;</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buff</name><operator>.</operator><name>iov_base</name></name> <operator>+</operator> <name>needed</name></expr>;</condition> <incr><expr><name>next</name> <operator>+=</operator> <name><name>rtm</name><operator>-&gt;</operator><name>rtm_msglen</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>rtm</name> <operator>=</operator> <operator>(</operator>struct <name>rt_msghdr</name> <operator>*</operator><operator>)</operator><name>next</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>sin2</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_inarp</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>rtm</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>sdl</name> <operator>=</operator> <operator>(</operator>struct <name>sockaddr_dl</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>sin2</name> <operator>+</operator> <call><name>SA_SIZE</name><argument_list>(<argument><expr><name>sin2</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call>(<modifier>*</modifier><name>callback</name>)<argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sin2</name><operator>-&gt;</operator><name>sin_addr</name></name></expr></argument>, <argument><expr><call><name>LLADDR</name><argument_list>(<argument><expr><name>sdl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_alen</name></name></expr></argument>, <argument><expr><name>parm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(HAVE_BSD_NETWORK) &amp;&amp; !defined(__APPLE__) */</comment>


<function><type><name>int</name></type> <name>iface_enumerate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>family</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parm</name></decl></parameter>, <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>()</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ifaddrs</name></name> <modifier>*</modifier></type><name>head</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>addrs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>errsave</name></decl>, <decl><type ref="prev"/><name>fd</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_UNSPEC</name></expr>)</condition><block type="pseudo"><block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_NETWORK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <return>return  <expr><call><name>arp_enumerate</name><argument_list>(<argument><expr><name>parm</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="block">/* need code for Solaris and MacOS*/</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* AF_LINK doesn't exist in Linux, so we can't use it in our API */</comment>
  <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_LOCAL</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>family</name> <operator>=</operator> <name>AF_LINK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>getifaddrs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>head</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_NETWORK</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_INET6</name></expr></argument>, <argument><expr><name>SOCK_DGRAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <for>for <control>(<init><expr><name>addrs</name> <operator>=</operator> <name>head</name></expr>;</init> <condition><expr><name>addrs</name></expr>;</condition> <incr><expr><name>addrs</name> <operator>=</operator> <name><name>addrs</name><operator>-&gt;</operator><name>ifa_next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>addrs</name><operator>-&gt;</operator><name>ifa_addr</name><operator>-&gt;</operator><name>sa_family</name></name> <operator>==</operator> <name>family</name></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>iface_index</name> <init>= <expr><call><name>if_nametoindex</name><argument_list>(<argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	  <if_stmt><if>if <condition>(<expr><name>iface_index</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>addrs</name><operator>-&gt;</operator><name>ifa_addr</name></name> <operator>||</operator> 
	      <operator>(</operator><operator>!</operator><name><name>addrs</name><operator>-&gt;</operator><name>ifa_netmask</name></name> <operator>&amp;&amp;</operator> <name>family</name> <operator>!=</operator> <name>AF_LINK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>

	  <if_stmt><if>if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>addr</name></decl>, <decl><type ref="prev"/><name>netmask</name></decl>, <decl><type ref="prev"/><name>broadcast</name></decl>;</decl_stmt>
	      <expr_stmt><expr><name>addr</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name><name>addrs</name><operator>-&gt;</operator><name>ifa_addr</name></name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BSD_NETWORK</name></cpp:ifdef>
	      <if_stmt><if>if <condition>(<expr><name>del_family</name> <operator>==</operator> <name>AF_INET</name> <operator>&amp;&amp;</operator> <name><name>del_addr</name><operator>.</operator><name>addr4</name><operator>.</operator><name>s_addr</name></name> <operator>==</operator> <name><name>addr</name><operator>.</operator><name>s_addr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	      <expr_stmt><expr><name>netmask</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name><name>addrs</name><operator>-&gt;</operator><name>ifa_netmask</name></name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name><name>addrs</name><operator>-&gt;</operator><name>ifa_broadaddr</name></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>broadcast</name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator> <name><name>addrs</name><operator>-&gt;</operator><name>ifa_broadaddr</name></name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr>;</expr_stmt></block_content></block></if> 
	      <else>else<block type="pseudo"><block_content> 
		<expr_stmt><expr><name><name>broadcast</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>	      
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call>(<modifier>*</modifier><name>callback</name>)<argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>iface_index</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>netmask</name></expr></argument>, <argument><expr><name>broadcast</name></expr></argument>, <argument><expr><name>parm</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
	    </block_content>}</block></if>
	  <if type="elseif">else if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>addr</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name><name>addrs</name><operator>-&gt;</operator><name>ifa_addr</name></name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>netmask</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name><name>addrs</name><operator>-&gt;</operator><name>ifa_netmask</name></name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>int</name></type> <name>scope_id</name> <init>= <expr><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name><name>addrs</name><operator>-&gt;</operator><name>ifa_addr</name></name><operator>)</operator><operator>-&gt;</operator><name>sin6_scope_id</name></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>prefix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>u32</name></type> <name>valid</name> <init>= <expr><literal type="number">0xffffffff</literal></expr></init></decl>, <decl><type ref="prev"/><name>preferred</name> <init>= <expr><literal type="number">0xffffffff</literal></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BSD_NETWORK</name></cpp:ifdef>
	      <if_stmt><if>if <condition>(<expr><name>del_family</name> <operator>==</operator> <name>AF_INET6</name> <operator>&amp;&amp;</operator> <call><name>IN6_ARE_ADDR_EQUAL</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>del_addr</name><operator>.</operator><name>addr6</name></name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<continue>continue;</continue></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_NETWORK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
	      <decl_stmt><decl><type><name><name>struct</name> <name>in6_ifreq</name></name></type> <name>ifr6</name></decl>;</decl_stmt>

	      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ifr6</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ifr6</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>safe_strncpy</name><argument_list>(<argument><expr><name><name>ifr6</name><operator>.</operator><name>ifr_name</name></name></expr></argument>, <argument><expr><name><name>addrs</name><operator>-&gt;</operator><name>ifa_name</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ifr6</name><operator>.</operator><name>ifr_name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      
	      <expr_stmt><expr><name><name>ifr6</name><operator>.</operator><name>ifr_addr</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name><name>addrs</name><operator>-&gt;</operator><name>ifa_addr</name></name><operator>)</operator></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIOCGIFAFLAG_IN6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr6</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
		  <if_stmt><if>if <condition>(<expr><name><name>ifr6</name><operator>.</operator><name>ifr_ifru</name><operator>.</operator><name>ifru_flags6</name></name> <operator>&amp;</operator> <name>IN6_IFF_TENTATIVE</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>IFACE_TENTATIVE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  
		  <if_stmt><if>if <condition>(<expr><name><name>ifr6</name><operator>.</operator><name>ifr_ifru</name><operator>.</operator><name>ifru_flags6</name></name> <operator>&amp;</operator> <name>IN6_IFF_DEPRECATED</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>IFACE_DEPRECATED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IN6_IFF_TEMPORARY</name></cpp:ifdef>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ifr6</name><operator>.</operator><name>ifr_ifru</name><operator>.</operator><name>ifru_flags6</name></name> <operator>&amp;</operator> <operator>(</operator><name>IN6_IFF_AUTOCONF</name> <operator>|</operator> <name>IN6_IFF_TEMPORARY</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>IFACE_PERMANENT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>IN6_IFF_PRIVACY</name></cpp:ifdef>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ifr6</name><operator>.</operator><name>ifr_ifru</name><operator>.</operator><name>ifru_flags6</name></name> <operator>&amp;</operator> <operator>(</operator><name>IN6_IFF_AUTOCONF</name> <operator>|</operator> <name>IN6_IFF_PRIVACY</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>IFACE_PERMANENT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></if></if_stmt>
	      
	      <expr_stmt><expr><name><name>ifr6</name><operator>.</operator><name>ifr_addr</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator> <name><name>addrs</name><operator>-&gt;</operator><name>ifa_addr</name></name><operator>)</operator></expr>;</expr_stmt>
	      <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>SIOCGIFALIFETIME_IN6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ifr6</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>valid</name> <operator>=</operator> <name><name>ifr6</name><operator>.</operator><name>ifr_ifru</name><operator>.</operator><name>ifru_lifetime</name><operator>.</operator><name>ia6t_vltime</name></name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>preferred</name> <operator>=</operator> <name><name>ifr6</name><operator>.</operator><name>ifr_ifru</name><operator>.</operator><name>ifru_lifetime</name><operator>.</operator><name>ia6t_pltime</name></name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	      	      
	      <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>IN6ADDRSZ</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>prefix</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content> 
                <if_stmt><if>if <condition>(<expr><name><name>netmask</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>
		  <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	      
	      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>IN6ADDRSZ</name> <operator>&amp;&amp;</operator> <name><name>netmask</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> 
                <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr><operator>,</operator> <expr><name>prefix</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> 
		  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>netmask</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		    <break>break;</break></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>
	      
	      <comment type="block">/* voodoo to clear interface field in address */</comment>
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_NOWILD</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>IN6_IS_ADDR_LINKLOCAL</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>addr</name><operator>-&gt;</operator><name>s6_addr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt> 
	     
	      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call>(<modifier>*</modifier><name>callback</name>)<argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>scope_id</name></expr></argument>, <argument><expr><name>iface_index</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>,
				<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>preferred</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>valid</name></expr></argument>, <argument><expr><name>parm</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>	      
	    </block_content>}</block></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>      
	  <if type="elseif">else if <condition>(<expr><name>family</name> <operator>==</operator> <name>AF_LINK</name></expr>)</condition>
	    <block>{<block_content> 
	      <comment type="block">/* Assume ethernet again here */</comment>
	      <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_dl</name></name> <modifier>*</modifier></type><name>sdl</name> <init>= <expr><operator>(</operator>struct <name>sockaddr_dl</name> <operator>*</operator><operator>)</operator> <name><name>addrs</name><operator>-&gt;</operator><name>ifa_addr</name></name></expr></init></decl>;</decl_stmt>
	      <if_stmt><if>if <condition>(<expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_alen</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> 
		  <operator>!</operator><operator>(</operator><call>(<modifier>*</modifier><name>callback</name>)<argument_list>(<argument><expr><name>iface_index</name></expr></argument>, <argument><expr><name>ARPHRD_ETHER</name></expr></argument>, <argument><expr><call><name>LLADDR</name><argument_list>(<argument><expr><name>sdl</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sdl</name><operator>-&gt;</operator><name>sdl_alen</name></name></expr></argument>, <argument><expr><name>parm</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

 <label><name>err</name>:</label>
  <expr_stmt><expr><name>errsave</name> <operator>=</operator> <name>errno</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>freeifaddrs</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <if_stmt><if>if <condition>(<expr><name>fd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>errsave</name></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(HAVE_BSD_NETWORK) || defined(HAVE_SOLARIS_NETWORK) */</comment>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_BSD_NETWORK</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DHCP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;net/bpf.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>init_bpf</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> 
    <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><literal type="string">"/dev/bpf%d"</literal></expr></argument>, <argument><expr><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_raw_fd</name></name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_buff</name></name></expr></argument>, <argument><expr><name>O_RDWR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
	<return>return;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>!=</operator> <name>EBUSY</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot create DHCP BPF socket: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>	     
</block_content>}</block></function>

<function><type><name>void</name></type> <name>send_via_bpf</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_packet</name></name> <modifier>*</modifier></type><name>mess</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
		  <parameter><decl><type><name><name>struct</name> <name>in_addr</name></name></type> <name>iface_addr</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>ifreq</name></name> <modifier>*</modifier></type><name>ifr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
   <comment type="block">/* Hairy stuff, packet either has to go to the
      net broadcast or the destination can't reply to ARP yet,
      but we do know the physical address. 
      Build the packet by steam, and send directly, bypassing
      the kernel IP stack */</comment>
  
  <decl_stmt><decl><type><name><name>struct</name> <name>ether_header</name></name></type> <name>ether</name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name><name>struct</name> <name>ip</name></name></type> <name>ip</name></decl>;</decl_stmt>
  <struct>struct <name>udphdr</name> <block>{
    <decl_stmt><decl><type><name>u16</name></type> <name>uh_sport</name></decl>;</decl_stmt>               <comment type="block">/* source port */</comment>
    <decl_stmt><decl><type><name>u16</name></type> <name>uh_dport</name></decl>;</decl_stmt>               <comment type="block">/* destination port */</comment>
    <decl_stmt><decl><type><name>u16</name></type> <name>uh_ulen</name></decl>;</decl_stmt>                <comment type="block">/* udp length */</comment>
    <decl_stmt><decl><type><name>u16</name></type> <name>uh_sum</name></decl>;</decl_stmt>                 <comment type="block">/* udp checksum */</comment>
  }</block> <decl><name>udp</name></decl>;</struct>
  
  <decl_stmt><decl><type><name>u32</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iovec</name></name></type> <name><name>iov</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

  <comment type="block">/* Only know how to do ethernet on *BSD */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>mess</name><operator>-&gt;</operator><name>htype</name></name> <operator>!=</operator> <name>ARPHRD_ETHER</name> <operator>||</operator> <name><name>mess</name><operator>-&gt;</operator><name>hlen</name></name> <operator>!=</operator> <name>ETHER_ADDR_LEN</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DHCP request for unsupported hardware type (%d) received on %s"</literal></expr></argument>)</argument_list></call></expr></argument>, 
		<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>htype</name></name></expr></argument>, <argument><expr><name><name>ifr</name><operator>-&gt;</operator><name>ifr_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
   
  <expr_stmt><expr><name><name>ifr</name><operator>-&gt;</operator><name>ifr_addr</name><operator>.</operator><name>sa_family</name></name> <operator>=</operator> <name>AF_LINK</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcpfd</name></name></expr></argument>, <argument><expr><name>SIOCGIFADDR</name></expr></argument>, <argument><expr><name>ifr</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ether</name><operator>.</operator><name>ether_shost</name></name></expr></argument>, <argument><expr><call><name>LLADDR</name><argument_list>(<argument><expr><operator>(</operator>struct <name>sockaddr_dl</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ifr</name><operator>-&gt;</operator><name>ifr_addr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ETHER_ADDR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ether</name><operator>.</operator><name>ether_type</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>ETHERTYPE_IP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>mess</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ether</name><operator>.</operator><name>ether_dhost</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>,  <argument><expr><name>ETHER_ADDR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_dst</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name>INADDR_BROADCAST</name></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ether</name><operator>.</operator><name>ether_dhost</name></name></expr></argument>, <argument><expr><name><name>mess</name><operator>-&gt;</operator><name>chaddr</name></name></expr></argument>, <argument><expr><name>ETHER_ADDR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_dst</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>mess</name><operator>-&gt;</operator><name>yiaddr</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  
  <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_p</name></name> <operator>=</operator> <name>IPPROTO_UDP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_src</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <name><name>iface_addr</name><operator>.</operator><name>s_addr</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_len</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ip</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> 
		    <sizeof>sizeof<argument_list>(<argument><expr>struct <name>udphdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
		    <name>len</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
  <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_hl</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ip</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_v</name></name> <operator>=</operator> <name>IPVERSION</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_tos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_id</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_off</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0x4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* don't fragment */</comment>
  <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_ttl</name></name> <operator>=</operator> <name>IPDEFTTL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_sum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ip</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>u16</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>ip</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>
  <while>while <condition>(<expr><name>sum</name><operator>&gt;&gt;</operator><literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>sum</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>  
  <expr_stmt><expr><name><name>ip</name><operator>.</operator><name>ip_sum</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sum</name> <operator>==</operator> <literal type="number">0xffff</literal><operator>)</operator></expr> ?</condition><then> <expr><name>sum</name></expr> </then><else>: <expr><operator>~</operator><name>sum</name></expr></else></ternary></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name>udp</name><operator>.</operator><name>uh_sport</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_server_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>udp</name><operator>.</operator><name>uh_dport</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_client_port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>mess</name><operator>)</operator><index>[<expr><name>len</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* for checksum, in case length is odd. */</comment>
  <expr_stmt><expr><name><name>udp</name><operator>.</operator><name>uh_sum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>udp</name><operator>.</operator><name>uh_ulen</name></name> <operator>=</operator> <name>sum</name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>udphdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>IPPROTO_UDP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>ip</name><operator>.</operator><name>ip_src</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name><name>ip</name><operator>.</operator><name>ip_src</name><operator>.</operator><name>s_addr</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>ip</name><operator>.</operator><name>ip_dst</name><operator>.</operator><name>s_addr</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name><name>ip</name><operator>.</operator><name>ip_dst</name><operator>.</operator><name>s_addr</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>udphdr</name></expr></argument>)</argument_list></sizeof><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>u16</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>udp</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>len</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
    <expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>u16</name> <operator>*</operator><operator>)</operator><name>mess</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>;</expr_stmt></block_content></block></for>
  <while>while <condition>(<expr><name>sum</name><operator>&gt;&gt;</operator><literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>sum</name> <operator>=</operator> <operator>(</operator><name>sum</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>sum</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></while>
  <expr_stmt><expr><name><name>udp</name><operator>.</operator><name>uh_sum</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sum</name> <operator>==</operator> <literal type="number">0xffff</literal><operator>)</operator></expr> ?</condition><then> <expr><name>sum</name></expr> </then><else>: <expr><operator>~</operator><name>sum</name></expr></else></ternary></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>ioctl</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_raw_fd</name></name></expr></argument>, <argument><expr><name>BIOCSETIF</name></expr></argument>, <argument><expr><name>ifr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>&amp;</operator><name>ether</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ether</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>&amp;</operator><name>ip</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ip</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <operator>&amp;</operator><name>udp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>udp</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>iov_base</name> <operator>=</operator> <name>mess</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iov</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>iov_len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

  <while>while <condition>(<expr><call><name>retry_send</name><argument_list>(<argument><expr><call><name>writev</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_raw_fd</name></name></expr></argument>, <argument><expr><name>iov</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(HAVE_BSD_NETWORK) &amp;&amp; defined(HAVE_DHCP) */</comment>
 

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_BSD_NETWORK</name></cpp:ifdef>

<function><type><name>void</name></type> <name>route_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* AF_UNSPEC: all addr families */</comment>
  <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>routefd</name></name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_ROUTE</name></expr></argument>, <argument><expr><name>SOCK_RAW</name></expr></argument>, <argument><expr><name>AF_UNSPEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>routefd</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <operator>!</operator><call><name>fix_fd</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>routefd</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot create PF_ROUTE socket: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>route_sock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>if_msghdr</name></name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>recv</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>routefd</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>packet_buff_sz</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>msg</name> <operator>=</operator> <operator>(</operator>struct <name>if_msghdr</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>packet</name></name></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>&lt;</operator> <name><name>msg</name><operator>-&gt;</operator><name>ifm_msglen</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

   <if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>ifm_version</name></name> <operator>!=</operator> <name>RTM_VERSION</name></expr>)</condition>
     <block>{<block_content>
       <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>warned</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
       <if_stmt><if>if <condition>(<expr><operator>!</operator><name>warned</name></expr>)</condition>
	 <block>{<block_content>
	   <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unknown protocol version from route socket"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	   <expr_stmt><expr><name>warned</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	 </block_content>}</block></if></if_stmt>
     </block_content>}</block></if>
   <if type="elseif">else if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>ifm_type</name></name> <operator>==</operator> <name>RTM_NEWADDR</name></expr>)</condition>
     <block>{<block_content>
       <expr_stmt><expr><name>del_family</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>queue_event</name><argument_list>(<argument><expr><name>EVENT_NEWADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if>
   <if type="elseif">else if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>ifm_type</name></name> <operator>==</operator> <name>RTM_DELADDR</name></expr>)</condition>
     <block>{<block_content>
       <comment type="block">/* There's a race in the kernel, such that if we run iface_enumerate() immediately
	  we get a DELADDR event, the deleted address still appears. Here we store the deleted address
	  in a static variable, and omit it from the set returned by iface_enumerate() */</comment>
       <decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><operator>(</operator><operator>(</operator>struct <name>ifa_msghdr</name> <operator>*</operator><operator>)</operator><name>msg</name><operator>)</operator><operator>-&gt;</operator><name>ifam_addrs</name></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>int</name></type> <name><name>maskvec</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>RTA_DST</name></expr>, <expr><name>RTA_GATEWAY</name></expr>, <expr><name>RTA_NETMASK</name></expr>, <expr><name>RTA_GENMASK</name></expr>,
			 <expr><name>RTA_IFP</name></expr>, <expr><name>RTA_IFA</name></expr>, <expr><name>RTA_AUTHOR</name></expr>, <expr><name>RTA_BRD</name></expr> }</block></expr></init></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>int</name></type> <name>of</name></decl>;</decl_stmt>
       <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>
       
       <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator>  <expr><name>of</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>ifa_msghdr</name></expr></argument>)</argument_list></sizeof></expr>;</init> <condition><expr><name>of</name> <operator>&lt;</operator> <name>rc</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>maskvec</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>maskvec</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> 
	 <if_stmt><if>if <condition>(<expr><name>mask</name> <operator>&amp;</operator> <name><name>maskvec</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> 
	   <block>{<block_content>
	     <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr</name></name> <modifier>*</modifier></type><name>sa</name> <init>= <expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>msg</name> <operator>+</operator> <name>of</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	     <decl_stmt><decl><type><name>size_t</name></type> <name>diff</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>sa</name><operator>-&gt;</operator><name>sa_len</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>sa</name><operator>-&gt;</operator><name>sa_len</name></name></expr> </then><else>: <expr><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof></expr></else></ternary></expr></init></decl>;</decl_stmt>
	     
	     <if_stmt><if>if <condition>(<expr><name><name>maskvec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>RTA_IFA</name></expr>)</condition>
	       <block>{<block_content>
		 <expr_stmt><expr><name>del_family</name> <operator>=</operator> <name><name>sa</name><operator>-&gt;</operator><name>sa_family</name></name></expr>;</expr_stmt>
		 <if_stmt><if>if <condition>(<expr><name>del_family</name> <operator>==</operator> <name>AF_INET</name></expr>)</condition><block type="pseudo"><block_content>
		   <expr_stmt><expr><name><name>del_addr</name><operator>.</operator><name>addr4</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>sockaddr_in</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin_addr</name></expr>;</expr_stmt></block_content></block></if>
		 <if type="elseif">else if <condition>(<expr><name>del_family</name> <operator>==</operator> <name>AF_INET6</name></expr>)</condition><block type="pseudo"><block_content>
		   <expr_stmt><expr><name><name>del_addr</name><operator>.</operator><name>addr6</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator>struct <name>sockaddr_in6</name> <operator>*</operator><operator>)</operator><name>sa</name><operator>)</operator><operator>-&gt;</operator><name>sin6_addr</name></expr>;</expr_stmt></block_content></block></if>
		 <else>else<block type="pseudo"><block_content>
		   <expr_stmt><expr><name>del_family</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
	       </block_content>}</block></if></if_stmt>
	     
	     <expr_stmt><expr><name>of</name> <operator>+=</operator> <name>diff</name></expr>;</expr_stmt>
	     <comment type="block">/* round up as needed */</comment>
	     <if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&amp;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 
	       <expr_stmt><expr><name>of</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <operator>(</operator><name>diff</name> <operator>&amp;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>long</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
	   </block_content>}</block></if></if_stmt></block_content></block></for>
       
       <expr_stmt><expr><call><name>queue_event</name><argument_list>(<argument><expr><name>EVENT_NEWADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_BSD_NETWORK */</comment>
</unit>
