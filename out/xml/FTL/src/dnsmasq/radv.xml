<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/FTL/src/dnsmasq/radv.c"><comment type="block">/* dnsmasq is Copyright (c) 2000-2022 Simon Kelley

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; version 2 dated June, 1991, or
   (at your option) version 3 dated 29 June, 2007.
 
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
     
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
*/</comment>


<comment type="block">/* NB. This code may be called during a DHCPv4 or transaction which is in ping-wait
   It therefore cannot use any DHCP buffer resources except outpacket, which is
   not used by DHCPv4 code. This code may also be called when DHCP 4 or 6 isn't
   active, so we ensure that outpacket is allocated here too */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dnsmasq.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DHCP6</name></cpp:ifdef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/icmp6.h&gt;</cpp:file></cpp:include>

<struct>struct <name>ra_param</name> <block>{
  <decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ind</name></decl>, <decl><type ref="prev"/><name>managed</name></decl>, <decl><type ref="prev"/><name>other</name></decl>, <decl><type ref="prev"/><name>first</name></decl>, <decl><type ref="prev"/><name>adv_router</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>if_name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name> <modifier>*</modifier></type><name>tags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>link_local</name></decl>, <decl><type ref="prev"/><name>link_global</name></decl>, <decl><type ref="prev"/><name>ula</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>glob_pref_time</name></decl>, <decl><type ref="prev"/><name>link_pref_time</name></decl>, <decl><type ref="prev"/><name>ula_pref_time</name></decl>, <decl><type ref="prev"/><name>adv_interval</name></decl>, <decl><type ref="prev"/><name>prio</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>found_context</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>search_param</name> <block>{
  <decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>iface</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><name>IF_NAMESIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>alias_param</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>iface</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_bridge</name></name> <modifier>*</modifier></type><name>bridge</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>num_alias_ifs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>max_alias_ifs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>alias_ifs</name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>send_ra</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iface</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>iface_name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>send_ra_alias</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iface</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>iface_name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>dest</name></decl></parameter>,
                    <parameter><decl><type><name>int</name></type> <name>send_iface</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>send_ra_to_aliases</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mac</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maclen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parm</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>add_prefixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>local</name></decl></parameter>,  <parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
			<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>preferred</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>valid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vparam</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>iface_search</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>local</name></decl></parameter>,  <parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
			<parameter><decl><type><name>int</name></type> <name>prefered</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>valid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vparam</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>add_lla</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mac</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maclen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parm</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>new_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>iface_name</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>calc_lifetime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ra_interface</name></name> <modifier>*</modifier></type><name>ra</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>calc_interval</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ra_interface</name></name> <modifier>*</modifier></type><name>ra</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>calc_prio</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ra_interface</name></name> <modifier>*</modifier></type><name>ra</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name><name>struct</name> <name>ra_interface</name></name> <modifier>*</modifier></type><name>find_iface_param</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>iface</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>hop_limit</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>ra_init</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>icmp6_filter</name></name></type> <name>filter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_TCLASS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IPTOS_CLASS_CS6</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>class</name> <init>= <expr><name>IPTOS_CLASS_CS6</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* radvd uses this value */</comment>
  <decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
  
  <comment type="block">/* ensure this is around even if we're not doing DHCPv6 */</comment>
  <expr_stmt><expr><call><name>expand_buf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dhcp_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
  <comment type="block">/* See if we're guessing SLAAC addresses, if so we need to receive ping replies */</comment>
  <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA_NAME</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
  
  <comment type="block">/* Need ICMP6 socket for transmission for DHCPv6 even when not doing RA. */</comment>

  <expr_stmt><expr><call><name>ICMP6_FILTER_SETBLOCKALL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>ICMP6_FILTER_SETPASS</name><argument_list>(<argument><expr><name>ND_ROUTER_SOLICIT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>context</name></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>ICMP6_FILTER_SETPASS</name><argument_list>(<argument><expr><name>ICMP6_ECHO_REPLY</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name>PF_INET6</name></expr></argument>, <argument><expr><name>SOCK_RAW</name></expr></argument>, <argument><expr><name>IPPROTO_ICMPV6</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
      <call><name>getsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_UNICAST_HOPS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hop_limit</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call> <operator>||</operator>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>IPV6_TCLASS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>IPTOS_CLASS_CS6</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_TCLASS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>class</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>class</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <operator>!</operator><call><name>fix_fd</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><call><name>set_ipv6pktinfo</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_UNICAST_HOPS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_MULTICAST_HOPS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name>setsockopt</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>IPPROTO_ICMPV6</name></expr></argument>, <argument><expr><name>ICMP6_FILTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filter</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>die</name> <argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"cannot create ICMPv6 socket: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>EC_BADNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
   <expr_stmt><expr><name><name>daemon</name><operator>-&gt;</operator><name>icmp6fd</name></name> <operator>=</operator> <name>fd</name></expr>;</expr_stmt>
   
   <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>doing_ra</name></name></expr>)</condition><block type="pseudo"><block_content>
     <expr_stmt><expr><call><name>ra_start_unsolicited</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ra_start_unsolicited</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>   
   <comment type="block">/* init timers so that we do ra's for some/all soon. some ra_times will end up zeroed
     if it's not appropriate to advertise those contexts.
     This gets re-called on a netlink route-change to re-do the advertisement
     and pick up new interfaces */</comment>
  
  <if_stmt><if>if <condition>(<expr><name>context</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>ra_short_period_start</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
      <comment type="block">/* start after 1 second to get logging right at startup. */</comment>
      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>ra_time</name></name> <operator>=</operator> <name>now</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if>
  <else>else<block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_TEMPLATE</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>ra_time</name></name> <operator>=</operator> <name>now</name> <operator>+</operator> <operator>(</operator><call><name>rand16</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">13000</literal><operator>)</operator></expr>;</expr_stmt> <comment type="block">/* range 0 - 5 */</comment>
	  <comment type="block">/* re-do frequently for a minute or so, in case the first gets lost. */</comment>
	  <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>ra_short_period_start</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>icmp6_packet</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>interface</name><index>[<expr><name>IF_NAMESIZE</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>sz</name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>int</name></type> <name>if_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name> <modifier>*</modifier></type><name>cmptr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>msghdr</name></name></type> <name>msg</name></decl>;</decl_stmt>
  <union>union <block>{
    <decl_stmt><decl><type><name><name>struct</name> <name>cmsghdr</name></name></type> <name>align</name></decl>;</decl_stmt> <comment type="block">/* this ensures alignment */</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>control6</name><index>[<expr><call><name>CMSG_SPACE</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>in6_pktinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>]</index></name></decl>;</decl_stmt>
  }</block> <decl><name>control_u</name></decl>;</union>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>from</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>packet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

  <comment type="block">/* Note: use outpacket for input buffer */</comment>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_control</name></name> <operator>=</operator> <name><name>control_u</name><operator>.</operator><name>control6</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_controllen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>control_u</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_name</name></name> <operator>=</operator> <operator>&amp;</operator><name>from</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_namelen</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iov</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>msg</name><operator>.</operator><name>msg_iovlen</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sz</name> <operator>=</operator> <call><name>recv_dhcp_packet</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>icmp6fd</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>sz</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
   
  <expr_stmt><expr><name>packet</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_base</name></name></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_FIRSTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>cmptr</name></expr>;</condition> <incr><expr><name>cmptr</name> <operator>=</operator> <call><name>CMSG_NXTHDR</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_level</name></name> <operator>==</operator> <name>IPPROTO_IPV6</name> <operator>&amp;&amp;</operator> <name><name>cmptr</name><operator>-&gt;</operator><name>cmsg_type</name></name> <operator>==</operator> <name><name>daemon</name><operator>-&gt;</operator><name>v6pktinfo</name></name></expr>)</condition>
      <block>{<block_content>
	<union>union <block>{
	  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name><name>struct</name> <name>in6_pktinfo</name></name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	}</block> <decl><name>p</name></decl>;</union>
	<expr_stmt><expr><name><name>p</name><operator>.</operator><name>c</name></name> <operator>=</operator> <call><name>CMSG_DATA</name><argument_list>(<argument><expr><name>cmptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
	<expr_stmt><expr><name>if_index</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>p</name><operator>-&gt;</operator><name>ipi6_ifindex</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>indextoname</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>icmp6fd</name></name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
    
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iface_check</name><argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_except</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return;</return></block_content></block></if></if_stmt></block_content></block></for>
 
  <if_stmt><if>if <condition>(<expr><name><name>packet</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>packet</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ICMP6_ECHO_REPLY</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>lease_ping_reply</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>from</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 
  <if type="elseif">else if <condition>(<expr><name><name>packet</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ND_ROUTER_SOLICIT</name></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mac</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_bridge</name></name> <modifier>*</modifier></type><name>bridge</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ssize_t</name></type> <name>rem</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>opt_sz</name></decl>;</decl_stmt>
      
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
      <expr_stmt><expr><call><name>dump_packet_icmp</name><argument_list>(<argument><expr><name>DUMP_RA</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>packet</name></expr></argument>, <argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>(</operator>union <name>mysockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>from</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>           
      
      <comment type="block">/* look for link-layer address option for logging */</comment>
      <for>for <control>(<init><expr><name>rem</name> <operator>=</operator> <name>sz</name> <operator>-</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>packet</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</init> <condition><expr><name>rem</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>rem</name> <operator>-=</operator> <name>opt_sz</name></expr><operator>,</operator> <expr><name>p</name> <operator>+=</operator> <name>opt_sz</name></expr></incr>)</control>
	<block>{<block_content>
	  <expr_stmt><expr><name>opt_sz</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>opt_sz</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>opt_sz</name> <operator>&gt;</operator> <name>rem</name></expr>)</condition><block type="pseudo"><block_content>
	    <return>return;</return></block_content></block></if></if_stmt> <comment type="block">/* Bad packet */</comment>
	  
	  <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>ICMP6_OPT_SOURCE_MAC</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>opt_sz</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>-</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>MAXDNAME</name><operator>)</operator></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>print_mac</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>opt_sz</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><name>mac</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
      
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_QUIET_RA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RTR-SOLICIT(%s) %s"</literal></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><name>mac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <comment type="block">/* If the incoming interface is an alias of some other one (as
         specified by the --bridge-interface option), send an RA using
         the context of the aliased interface. */</comment>
      <for>for <control>(<init><expr><name>bridge</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>bridges</name></name></expr>;</init> <condition><expr><name>bridge</name></expr>;</condition> <incr><expr><name>bridge</name> <operator>=</operator> <name><name>bridge</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
        <block>{<block_content>
          <decl_stmt><decl><type><name>int</name></type> <name>bridge_index</name> <init>= <expr><call><name>if_nametoindex</name><argument_list>(<argument><expr><name><name>bridge</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>bridge_index</name></expr>)</condition>
	    <block>{<block_content>
	      <for>for <control>(<init><expr><name>alias</name> <operator>=</operator> <name><name>bridge</name><operator>-&gt;</operator><name>alias</name></name></expr>;</init> <condition><expr><name>alias</name></expr>;</condition> <incr><expr><name>alias</name> <operator>=</operator> <name><name>alias</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>wildcard_matchn</name><argument_list>(<argument><expr><name><name>alias</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><name>IF_NAMESIZE</name></expr></argument>)</argument_list></call></expr>)</condition>
		  <block>{<block_content>
		    <comment type="block">/* Send an RA on if_index with information from
		       bridge_index. */</comment>
		    <expr_stmt><expr><call><name>send_ra_alias</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>bridge_index</name></expr></argument>, <argument><expr><name><name>bridge</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <break>break;</break>
		  </block_content>}</block></if></if_stmt></block_content></block></for>
	      <if_stmt><if>if <condition>(<expr><name>alias</name></expr>)</condition><block type="pseudo"><block_content>
		<break>break;</break></block_content></block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

      <comment type="block">/* If the incoming interface wasn't an alias, send an RA using
	 the context of the incoming interface. */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>bridge</name></expr>)</condition><block type="pseudo"><block_content>
	<comment type="block">/* source address may not be valid in solicit request. */</comment>
	<expr_stmt><expr><call><name>send_ra</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>, <argument><expr><name>interface</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><call><name>IN6_IS_ADDR_UNSPECIFIED</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>from</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>from</name><operator>.</operator><name>sin6_addr</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_ra_alias</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iface</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>iface_name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>send_iface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ra_packet</name></name> <modifier>*</modifier></type><name>ra</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ra_param</name></name></type> <name>parm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>addr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp</name></decl>,  <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>up</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_netid</name></name></type> <name>iface_id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_opt</name></name> <modifier>*</modifier></type><name>opt_cfg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>ra_interface</name></name> <modifier>*</modifier></type><name>ra_param</name> <init>= <expr><call><name>find_iface_param</name><argument_list>(<argument><expr><name>iface_name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>done_dns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>old_prefix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mtu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>min_pref_time</name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
  <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  
  <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>ind</name></name> <operator>=</operator> <name>iface</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>managed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>other</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>found_context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>adv_router</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>if_name</name></name> <operator>=</operator> <name>iface_name</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>first</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>now</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>glob_pref_time</name></name> <operator>=</operator> <name><name>parm</name><operator>.</operator><name>link_pref_time</name></name> <operator>=</operator> <name><name>parm</name><operator>.</operator><name>ula_pref_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>adv_interval</name></name> <operator>=</operator> <call><name>calc_interval</name><argument_list>(<argument><expr><name>ra_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>prio</name></name> <operator>=</operator> <call><name>calc_prio</name><argument_list>(<argument><expr><name>ra_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>reset_counter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ra</name> <operator>=</operator> <call><name>expand</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>ra_packet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>
  
  <expr_stmt><expr><name><name>ra</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ND_ROUTER_ADVERT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra</name><operator>-&gt;</operator><name>hop_limit</name></name> <operator>=</operator> <name>hop_limit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>parm</name><operator>.</operator><name>prio</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra</name><operator>-&gt;</operator><name>lifetime</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><call><name>calc_lifetime</name><argument_list>(<argument><expr><name>ra_param</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra</name><operator>-&gt;</operator><name>reachable_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ra</name><operator>-&gt;</operator><name>retrans_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="block">/* set tag with name == interface */</comment>
  <expr_stmt><expr><name><name>iface_id</name><operator>.</operator><name>net</name></name> <operator>=</operator> <name>iface_name</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>iface_id</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>tags</name></name> <operator>=</operator> <operator>&amp;</operator><name>iface_id</name></expr>;</expr_stmt> 
  
  <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>CONTEXT_RA_DONE</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>

  <comment type="block">/* If no link-local address then we can't advertise since source address of
     advertisement must be link local address: RFC 4861 para 6.1.2. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>iface_enumerate</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parm</name></expr></argument>, <argument><expr><name>add_prefixes</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <name><name>parm</name><operator>.</operator><name>link_pref_time</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt>

  <comment type="block">/* Find smallest preferred time within address classes,
     to use as lifetime for options. This is a rather arbitrary choice. */</comment>
  <expr_stmt><expr><name>min_pref_time</name> <operator>=</operator> <literal type="number">0xffffffff</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>parm</name><operator>.</operator><name>glob_pref_time</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>parm</name><operator>.</operator><name>glob_pref_time</name></name> <operator>&lt;</operator> <name>min_pref_time</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>min_pref_time</name> <operator>=</operator> <name><name>parm</name><operator>.</operator><name>glob_pref_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>parm</name><operator>.</operator><name>ula_pref_time</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>parm</name><operator>.</operator><name>ula_pref_time</name></name> <operator>&lt;</operator> <name>min_pref_time</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>min_pref_time</name> <operator>=</operator> <name><name>parm</name><operator>.</operator><name>ula_pref_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>parm</name><operator>.</operator><name>link_pref_time</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>parm</name><operator>.</operator><name>link_pref_time</name></name> <operator>&lt;</operator> <name>min_pref_time</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>min_pref_time</name> <operator>=</operator> <name><name>parm</name><operator>.</operator><name>link_pref_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* Look for constructed contexts associated with addresses which have gone, 
     and advertise them with preferred_time == 0  RFC 6204 4.3 L-13 */</comment>
  <for>for <control>(<init><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr><operator>,</operator> <expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name>tmp</name></expr></incr>)</control>
    <block>{<block_content>
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>if_index</name></name> <operator>==</operator> <name>iface</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_OLD</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>old</name> <init>= <expr><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>address_lost_time</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>old</name> <operator>&gt;</operator> <name><name>context</name><operator>-&gt;</operator><name>saved_valid</name></name></expr>)</condition>
	    <block>{<block_content> 
	      <comment type="block">/* We've advertised this enough, time to go */</comment>
	     
	      <comment type="block">/* If this context held the timeout, and there's another context in use
		 transfer the timeout there. */</comment>
	      <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>ra_time</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>parm</name><operator>.</operator><name>found_context</name></name> <operator>&amp;&amp;</operator> <name><name>parm</name><operator>.</operator><name>found_context</name><operator>-&gt;</operator><name>ra_time</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>new_timeout</name><argument_list>(<argument><expr><name><name>parm</name><operator>.</operator><name>found_context</name></name></expr></argument>, <argument><expr><name>iface_name</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	      
	      <expr_stmt><expr><operator>*</operator><name>up</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    </block_content>}</block></if>
	  <else>else
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>prefix_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name></type> <name>local</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></init></decl>;</decl_stmt>
	      <decl_stmt><decl><type><name>int</name></type> <name>do_slaac</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	      <expr_stmt><expr><name>old_prefix</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	      <comment type="block">/* zero net part of address */</comment>
	      <expr_stmt><expr><call><name>setaddr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local</name></expr></argument>, <argument><expr><call><name>addr6part</name><argument_list>(<argument><expr><operator>&amp;</operator><name>local</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>prefix</name></name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>u64</name><operator>)</operator><operator>-</operator><literal type="number">1LL</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">1LLU</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">128</literal> <operator>-</operator> <name><name>context</name><operator>-&gt;</operator><name>prefix</name></name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1LLU</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	     
	      
	      <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA</name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name>do_slaac</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_DHCP</name></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>other</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
		      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA_STATELESS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>parm</name><operator>.</operator><name>managed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
	      <else>else
		<block>{<block_content>
		  <comment type="block">/* don't do RA for non-ra-only unless --enable-ra is set */</comment>
		  <if_stmt><if>if <condition>(<expr><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_RA</name></expr></argument>)</argument_list></call></expr>)</condition>
		    <block>{<block_content>
		      <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>managed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		      <expr_stmt><expr><name><name>parm</name><operator>.</operator><name>other</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		    </block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>

	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>expand</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>prefix_opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ICMP6_OPT_PREFIX</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>prefix_len</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr>;</expr_stmt>
		  <comment type="block">/* autonomous only if we're not doing dhcp, set
                     "on-link" unless "off-link" was specified */</comment>
		  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>do_slaac</name></expr> ?</condition><then> <expr><literal type="number">0x40</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>|</operator>
                    <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA_OFF_LINK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0x80</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>valid_lifetime</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>saved_valid</name></name> <operator>-</operator> <name>old</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>preferred_lifetime</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
		  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <name>local</name></expr>;</expr_stmt>
		  
		  <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>local</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_QUIET_RA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RTR-ADVERT(%s) %s old prefix"</literal></expr></argument>, <argument><expr><name>iface_name</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 		    
		</block_content>}</block></if></if_stmt>
	   
	      <expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
	    </block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
      <else>else<block type="pseudo"><block_content>
	<expr_stmt><expr><name>up</name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>
    
  <comment type="block">/* If we're advertising only old prefixes, set router lifetime to zero. */</comment>
  <if_stmt><if>if <condition>(<expr><name>old_prefix</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>parm</name><operator>.</operator><name>found_context</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>ra</name><operator>-&gt;</operator><name>lifetime</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="block">/* No prefixes to advertise. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>old_prefix</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>parm</name><operator>.</operator><name>found_context</name></name></expr>)</condition><block type="pseudo"><block_content>
    <return>return;</return></block_content></block></if></if_stmt> 
  
  <comment type="block">/* If we're sending router address instead of prefix in at least on prefix,
     include the advertisement interval option. */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>parm</name><operator>.</operator><name>adv_router</name></name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>put_opt6_char</name><argument_list>(<argument><expr><name>ICMP6_OPT_ADV_INTERVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put_opt6_char</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/* interval value is in milliseconds */</comment>
      <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><literal type="number">1000</literal> <operator>*</operator> <call><name>calc_interval</name><argument_list>(<argument><expr><call><name>find_iface_param</name><argument_list>(<argument><expr><name>iface_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* Set the MTU from ra_param if any, an MTU of 0 mean automatic for linux, */</comment>
  <comment type="block">/* an MTU of -1 prevents the option from being sent. */</comment>
  <if_stmt><if>if <condition>(<expr><name>ra_param</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name>mtu</name> <operator>=</operator> <name><name>ra_param</name><operator>-&gt;</operator><name>mtu</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LINUX_NETWORK</name></cpp:ifdef>
  <comment type="block">/* Note that IPv6 MTU is not necessarily the same as the IPv4 MTU
     available from SIOCGIFMTU */</comment>
  <if_stmt><if>if <condition>(<expr><name>mtu</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mtu_name</name> <init>= <expr><ternary><condition><expr><name>ra_param</name></expr> ?</condition><then> <expr><name><name>ra_param</name><operator>-&gt;</operator><name>mtu_name</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="string">"/proc/sys/net/ipv6/conf/%s/mtu"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>mtu_name</name></expr> ?</condition><then> <expr><name>mtu_name</name></expr> </then><else>: <expr><name>iface_name</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>f</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>fgets</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>, <argument><expr><name>MAXDNAME</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>mtu</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>namebuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><name>mtu</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><call><name>put_opt6_char</name><argument_list>(<argument><expr><name>ICMP6_OPT_MTU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put_opt6_char</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><name>mtu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
     
  <expr_stmt><expr><call><name>iface_enumerate</name><argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>send_iface</name></expr></argument>, <argument><expr><name>add_lla</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
  <comment type="block">/* RDNSS, RFC 6106, use relevant DHCP6 options */</comment>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>option_filter</name><argument_list>(<argument><expr><name><name>parm</name><operator>.</operator><name>tags</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts6</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <for>for <control>(<init><expr><name>opt_cfg</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_opts6</name></name></expr>;</init> <condition><expr><name>opt_cfg</name></expr>;</condition> <incr><expr><name>opt_cfg</name> <operator>=</operator> <name><name>opt_cfg</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      
      <comment type="block">/* netids match and not encapsulated? */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt_cfg</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>DHOPT_TAGOK</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <continue>continue;</continue></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name>OPTION6_DNS_SERVER</name></expr>)</condition>
        <block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>a</name></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

	  <expr_stmt><expr><name>done_dns</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	    <continue>continue;</continue></block_content></block></if></if_stmt>
	  
	  <comment type="block">/* reduce len for any addresses we can't substitute */</comment>
	  <for>for <control>(<init><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>in6_addr</name> <operator>*</operator><operator>)</operator><name><name>opt_cfg</name><operator>-&gt;</operator><name>val</name></name></expr><operator>,</operator> <expr><name>len</name> <operator>=</operator> <name><name>opt_cfg</name><operator>-&gt;</operator><name>len</name></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> 
	       <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>opt_cfg</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>IN6ADDRSZ</name></expr><operator>,</operator> <expr><name>a</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>IN6_IS_ADDR_UNSPECIFIED</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>parm</name><operator>.</operator><name>glob_pref_time</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
		<operator>(</operator><call><name>IN6_IS_ADDR_ULA_ZERO</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>parm</name><operator>.</operator><name>ula_pref_time</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>
		<operator>(</operator><call><name>IN6_IS_ADDR_LINK_LOCAL_ZERO</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>parm</name><operator>.</operator><name>link_pref_time</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>IN6ADDRSZ</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

	  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><call><name>put_opt6_char</name><argument_list>(<argument><expr><name>ICMP6_OPT_RDNSS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>put_opt6_char</name><argument_list>(<argument><expr><operator>(</operator><name>len</name><operator>/</operator><literal type="number">8</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	      <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><name>min_pref_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	 
	      <for>for <control>(<init><expr><name>a</name> <operator>=</operator> <operator>(</operator>struct <name>in6_addr</name> <operator>*</operator><operator>)</operator><name><name>opt_cfg</name><operator>-&gt;</operator><name>val</name></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator>  <name><name>opt_cfg</name><operator>-&gt;</operator><name>len</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>IN6ADDRSZ</name></expr><operator>,</operator> <expr><name>a</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
		<if_stmt><if>if <condition>(<expr><call><name>IN6_IS_ADDR_UNSPECIFIED</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><name><name>parm</name><operator>.</operator><name>glob_pref_time</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parm</name><operator>.</operator><name>link_global</name></name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  </block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>IN6_IS_ADDR_ULA_ZERO</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><name><name>parm</name><operator>.</operator><name>ula_pref_time</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parm</name><operator>.</operator><name>ula</name></name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  </block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>IN6_IS_ADDR_LINK_LOCAL_ZERO</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><name><name>parm</name><operator>.</operator><name>link_pref_time</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parm</name><operator>.</operator><name>link_local</name></name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  </block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
		  <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>opt</name></name> <operator>==</operator> <name>OPTION6_DOMAIN_SEARCH</name> <operator>&amp;&amp;</operator> <name><name>opt_cfg</name><operator>-&gt;</operator><name>len</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>opt_cfg</name><operator>-&gt;</operator><name>len</name></name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	  
	  <expr_stmt><expr><call><name>put_opt6_char</name><argument_list>(<argument><expr><name>ICMP6_OPT_DNSSL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>put_opt6_char</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><name>min_pref_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	  <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>opt_cfg</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  
	  <comment type="block">/* pad */</comment>
	  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>opt_cfg</name><operator>-&gt;</operator><name>len</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>*</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
	    <expr_stmt><expr><call><name>put_opt6_char</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
	
  <if_stmt><if>if <condition>(<expr><name><name>daemon</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <name>NAMESERVER_PORT</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>done_dns</name> <operator>&amp;&amp;</operator> <name><name>parm</name><operator>.</operator><name>link_pref_time</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* default == us, as long as we are supplying DNS service. */</comment>
      <expr_stmt><expr><call><name>put_opt6_char</name><argument_list>(<argument><expr><name>ICMP6_OPT_RDNSS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put_opt6_char</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put_opt6_short</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>put_opt6_long</name><argument_list>(<argument><expr><name>min_pref_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><call><name>put_opt6</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>parm</name><operator>.</operator><name>link_local</name></name></expr></argument>, <argument><expr><name>IN6ADDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  <comment type="block">/* set managed bits unless we're providing only RA on this link */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>parm</name><operator>.</operator><name>managed</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>ra</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* M flag, managed, */</comment>
   <if_stmt><if>if <condition>(<expr><name><name>parm</name><operator>.</operator><name>other</name></name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>ra</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* O flag, other */</comment> 
			
  <comment type="block">/* decide where we're sending */</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>addr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SOCKADDR_SA_LEN</name></cpp:ifdef>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin6_len</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>sockaddr_in6</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin6_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>IPPROTO_ICMPV6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>dest</name></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <operator>*</operator><name>dest</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>IN6_IS_ADDR_LINKLOCAL</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call> <operator>||</operator>
	  <call><name>IN6_IS_ADDR_MC_LINKLOCAL</name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name><name>addr</name><operator>.</operator><name>sin6_scope_id</name></name> <operator>=</operator> <name>iface</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
  <else>else
    <block>{<block_content>
      <expr_stmt><expr><call><name>inet_pton</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>ALL_NODES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>addr</name><operator>.</operator><name>sin6_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <expr_stmt><expr><call><name>setsockopt</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>icmp6fd</name></name></expr></argument>, <argument><expr><name>IPPROTO_IPV6</name></expr></argument>, <argument><expr><name>IPV6_MULTICAST_IF</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>send_iface</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>send_iface</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_DUMPFILE</name></cpp:ifdef>
  <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in6</name></name></type> <name>src</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>src</name><operator>.</operator><name>sin6_family</name></name> <operator>=</operator> <name>AF_INET6</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>src</name><operator>.</operator><name>sin6_addr</name></name> <operator>=</operator> <name><name>parm</name><operator>.</operator><name>link_local</name></name></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>dump_packet_icmp</name><argument_list>(<argument><expr><name>DUMP_RA</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_base</name></name></expr></argument>, <argument><expr><call><name>save_counter</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator>union <name>mysockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><operator>(</operator>union <name>mysockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <while>while <condition>(<expr><call><name>retry_send</name><argument_list>(<argument><expr><call><name>sendto</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>icmp6fd</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>outpacket</name><operator>.</operator><name>iov_base</name></name></expr></argument>, 
			   <argument><expr><call><name>save_counter</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>addr</name></expr></argument>, 
			   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>
  
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>send_ra</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>iface</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>iface_name</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <comment type="block">/* Send an RA on the same interface that the RA content is based
     on. */</comment>
  <expr_stmt><expr><call><name>send_ra_alias</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>, <argument><expr><name>iface_name</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_prefixes</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>local</name></decl></parameter>,  <parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
			<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>preferred</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>valid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vparam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ra_param</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>vparam</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>scope</name></expr>;</expr_stmt> <comment type="block">/* warning */</comment>
  
  <if_stmt><if>if <condition>(<expr><name>if_index</name> <operator>==</operator> <name><name>param</name><operator>-&gt;</operator><name>ind</name></name></expr>)</condition>
    <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>IN6_IS_ADDR_LINKLOCAL</name><argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* Can there be more than one LL address?
	     Select the one with the longest preferred time 
	     if there is. */</comment>
	  <if_stmt><if>if <condition>(<expr><name>preferred</name> <operator>&gt;</operator> <name><name>param</name><operator>-&gt;</operator><name>link_pref_time</name></name></expr>)</condition>
	    <block>{<block_content>
	      <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>link_pref_time</name></name> <operator>=</operator> <name>preferred</name></expr>;</expr_stmt>
	      <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>link_local</name></name> <operator>=</operator> <operator>*</operator><name>local</name></expr>;</expr_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>IN6_IS_ADDR_LOOPBACK</name><argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	       <operator>!</operator><call><name>IN6_IS_ADDR_MULTICAST</name><argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name>int</name></type> <name>real_prefix</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>int</name></type> <name>do_slaac</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>int</name></type> <name>deprecate</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>int</name></type> <name>constructed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>int</name></type> <name>adv_router</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>int</name></type> <name>off_link</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>time</name> <init>= <expr><literal type="number">0xffffffff</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
	  
	  <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CONTEXT_TEMPLATE</name> <operator>|</operator> <name>CONTEXT_OLD</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
		<name>prefix</name> <operator>&lt;=</operator> <name><name>context</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&amp;&amp;</operator>
		<call><name>is_same_net6</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<call><name>is_same_net6</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	      <block>{<block_content>
		<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>saved_valid</name></name> <operator>=</operator> <name>valid</name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA</name></expr>)</condition> 
		  <block>{<block_content>
		    <expr_stmt><expr><name>do_slaac</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		    <if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_DHCP</name></expr>)</condition>
		      <block>{<block_content>
			<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>other</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
			<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA_STATELESS</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>managed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		      </block_content>}</block></if></if_stmt>
		  </block_content>}</block></if>
		<else>else
		  <block>{<block_content>
		    <comment type="block">/* don't do RA for non-ra-only unless --enable-ra is set */</comment>
		    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_RA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		      <continue>continue;</continue></block_content></block></if></if_stmt>
		    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>managed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>other</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		  </block_content>}</block></else></if_stmt>

		<comment type="block">/* Configured to advertise router address, not prefix. See RFC 3775 7.2 
		 In this case we do all addresses associated with a context, 
		 hence the real_prefix setting here. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA_ROUTER</name></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name>adv_router</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>adv_router</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		    <expr_stmt><expr><name>real_prefix</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>

		<comment type="block">/* find floor time, don't reduce below 3 * RA interval.
		   If the lease time has been left as default, don't
		   use that as a floor. */</comment>
		<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_SETLEASE</name><operator>)</operator> <operator>&amp;&amp;</operator>
		    <name>time</name> <operator>&gt;</operator> <name><name>context</name><operator>-&gt;</operator><name>lease_time</name></name></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name>time</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>lease_time</name></name></expr>;</expr_stmt>
		    <if_stmt><if>if <condition>(<expr><name>time</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name><name>param</name><operator>-&gt;</operator><name>adv_interval</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name>time</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>param</name><operator>-&gt;</operator><name>adv_interval</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  </block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_DEPRECATE</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>deprecate</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		
		<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_CONSTRUCTED</name></expr>)</condition><block type="pseudo"><block_content>
		  <expr_stmt><expr><name>constructed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>


		<comment type="block">/* collect dhcp-range tags */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>netid</name></name> <operator>&amp;&amp;</operator> <name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>net</name></name></expr>)</condition>
		  <block>{<block_content>
		    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>netid</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name><name>param</name><operator>-&gt;</operator><name>tags</name></name></expr>;</expr_stmt>
		    <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>tags</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>netid</name></name></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>
		  
		<comment type="block">/* subsequent prefixes on the same interface 
		   and subsequent instances of this prefix don't need timers.
		   Be careful not to find the same prefix twice with different
		   addresses unless we're advertising the actual addresses. */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA_DONE</name><operator>)</operator></expr>)</condition>
		  <block>{<block_content>
		    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>param</name><operator>-&gt;</operator><name>first</name></name></expr>)</condition><block type="pseudo"><block_content>
		      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>ra_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>CONTEXT_RA_DONE</name></expr>;</expr_stmt>
		    <expr_stmt><expr><name>real_prefix</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>off_link</name> <operator>=</operator> <operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_RA_OFF_LINK</name><operator>)</operator></expr>;</expr_stmt>
		  </block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<comment type="block">/* found_context is the _last_ one we found, so if there's 
		   more than one, it's not the first. */</comment>
		<expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>found_context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
	      </block_content>}</block></if></if_stmt></block_content></block></for>

	  <comment type="block">/* configured time is ceiling */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>constructed</name> <operator>||</operator> <name>valid</name> <operator>&gt;</operator> <name>time</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>valid</name> <operator>=</operator> <name>time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>IFACE_DEPRECATED</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>preferred</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>deprecate</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <comment type="block">/* configured time is ceiling */</comment>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>constructed</name> <operator>||</operator> <name>preferred</name> <operator>&gt;</operator> <name>time</name></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name>preferred</name> <operator>=</operator> <name>time</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><call><name>IN6_IS_ADDR_ULA</name><argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>)</condition>
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>preferred</name> <operator>&gt;</operator> <name><name>param</name><operator>-&gt;</operator><name>ula_pref_time</name></name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>ula_pref_time</name></name> <operator>=</operator> <name>preferred</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>ula</name></name> <operator>=</operator> <operator>*</operator><name>local</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if>
	  <else>else 
	    <block>{<block_content>
	      <if_stmt><if>if <condition>(<expr><name>preferred</name> <operator>&gt;</operator> <name><name>param</name><operator>-&gt;</operator><name>glob_pref_time</name></name></expr>)</condition>
		<block>{<block_content>
		  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>glob_pref_time</name></name> <operator>=</operator> <name>preferred</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>link_global</name></name> <operator>=</operator> <operator>*</operator><name>local</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></else></if_stmt>
	  
	  <if_stmt><if>if <condition>(<expr><name>real_prefix</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	    <block>{<block_content>
	      <decl_stmt><decl><type><name><name>struct</name> <name>prefix_opt</name></name> <modifier>*</modifier></type><name>opt</name></decl>;</decl_stmt>
	     	      
	      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>expand</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>prefix_opt</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
		  <comment type="block">/* zero net part of address */</comment>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>adv_router</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>setaddr6part</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><call><name>addr6part</name><argument_list>(<argument><expr><name>local</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <operator>~</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name>real_prefix</name> <operator>==</operator> <literal type="number">64</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>u64</name><operator>)</operator><operator>-</operator><literal type="number">1LL</literal></expr> </then><else>: <expr><operator>(</operator><literal type="number">1LLU</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">128</literal> <operator>-</operator> <name>real_prefix</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1LLU</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  
		  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>ICMP6_OPT_PREFIX</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>prefix_len</name></name> <operator>=</operator> <name>real_prefix</name></expr>;</expr_stmt>
		  <comment type="block">/* autonomous only if we're not doing dhcp, set
                     "on-link" unless "off-link" was specified */</comment>
		  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>off_link</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0x80</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name>do_slaac</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <if_stmt><if>if <condition>(<expr><name>adv_router</name></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
		  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>valid_lifetime</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>preferred_lifetime</name></name> <operator>=</operator> <call><name>htonl</name><argument_list>(<argument><expr><name>preferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>reserved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
		  <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>prefix</name></name> <operator>=</operator> <operator>*</operator><name>local</name></expr>;</expr_stmt>
		  
		  <expr_stmt><expr><call><name>inet_ntop</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><name>local</name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name>ADDRSTRLEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>option_bool</name><argument_list>(<argument><expr><name>OPT_QUIET_RA</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RTR-ADVERT(%s) %s"</literal></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>if_name</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 		    
		</block_content>}</block></if></if_stmt>
	    </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>          
  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>add_lla</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mac</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maclen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>type</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>parm</name><operator>)</operator></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* size is in units of 8 octets and includes type and length (2 bytes)
	 add 7 to round up */</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>maclen</name> <operator>+</operator> <literal type="number">9</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>expand</name><argument_list>(<argument><expr><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>
	<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>ICMP6_OPT_SOURCE_MAC</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>mac</name></expr></argument>, <argument><expr><name>maclen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>time_t</name></type> <name>periodic_ra</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>search_param</name></name></type> <name>param</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type> <name>next_event</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>alias_param</name></name></type> <name>aparam</name></decl>;</decl_stmt>
    
  <expr_stmt><expr><name><name>param</name><operator>.</operator><name>now</name></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>param</name><operator>.</operator><name>iface</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
      <comment type="block">/* find overdue events, and time of first future event */</comment>
      <for>for <control>(<init><expr><name>next_event</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>ra_time</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	  <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><call><name>difftime</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>ra_time</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt> <comment type="block">/* overdue */</comment>
	    
	    <if_stmt><if>if <condition>(<expr><name>next_event</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>difftime</name><argument_list>(<argument><expr><name>next_event</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>ra_time</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>
	      <expr_stmt><expr><name>next_event</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>ra_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	  </block_content>}</block></if></if_stmt></block_content></block></for>
      
      <comment type="block">/* none overdue */</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>context</name></expr>)</condition><block type="pseudo"><block_content>
	<break>break;</break></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>CONTEXT_OLD</name><operator>)</operator> <operator>&amp;&amp;</operator> 
	  <name><name>context</name><operator>-&gt;</operator><name>if_index</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> 
	  <call><name>indextoname</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>icmp6fd</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>if_index</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <comment type="block">/* A context for an old address. We'll not find the interface by 
	     looking for addresses, but we know it anyway, since the context is
	     constructed */</comment>
	  <expr_stmt><expr><name><name>param</name><operator>.</operator><name>iface</name></name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>if_index</name></name></expr>;</expr_stmt>
	  <expr_stmt><expr><call><name>new_timeout</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
      <if type="elseif">else if <condition>(<expr><call><name>iface_enumerate</name><argument_list>(<argument><expr><name>AF_INET6</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name>iface_search</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	<comment type="block">/* There's a context overdue, but we can't find an interface
	   associated with it, because it's for a subnet we dont 
	   have an interface on. Probably we're doing DHCP on
	   a remote subnet via a relay. Zero the timer, since we won't
	   ever be able to send ra's and satisfy it. */</comment>
	<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>ra_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>iface</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
	  <call><name>iface_check</name><argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
	  <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
	  <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_except</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	    <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	      <break>break;</break></block_content></block></if></if_stmt></block_content></block></for>
	  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition>
            <block>{<block_content>
              <expr_stmt><expr><call><name>send_ra</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>iface</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

              <comment type="block">/* Also send on all interfaces that are aliases of this
                 one. */</comment>
              <for>for <control>(<init><expr><name><name>aparam</name><operator>.</operator><name>bridge</name></name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>bridges</name></name></expr>;</init>
                   <condition><expr><name><name>aparam</name><operator>.</operator><name>bridge</name></name></expr>;</condition>
                   <incr><expr><name><name>aparam</name><operator>.</operator><name>bridge</name></name> <operator>=</operator> <name><name>aparam</name><operator>.</operator><name>bridge</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><call><name>if_nametoindex</name><argument_list>(<argument><expr><name><name>aparam</name><operator>.</operator><name>bridge</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>param</name><operator>.</operator><name>iface</name></name></expr>)</condition>
                  <block>{<block_content>
                    <comment type="block">/* Count the number of alias interfaces for this
                       'bridge', by calling iface_enumerate with
                       send_ra_to_aliases and NULL alias_ifs. */</comment>
                    <expr_stmt><expr><name><name>aparam</name><operator>.</operator><name>iface</name></name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>iface</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>aparam</name><operator>.</operator><name>alias_ifs</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>aparam</name><operator>.</operator><name>num_alias_ifs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>iface_enumerate</name><argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aparam</name></expr></argument>, <argument><expr><name>send_ra_to_aliases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RTR-ADVERT(%s) %s =&gt; %d alias(es)"</literal></expr></argument>,
                              <argument><expr><name><name>param</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>, <argument><expr><name><name>aparam</name><operator>.</operator><name>num_alias_ifs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block">/* Allocate memory to store the alias interface
                       indices. */</comment>
                    <expr_stmt><expr><name><name>aparam</name><operator>.</operator><name>alias_ifs</name></name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>whine_malloc</name><argument_list>(<argument><expr><name><name>aparam</name><operator>.</operator><name>num_alias_ifs</name></name> <operator>*</operator>
                                                           <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name><name>aparam</name><operator>.</operator><name>alias_ifs</name></name></expr>)</condition>
                      <block>{<block_content>
                        <comment type="block">/* Use iface_enumerate again to get the alias
                           interface indices, then send on each of
                           those. */</comment>
                        <expr_stmt><expr><name><name>aparam</name><operator>.</operator><name>max_alias_ifs</name></name> <operator>=</operator> <name><name>aparam</name><operator>.</operator><name>num_alias_ifs</name></name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>aparam</name><operator>.</operator><name>num_alias_ifs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>iface_enumerate</name><argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aparam</name></expr></argument>, <argument><expr><name>send_ra_to_aliases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <for>for <control>(<init>;</init> <condition><expr><name><name>aparam</name><operator>.</operator><name>num_alias_ifs</name></name></expr>;</condition> <incr><expr><name><name>aparam</name><operator>.</operator><name>num_alias_ifs</name></name><operator>--</operator></expr></incr>)</control>
                          <block>{<block_content>
                            <expr_stmt><expr><call><name>my_syslog</name><argument_list>(<argument><expr><name>MS_DHCP</name> <operator>|</operator> <name>LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"RTR-ADVERT(%s) %s =&gt; i/f %d"</literal></expr></argument>,
                                      <argument><expr><name><name>param</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>addrbuff</name></name></expr></argument>,
                                      <argument><expr><name><name>aparam</name><operator>.</operator><name>alias_ifs</name><index>[<expr><name><name>aparam</name><operator>.</operator><name>num_alias_ifs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>send_ra_alias</name><argument_list>(<argument><expr><name>now</name></expr></argument>,
                                          <argument><expr><name><name>param</name><operator>.</operator><name>iface</name></name></expr></argument>,
                                          <argument><expr><name><name>param</name><operator>.</operator><name>name</name></name></expr></argument>,
                                          <argument><expr><name>NULL</name></expr></argument>,
                                          <argument><expr><name><name>aparam</name><operator>.</operator><name>alias_ifs</name><index>[<expr><name><name>aparam</name><operator>.</operator><name>num_alias_ifs</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                          </block_content>}</block></for>
                        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>aparam</name><operator>.</operator><name>alias_ifs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                      </block_content>}</block></if></if_stmt>

                    <comment type="block">/* The source interface can only appear in at most
                       one --bridge-interface. */</comment>
                    <break>break;</break>
                  </block_content>}</block></if></if_stmt></block_content></block></for>
            </block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
    </block_content>}</block></while>      
  <return>return <expr><name>next_event</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_ra_to_aliases</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>mac</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>maclen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>parm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>alias_param</name></name> <modifier>*</modifier></type><name>aparam</name> <init>= <expr><operator>(</operator>struct <name>alias_param</name> <operator>*</operator><operator>)</operator><name>parm</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>ifrn_name</name><index>[<expr><name>IFNAMSIZ</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_bridge</name></name> <modifier>*</modifier></type><name>alias</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>mac</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>maclen</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>if_indextoname</name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>ifrn_name</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <for>for <control>(<init><expr><name>alias</name> <operator>=</operator> <name><name>aparam</name><operator>-&gt;</operator><name>bridge</name><operator>-&gt;</operator><name>alias</name></name></expr>;</init> <condition><expr><name>alias</name></expr>;</condition> <incr><expr><name>alias</name> <operator>=</operator> <name><name>alias</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
      <if_stmt><if>if <condition>(<expr><call><name>wildcard_matchn</name><argument_list>(<argument><expr><name><name>alias</name><operator>-&gt;</operator><name>iface</name></name></expr></argument>, <argument><expr><name>ifrn_name</name></expr></argument>, <argument><expr><name>IFNAMSIZ</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>aparam</name><operator>-&gt;</operator><name>alias_ifs</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>aparam</name><operator>-&gt;</operator><name>num_alias_ifs</name></name> <operator>&lt;</operator> <name><name>aparam</name><operator>-&gt;</operator><name>max_alias_ifs</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>aparam</name><operator>-&gt;</operator><name>alias_ifs</name><index>[<expr><name><name>aparam</name><operator>-&gt;</operator><name>num_alias_ifs</name></name></expr>]</index></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
          <expr_stmt><expr><name><name>aparam</name><operator>-&gt;</operator><name>num_alias_ifs</name></name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>iface_search</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>in6_addr</name></name> <modifier>*</modifier></type><name>local</name></decl></parameter>,  <parameter><decl><type><name>int</name></type> <name>prefix</name></decl></parameter>,
			<parameter><decl><type><name>int</name></type> <name>scope</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>if_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, 
			<parameter><decl><type><name>int</name></type> <name>preferred</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>valid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>vparam</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>search_param</name></name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>vparam</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>iname</name></name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
  
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>scope</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>preferred</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>valid</name></expr>;</expr_stmt>

  <comment type="block">/* ignore interfaces we're not doing DHCP on. */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>indextoname</name><argument_list>(<argument><expr><name><name>daemon</name><operator>-&gt;</operator><name>icmp6fd</name></name></expr></argument>, <argument><expr><name>if_index</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>||</operator>
      <operator>!</operator><call><name>iface_check</name><argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name>tmp</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp_except</name></name></expr>;</init> <condition><expr><name>tmp</name></expr>;</condition> <incr><expr><name>tmp</name> <operator>=</operator> <name><name>tmp</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name> <operator>&amp;&amp;</operator> <call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>dhcp6</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>CONTEXT_TEMPLATE</name> <operator>|</operator> <name>CONTEXT_OLD</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
	<name>prefix</name> <operator>&lt;=</operator> <name><name>context</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&amp;&amp;</operator>
	<call><name>is_same_net6</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	<call><name>is_same_net6</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	<name><name>context</name><operator>-&gt;</operator><name>ra_time</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> 
	<call><name>difftime</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>ra_time</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>now</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0.0</literal></expr>)</condition>
      <block>{<block_content>
	<comment type="block">/* found an interface that's overdue for RA determine new 
	   timeout value and arrange for RA to be sent unless interface is
	   still doing DAD.*/</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>IFACE_TENTATIVE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
	  <expr_stmt><expr><name><name>param</name><operator>-&gt;</operator><name>iface</name></name> <operator>=</operator> <name>if_index</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><call><name>new_timeout</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>now</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="block">/* zero timers for other contexts on the same subnet, so they don't timeout 
	   independently */</comment>
	<for>for <control>(<init><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>context</name></expr>;</condition> <incr><expr><name>context</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
	  <if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>&lt;=</operator> <name><name>context</name><operator>-&gt;</operator><name>prefix</name></name> <operator>&amp;&amp;</operator>
	      <call><name>is_same_net6</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>start6</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
	      <call><name>is_same_net6</name><argument_list>(<argument><expr><name>local</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>context</name><operator>-&gt;</operator><name>end6</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>prefix</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
	    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>ra_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return> <comment type="block">/* found, abort */</comment>
      </block_content>}</block></if></if_stmt></block_content></block></for>
  
  <return>return <expr><literal type="number">1</literal></expr>;</return> <comment type="block">/* keep searching */</comment>
</block_content>}</block></function>
 
<function><type><specifier>static</specifier> <name>void</name></type> <name>new_timeout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>dhcp_context</name></name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>iface_name</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>difftime</name><argument_list>(<argument><expr><name>now</name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>ra_short_period_start</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">60.0</literal></expr>)</condition><block type="pseudo"><block_content>
    <comment type="block">/* range 5 - 20 */</comment>
    <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>ra_time</name></name> <operator>=</operator> <name>now</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <operator>(</operator><call><name>rand16</name><argument_list>()</argument_list></call><operator>/</operator><literal type="number">4400</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
  <else>else
    <block>{<block_content>
      <comment type="block">/* range 3/4 - 1 times MaxRtrAdvInterval */</comment>
      <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>adv_interval</name> <init>= <expr><call><name>calc_interval</name><argument_list>(<argument><expr><call><name>find_iface_param</name><argument_list>(<argument><expr><name>iface_name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>ra_time</name></name> <operator>=</operator> <name>now</name> <operator>+</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name>adv_interval</name><operator>)</operator><operator>/</operator><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>adv_interval</name> <operator>*</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>rand16</name><argument_list>()</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>struct</name> <name>ra_interface</name></name> <modifier>*</modifier></type><name>find_iface_param</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>iface</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>ra_interface</name></name> <modifier>*</modifier></type><name>ra</name></decl>;</decl_stmt>
  
  <for>for <control>(<init><expr><name>ra</name> <operator>=</operator> <name><name>daemon</name><operator>-&gt;</operator><name>ra_interfaces</name></name></expr>;</init> <condition><expr><name>ra</name></expr>;</condition> <incr><expr><name>ra</name> <operator>=</operator> <name><name>ra</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>
    <if_stmt><if>if <condition>(<expr><call><name>wildcard_match</name><argument_list>(<argument><expr><name><name>ra</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>iface</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
      <return>return <expr><name>ra</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>calc_interval</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ra_interface</name></name> <modifier>*</modifier></type><name>ra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>interval</name> <init>= <expr><literal type="number">600</literal></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>ra</name> <operator>&amp;&amp;</operator> <name><name>ra</name><operator>-&gt;</operator><name>interval</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
      <expr_stmt><expr><name>interval</name> <operator>=</operator> <name><name>ra</name><operator>-&gt;</operator><name>interval</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>interval</name> <operator>&gt;</operator> <literal type="number">1800</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>interval</name> <operator>=</operator> <literal type="number">1800</literal></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>interval</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>interval</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  
  <return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>interval</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>calc_lifetime</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ra_interface</name></name> <modifier>*</modifier></type><name>ra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>lifetime</name></decl>, <decl><type ref="prev"/><name>interval</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>calc_interval</name><argument_list>(<argument><expr><name>ra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ra</name> <operator>||</operator> <name><name>ra</name><operator>-&gt;</operator><name>lifetime</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <comment type="block">/* not specified */</comment>
    <expr_stmt><expr><name>lifetime</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name>interval</name></expr>;</expr_stmt></block_content></block></if>
  <else>else
    <block>{<block_content>
      <expr_stmt><expr><name>lifetime</name> <operator>=</operator> <name><name>ra</name><operator>-&gt;</operator><name>lifetime</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>lifetime</name> <operator>&lt;</operator> <name>interval</name> <operator>&amp;&amp;</operator> <name>lifetime</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>lifetime</name> <operator>=</operator> <name>interval</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name>lifetime</name> <operator>&gt;</operator> <literal type="number">9000</literal></expr>)</condition><block type="pseudo"><block_content>
	<expr_stmt><expr><name>lifetime</name> <operator>=</operator> <literal type="number">9000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  
  <return>return <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>lifetime</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>calc_prio</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>ra_interface</name></name> <modifier>*</modifier></type><name>ra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ra</name></expr>)</condition><block type="pseudo"><block_content>
    <return>return <expr><name><name>ra</name><operator>-&gt;</operator><name>prio</name></name></expr>;</return></block_content></block></if></if_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
